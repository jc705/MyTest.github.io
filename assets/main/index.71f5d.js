window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  "21D_ZhanJi_Item": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "076bfLnELJJLLQSCtc998hA", "21D_ZhanJi_Item");
    "use strict";
    var CARD_SHAPE = {
      CARD_SHAPE_NORMAL: 0,
      CARD_SHAPE_BUST: 1,
      CARD_SHAPE_FIVE: 2,
      CARD_SHAPE_21POINT: 3,
      CARD_SHAPE_BLACKJACK: 4,
      CARD_SHAPE_DOUBLEDRAGON: 5,
      CARD_SHAPE_LEOPARD: 6,
      CARD_SHAPE_LEPOARDSEVEN: 7
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        cards: cc.Node,
        bankerView: cc.Node
      },
      getPokerRes: function getPokerRes(cardValue) {},
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.bankerView.active = data.isBanker;
        var cardTypeStr = this.getCardType(data.cardShape);
        cardTypeStr && (this.ruleLabel.string = "" + cardTypeStr);
        for (var i = 0; i < data.handCards.length; i++) if (255 != data.handCards[i]) {
          this.cards.children[i].active = true;
          var num = tools.decimalToHex(data.handCards[i]);
          setTexture(this.cards.children[i].getComponent(cc.Sprite).getComponent(cc.Sprite), tools.stringFormat("21D/Poker/0x{0}", num));
        } else this.cards.children[i].active = false;
      },
      getCardType: function getCardType(playerCardShape) {
        var cardTypeStr = "";
        playerCardShape == CARD_SHAPE.CARD_SHAPE_NORMAL ? cardTypeStr = "\u666e\u901a\u724c" : playerCardShape == CARD_SHAPE.CARD_SHAPE_BUST ? cardTypeStr = "\u7206\u70b9" : playerCardShape == CARD_SHAPE.CARD_SHAPE_FIVE ? cardTypeStr = "\u4e94\u5c0f\u9f99" : playerCardShape == CARD_SHAPE.CARD_SHAPE_21POINT || (playerCardShape == CARD_SHAPE.CARD_SHAPE_BLACKJACK ? cardTypeStr = "\u6770\u514b" : playerCardShape == CARD_SHAPE.CARD_SHAPE_DOUBLEDRAGON ? cardTypeStr = "\u53cc\u6770\u514b" : playerCardShape == CARD_SHAPE.CARD_SHAPE_LEOPARD ? cardTypeStr = "\u8c79\u5b50" : playerCardShape == CARD_SHAPE.CARD_SHAPE_LEPOARDSEVEN && (cardTypeStr = "\u8c79\u4e03"));
        return cardTypeStr;
      }
    });
    cc._RF.pop();
  }, {} ],
  AllResultLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f96d1DMzFtN44fgR/ENhzAU", "AllResultLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        listViewResult: cc.ScrollView,
        prefabResult: cc.Node,
        person0: cc.Node,
        person1: cc.Node,
        person2: cc.Node,
        person3: cc.Node,
        winAni: cc.Node,
        img_lose: cc.Node
      },
      onLoad: function onLoad() {
        this._super();
      },
      start: function start() {},
      init: function init(data, callback_1) {
        this.callback_1 = callback_1;
        this.initScrollView(data);
      },
      initLabel: function initLabel(data) {},
      initScrollView: function initScrollView(data) {
        var bigWinMoney = 0;
        var bigLoseMoney = 0;
        for (var i = 0; i < DD_MACROS_DEF.PLAY_COUNT; i++) {
          var money = data[i].totalWinMoney;
          money >= bigWinMoney && (bigWinMoney = money);
          money <= bigLoseMoney && (bigLoseMoney = money);
        }
        var item, curData = {};
        this.shareText = "";
        this.shareData = [];
        for (var _i = 0; _i < DD_MACROS_DEF.PLAY_COUNT; _i++) {
          var isMaster = false;
          var isWinner = false;
          var isPing = false;
          var isBigWin = false;
          var isBigLose = false;
          if (data.userID[_i]) {
            item = this["person" + _i];
            curData.winCount = data[_i].winCount;
            curData.twoWin = data[_i].twoWin;
            curData.duWin = data[_i].duWin;
            curData.zhadan = data[_i].zhadan;
            curData.zhanji = data[_i].totalWinMoney;
            curData.userID = data.userID[_i];
            curData.userName = data.userName[_i];
            curData.usersHeadUrl = data.usersHeadUrl[_i];
            var shareDataUserInfo = {};
            shareDataUserInfo.roomID = window.deskPasswd + "";
            shareDataUserInfo.nickname = curData.userName;
            shareDataUserInfo.userID = curData.userID;
            shareDataUserInfo.headerURL = AvatarManager.getHeadURL(curData.usersHeadUrl).replace("?bb=bb.jpg", "");
            shareDataUserInfo.score = curData.zhanji + "";
            this.shareData.push(shareDataUserInfo);
            isMaster = curData.userID == data.roomMasterID;
            if (data[_i].totalWinMoney > 0) {
              isWinner = true;
              this.shareText += curData.userName + "\u8d62";
            } else data[_i].totalWinMoney < 0 && (this.shareText += curData.userName + "\u8f93");
            data[_i].totalWinMoney == bigWinMoney && (isBigWin = true);
            data[_i].totalWinMoney == bigLoseMoney && (isBigLose = true);
            this.shareText += " " + curData.userName + "\u6218\u7ee9" + curData.zhanji;
            curData.userID == LobbySocket.getMyInfo().userID && (isWinner ? this.winAni.active = true : 0 != data[_i].totalWinMoney && (this.img_lose.active = true));
            curData.isMaster = isMaster;
            curData.isWinner = isWinner;
            curData.isBigWin = isBigWin;
            curData.isBigLose = isBigLose;
            var script = item.getComponent("BaseLayer");
            script.init(curData);
          }
        }
      },
      onBtnBackLobby: function onBtnBackLobby(event, param) {
        this.callback_1 && this.callback_1(param);
      },
      onBtnShareWx: function onBtnShareWx() {
        var shareLinkObj = {
          title: "\u7ecf\u5178\u73a9\u6cd5 \u623f\u95f4\u53f7\u3010" + window.deskPasswd + "\u3011\u6218\u7ee9 \u70b9\u51fb\u67e5\u770b\u8be6\u60c5",
          desc: this.shareText + "",
          imgUrl: wxShareAdvIMG,
          gameLink: wxShareURL
        };
        shareLinkObj.link = wxShareURL + "share/zhanji/index.php?title=" + encodeURIComponent(shareLinkObj.title) + "&gameLink=" + encodeURIComponent(shareLinkObj.gameLink) + "&desc=" + encodeURIComponent(shareLinkObj.desc) + "&imgUrl=" + encodeURIComponent(shareLinkObj.imgUrl) + "&tableData=" + encodeURIComponent(JSON.stringify(this.shareData)), 
        wx.onMenuShareAppMessage({
          title: shareLinkObj.title,
          desc: shareLinkObj.desc,
          link: shareLinkObj.link,
          imgUrl: shareLinkObj.imgUrl,
          trigger: function trigger(res) {},
          success: function success(res) {},
          cancel: function cancel(res) {},
          fail: function fail(res) {}
        });
        wx.onMenuShareTimeline({
          title: shareLinkObj.title,
          desc: shareLinkObj.desc,
          link: shareLinkObj.link,
          imgUrl: shareLinkObj.imgUrl,
          trigger: function trigger(res) {},
          success: function success(res) {},
          cancel: function cancel(res) {},
          fail: function fail(res) {}
        });
        var layerName = "prefab/LayerLeadShare";
        this.node.parent.getComponent("BaseLayer").simpleAddLayer(layerName);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ArenaLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f465eVYpANJso0ynq3yPCEX", "ArenaLayer");
    "use strict";
    var gameMenuValue = [ "\u8840\u6218\u9ebb\u5c06", "\u725b\u725b", "\u70b8\u91d1\u82b1", "\u5e7f\u4e1c\u63a8\u5012\u80e1", "\u5c71\u897f\u63a8\u5012\u80e1", "\u7ea2\u4e2d\u9ebb\u5c06", "\u6597\u5730\u4e3b", "21\u70b9", "\u8dd1\u5f97\u5feb", "\u63a8\u7b52\u5b50" ];
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        gamelist_scroll: cc.ScrollView,
        gamelist_node: cc.Node,
        scroll_day: cc.ScrollView,
        scorll_chuangguan: cc.ScrollView,
        scroll_content_day: cc.Node,
        scorll_content_chuangguan: cc.Node,
        scorll_content_game: cc.Node,
        img_avata: cc.Sprite,
        label_id: cc.Label,
        label_name: cc.Label,
        label_gold: cc.Label,
        day_panel: cc.Prefab,
        buttonNodeLabels: [ cc.Label ]
      },
      onEnable: function onEnable() {
        this.setView();
      },
      onDisable: function onDisable() {},
      requestInfo: function requestInfo(callback) {
        MatchManager.requestCurMatchInfo(function(data) {
          this.MatchInfo = data;
          callback(data);
        }.bind(this));
      },
      onLoad: function onLoad() {
        var _this = this;
        this.DAY_SELECTED = true;
        this.CG_SELECTED = false;
        this.gamelist = this.gamelist_scroll.content.children;
        var isBackGround = false;
        cc.game.on(cc.game.EVENT_HIDE, function(event) {
          isBackGround || (isBackGround = true);
        });
        cc.game.on(cc.game.EVENT_SHOW, function(event) {
          if (isBackGround) {
            isBackGround = false;
            _this.onEnable();
          }
        });
      },
      setView: function setView() {
        this.selectedDayOrCG(true);
      },
      init: function init(lobbyComponent) {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.lobbyComponent = lobbyComponent;
        this.btnLabelStr = [ "\u6392\u884c\u699c", "\u4ecb\u7ecd", "\u5956\u91d1\u8bb0\u5f55" ];
        this.curSelectGame = 0;
        this.curMatchType = "\u6bcf\u65e5\u8d5b";
      },
      selectedDayOrCG: function selectedDayOrCG(isNeedFreshData) {
        var _this2 = this;
        if (true == this.DAY_SELECTED) {
          if (this.scroll_day) {
            this.scroll_day.node.active = true;
            this.scorll_chuangguan.node.active = false;
            LobbySocket.sendMatchJoinInfo();
            this.refreshMatchLayer();
            this.curMatchType = "\u6bcf\u65e5\u8d5b";
            for (var i = 0; i < this.gamelist.length; i++) if (0 == i) {
              this.gamelist[i].active = true;
              this.gamelist[i].children[0].active = true;
            } else {
              this.gamelist[i].active = false;
              this.gamelist[i].children[0].active = false;
            }
          }
        } else {
          if (this.scroll_day) {
            this.scroll_day.node.active = false;
            this.scorll_chuangguan.node.active = true;
            for (var _i = 0; _i < this.gamelist.length; _i++) {
              this.gamelist[_i].active = true;
              _i == this.curSelectGame ? this.gamelist[_i].children[0].active = true : this.gamelist[_i].children[0].active = false;
            }
          }
          this.curMatchType = "\u95ef\u5173\u8d5b";
        }
        this.scheduleOnce(function() {
          _this2.buttonNodeLabels && _this2.buttonNodeLabels.length > 0 && _this2.buttonNodeLabels.forEach(function(node, index) {
            node.string = _this2.curMatchType + _this2.btnLabelStr[index];
          });
        }, .1);
      },
      onClickGameMenu: function onClickGameMenu(event, tag) {
        "\u6bcf\u65e5\u8d5b" != this.curMatchType && (this.curSelectGame = parseInt(tag + ""));
      },
      refreshMatchLayer: function refreshMatchLayer() {
        this.scroll_day.content.removeAllChildren();
        var callback = function(dataList) {
          for (var i = 0; i < dataList.length; i++) {
            var data = dataList[i];
            var day_panel = cc.instantiate(this.day_panel);
            var day_panel_script = day_panel.getComponent("DayPanel");
            day_panel_script.init(data, i);
            this.scroll_day.content.addChild(day_panel);
          }
        }.bind(this);
        this.requestInfo(callback);
      },
      onBtnClicked: function onBtnClicked(event, data) {
        if (!data) return;
        var layerName = "";
        if ("rank" == data) {
          layerName = "prefab/Match/MatchRankLayer";
          this.simpleAddLayer(layerName);
        } else if ("award_record" == data) {
          layerName = "\u6bcf\u65e5\u8d5b" == this.curMatchType ? "prefab/Arena/DayAwardRecord" : "prefab/Arena/CgAwardRecord";
          this.simpleAddLayer(layerName);
        } else if ("intro" == data) {
          layerName = "\u6bcf\u65e5\u8d5b" == this.curMatchType ? "prefab/Match/MatchReward" : "prefab/Match/MatchCheckPointIntroLayer";
          this.simpleAddLayer(layerName);
        } else if ("cg_award" == data) {
          layerName = "prefab/Arena/ChuangguanAward";
          this.simpleAddLayer(layerName, GameManager.getGameIDByGameName(gameMenuValue[this.curSelectGame]), gameMenuValue[this.curSelectGame]);
        } else "arena_day" != data && "arena_cg" != data || this.show_scroll_panel(data, false);
        if ("" == layerName) return;
      },
      show_scroll_panel: function show_scroll_panel(str, isNeedFreshData) {
        void 0 === isNeedFreshData && (isNeedFreshData = false);
        if ("arena_day" == str) {
          if (true == this.DAY_SELECTED) return;
          this.DAY_SELECTED = true;
          this.CG_SELECTED = false;
        } else if ("arena_cg" == str) {
          if (true == this.CG_SELECTED) return;
          this.DAY_SELECTED = false;
          this.CG_SELECTED = true;
        }
        this.selectedDayOrCG(isNeedFreshData);
      },
      start: function start() {},
      exit: function exit() {
        GameListManager.isBiSaiGame(GameManager.getGameIDByGameName(gameMenuValue[0])) && LobbySocket.sendMatchLeftInfo();
        this.onCloseBtn();
      },
      onEnterCheckPointMatch: function onEnterCheckPointMatch(enterGameData) {
        var walleMoney = this.LobbyLogic.getWalletMoney();
        if (walleMoney < enterGameData.minPoint) return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u4e0d\u6ee1\u8db3\u8fdb\u5165\u623f\u95f4\u4e0b\u9650:{0}", F_GetMoneyDisplay(enterGameData.minPoint)));
        if (0 != enterGameData.maxPoint && walleMoney > enterGameData.maxPoint) return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u8d85\u8fc7\u8fdb\u5165\u623f\u95f4\u4e0a\u9650:{0}", F_GetMoneyDisplay(enterGameData.maxPoint)));
        this.lobbyComponent && this.lobbyComponent.enterGameByRoomID(enterGameData.roomID);
      },
      enterChuangGuan: function enterChuangGuan(event, level) {
        var _this3 = this;
        var getAllRoomList = function getAllRoomList(roomList) {
          var enterGameData = [];
          for (var i = 0; i < roomList.length; i++) roomList[i].sort == E_ROOM_SORT.CHECKPOINTMATCH && enterGameData.push(roomList[i]);
          for (var _i2 = 0; _i2 < enterGameData.length; _i2++) if (enterGameData[_i2].level == parseInt(level + "") && enterGameData[_i2].gameID == GameManager.getGameIDByGameName(gameMenuValue[_this3.curSelectGame])) {
            _this3.onEnterCheckPointMatch(enterGameData[_i2]);
            break;
          }
        };
        this.LobbyLogic.requestAllRoomList(getAllRoomList);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  ArrangePackNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd373yRSkpPcJXKJrmEPFTZ", "ArrangePackNode");
    "use strict";
    var _obj;
    function _get(target, property, receiver) {
      _get = "undefined" !== typeof Reflect && Reflect.get ? Reflect.get : function _get(target, property, receiver) {
        var base = _superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) return desc.get.call(receiver);
        return desc.value;
      };
      return _get(target, property, receiver || target);
    }
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) break;
      }
      return object;
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }
    var ArrangePackNode = cc.Class(_obj = {
      extends: require("BaseLayer"),
      properties: {
        Vertical: 1,
        Horizontal: 2
      },
      init: function init(direction, menuButton, buttons, offset) {
        this.direction_ = direction;
        this.offset_ = offset || 10;
        this.menuButton_ = void 0;
        this.smallLen_ = 0;
        this.runing_ = false;
        this.enable_ = false;
        this.contentNode_ = new cc.Node();
        this.addChild(this.contentNode_);
        menuButton && this.setMenuButton(menuButton);
        buttons && this.addButton(buttons);
      },
      setMenuButton: function setMenuButton(button) {
        this.menuButton_ && this.menuButton_.removeFromParent();
        this.menuButton_ = button;
        var pt = cc.p(this.menuButton_.getPosition());
        var parent = this.menuButton_.getParent();
        this.menuButton_.removeFromParent();
        this.menuButton_.setPosition(0, 0);
        this.contentNode_.addChild(this.menuButton_, 100);
        this.removeFromParent();
        parent.addChild(this, G_PLAYERUI_ZORDER_TAG - 1);
        this.setPosition(parent.convertToNodeSpace(cc.p(0, 0)));
        this.contentNode_.setPosition(this.convertToNodeSpace(parent.convertToWorldSpace(pt)));
      },
      addButton: function addButton(buttons) {
        for (var i in buttons) {
          var v = buttons[i];
          if (!this.contentNode_.getChildByTag(i)) {
            v.getParent() && v.removeFromParent();
            v.setTag(i);
            v.setVisible(false);
            this.contentNode_.addChild(v, buttons.length - i);
          }
        }
        this.smallLen_ = buttons.length;
      },
      addTouchEvent: function addTouchEvent(callback) {
        if (!callback) return;
        this.menuButton_.setTouchEnabled(true);
        this.menuButton_.addTouchEventListener(callback);
        for (var _ in this.getNodesByTag()) {
          var v = this.getNodesByTag()[_];
          v.addTouchEventListener(callback);
        }
      },
      doButtonMenu: function doButtonMenu() {
        this.onShowEnabled(!this.enable_);
      },
      onTouchEnded: function onTouchEnded(touch, event) {
        _get(_getPrototypeOf(_obj), "onTouchEnded", this).call(this, this, touch, event);
        this.onShowEnabled(false);
      },
      onShowEnabled: function onShowEnabled(enable, offset) {
        if (this.runing_) return;
        var nodes = this.getNodesByTag();
        var len = nodes.length;
        if (0 == len) return;
        this.runing_ = true;
        this.enable_ = enable;
        if (enable) {
          var aimPts = this.getAimPoints(offset);
          var _loop = function _loop() {
            v = aimPts[i];
            var node = nodes[i];
            if (node) {
              node.stopAllActions();
              node.setTouchEnabled(false);
              node.setOpacity(0);
              node.runAction(cc.Sequence.create(cc.Show.create(), cc.EaseSineOut.create(cc.Spawn.create(cc.FadeIn.create(.1), cc.MoveTo.create(.1, v))), cc.CallFunc.create(function() {
                node.setTouchEnabled(true);
                i == len && (this.runing_ = false);
              })));
            }
          };
          for (var i in aimPts) {
            var v;
            _loop();
          }
        } else for (var i in nodes) {
          var v = nodes[i];
          v.stopAllActions();
          v.setTouchEnabled(false);
          v.runAction(cc.Sequence.create(cc.Spawn.create(cc.FadeOut.create(.1), cc.MoveTo.create(.1, cc.p(0, 0))), cc.Hide.create(), cc.CallFunc.create(function() {
            i == len && (this.runing_ = false);
          })));
        }
      },
      getNodesByTag: function getNodesByTag() {
        var nodes = {};
        for (var i = 1; i < this.smallLen_; i++) {
          var node = this.contentNode_.getChildByTag(i);
          node && table.insert(nodes, node);
        }
        return nodes;
      },
      getAimPoints: function getAimPoints(offset) {
        offset = offset || this.offset_;
        var nodes = this.getNodesByTag();
        var pts = {};
        var sym = offset >= 0 ? 1 : -1;
        var menuPt = cc.p(this.menuButton_.getPosition());
        var menuSize = this.menuButton_.getContentSize();
        if (this.direction_ == this.Vertical) {
          var h = menuSize.height / 2 * sym;
          for (var _ in nodes) {
            var v = nodes[_];
            var size = v.getContentSize();
            var hh = size.width / 2 * sym;
            h = h + hh + offset;
            table.insert(pts, cc.p(menuPt.x, menuPt.y + h));
            h += hh;
          }
        } else if (this.direction_ == this.Horizontal) {
          var w = menuSize.width / 2 * sym;
          for (var _ in nodes) {
            var v = nodes[_];
            var _size = v.getContentSize();
            var ww = _size.width / 2 * sym;
            w = w + ww + offset;
            table.insert(pts, cc.p(menuPt.x + w, menuPt.y));
            w += ww;
          }
        }
        return pts;
      },
      start: function start() {}
    });
    module.exports = ArrangePackNode;
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  AvatarManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "796d90dyX5IVKnFudf8P1Rc", "AvatarManager");
    "use strict";
    var headerLink = "headimgqn.szysx8.cn";
    module.exports = cc.Class({
      ctor: function ctor() {
        this.avata_map = new Map();
      },
      getHeadURL: function getHeadURL(url) {
        return url;
      },
      requestHeadRes: function requestHeadRes(url, userID, callback, node, errorCallBack) {
        void 0 === errorCallBack && (errorCallBack = true);
        cc.log("url = ", url);
        var cb = callback;
        var id = userID;
        var map = this.avata_map;
        var callfunc = function callfunc() {
          cc.log(str, "strstrstr");
          var str;
          str = 0 == id ? "GameCommon/common/img_avata_banker" : "GameCommon/common/img_avata_null";
          cc.loader.loadRes(str, cc.SpriteFrame, function(err, sf) {
            if (err) cc.log(err, "errerrerrerrerr"); else {
              0 != id && map.set(id, sf);
              cb(sf);
            }
          });
        };
        url = this.getHeadURL(url);
        var avata = map.get(userID);
        var requestURLHeader = function requestURLHeader(url, userID) {
          cc.loader.load({
            url: url,
            type: "png"
          }, function(err, texture) {
            if (err) {
              console.log(err);
              errorCallBack && callfunc();
            } else {
              var sprite = new cc.SpriteFrame(texture);
              0 != userID && map.set(id, sprite);
              cb(sprite);
            }
          });
        };
        if (!avata || avata && userID != UserInfoManager.getMyInfo().userID) {
          if ("aa" == url && 0 != userID) {
            var _callback = function _callback(userInfo) {
              requestURLHeader(userInfo.headURL, userID);
            };
            UserInfoManager.requestUserInfo(userID, _callback);
            return;
          }
          if ((!url || "aa" == url) && 0 == userID) {
            cc.loader.loadRes("GameCommon/common/img_avata_banker", cc.SpriteFrame, function(err, sf) {
              if (err) cc.log(err, "\u7a7a\u5934\u50cf\u94fe\u63a5errerrerrerrerr"); else {
                0 == userID && map.set(id, sf);
                cb(sf);
              }
            });
            return;
          }
          requestURLHeader(url, userID);
        } else cb(avata);
      },
      getAvataMap: function getAvataMap() {
        return this.avata_map;
      },
      getUrlWeb: function getUrlWeb(tempUrl) {
        cc.log(tempUrl);
        if ("aa" == tempUrl || "" == tempUrl) return;
        var url = tempUrl;
        var arrUrl = url.split("//");
        var start = arrUrl[1].indexOf("/");
        return arrUrl[1].substring(0, start);
      },
      GetUrlRelativePath: function GetUrlRelativePath(tempUrl) {
        cc.log(tempUrl);
        if ("aa" == tempUrl || "" == tempUrl) return;
        var url = tempUrl;
        var arrUrl = url.split("//");
        cc.log(arrUrl);
        var start = arrUrl[1].indexOf("/");
        cc.log(arrUrl[1].substring(0, start));
        var relUrl = arrUrl[1].substring(start);
        -1 != relUrl.indexOf("?") && (relUrl = relUrl.split("?")[0]);
        return relUrl;
      }
    });
    cc._RF.pop();
  }, {} ],
  BankerLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e5cac5sWkNC/aiJY6mLe8r+", "BankerLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Text_Time: cc.Label
      },
      init: function init(delegete, time) {
        this.time = time + 3;
        this._delagete = delegete;
        this.showDaoJiShi();
      },
      showDaoJiShi: function showDaoJiShi() {
        var _this = this;
        var time = this.time || 15;
        this.Text_Time.string = time;
        var timeFunc = function timeFunc() {
          time -= 1;
          if (time <= 0) {
            time = 0;
            _this.unschedule(timeFunc);
            _this.doButton_CancelClick();
          }
          _this.Text_Time.string = time;
        };
        this.schedule(timeFunc, 1);
      },
      doButton_ContinueClick: function doButton_ContinueClick() {
        this._delagete.tableLogic.setAppIsContinue(1);
        this.onCloseBtn();
      },
      doButton_CancelClick: function doButton_CancelClick() {
        this._delagete.tableLogic.setAppIsContinue(0);
        this.onCloseBtn();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  BaseLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e5d4dRJXxdFrZ1BK1+Aavq8", "BaseLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        isCanEndGame: false
      },
      ctor: function ctor() {},
      onLoad: function onLoad(canTouch) {
        canTouch && this.addTouchBeganListener();
        this.playBackgroundMusic && this.playBackgroundMusic();
      },
      addTouchBeganListener: function addTouchBeganListener() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.touchEventCallback();
          this.onTouchBegan(event);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.touchEventCallback();
          this.onTouchEnded(event);
        }, this);
      },
      onTouchBegan: function onTouchBegan(event) {},
      onTouchEnded: function onTouchEnded(event) {},
      touchEventCallback: function touchEventCallback() {},
      controllPrefab: function controllPrefab(loadedResource, params, nodeParent, callback) {
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        removeLoading();
        var prefab = cc.instantiate(loadedResource);
        var script = prefab.getComponent("BaseLayer") || prefab.getComponent(cc.Component);
        null != script && script.init && script.init.apply(script, params);
        if (nodeParent && prefab) nodeParent.addChild(prefab); else {
          prefab.zIndex = G_ALL_RESULT_ZORDER_TAG;
          this.node.addChild(prefab);
        }
        prefab.active = true;
        callback && callback(prefab);
      },
      simpleAddLayer: function simpleAddLayer(layerName) {
        var params = [];
        for (var i = 1; i < arguments.length; i++) params.push(arguments[i]);
        createLoading("\u6b63\u5728\u52a0\u8f7d\u4e2d", 8, false);
        var loadedResource = window.prefabMap.get(layerName);
        loadedResource ? this.controllPrefab(loadedResource, params) : cc.loader.loadRes(layerName, function(err, loadedResource) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          window.prefabMap.set(layerName, loadedResource);
          this.controllPrefab(loadedResource, params);
        }.bind(this));
      },
      addLayer: function addLayer(node, layerName, callback) {
        null == node && (node = this.node);
        var params = [];
        for (var i = 3; i < arguments.length; i++) params.push(arguments[i]);
        if (layerName instanceof cc.Prefab) {
          prefab = cc.instantiate(layerName);
          var script = prefab.getComponent("BaseLayer") || prefab.getComponent(cc.Component);
          null != script && script.init && script.init.apply(script, params);
          node.addChild(prefab);
          callback && callback(prefab);
          return;
        }
        layerName = "prefab/" + layerName;
        var prefab = null;
        var loadedResource = window.prefabMap.get(layerName);
        loadedResource ? this.controllPrefab(loadedResource, params, node, callback) : cc.loader.loadRes(layerName, function(err, loadedResource) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          window.prefabMap.set(layerName, loadedResource);
          this.controllPrefab(loadedResource, params, node, callback);
        }.bind(this));
      },
      isLobbyScene: function isLobbyScene() {
        var scene = cc.director.getScene();
        var canvas = scene.getChildByName("Canvas").getChildByName("Hall_Node");
        var lobbyScene = null;
        canvas && (lobbyScene = canvas.getComponent("LobbyScene"));
        if (null != lobbyScene) return true;
        return false;
      },
      onResize: function onResize(callback) {
        var visibleRect = cc.visibleRect;
        var CavasAngle = cc.find("Canvas").angle;
        if (180 != CavasAngle && 90 != window.orientation && -90 != window.orientation && cc.sys.isMobile) {
          cc.find("Canvas").angle = 180;
          cc.find("Canvas").scaleX = -1;
          cc.find("Canvas").scaleY = -1;
          callback && callback(180);
        } else {
          cc.find("Canvas").angle = 0;
          cc.find("Canvas").scaleX = 1;
          cc.find("Canvas").scaleY = 1;
          callback && callback(0);
        }
      },
      checkSysIsWechat: function checkSysIsWechat(node, callback) {
        if (cc.sys.isNative) return;
        var orientationFunc = function orientationFunc() {};
        if (cc.sys.browserType == cc.sys.MOBILE_BROWSER || cc.sys.browserType == cc.sys.DESKTOP_BROWSER || cc.sys.browserType == cc.sys.BROWSER_TYPE_CHROME || cc.sys.browserType == cc.sys.BROWSER_TYPE_WECHAT || cc.sys.browserType == cc.sys.BROWSER_TYPE_MOBILE_QQ) {
          cc.view.setResizeCallback(orientationFunc);
          this.onResize();
        }
      },
      checkIsFrontStage: function checkIsFrontStage() {
        var _this = this;
        var isBackGround = false;
        console.log(">>\u5224\u65ad\u524d\u540e\u53f0");
        this.hiddenTime = 0;
        this.visibleTime = 0;
        cc.game.on(cc.game.EVENT_HIDE, function(event) {
          if (G_SHOW_GAME_VOICE) {
            console.log(">>\u5f55\u97f3\u64ad\u653e\u4e2d,\u7981\u6b62\u5207\u6362\u540e\u53f0");
            return;
          }
          if (!isBackGround) {
            isBackGround = true;
            console.log(">>\u5207\u6362\u540e\u53f0");
            MYAudioEngine.pauseMusic();
            _this.hiddenTime = new Date().getTime();
          }
        });
        cc.game.on(cc.game.EVENT_SHOW, function(event) {
          if (G_SHOW_GAME_VOICE) {
            console.log(">>\u5f55\u97f3\u64ad\u653e\u4e2d,\u7981\u6b62\u5207\u6362\u524d\u53f0");
            return;
          }
          if (isBackGround) {
            isBackGround = false;
            console.log(">>\u5207\u6362\u524d\u53f0\u5207\u6362\u524d\u53f0\u5207\u6362\u524d\u53f0");
            MYAudioEngine.resumeMusic();
            _this.visibleTime = new Date().getTime();
            "mLogin" != cc.director.getScene()._name ? _this.scheduleOnce(function() {
              _this.isLobbyScene() || cc.log(">>>>>GameSocketGameSocketonEnterForeground");
            }, isIphone() ? .15 : .012) : cc.sys.isMobile || cc.director.loadScene("mLogin");
          }
        });
      },
      offCheckFrontStage: function offCheckFrontStage() {},
      playClickEffect: function playClickEffect() {
        MYAudioEngine.playClickSound();
      },
      onDestroy: function onDestroy() {
        this.node.stopAllActions();
      },
      onCloseBtn: function onCloseBtn(event, tagSecond) {
        var _this2 = this;
        void 0 === tagSecond && (tagSecond = .85);
        if (this.node) {
          this.node.active = false;
          tagSecond + "".length > 0 && (tagSecond = Number(tagSecond + ""));
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, tagSecond);
        }
      },
      checkPreLoadScence: function checkPreLoadScence(progressBar, finishCallBack) {
        var everyGamePer = .08;
        cc.director.preloadScene("HZMJ", null, function() {
          finishCallBack && finishCallBack();
        });
      },
      releaseCaches: function releaseCaches() {}
    });
    cc._RF.pop();
  }, {} ],
  ButtonSafe: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9ca3Q0Os9O9JfMqaO1siVg", "ButtonSafe");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        safeTime: {
          default: 1,
          tooltip: "\u6309\u94ae\u4fdd\u62a4\u65f6\u95f4, \u6307\u5b9a\u95f4\u9694\u5185\u53ea\u80fd\u70b9\u51fb\u4e00\u6b21."
        }
      },
      start: function start() {
        var _this = this;
        var button = this.getComponent(cc.Button);
        if (!button) return;
        this.clickEvents = button.clickEvents;
        var isScheduling = false;
        this.node.on("click", function() {
          button.clickEvents = [];
          if (false == isScheduling) {
            isScheduling = true;
            _this.scheduleOnce(function(dt) {
              isScheduling = false;
              button.clickEvents = _this.clickEvents;
            }, _this.safeTime);
          }
        }, this);
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  ButtonScale: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7aecc/1AU9IN5XxxFBQMT+H", "ButtonScale");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        safeTime: {
          default: 1,
          tooltip: "\u6309\u94ae\u4fdd\u62a4\u65f6\u95f4, \u6307\u5b9a\u95f4\u9694\u5185\u53ea\u80fd\u70b9\u51fb\u4e00\u6b21."
        }
      },
      start: function start() {
        var _this = this;
        var button = this.getComponent(cc.Button);
        if (!button) return;
        var scaleX = button.node.scaleX;
        var scaleY = button.node.scaleY;
        this.clickEvents = button.clickEvents;
        var isScheduling = false;
        this.node.on("click", function() {
          button.clickEvents = [];
          if (false == isScheduling) {
            isScheduling = true;
            _this.scheduleOnce(function(dt) {
              isScheduling = false;
              button.clickEvents = _this.clickEvents;
            }, _this.safeTime);
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          button.node.runAction(cc.scaleBy(.1, 1.1));
        }.bind(this));
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function() {
          button.node.runAction(cc.scaleTo(.1, scaleX, scaleY));
        }.bind(this));
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          button.node.runAction(cc.scaleTo(.1, scaleX, scaleY));
        }.bind(this));
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  1: [ function(require, module, exports) {
    var util = require("util/");
    var pSlice = Array.prototype.slice;
    var hasOwn = Object.prototype.hasOwnProperty;
    var assert = module.exports = ok;
    assert.AssertionError = function AssertionError(options) {
      this.name = "AssertionError";
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) Error.captureStackTrace(this, stackStartFunction); else {
        var err = new Error();
        if (err.stack) {
          var out = err.stack;
          var fn_name = stackStartFunction.name;
          var idx = out.indexOf("\n" + fn_name);
          if (idx >= 0) {
            var next_line = out.indexOf("\n", idx + 1);
            out = out.substring(next_line + 1);
          }
          this.stack = out;
        }
      }
    };
    util.inherits(assert.AssertionError, Error);
    function replacer(key, value) {
      if (util.isUndefined(value)) return "" + value;
      if (util.isNumber(value) && !isFinite(value)) return value.toString();
      if (util.isFunction(value) || util.isRegExp(value)) return value.toString();
      return value;
    }
    function truncate(s, n) {
      return util.isString(s) ? s.length < n ? s : s.slice(0, n) : s;
    }
    function getMessage(self) {
      return truncate(JSON.stringify(self.actual, replacer), 128) + " " + self.operator + " " + truncate(JSON.stringify(self.expected, replacer), 128);
    }
    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new assert.AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }
    assert.fail = fail;
    function ok(value, message) {
      value || fail(value, true, message, "==", assert.ok);
    }
    assert.ok = ok;
    assert.equal = function equal(actual, expected, message) {
      actual != expected && fail(actual, expected, message, "==", assert.equal);
    };
    assert.notEqual = function notEqual(actual, expected, message) {
      actual == expected && fail(actual, expected, message, "!=", assert.notEqual);
    };
    assert.deepEqual = function deepEqual(actual, expected, message) {
      _deepEqual(actual, expected) || fail(actual, expected, message, "deepEqual", assert.deepEqual);
    };
    function _deepEqual(actual, expected) {
      if (actual === expected) return true;
      if (util.isBuffer(actual) && util.isBuffer(expected)) {
        if (actual.length != expected.length) return false;
        for (var i = 0; i < actual.length; i++) if (actual[i] !== expected[i]) return false;
        return true;
      }
      return util.isDate(actual) && util.isDate(expected) ? actual.getTime() === expected.getTime() : util.isRegExp(actual) && util.isRegExp(expected) ? actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase : util.isObject(actual) || util.isObject(expected) ? objEquiv(actual, expected) : actual == expected;
    }
    function isArguments(object) {
      return "[object Arguments]" == Object.prototype.toString.call(object);
    }
    function objEquiv(a, b) {
      if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false;
      if (a.prototype !== b.prototype) return false;
      if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
      var aIsArgs = isArguments(a), bIsArgs = isArguments(b);
      if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b);
      }
      var ka = objectKeys(a), kb = objectKeys(b), key, i;
      if (ka.length != kb.length) return false;
      ka.sort();
      kb.sort();
      for (i = ka.length - 1; i >= 0; i--) if (ka[i] != kb[i]) return false;
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key])) return false;
      }
      return true;
    }
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      _deepEqual(actual, expected) && fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
    };
    assert.strictEqual = function strictEqual(actual, expected, message) {
      actual !== expected && fail(actual, expected, message, "===", assert.strictEqual);
    };
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      actual === expected && fail(actual, expected, message, "!==", assert.notStrictEqual);
    };
    function expectedException(actual, expected) {
      if (!actual || !expected) return false;
      if ("[object RegExp]" == Object.prototype.toString.call(expected)) return expected.test(actual);
      if (actual instanceof expected) return true;
      if (true === expected.call({}, actual)) return true;
      return false;
    }
    function _throws(shouldThrow, block, expected, message) {
      var actual;
      if (util.isString(expected)) {
        message = expected;
        expected = null;
      }
      try {
        block();
      } catch (e) {
        actual = e;
      }
      message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
      shouldThrow && !actual && fail(actual, expected, "Missing expected exception" + message);
      !shouldThrow && expectedException(actual, expected) && fail(actual, expected, "Got unwanted exception" + message);
      if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) throw actual;
    }
    assert.throws = function(block, error, message) {
      _throws.apply(this, [ true ].concat(pSlice.call(arguments)));
    };
    assert.doesNotThrow = function(block, message) {
      _throws.apply(this, [ false ].concat(pSlice.call(arguments)));
    };
    assert.ifError = function(err) {
      if (err) throw err;
    };
    var objectKeys = Object.keys || function(obj) {
      var keys = [];
      for (var key in obj) hasOwn.call(obj, key) && keys.push(key);
      return keys;
    };
  }, {
    "util/": 4
  } ],
  2: [ function(require, module, exports) {
    "function" === typeof Object.create ? module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    } : module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }, {} ],
  3: [ function(require, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && "object" === typeof arg && "function" === typeof arg.copy && "function" === typeof arg.fill && "function" === typeof arg.readUInt8;
    };
  }, {} ],
  4: [ function(require, module, exports) {
    (function(process, global) {
      var formatRegExp = /%[sdj%]/g;
      exports.format = function(f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) objects.push(inspect(arguments[i]));
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x) {
          if ("%%" === x) return "%";
          if (i >= len) return x;
          switch (x) {
           case "%s":
            return String(args[i++]);

           case "%d":
            return Number(args[i++]);

           case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }

           default:
            return x;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) isNull(x) || !isObject(x) ? str += " " + x : str += " " + inspect(x);
        return str;
      };
      exports.deprecate = function(fn, msg) {
        if (isUndefined(global.process)) return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
        if (true === process.noDeprecation) return fn;
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            process.traceDeprecation ? console.trace(msg) : console.error(msg);
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      };
      var debugs = {};
      var debugEnviron;
      exports.debuglog = function(set) {
        isUndefined(debugEnviron) && (debugEnviron = process.env.NODE_DEBUG || "");
        set = set.toUpperCase();
        if (!debugs[set]) if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else debugs[set] = function() {};
        return debugs[set];
      };
      function inspect(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        arguments.length >= 3 && (ctx.depth = arguments[2]);
        arguments.length >= 4 && (ctx.colors = arguments[3]);
        isBoolean(opts) ? ctx.showHidden = opts : opts && exports._extend(ctx, opts);
        isUndefined(ctx.showHidden) && (ctx.showHidden = false);
        isUndefined(ctx.depth) && (ctx.depth = 2);
        isUndefined(ctx.colors) && (ctx.colors = false);
        isUndefined(ctx.customInspect) && (ctx.customInspect = true);
        ctx.colors && (ctx.stylize = stylizeWithColor);
        return formatValue(ctx, obj, ctx.depth);
      }
      exports.inspect = inspect;
      inspect.colors = {
        bold: [ 1, 22 ],
        italic: [ 3, 23 ],
        underline: [ 4, 24 ],
        inverse: [ 7, 27 ],
        white: [ 37, 39 ],
        grey: [ 90, 39 ],
        black: [ 30, 39 ],
        blue: [ 34, 39 ],
        cyan: [ 36, 39 ],
        green: [ 32, 39 ],
        magenta: [ 35, 39 ],
        red: [ 31, 39 ],
        yellow: [ 33, 39 ]
      };
      inspect.styles = {
        special: "cyan",
        number: "yellow",
        boolean: "yellow",
        undefined: "grey",
        null: "bold",
        string: "green",
        date: "magenta",
        regexp: "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];
        return style ? "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m" : str;
      }
      function stylizeNoColor(str, styleType) {
        return str;
      }
      function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
          hash[val] = true;
        });
        return hash;
      }
      function formatValue(ctx, value, recurseTimes) {
        if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          isString(ret) || (ret = formatValue(ctx, ret, recurseTimes));
          return ret;
        }
        var primitive = formatPrimitive(ctx, value);
        if (primitive) return primitive;
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        ctx.showHidden && (keys = Object.getOwnPropertyNames(value));
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
        if (0 === keys.length) {
          if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
          if (isError(value)) return formatError(value);
        }
        var base = "", array = false, braces = [ "{", "}" ];
        if (isArray(value)) {
          array = true;
          braces = [ "[", "]" ];
        }
        if (isFunction(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }
        isRegExp(value) && (base = " " + RegExp.prototype.toString.call(value));
        isDate(value) && (base = " " + Date.prototype.toUTCString.call(value));
        isError(value) && (base = " " + formatError(value));
        if (0 === keys.length && (!array || 0 == value.length)) return braces[0] + base + braces[1];
        if (recurseTimes < 0) return isRegExp(value) ? ctx.stylize(RegExp.prototype.toString.call(value), "regexp") : ctx.stylize("[Object]", "special");
        ctx.seen.push(value);
        var output;
        output = array ? formatArray(ctx, value, recurseTimes, visibleKeys, keys) : keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
      }
      function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
        if (isString(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber(value)) return ctx.stylize("" + value, "number");
        if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
        if (isNull(value)) return ctx.stylize("null", "null");
      }
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) hasOwnProperty(value, String(i)) ? output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true)) : output.push("");
        keys.forEach(function(key) {
          key.match(/^\d+$/) || output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        });
        return output;
      }
      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || {
          value: value[key]
        };
        desc.get ? str = desc.set ? ctx.stylize("[Getter/Setter]", "special") : ctx.stylize("[Getter]", "special") : desc.set && (str = ctx.stylize("[Setter]", "special"));
        hasOwnProperty(visibleKeys, key) || (name = "[" + key + "]");
        if (!str) if (ctx.seen.indexOf(desc.value) < 0) {
          str = isNull(recurseTimes) ? formatValue(ctx, desc.value, null) : formatValue(ctx, desc.value, recurseTimes - 1);
          str.indexOf("\n") > -1 && (str = array ? str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2) : "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n"));
        } else str = ctx.stylize("[Circular]", "special");
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) return str;
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, "name");
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
          }
        }
        return name + ": " + str;
      }
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
          numLinesEst++;
          cur.indexOf("\n") >= 0 && numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) return braces[0] + ("" === base ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }
      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;
      function isBoolean(arg) {
        return "boolean" === typeof arg;
      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
        return null === arg;
      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
        return null == arg;
      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
        return "number" === typeof arg;
      }
      exports.isNumber = isNumber;
      function isString(arg) {
        return "string" === typeof arg;
      }
      exports.isString = isString;
      function isSymbol(arg) {
        return "symbol" === typeof arg;
      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
        return void 0 === arg;
      }
      exports.isUndefined = isUndefined;
      function isRegExp(re) {
        return isObject(re) && "[object RegExp]" === objectToString(re);
      }
      exports.isRegExp = isRegExp;
      function isObject(arg) {
        return "object" === typeof arg && null !== arg;
      }
      exports.isObject = isObject;
      function isDate(d) {
        return isObject(d) && "[object Date]" === objectToString(d);
      }
      exports.isDate = isDate;
      function isError(e) {
        return isObject(e) && ("[object Error]" === objectToString(e) || e instanceof Error);
      }
      exports.isError = isError;
      function isFunction(arg) {
        return "function" === typeof arg;
      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
        return null === arg || "boolean" === typeof arg || "number" === typeof arg || "string" === typeof arg || "symbol" === typeof arg || "undefined" === typeof arg;
      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = require("./support/isBuffer");
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      function timestamp() {
        var d = new Date();
        var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
        return [ d.getDate(), months[d.getMonth()], time ].join(" ");
      }
      exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };
      exports.inherits = require("inherits");
      exports._extend = function(origin, add) {
        if (!add || !isObject(add)) return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) origin[keys[i]] = add[keys[i]];
        return origin;
      };
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "./support/isBuffer": 3,
    _process: 11,
    inherits: 2
  } ],
  5: [ function(require, module, exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      var validLen = b64.indexOf("=");
      -1 === validLen && (validLen = len);
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [ validLen, placeHoldersLen ];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return 3 * (validLen + placeHoldersLen) / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;
      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      if (2 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = 255 & tmp;
      }
      if (1 === placeHoldersLen) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = 255 & tmp;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (255 & uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      if (1 === extraBytes) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (2 === extraBytes) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }, {} ],
  6: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      var base64 = require("base64-js");
      var ieee754 = require("ieee754");
      var isArray = require("isarray");
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      Buffer.TYPED_ARRAY_SUPPORT = void 0 !== global.TYPED_ARRAY_SUPPORT ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
      exports.kMaxLength = kMaxLength();
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
              return 42;
            }
          };
          return 42 === arr.foo() && "function" === typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
        } catch (e) {
          return false;
        }
      }
      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          null === that && (that = new Buffer(length));
          that.length = length;
        }
        return that;
      }
      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
        if ("number" === typeof arg) {
          if ("string" === typeof encodingOrOffset) throw new Error("If encoding is specified then the first argument must be a string");
          return allocUnsafe(this, arg);
        }
        return from(this, arg, encodingOrOffset, length);
      }
      Buffer.poolSize = 8192;
      Buffer._augment = function(arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };
      function from(that, value, encodingOrOffset, length) {
        if ("number" === typeof value) throw new TypeError('"value" argument must not be a number');
        if ("undefined" !== typeof ArrayBuffer && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
        if ("string" === typeof value) return fromString(that, value, encodingOrOffset);
        return fromObject(that, value);
      }
      Buffer.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;
        "undefined" !== typeof Symbol && Symbol.species && Buffer[Symbol.species] === Buffer && Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
      function assertSize(size) {
        if ("number" !== typeof size) throw new TypeError('"size" argument must be a number');
        if (size < 0) throw new RangeError('"size" argument must not be negative');
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size);
        if (size <= 0) return createBuffer(that, size);
        if (void 0 !== fill) return "string" === typeof encoding ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        return createBuffer(that, size);
      }
      Buffer.alloc = function(size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };
      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : 0 | checked(size));
        if (!Buffer.TYPED_ARRAY_SUPPORT) for (var i = 0; i < size; ++i) that[i] = 0;
        return that;
      }
      Buffer.allocUnsafe = function(size) {
        return allocUnsafe(null, size);
      };
      Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size);
      };
      function fromString(that, string, encoding) {
        "string" === typeof encoding && "" !== encoding || (encoding = "utf8");
        if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
        var length = 0 | byteLength(string, encoding);
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);
        actual !== length && (that = that.slice(0, actual));
        return that;
      }
      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : 0 | checked(array.length);
        that = createBuffer(that, length);
        for (var i = 0; i < length; i += 1) that[i] = 255 & array[i];
        return that;
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength;
        if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
        if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
        array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = array;
          that.__proto__ = Buffer.prototype;
        } else that = fromArrayLike(that, array);
        return that;
      }
      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = 0 | checked(obj.length);
          that = createBuffer(that, len);
          if (0 === that.length) return that;
          obj.copy(that, 0, 0, len);
          return that;
        }
        if (obj) {
          if ("undefined" !== typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if ("number" !== typeof obj.length || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
          }
          if ("Buffer" === obj.type && isArray(obj.data)) return fromArrayLike(that, obj.data);
        }
        throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
      }
      function checked(length) {
        if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
        return 0 | length;
      }
      function SlowBuffer(length) {
        +length != length && (length = 0);
        return Buffer.alloc(+length);
      }
      Buffer.isBuffer = function isBuffer(b) {
        return !!(null != b && b._isBuffer);
      };
      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
        if (a === b) return 0;
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
         case "hex":
         case "utf8":
         case "utf-8":
         case "ascii":
         case "latin1":
         case "binary":
         case "base64":
         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return true;

         default:
          return false;
        }
      };
      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === list.length) return Buffer.alloc(0);
        var i;
        if (void 0 === length) {
          length = 0;
          for (i = 0; i < list.length; ++i) length += list[i].length;
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
          buf.copy(buffer, pos);
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) return string.length;
        if ("undefined" !== typeof ArrayBuffer && "function" === typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
        "string" !== typeof string && (string = "" + string);
        var len = string.length;
        if (0 === len) return 0;
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "ascii":
         case "latin1":
         case "binary":
          return len;

         case "utf8":
         case "utf-8":
         case void 0:
          return utf8ToBytes(string).length;

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return 2 * len;

         case "hex":
          return len >>> 1;

         case "base64":
          return base64ToBytes(string).length;

         default:
          if (loweredCase) return utf8ToBytes(string).length;
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        var loweredCase = false;
        (void 0 === start || start < 0) && (start = 0);
        if (start > this.length) return "";
        (void 0 === end || end > this.length) && (end = this.length);
        if (end <= 0) return "";
        end >>>= 0;
        start >>>= 0;
        if (end <= start) return "";
        encoding || (encoding = "utf8");
        while (true) switch (encoding) {
         case "hex":
          return hexSlice(this, start, end);

         case "utf8":
         case "utf-8":
          return utf8Slice(this, start, end);

         case "ascii":
          return asciiSlice(this, start, end);

         case "latin1":
         case "binary":
          return latin1Slice(this, start, end);

         case "base64":
          return base64Slice(this, start, end);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return utf16leSlice(this, start, end);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
        }
      }
      Buffer.prototype._isBuffer = true;
      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var i = 0; i < len; i += 2) swap(this, i, i + 1);
        return this;
      };
      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer.prototype.toString = function toString() {
        var length = 0 | this.length;
        if (0 === length) return "";
        if (0 === arguments.length) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return 0 === Buffer.compare(this, b);
      };
      Buffer.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        if (this.length > 0) {
          str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
          this.length > max && (str += " ... ");
        }
        return "<Buffer " + str + ">";
      };
      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
        void 0 === start && (start = 0);
        void 0 === end && (end = target ? target.length : 0);
        void 0 === thisStart && (thisStart = 0);
        void 0 === thisEnd && (thisEnd = this.length);
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
        if (thisStart >= thisEnd && start >= end) return 0;
        if (thisStart >= thisEnd) return -1;
        if (start >= end) return 1;
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (0 === buffer.length) return -1;
        if ("string" === typeof byteOffset) {
          encoding = byteOffset;
          byteOffset = 0;
        } else byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648);
        byteOffset = +byteOffset;
        isNaN(byteOffset) && (byteOffset = dir ? 0 : buffer.length - 1);
        byteOffset < 0 && (byteOffset = buffer.length + byteOffset);
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (!dir) return -1;
          byteOffset = 0;
        }
        "string" === typeof val && (val = Buffer.from(val, encoding));
        if (Buffer.isBuffer(val)) {
          if (0 === val.length) return -1;
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        }
        if ("number" === typeof val) {
          val &= 255;
          if (Buffer.TYPED_ARRAY_SUPPORT && "function" === typeof Uint8Array.prototype.indexOf) return dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (void 0 !== encoding) {
          encoding = String(encoding).toLowerCase();
          if ("ucs2" === encoding || "ucs-2" === encoding || "utf16le" === encoding || "utf-16le" === encoding) {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i) {
          return 1 === indexSize ? buf[i] : buf.readUInt16BE(i * indexSize);
        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) if (read(arr, i) === read(val, -1 === foundIndex ? 0 : i - foundIndex)) {
            -1 === foundIndex && (foundIndex = i);
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            -1 !== foundIndex && (i -= i - foundIndex);
            foundIndex = -1;
          }
        } else {
          byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength);
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
            if (found) return i;
          }
        }
        return -1;
      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return -1 !== this.indexOf(val, byteOffset, encoding);
      };
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (length) {
          length = Number(length);
          length > remaining && (length = remaining);
        } else length = remaining;
        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
        length > strLen / 2 && (length = strLen / 2);
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(2 * i, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer.prototype.write = function write(string, offset, length, encoding) {
        if (void 0 === offset) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (void 0 === length && "string" === typeof offset) {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else {
          if (!isFinite(offset)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          offset |= 0;
          if (isFinite(length)) {
            length |= 0;
            void 0 === encoding && (encoding = "utf8");
          } else {
            encoding = length;
            length = void 0;
          }
        }
        var remaining = this.length - offset;
        (void 0 === length || length > remaining) && (length = remaining);
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        encoding || (encoding = "utf8");
        var loweredCase = false;
        for (;;) switch (encoding) {
         case "hex":
          return hexWrite(this, string, offset, length);

         case "utf8":
         case "utf-8":
          return utf8Write(this, string, offset, length);

         case "ascii":
          return asciiWrite(this, string, offset, length);

         case "latin1":
         case "binary":
          return latin1Write(this, string, offset, length);

         case "base64":
          return base64Write(this, string, offset, length);

         case "ucs2":
         case "ucs-2":
         case "utf16le":
         case "utf-16le":
          return ucs2Write(this, string, offset, length);

         default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
        }
      };
      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
             case 1:
              firstByte < 128 && (codePoint = firstByte);
              break;

             case 2:
              secondByte = buf[i + 1];
              if (128 === (192 & secondByte)) {
                tempCodePoint = (31 & firstByte) << 6 | 63 & secondByte;
                tempCodePoint > 127 && (codePoint = tempCodePoint);
              }
              break;

             case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte)) {
                tempCodePoint = (15 & firstByte) << 12 | (63 & secondByte) << 6 | 63 & thirdByte;
                tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343) && (codePoint = tempCodePoint);
              }
              break;

             case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if (128 === (192 & secondByte) && 128 === (192 & thirdByte) && 128 === (192 & fourthByte)) {
                tempCodePoint = (15 & firstByte) << 18 | (63 & secondByte) << 12 | (63 & thirdByte) << 6 | 63 & fourthByte;
                tempCodePoint > 65535 && tempCodePoint < 1114112 && (codePoint = tempCodePoint);
              }
            }
          }
          if (null === codePoint) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | 1023 & codePoint;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
        var res = "";
        var i = 0;
        while (i < len) res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        return res;
      }
      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(127 & buf[i]);
        return ret;
      }
      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) ret += String.fromCharCode(buf[i]);
        return ret;
      }
      function hexSlice(buf, start, end) {
        var len = buf.length;
        (!start || start < 0) && (start = 0);
        (!end || end < 0 || end > len) && (end = len);
        var out = "";
        for (var i = start; i < end; ++i) out += toHex(buf[i]);
        return out;
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        for (var i = 0; i < bytes.length; i += 2) res += String.fromCharCode(bytes[i] + 256 * bytes[i + 1]);
        return res;
      }
      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = void 0 === end ? len : ~~end;
        if (start < 0) {
          start += len;
          start < 0 && (start = 0);
        } else start > len && (start = len);
        if (end < 0) {
          end += len;
          end < 0 && (end = 0);
        } else end > len && (end = len);
        end < start && (end = start);
        var newBuf;
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, void 0);
          for (var i = 0; i < sliceLen; ++i) newBuf[i] = this[i + start];
        }
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        return val;
      };
      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 256)) val += this[offset + --byteLength] * mul;
        return val;
      };
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
      };
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 256)) val += this[offset + i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset |= 0;
        byteLength |= 0;
        noAssert || checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 256)) val += this[offset + --i] * mul;
        mul *= 128;
        val >= mul && (val -= Math.pow(2, 8 * byteLength));
        return val;
      };
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        noAssert || checkOffset(offset, 1, this.length);
        if (!(128 & this[offset])) return this[offset];
        return -1 * (255 - this[offset] + 1);
      };
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        noAssert || checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return 32768 & val ? 4294901760 | val : val;
      };
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        noAssert || checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        noAssert || checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        byteLength |= 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) this[offset + i] = value / mul & 255;
        return offset + byteLength;
      };
      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 255, 0);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        this[offset] = 255 & value;
        return offset + 1;
      };
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        value < 0 && (value = 65535 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
      }
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 65535, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        value < 0 && (value = 4294967295 + value + 1);
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
      }
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = 255 & value;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 4294967295, 0);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = 255 & value;
        while (++i < byteLength && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i - 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset |= 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = 255 & value;
        while (--i >= 0 && (mul *= 256)) {
          value < 0 && 0 === sub && 0 !== this[offset + i + 1] && (sub = 1);
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength;
      };
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 1, 127, -128);
        Buffer.TYPED_ARRAY_SUPPORT || (value = Math.floor(value));
        value < 0 && (value = 255 + value + 1);
        this[offset] = 255 & value;
        return offset + 1;
      };
      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
        } else objectWriteUInt16(this, value, offset, true);
        return offset + 2;
      };
      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 2, 32767, -32768);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = 255 & value;
        } else objectWriteUInt16(this, value, offset, false);
        return offset + 2;
      };
      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = 255 & value;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else objectWriteUInt32(this, value, offset, true);
        return offset + 4;
      };
      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset |= 0;
        noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);
        value < 0 && (value = 4294967295 + value + 1);
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = 255 & value;
        } else objectWriteUInt32(this, value, offset, false);
        return offset + 4;
      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        noAssert || checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        start || (start = 0);
        end || 0 === end || (end = this.length);
        targetStart >= target.length && (targetStart = target.length);
        targetStart || (targetStart = 0);
        end > 0 && end < start && (end = start);
        if (end === start) return 0;
        if (0 === target.length || 0 === this.length) return 0;
        if (targetStart < 0) throw new RangeError("targetStart out of bounds");
        if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");
        end > this.length && (end = this.length);
        target.length - targetStart < end - start && (end = target.length - targetStart + start);
        var len = end - start;
        var i;
        if (this === target && start < targetStart && targetStart < end) for (i = len - 1; i >= 0; --i) target[i + targetStart] = this[i + start]; else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) for (i = 0; i < len; ++i) target[i + targetStart] = this[i + start]; else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        return len;
      };
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        if ("string" === typeof val) {
          if ("string" === typeof start) {
            encoding = start;
            start = 0;
            end = this.length;
          } else if ("string" === typeof end) {
            encoding = end;
            end = this.length;
          }
          if (1 === val.length) {
            var code = val.charCodeAt(0);
            code < 256 && (val = code);
          }
          if (void 0 !== encoding && "string" !== typeof encoding) throw new TypeError("encoding must be a string");
          if ("string" === typeof encoding && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        } else "number" === typeof val && (val &= 255);
        if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
        if (end <= start) return this;
        start >>>= 0;
        end = void 0 === end ? this.length : end >>> 0;
        val || (val = 0);
        var i;
        if ("number" === typeof val) for (i = start; i < end; ++i) this[i] = val; else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;
          for (i = 0; i < end - start; ++i) this[i + start] = bytes[i % len];
        }
        return this;
      };
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, "");
        if (str.length < 2) return "";
        while (str.length % 4 !== 0) str += "=";
        return str;
      }
      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, "");
      }
      function toHex(n) {
        if (n < 16) return "0" + n.toString(16);
        return n.toString(16);
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              if (i + 1 === length) {
                (units -= 3) > -1 && bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              (units -= 3) > -1 && bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = 65536 + (leadSurrogate - 55296 << 10 | codePoint - 56320);
          } else leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, 63 & codePoint | 128);
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          } else {
            if (!(codePoint < 1114112)) throw new Error("Invalid code point");
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, 63 & codePoint | 128);
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) byteArray.push(255 & str.charCodeAt(i));
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isnan(val) {
        return val !== val;
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    "base64-js": 5,
    ieee754: 9,
    isarray: 7
  } ],
  7: [ function(require, module, exports) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return "[object Array]" == toString.call(arr);
    };
  }, {} ],
  8: [ function(require, module, exports) {
    (function(global) {
      var util = require("util");
      var assert = require("assert");
      function now() {
        return new Date().getTime();
      }
      var slice = Array.prototype.slice;
      var console;
      var times = {};
      console = "undefined" !== typeof global && global.console ? global.console : "undefined" !== typeof window && window.console ? window.console : {};
      var functions = [ [ log, "log" ], [ info, "info" ], [ warn, "warn" ], [ error, "error" ], [ time, "time" ], [ timeEnd, "timeEnd" ], [ trace, "trace" ], [ dir, "dir" ], [ consoleAssert, "assert" ] ];
      for (var i = 0; i < functions.length; i++) {
        var tuple = functions[i];
        var f = tuple[0];
        var name = tuple[1];
        console[name] || (console[name] = f);
      }
      module.exports = console;
      function log() {}
      function info() {
        console.log.apply(console, arguments);
      }
      function warn() {
        console.log.apply(console, arguments);
      }
      function error() {
        console.warn.apply(console, arguments);
      }
      function time(label) {
        times[label] = now();
      }
      function timeEnd(label) {
        var time = times[label];
        if (!time) throw new Error("No such label: " + label);
        delete times[label];
        var duration = now() - time;
        console.log(label + ": " + duration + "ms");
      }
      function trace() {
        var err = new Error();
        err.name = "Trace";
        err.message = util.format.apply(null, arguments);
        console.error(err.stack);
      }
      function dir(object) {
        console.log(util.inspect(object) + "\n");
      }
      function consoleAssert(expression) {
        if (!expression) {
          var arr = slice.call(arguments, 1);
          assert.ok(false, util.format.apply(null, arr));
        }
      }
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    assert: 1,
    util: 14
  } ],
  9: [ function(require, module, exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
      if (0 === e) e = 1 - eBias; else {
        if (e === eMax) return m ? NaN : Infinity * (s ? -1 : 1);
        m += Math.pow(2, mLen);
        e -= eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = 8 * nBytes - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || Infinity === value) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e += eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
      e = e << mLen | m;
      eLen += mLen;
      for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
      buffer[offset + i - d] |= 128 * s;
    };
  }, {} ],
  10: [ function(require, module, exports) {
    exports.endianness = function() {
      return "LE";
    };
    exports.hostname = function() {
      return "undefined" !== typeof location ? location.hostname : "";
    };
    exports.loadavg = function() {
      return [];
    };
    exports.uptime = function() {
      return 0;
    };
    exports.freemem = function() {
      return Number.MAX_VALUE;
    };
    exports.totalmem = function() {
      return Number.MAX_VALUE;
    };
    exports.cpus = function() {
      return [];
    };
    exports.type = function() {
      return "Browser";
    };
    exports.release = function() {
      if ("undefined" !== typeof navigator) return navigator.appVersion;
      return "";
    };
    exports.networkInterfaces = exports.getNetworkInterfaces = function() {
      return {};
    };
    exports.arch = function() {
      return "javascript";
    };
    exports.platform = function() {
      return "browser";
    };
    exports.tmpdir = exports.tmpDir = function() {
      return "/tmp";
    };
    exports.EOL = "\n";
  }, {} ],
  11: [ function(require, module, exports) {
    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
    }
    function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
    }
    (function() {
      try {
        cachedSetTimeout = "function" === typeof setTimeout ? setTimeout : defaultSetTimout;
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        cachedClearTimeout = "function" === typeof clearTimeout ? clearTimeout : defaultClearTimeout;
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) return setTimeout(fun, 0);
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) return clearTimeout(marker);
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          return cachedClearTimeout.call(this, marker);
        }
      }
    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
      if (!draining || !currentQueue) return;
      draining = false;
      currentQueue.length ? queue = currentQueue.concat(queue) : queueIndex = -1;
      queue.length && drainQueue();
    }
    function drainQueue() {
      if (draining) return;
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) currentQueue && currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) args[i - 1] = arguments[i];
      queue.push(new Item(fun, args));
      1 !== queue.length || draining || runTimeout(drainQueue);
    };
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    process.title = "browser";
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = "";
    process.versions = {};
    function noop() {}
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function(name) {
      return [];
    };
    process.binding = function(name) {
      throw new Error("process.binding is not supported");
    };
    process.cwd = function() {
      return "/";
    };
    process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
    };
    process.umask = function() {
      return 0;
    };
  }, {} ],
  12: [ function(require, module, exports) {
    arguments[4][2][0].apply(exports, arguments);
  }, {
    dup: 2
  } ],
  13: [ function(require, module, exports) {
    arguments[4][3][0].apply(exports, arguments);
  }, {
    dup: 3
  } ],
  14: [ function(require, module, exports) {
    arguments[4][4][0].apply(exports, arguments);
  }, {
    "./support/isBuffer": 13,
    _process: 11,
    dup: 4,
    inherits: 12
  } ],
  CGMatchPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc186dzv+dEu5PQGB9pXuAq", "CGMatchPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PoolMgr_1 = require("../../../framework/PoolMgr");
    var SpriteArray_1 = require("../../ui/SpriteArray");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CGMatchPanel = function(_super) {
      __extends(CGMatchPanel, _super);
      function CGMatchPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.matchlistNode = null;
        _this.newHandNode = null;
        _this.listNode = null;
        _this.matchItemNode = null;
        _this.annimetions = null;
        _this.LobbyLogic = new (require("LobbyLogic"))();
        return _this;
      }
      CGMatchPanel.prototype.onEnable = function() {
        this._refreshMatchList();
      };
      CGMatchPanel.prototype.onDisable = function() {
        this.recyle();
      };
      CGMatchPanel.prototype.onToggleContainerClick = function(toggle) {
        switch (toggle.node.name) {
         case "toggle1":
          this.doButton_MatchList();
          break;

         case "toggle2":
          this.doButton_NewHand();
        }
      };
      CGMatchPanel.prototype.doButton_MatchList = function() {
        this.matchlistNode.active = true;
        this.newHandNode.active = false;
        this._refreshMatchList();
      };
      CGMatchPanel.prototype.doButton_NewHand = function() {
        this.matchlistNode.active = false;
        this.newHandNode.active = true;
      };
      CGMatchPanel.prototype._refreshMatchList = function() {
        this.recyle();
        var that = this;
        var cb = function(data) {
          console.log("#### checkPointMatch list", data);
          for (var i = 0; i < data.config.length; i++) {
            var itemData = data.config[i];
            var node = PoolMgr_1.PoolMgr.instance.getNode(that.matchItemNode, that.listNode);
            that._initItemUI(node, data.passNum, itemData, i);
          }
        };
        globalThis.MatchManager.requestCheckPointMatchInfo(cb);
      };
      CGMatchPanel.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      CGMatchPanel.prototype.onFreeBMBtnClick = function(event, customEventData) {
        var _this = this;
        var callback = function(result) {
          var roomID = 18;
          var checkPointsNum = parseInt(customEventData, 10);
          _this.LobbyLogic.enterGame(roomID, checkPointsNum, 0);
        };
        this.LobbyLogic.requestLoaderCheckLogon(callback);
      };
      CGMatchPanel.prototype.onBMBtnClick = function(event, customEventData) {
        var _this = this;
        var roomID = 18;
        var checkPointsNum = parseInt(customEventData, 10);
        var info = globalThis.MatchManager.getCurCheckPointInfo();
        var cfg = info.config[checkPointsNum - 1];
        if (null == cfg) return;
        if (this.LobbyLogic.getMyInfo().money < cfg.cost) {
          globalThis.createTips("\u91d1\u5e01\u4e0d\u8db3");
          return;
        }
        var callback = function(result) {
          _this.LobbyLogic.enterGame(roomID, checkPointsNum, 1);
        };
        this.LobbyLogic.requestLoaderCheckLogon(callback);
      };
      CGMatchPanel.prototype.onReviveBMBtnClick = function(event, customEventData) {
        var _this = this;
        var roomID = 18;
        var checkPointsNum = parseInt(customEventData, 10);
        var info = globalThis.MatchManager.getCurCheckPointInfo();
        var cfg = info.config[checkPointsNum - 1];
        if (null == cfg) return;
        if (this.LobbyLogic.getMyInfo().money < cfg.cost) {
          globalThis.createTips("\u91d1\u5e01\u4e0d\u8db3");
          return;
        }
        var callback = function(result) {
          _this.LobbyLogic.enterGame(roomID, checkPointsNum, 1);
        };
        this.LobbyLogic.requestLoaderCheckLogon(callback);
      };
      CGMatchPanel.prototype._initItemUI = function(node, passID, itemData, num) {
        node.getChildByName("bg").getComponent(SpriteArray_1.default).index = num;
        node.getChildByName("left").getChildByName("levelName").getComponent(cc.Label).string = "\u7b2c" + itemData.levelID + "\u5173";
        node.getChildByName("center").getChildByName("status").getComponent(cc.Label).string = passID >= itemData.levelID ? "\u83b7\u5f97\u5956\u52b1" : "\u901a\u5173\u5956\u52b1";
        node.getChildByName("center").getChildByName("num").getComponent(cc.Label).string = itemData.award + " \u793c\u5238";
        var firstNode = node.getChildByName("right").getChildByName("first");
        var sucessNode = node.getChildByName("right").getChildByName("sucess");
        var reviveNode = node.getChildByName("right").getChildByName("revive");
        var noBMNode = node.getChildByName("right").getChildByName("text");
        if (1 == itemData.levelID) {
          firstNode.active = true;
          sucessNode.active = false;
          reviveNode.active = false;
          noBMNode.active = false;
          var freeBMBtn = firstNode.getChildByName("free_baoming").getComponent(cc.Button);
          freeBMBtn.node.active = false;
          var clickEvent = new cc.Component.EventHandler();
          clickEvent.target = this.node;
          clickEvent.component = "CGMatchPanel";
          clickEvent.handler = "onFreeBMBtnClick";
          clickEvent.customEventData = itemData.levelID.toString();
          freeBMBtn.clickEvents = [];
          freeBMBtn.clickEvents.push(clickEvent);
          var costLabel = firstNode.getChildByName("cost_baoming").getChildByName("costbg").getChildByName("num").getComponent(cc.Label);
          costLabel.string = (itemData.cost / 100).toString() + "\u91d1\u8c46";
          var costBMBtn = firstNode.getChildByName("cost_baoming").getComponent(cc.Button);
          var clickEvent = new cc.Component.EventHandler();
          clickEvent.target = this.node;
          clickEvent.component = "CGMatchPanel";
          clickEvent.handler = "onBMBtnClick";
          clickEvent.customEventData = itemData.levelID.toString();
          costBMBtn.clickEvents = [];
          costBMBtn.clickEvents.push(clickEvent);
        } else {
          node.getChildByName("right").getChildByName("first");
          if (passID > itemData.levelID) {
            firstNode.active = false;
            sucessNode.active = true;
            reviveNode.active = false;
            noBMNode.active = false;
          } else if (passID == itemData.levelID) {
            var costLabel = reviveNode.getChildByName("costbg").getChildByName("num").getComponent(cc.Label);
            costLabel.string = (itemData.cost / 100).toString() + "\u91d1\u8c46";
            firstNode.active = false;
            sucessNode.active = false;
            reviveNode.active = true;
            noBMNode.active = false;
            var reviveBMBtn = reviveNode.getComponent(cc.Button);
            var clickEvent = new cc.Component.EventHandler();
            clickEvent.target = this.node;
            clickEvent.component = "CGMatchPanel";
            clickEvent.handler = "onReviveBMBtnClick";
            clickEvent.customEventData = itemData.levelID.toString();
            reviveBMBtn.clickEvents = [];
            reviveBMBtn.clickEvents.push(clickEvent);
          } else {
            firstNode.active = false;
            sucessNode.active = false;
            reviveNode.active = false;
            noBMNode.active = true;
          }
        }
      };
      CGMatchPanel.prototype.recyle = function() {
        for (var _i = 0, _a = this.listNode.children; _i < _a.length; _i++) {
          var node = _a[_i];
          PoolMgr_1.PoolMgr.instance.putNode(node);
        }
        this.listNode.removeAllChildren();
      };
      __decorate([ property(cc.Node) ], CGMatchPanel.prototype, "matchlistNode", void 0);
      __decorate([ property(cc.Node) ], CGMatchPanel.prototype, "newHandNode", void 0);
      __decorate([ property(cc.Node) ], CGMatchPanel.prototype, "listNode", void 0);
      __decorate([ property(cc.Node) ], CGMatchPanel.prototype, "matchItemNode", void 0);
      __decorate([ property(cc.Node) ], CGMatchPanel.prototype, "annimetions", void 0);
      CGMatchPanel = __decorate([ ccclass ], CGMatchPanel);
      return CGMatchPanel;
    }(cc.Component);
    exports.default = CGMatchPanel;
    cc._RF.pop();
  }, {
    "../../../framework/PoolMgr": "PoolMgr",
    "../../ui/SpriteArray": "SpriteArray",
    LobbyLogic: "LobbyLogic"
  } ],
  "CanvasVideo ": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97b4a+8tjJLbZqF167K6xQG", "CanvasVideo ");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var txySdk_1 = require("./txySdk");
    var _a = cc._decorator, ccclass = _a.ccclass, requireComponent = _a.requireComponent;
    var CanvasVideo = function(_super) {
      __extends(CanvasVideo, _super);
      function CanvasVideo() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.liveBtn = null;
        _this.quitBtn = null;
        _this.openBtn = null;
        _this.closeBtn = null;
        _this.pullBtn = null;
        _this.playBtn = null;
        _this.pauseBtn = null;
        _this.spriteFrameCache = [];
        _this.index = 0;
        return _this;
      }
      CanvasVideo.prototype.start = function() {
        var _this = this;
        this.liveBtn = cc.find("layout/live", this.node);
        this.quitBtn = cc.find("layout/quit", this.node);
        this.openBtn = cc.find("layout/openCamera", this.node);
        this.closeBtn = cc.find("layout/closeCamera", this.node);
        this.pullBtn = cc.find("layout/pull", this.node);
        this.playBtn = cc.find("layout/play", this.node);
        this.pauseBtn = cc.find("layout/pause", this.node);
        this.liveBtn.on("click", this.onClickLiveBtn.bind(this));
        this.quitBtn.on("click", this.onClickQuitBtn.bind(this));
        this.openBtn.on("click", this.onClickOpenBtn.bind(this));
        this.closeBtn.on("click", this.onClickCloseBtn.bind(this));
        this.pullBtn.on("click", this.onClickPullBtn.bind(this));
        this.playBtn.on("click", this.onClickPlayBtn.bind(this));
        this.pauseBtn.on("click", this.onClickPauseBtn.bind(this));
        this.liveBtn.active = false;
        this.quitBtn.active = false;
        this.openBtn.active = false;
        this.closeBtn.active = false;
        this.pullBtn.active = false;
        this.playBtn.active = false;
        this.pauseBtn.active = false;
        this.visSize = new cc.Size(this.node.width, this.node.height);
        var fun = function() {
          if (void 0 == window["TXLivePusher"]) {
            _this.scheduleOnce(function() {
              fun();
            }, 1);
            return;
          }
          txySdk_1.default.inst.initSdk();
          _this.liveBtn.active = true;
          _this.quitBtn.active = true;
          _this.openBtn.active = true;
          _this.closeBtn.active = true;
          _this.pullBtn.active = true;
          _this.playBtn.active = true;
          _this.pauseBtn.active = true;
        };
        fun();
      };
      CanvasVideo.prototype.onClickLiveBtn = function() {
        var _this = this;
        this.bindLiveVideo();
        txySdk_1.default.inst.livePush(function() {
          _this.unschedule(_this.updateTexture);
          _this.schedule(_this.updateTexture, .04, cc.macro.REPEAT_FOREVER);
          _this.init();
        }, function() {
          console.log("\u5f00\u542f\u76f4\u64ad\u5931\u8d25");
        });
      };
      CanvasVideo.prototype.onClickQuitBtn = function() {
        txySdk_1.default.inst.stoplive();
        window["LobbyCanvas"].hideLiveView();
      };
      CanvasVideo.prototype.onClickOpenBtn = function() {
        txySdk_1.default.inst.SwitchCamera(true);
      };
      CanvasVideo.prototype.onClickCloseBtn = function() {
        txySdk_1.default.inst.SwitchCamera(false);
      };
      CanvasVideo.prototype.onClickPullBtn = function() {
        var _this = this;
        this.bindPlayerVideo();
        txySdk_1.default.inst.pullLive(function() {
          _this.unschedule(_this.updateTexture);
          _this.schedule(_this.updateTexture, .04, cc.macro.REPEAT_FOREVER);
          _this.init();
        }, function() {
          console.log("\u62c9\u53d6\u76f4\u64ad\u5931\u8d25");
        });
      };
      CanvasVideo.prototype.onClickPlayBtn = function() {
        txySdk_1.default.inst.SwitchPlayLive(true);
      };
      CanvasVideo.prototype.onClickPauseBtn = function() {
        txySdk_1.default.inst.SwitchPlayLive(false);
      };
      CanvasVideo.prototype.init = function() {
        var canvas = document.createElement("canvas");
        canvas.width = this.node.width;
        canvas.height = this.node.height;
        this._canvas = canvas;
        this._canvasCtx = canvas.getContext("2d");
        this._sprite = this.getComponent(cc.Sprite);
        this._texture = new cc.Texture2D();
        for (var i = 0; i < 2; i++) this.spriteFrameCache.push(new cc.SpriteFrame());
      };
      CanvasVideo.prototype.updateTexture = function() {
        return __awaiter(this, void 0, Promise, function() {
          var spriteFrame;
          return __generator(this, function(_a) {
            if (void 0 == this._video) return [ 2 ];
            this._canvasCtx.drawImage(this._video, 0, 0, this.visSize.width, this.visSize.height);
            this._texture.initWithElement(this._canvas);
            spriteFrame = this.spriteFrameCache[this.index];
            spriteFrame.setTexture(this._texture);
            this._sprite.spriteFrame = spriteFrame;
            this.index = 1 ^ this.index;
            return [ 2 ];
          });
        });
      };
      CanvasVideo.prototype.bindLiveVideo = function() {
        this._video = document.querySelector("#local_video").children[0];
      };
      CanvasVideo.prototype.bindPlayerVideo = function() {
        this._video = document.querySelector("#player-container-id");
      };
      CanvasVideo.prototype.clearSprite = function() {
        this._sprite.spriteFrame = null;
      };
      CanvasVideo = __decorate([ ccclass, requireComponent(cc.Sprite) ], CanvasVideo);
      return CanvasVideo;
    }(cc.Component);
    exports.default = CanvasVideo;
    cc._RF.pop();
  }, {
    "./txySdk": "txySdk"
  } ],
  CgAwardRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27941/3lUxETq9ARyiugZjU", "CgAwardRecord");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        ListView_Reward: cc.ScrollView,
        Panel_Reward: cc.Node,
        page_text: cc.Label,
        buttonPre: cc.Button,
        buttonNext: cc.Button
      },
      init: function init() {
        this.PAGE_COUNT_Record = 8;
        this.curPage_Record = 0;
        this.maxPage_Record = 0;
        this.setPageInfo();
      },
      setPageInfo: function setPageInfo() {
        var Text_Page = this.page_text;
        var Button_Pre = this.buttonPre;
        var Button_Next = this.buttonNext;
        var curPage = this.curPage_Record;
        var maxPage = this.maxPage_Record;
        Text_Page.string = curPage + " / " + maxPage;
        Button_Pre.interactable = !(curPage <= 1);
        Button_Next.interactable = !(curPage >= maxPage);
      },
      onButtonPre: function onButtonPre() {
        this.curPage_Record = this.curPage_Record - 1;
        this.curPage_Record <= 0 && (this.curPage_Record = 1);
        this.requestInfo();
      },
      onButtonNext: function onButtonNext() {
        this.curPage_Record = this.curPage_Record + 1;
        this.curPage_Record > this.maxPage_Record && (this.curPage_Record = this.maxPage_Record);
        this.requestInfo();
      },
      createTime: function createTime(v) {
        var now = new Date(v);
        var yy = now.getFullYear();
        var mm = now.getMonth() + 1;
        var dd = now.getDate();
        var hh = now.getHours();
        var ii = now.getMinutes();
        var ss = now.getSeconds();
        var clock = yy + "-";
        mm < 10 && (clock += "0");
        clock += mm + "-";
        dd < 10 && (clock += "0");
        clock += dd + " ";
        hh < 10 && (clock += "0");
        clock += hh + ":";
        ii < 10 && (clock += "0");
        clock += ii + ":";
        ss < 10 && (clock += "0");
        clock += ss;
        return clock;
      },
      initRewardListView: function initRewardListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Text_Date = item.getChildByName("Text_Date").getComponent(cc.Label);
          var Text_GX = item.getChildByName("Text_GX").getComponent(cc.Label);
          var Text_JJ = item.getChildByName("Text_JJ").getComponent(cc.Label);
          var Text_PF = item.getChildByName("Text_PF").getComponent(cc.Label);
          Text_Date.string = data.name + "";
          Text_GX.string = "\u7b2c" + data.checkpointNumber + "\u5173";
          Text_JJ.string = data.money + "";
          Text_PF.string = data.time + "";
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Reward, this.Panel_Reward, 1);
      },
      requestInfo: function requestInfo() {
        var _this = this;
        MatchManager.requestCheckPointRewardRecordList(function(info) {
          var rankList = info.data;
          if (void 0 == info.page) {
            _this.buttonPre.active = false;
            _this.buttonNext.active = false;
            _this.page_text.active = false;
          } else {
            _this.buttonPre.active = true;
            _this.buttonNext.active = true;
            _this.page_text.active = true;
            _this.curPage_Record = Number(info.page || 1);
            _this.maxPage_Record = Number(info.totalPage || 1);
            if (0 == info.totalPage) {
              info.page = 0;
              _this.curPage_Record = 0;
              _this.maxPage_Record = 0;
            }
            _this.setPageInfo();
          }
          _this.initRewardListView(rankList);
        }, this.curPage_Record, 10);
      },
      onEnable: function onEnable() {
        this.requestInfo();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ChaYanZhuShouLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7efbl8y4dEzpRGzzD+HVCn", "ChaYanZhuShouLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        zhongxin: cc.Node,
        myjilu: cc.Node,
        roomjilu: cc.Node,
        yanzheng: cc.Node,
        zhongxinBtn: cc.Node,
        myjiluBtn: cc.Node,
        roomjiluBtn: cc.Node,
        yanzhengBtn: cc.Node,
        chayanPre: cc.Prefab
      },
      onLoad: function onLoad() {},
      start: function start() {},
      doButton_zhongxin: function doButton_zhongxin() {
        this.zhongxin.active = true;
        this.myjilu.active = false;
        this.roomjilu.active = false;
        this.yanzheng.active = false;
        this.zhongxinBtn.active = true;
        this.myjiluBtn.active = false;
        this.roomjiluBtn.active = false;
        this.yanzhengBtn.active = false;
      },
      doButton_myjilu: function doButton_myjilu() {
        this.zhongxin.active = false;
        this.myjilu.active = true;
        this.roomjilu.active = false;
        this.yanzheng.active = false;
        this.zhongxinBtn.active = false;
        this.myjiluBtn.active = true;
        this.roomjiluBtn.active = false;
        this.yanzhengBtn.active = false;
      },
      doButton_roomjilu: function doButton_roomjilu() {
        this.zhongxin.active = false;
        this.myjilu.active = false;
        this.roomjilu.active = true;
        this.yanzheng.active = false;
        this.zhongxinBtn.active = false;
        this.myjiluBtn.active = false;
        this.roomjiluBtn.active = true;
        this.yanzhengBtn.active = false;
      },
      doButton_yanzheng: function doButton_yanzheng() {
        this.zhongxin.active = false;
        this.myjilu.active = false;
        this.roomjilu.active = false;
        this.yanzheng.active = true;
        this.zhongxinBtn.active = false;
        this.myjiluBtn.active = false;
        this.roomjiluBtn.active = false;
        this.yanzhengBtn.active = true;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ChatLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8cc26JxVONNq7q4RNGYGE7m", "ChatLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        chatToggle: cc.Toggle,
        faceToggle: cc.Toggle,
        chatScrollView: cc.ScrollView,
        faceScrollView: cc.ScrollView
      },
      onLoad: function onLoad() {
        this._super();
      },
      start: function start() {},
      init: function init() {
        this.chatToggle.isChecked = true;
        this.chatScrollView.node.active = true;
        this.faceToggle.isChecked = false;
        this.faceScrollView.node.active = false;
      },
      onTouchToggle: function onTouchToggle() {
        if (this.chatToggle.isChecked) {
          this.chatScrollView.node.active = true;
          this.faceScrollView.node.active = false;
        } else {
          this.chatScrollView.node.active = false;
          this.faceScrollView.node.active = true;
        }
      },
      onTouchNode: function onTouchNode(event, param) {
        var gameUI = GameManager.getGameUI();
        var forbid = gameUI.forbidEmoticon;
        forbid ? createTips("\u5f53\u524d\u6e38\u620f\u7981\u7528\u8868\u60c5") : GameSocket.requestTalk(param);
        this.onCloseBtn();
      },
      onTouchImg: function onTouchImg(event, param) {
        GameSocket.requestTalkImg(param);
        this.onCloseBtn();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ChatMessageManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3613a48ZzJN5qHaTzBoUupO", "ChatMessageManager");
    "use strict";
    var ChatMessageManager = cc.Class({
      ctor: function ctor() {
        var self = this;
        self.commonMessageList = [];
        self.chatMessageList = [];
        self.specialMessage = {};
      },
      push: function push(message) {
        var self = this;
        message && self.chatMessageList.push(message);
      },
      pushCommonMsg: function pushCommonMsg(message) {
        var self = this;
        message && self.commonMessageList.push(message);
      },
      delCommonMsg: function delCommonMsg(content) {
        var self = this;
        for (k in self.commonMessageList) self.commonMessageList[k].content == content && self.commonMessageList.remove(k);
      },
      delCommonMsgEX: function delCommonMsgEX(messageId) {
        var self = this;
        for (k in self.commonMessageList) tonumber(commonMessageList[k].id) == tonumber(messageId) && self.commonMessageList.remove(k);
      },
      pushSpecialMsg: function pushSpecialMsg(message) {
        var self = this;
        self.specialMessage = message;
      },
      getAllChatMessage: function getAllChatMessage() {
        var self = this;
        return self.chatMessageList;
      },
      getAllCommonMessage: function getAllCommonMessage() {
        var self = this;
        return self.commonMessageList;
      },
      getSpecialMessage: function getSpecialMessage() {
        var self = this;
        return self.specialMessage;
      },
      requestSystemNotice: function requestSystemNotice(callback) {
        var self = this;
        var actionName = "GetNotice";
        var fCallback = function fCallback(jsonData) {
          printInfo("\u83b7\u53d6\u7cfb\u7edf\u516c\u544a\u8d85\u65f6");
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          if (jsonData.status == G_JSON_DATA_STATUS_OK) {
            for (i in jsonData[actionName]) self.pushCommonMsg(jsonData[actionName][i]);
            callback(true);
          } else {
            callback(false);
            createTips(jsonData.msg);
          }
        };
        var args = {};
        args.url = "http://" + NetConfig.getHttpDomain() + "/API/index.php";
        args.params = {
          action: actionName,
          num: G_CHAT_COMMON_MAX_NUM
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MYHttpRequest.doRequest(args);
      },
      requestSpecialNotice: function requestSpecialNotice(callback) {
        var self = this;
        var actionName = "get_new_special_notice";
        var fCallback = function fCallback(jsonData) {
          printInfo("\u83b7\u53d6\u7279\u6b8a\u516c\u544a\u8d85\u65f6");
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          var self = this;
          self.specialMessage = jsonData;
          if (jsonData.status == G_JSON_DATA_STATUS_OK) {
            self.pushSpecialMsg(jsonData[actionName]);
            callback(true);
          } else {
            callback(false);
            createTips(jsonData.msg);
          }
        };
        var args = {};
        args.url = "http://" + NetConfig.getHttpDomain() + "/API/index.php";
        args.params = {
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MYHttpRequest.doRequest(args);
      },
      clear: function clear() {
        var self = this;
        self.chatMessageList = {};
        self.commonMessageList = {};
        self.specialMessage = {};
      }
    });
    module.exports = ChatMessageManager;
    cc._RF.pop();
  }, {} ],
  ChuangguanAward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3f83OOfX9P5onRtKyG9JeS", "ChuangguanAward");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        panel_award: cc.ScrollView,
        prefab_award: cc.Prefab,
        title_label: cc.Label
      },
      init: function init(gameID, gameName) {
        this.panleAwardContent = this.panel_award.content;
        this.gameID = gameID;
        this.title_label.string = gameName + "\u95ef\u5173\u5956\u52b1";
      },
      onAwardRecord: function onAwardRecord() {
        var layerName = "prefab/Arena/CgAwardRecord";
        this.simpleAddLayer(layerName);
      },
      onEnable: function onEnable() {
        var _this = this;
        this.gameID && MatchManager.getChuangGuanAwardList(this.gameID, function(awardList) {
          _this.panleAwardContent.children.forEach(function(node) {
            node.destroy();
          });
          for (var i = 0; i < awardList.length; i++) for (var k = 0; k < awardList[i].length; k++) {
            var matchRank = cc.instantiate(_this.prefab_award);
            _this.panleAwardContent.addChild(matchRank);
            matchRank.getComponent("Item_ChuangGuan_Award").setData(awardList[i][k]);
          }
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CityListManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bcdc7IHTexHvb3S7BFEBbwh", "CityListManager");
    "use strict";
    module.exports = cc.Class({
      ctor: function ctor() {
        this.createLocalData();
      },
      createLocalData: function createLocalData() {
        this.cityList = G_CITY_LIST;
      },
      getNameByCityID: function getNameByCityID(cityID) {
        if (this.cityList[cityID]) return this.cityList[cityID].name;
        return "";
      },
      getGameListByCityID: function getGameListByCityID(cityID) {
        if (this.cityList[cityID]) return this.cityList[cityID].gameList;
        return [];
      }
    });
    cc._RF.pop();
  }, {} ],
  CiveVideoLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "500917CN6tI7rhLcxnIUBKg", "CiveVideoLayer");
    "use strict";
    var VideoManager = require("VideoManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        videoNode: cc.VideoPlayer,
        pauseImg: cc.Node,
        nameLabel: cc.Label,
        descLabel: cc.Label,
        starNode: cc.Node,
        starLabel: cc.Label,
        headNode: cc.Node,
        head: cc.Sprite,
        sp1: cc.SpriteFrame,
        sp2: cc.SpriteFrame,
        shareBtn: cc.Node
      },
      onLoad: function onLoad() {},
      onDisable: function onDisable() {},
      start: function start() {
        this.pauseImg.active = true;
        cc.director.setClearColor(new cc.Color(0, 0, 0, 0));
        var videoElement = document.getElementsByClassName("cocosVideo")[0];
        videoElement.style.zIndex = 2;
        var gameCanvas = document.getElementsByClassName("gameCanvas")[0];
        gameCanvas.style.position = "relative";
        gameCanvas.style.zIndex = 4;
      },
      init: function init(idx, data) {
        var _this = this;
        this.index = idx;
        this.videoData = data;
        this.isFirst = true;
        console.log("\u89c6\u9891\u64ad\u653e>>>\uff1a", data);
        this.videoNode.remoteURL = decodeURIComponent(atob(this.videoData.mediaUrl));
        this.nameLabel.string = "" + this.videoData.upLoadName;
        this.descLabel.string = "" + this.videoData.desc;
        this.starLabel.string = "" + this.videoData.star;
        this.loadRemoteAvatar(this.videoData.upLoadPic, function(error, res) {
          res && (_this.head.spriteFrame = res);
        });
      },
      getIndex: function getIndex() {
        return this.index;
      },
      getVideoData: function getVideoData() {
        return this.videoData;
      },
      stopPlay: function stopPlay() {
        if (this.videoNode.isPlaying()) {
          console.log("\u505c\u6b62\u64ad\u653e\uff1a", this.node.name);
          this.videoNode.stop();
          this.pauseImg.active = true;
        }
      },
      loadRemoteAvatar: function loadRemoteAvatar(url, cb) {
        cc.assetManager.loadRemote(url, function(err, textureRes) {
          if (err) {
            console.error("load remote spriteframe res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          var sf = new cc.SpriteFrame(textureRes);
          cb && cb(null, sf);
        });
      },
      onBtnPlay: function onBtnPlay() {
        console.log("\u5f53\u524d\u63a7\u5236\u64ad\u653e\uff1a", this.node.name);
        if (this.videoNode.isPlaying()) {
          this.videoNode.pause();
          this.pauseImg.active = true;
        } else {
          this.isFirst ? this.videoNode.play() : this.videoNode.resume();
          this.pauseImg.active = false;
        }
        this.isFirst = false;
      },
      onBtnStar: function onBtnStar() {
        var _this2 = this;
        console.log("\u70b9\u8d5e\uff1a", this.node.name);
        VideoManager.instance.requestVideoStarList(this.videoData.fileID, this.videoData.upLoadID, function(data) {
          console.log(data);
          1 == data.optType ? _this2.starNode.getComponent(cc.Sprite).spriteFrame = _this2.sp2 : _this2.starNode.getComponent(cc.Sprite).spriteFrame = _this2.sp1;
          _this2.starLabel.string = "" + data.totalNum;
        });
      },
      myVideoCallback: function myVideoCallback(targer, value) {
        console.log("\u64ad\u653e\u72b6\u6001\uff1a", this.node.name, value);
        if (value == cc.VideoPlayer.EventType.READY_TO_PLAY || value == cc.VideoPlayer.EventType.META_LOADED) ; else if (value == cc.VideoPlayer.EventType.COMPLETED) {
          this.videoNode.stop();
          this.pauseImg.active = true;
        } else value == cc.VideoPlayer.EventType.PLAYING;
      }
    });
    cc._RF.pop();
  }, {
    VideoManager: "VideoManager"
  } ],
  ClockObj: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1aaf2Ig66NEeoDFnFP+OXbV", "ClockObj");
    "use strict";
    var ClockObj = cc.Class({
      extends: require("BaseLayer"),
      properties: {
        a_label: cc.Label
      },
      onLoad: function onLoad() {
        this._bMOvethis = true;
        this._time = 0;
        this._callbackTime = 0;
        this.callbackFun = void 0;
        this._callbackTime1 = 0;
        this.callbackFun1 = void 0;
        this._bUseLongTimeType = false;
        this.node.active = false;
      },
      getCurTime: function getCurTime() {
        return this._time;
      },
      setTimeOverCallback: function setTimeOverCallback(callbackFun, callbackTime) {
        this.callbackFun = callbackFun;
        this._callbackTime = callbackTime || 0;
      },
      setTimeCallback: function setTimeCallback(callbackFun, callbackTime) {
        this.callbackFun1 = callbackFun;
        this._callbackTime1 = callbackTime || 0;
      },
      updateLabel: function updateLabel() {
        if (this.a_label) if (this._bUseLongTimeType) {
          var h = Math.floor(this._time / 3600);
          var tmp = this._time % 3600;
          var m = tmp / 60;
          var s = tmp % 60;
          Number.toFix(2);
          this.a_label.string = tools.stringFormat("{0}.{1}.{2}", tools.fillZero(h, 2), tools.fillZero(m, 2), tools.fillZero(s, 2));
        } else this.a_label.string = this._time;
      },
      startC: function startC(tC, bUseLongTimeType) {
        this._bUseLongTimeType = bUseLongTimeType;
        this.unschedule(this.timer);
        if (tC >= 1) {
          this._time = tC;
          this.schedule(this.timer, 1);
          this.node.active = true;
          this.updateLabel();
        }
      },
      setStartCallback: function setStartCallback(callback) {
        callback && (this._startCallback = callback);
      },
      stop: function stop(isHide) {
        isHide = isHide || false;
        this.unschedule(this.timer);
        this.node.active = isHide;
        this._bMOvethis && this.node.removeFromParent();
      },
      unFuntion: function unFuntion() {
        this._callbackTime1 && (this._callbackTime = 0);
        this.callbackFun1 && (this.callbackFun1 = void 0);
      },
      timer: function timer(dt, self) {
        this._time = this._time - 1;
        this.updateLabel();
        if (this._callbackTime == this._time && this.callbackFun) {
          this.callbackFun();
          this.callbackFun = void 0;
        }
        this._callbackTime1 && this._time <= this._callbackTime1 && this._time >= 1 && this.callbackFun1 && this.callbackFun1();
        this._startCallback && this._startCallback(this._time);
        1 == this._time && this.unFuntion();
        0 == this._time && this.stop();
      },
      start: function start() {}
    });
    module.exports = ClockObj;
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CommandConst: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "180c3W3Tm1OjLb7zKmK4wyG", "CommandConst");
    "use strict";
    var CommondConst = {};
    module.exports = CommondConst;
    cc._RF.pop();
  }, {} ],
  CommonCheckRadioBoxCtrlUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "240c6/No/xE2ZPyfqBPx1PG", "CommonCheckRadioBoxCtrlUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      setCheckBoxValue: function setCheckBoxValue(event, tag) {
        var checkMark = event.target.getChildByName("checkmark");
        checkMark.active = !checkMark.active;
      },
      getCheckBoxValue: function getCheckBoxValue(event, tag) {
        var checkMark = event.target.getChildByName("checkmark");
        return checkMark.active;
      },
      setRadioBoxValue: function setRadioBoxValue(event, tag) {
        for (var i = 0; i < event.target.parent.childrenCount; i++) i == parseInt(tag) ? event.target.parent.children[i].getChildByName("checkmark").active = true : event.target.parent.children[i].getChildByName("checkmark").active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  CommonEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "448665VxlBDcqHRyoZeCzM9", "CommonEvent");
    "use strict";
    var CommonEvent = {
      WebSocketEvent: {
        OPEN: "onOpen",
        CLOSE: "onClose",
        ERROR: "onError",
        OPENROOM: "onOpenRoom",
        CLOSEROOM: "onCloseRoom",
        ERRORROOM: "onErrorRoom"
      },
      LoginEvent: {
        SUCCESS: "loginSuccess"
      }
    };
    module.exports = CommonEvent;
    cc._RF.pop();
  }, {} ],
  CommonSlider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "947db7KTmBNo5ojrpu2lmgS", "CommonSlider");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Backgroud: {
          default: null,
          type: cc.Sprite
        },
        Progress: {
          default: null,
          type: cc.Sprite
        },
        Slider: {
          default: null,
          type: cc.Slider
        }
      },
      callback: function callback(event) {
        var percent = event.progress;
        var width = this.Backgroud.node.width * percent;
        this.Progress.node.width = width;
        this.callBackValue && this.callBackValue(percent);
      },
      onLoad: function onLoad() {
        this.Slider.node.on("slide", this.callback, this);
      },
      init: function init(callBack) {
        this.callBackValue = callBack;
      },
      updateProgressImg: function updateProgressImg(progressPercent) {
        void 0 === progressPercent && (progressPercent = 0);
        var event = {
          progress: progressPercent
        };
        this.callback(event);
      }
    });
    cc._RF.pop();
  }, {} ],
  ConfigDataManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f24b8rWEmlJSrymp5tCwxDt", "ConfigDataManager");
    "use strict";
    var DataManager = require("DataManager");
    var API = "config";
    var ConfigDataManager = cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this.configData = {};
        this.UserIpData = "";
        this.UserCName = "";
        DataManager.instance.addManager("FriendManager", this);
      },
      onLoad: function onLoad() {},
      getConfigData: function getConfigData() {
        var _this = this;
        var actionName = "config";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? _this.configData = jsonData.data : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "config",
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      getUserIpData: function getUserIpData() {
        var _this2 = this;
        var actionName = "getUserIp";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? _this2.UserIpData = jsonData.data.IP : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "lobby",
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      GetPlayCitySN: function GetPlayCitySN() {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", "http://pv.sohu.com/cityjson?ie=utf-8");
        xhr.timeout = 5e3;
        var that = this;
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207 && xhr.responseText) {
            var returnCity = xhr.responseText;
            var reg3 = /\{(.+?)\}/gi;
            var returnCitySN = returnCity.match(reg3);
            returnCitySN = returnCitySN[0];
            var ret = JSON.parse(returnCitySN);
            that.UserIpData = ret.cip;
            that.UserCName = ret.cname;
            console.log("UserIpData......:", that.UserIpData);
            console.log("UserCName........:", that.UserCName);
          }
        };
        xhr.ontimeout = function(event) {};
        xhr.onerror = function(e) {};
        xhr.send();
      },
      getServerStatus: function getServerStatus(callback, uncallback) {
        var actionName = "newGetServerStatus";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : uncallback && uncallback(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "Server",
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      saveUserAddress: function saveUserAddress(longitude, latitude, userID) {
        var fCallback = function fCallback() {
          cc.log("\u4fdd\u5b58\u5730\u5740\u5931\u8d25");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var address = "\u672a\u77e5";
        var args = {};
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/user/saveUserAddress";
        args.params = {
          userID: userID,
          longitude: longitude,
          latitude: latitude,
          address: address
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      getWXjsapi_ticket: function getWXjsapi_ticket(userID, callback) {
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/user/getJsapiTicket";
        args.params = {
          userID: userID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      getWxUserInfo: function getWxUserInfo(m_code, callback, UnCallback) {
        var fCallback = function fCallback() {
          console.warn();
          "\u8bf7\u6c42wechat auth\u5931\u8d25";
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : UnCallback && UnCallback();
        };
        var ontimeout = function ontimeout() {
          createTips("\u8bf7\u6c42\u8d85\u65f6\uff01");
        };
        var args = {};
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/user/getWxUserInfo";
        args.params = {
          code: m_code
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      getConfigDataByKey: function getConfigDataByKey(key, defaultValue) {
        var value = this.configData[key];
        if (value) return value;
        return defaultValue;
      },
      getUserIpDataByKey: function getUserIpDataByKey() {
        var value = this.UserIpData;
        if (value) return value;
        return "";
      },
      getUserCNameDataByKey: function getUserCNameDataByKey() {
        var value = this.UserCName;
        if (value) return value;
        return "";
      },
      clear: function clear() {
        this.configData = {};
        this.UserIpData = "";
        this.UserCName = "";
      }
    });
    module.exports = ConfigDataManager;
    cc._RF.pop();
  }, {
    DataManager: "DataManager"
  } ],
  ConfigManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "822baN4VHRI/JvABjmdmvCf", "ConfigManager");
    "use strict";
    var API = "config";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      properties: {},
      ctor: function ctor() {
        this.configList = [];
      },
      requestConfig: function requestConfig() {
        var _this = this;
        var actionName = "config";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42%s\u8d85\u65f6" + actionName);
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? _this.configList = jsonData.data : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      addConfiglsit: function addConfiglsit(configList) {
        for (var j in configList) {
          var config = configList[j];
          this.addConfig(config);
        }
      },
      addConfig: function addConfig(config) {
        if (!config) return;
        this.configList[config.keyConfig] = config.valueConfig;
      },
      getConfigIntegerValue: function getConfigIntegerValue(key, defaultValue) {
        var value = this.configList[key];
        if (value) {
          cc.log("getConfigIntegerValue value = %s", Number(value));
          return Number(value);
        }
        return defaultValue;
      },
      getConfigStringValue: function getConfigStringValue(key, defaultValue) {
        var value = this.configList[key];
        if (value) {
          cc.log("getConfigStringValue value = %s", value);
          return value;
        }
        return defaultValue;
      },
      clear: function clear() {
        self.configList = [];
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  Config: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d424WKB+JJHqNSLvGDRIY9", "Config");
    "use strict";
    window.isDebug = true;
    window.trace = function(params) {
      if (!window.isDebug) return;
      if ("undefined" === typeof console || "undefined" === typeof console.log) return;
      var msgs = [], len = arguments.length, msg;
      for (var i = 0; i < len; i++) {
        msg = void 0 === arguments[i] ? "undefined" : null === arguments[i] ? "null" : arguments[i].toString();
        msgs.push(msg);
      }
      for (var _i = 0; _i < msgs.length; _i++) cc.log(msgs[_i]);
    };
    window.Package = require("Package");
    window.UserInfoManager = new (require("UserInfoManager"))();
    window.RoomListManager = new (require("RoomListManager"))();
    window.GameListManager = new (require("GameListManager"))();
    window.NetResManager = new (require("NetResManager"))();
    window.MyHttpRequest = require("MyHttpRequest");
    window.tools = require("Tools");
    var doTest = true;
    window.g_autoLoginIn = false;
    !cc.sys.isNative && doTest && (window.testModule = require("test"));
    cc._RF.pop();
  }, {
    GameListManager: "GameListManager",
    MyHttpRequest: "MyHttpRequest",
    NetResManager: "NetResManager",
    Package: "Package",
    RoomListManager: "RoomListManager",
    Tools: "Tools",
    UserInfoManager: "UserInfoManager",
    test: "test"
  } ],
  CreatGameTypePrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3da34UlMGJH9IAgs+J/0JOO", "CreatGameTypePrefab");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        _callBack: null,
        _gametype: null,
        namenormal: cc.Label,
        namelight: cc.Label,
        checkMark: cc.Node,
        playTypeName: cc.Label,
        playTypeView: cc.Node,
        sanjiaoNode: cc.Node
      },
      updateContent: function updateContent(gameID, tabIdx, callback) {
        this.gameID = gameID;
        this._callBack = callback;
        this.tabIdx = tabIdx;
        var gameName = GameManager.getRegistGameNameByGameID(gameID);
        this.namenormal.string = gameName;
        this.namelight.string = gameName;
        var playTypeName = GameManager.getGameTypeByPlayMode(gameID, null);
        this.playTypeName && (this.playTypeName.string = playTypeName + "");
      },
      resetGameTypeNodeHeight: function resetGameTypeNodeHeight(gameConfig) {
        var itemHeight = 62;
        gameConfig && (gameConfig.length > 1 ? this.node.height = 90 + itemHeight * gameConfig.length : this.node.height = 90 + (itemHeight + 4));
      },
      onClickBtn: function onClickBtn() {
        this.node.parent.children.forEach(function(item) {
          if (item != this.node) {
            var itemComponent = item.getComponent("CreatGameTypePrefab");
            itemComponent.checkMark.active = false;
            itemComponent.playTypeView.active = false;
            itemComponent.node.height = 90;
            itemComponent.sanjiaoNode.active = false;
          }
        }.bind(this));
        this._callBack(this.gameID, this.tabIdx, this);
        this.checkMark.active = true;
        this.playTypeView.active = true;
        this.sanjiaoNode.active = true;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CreatPlayTypePrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a73cXAiVhAUIIsV0O9kOms", "CreatPlayTypePrefab");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        namenormal: cc.Label,
        namelight: cc.Label
      },
      start: function start() {},
      updateContent: function updateContent(gameID, gameConfig, wanfaIdx, callback) {
        this.gameID = gameID;
        this.gameConfig = gameConfig;
        this.wanfaIdx = wanfaIdx;
        this.callback = callback;
        this.namelight.getComponent(cc.Label).string = gameConfig.desc;
        this.namenormal.getComponent(cc.Label).string = gameConfig.desc;
      },
      setPlayTypeNodeCheckMark: function setPlayTypeNodeCheckMark(targetNode) {
        var checkMark = targetNode.getChildByName("checkmark");
        for (var i = 0; i < targetNode.parent.childrenCount; i++) if (targetNode.parent.children[i].getChildByName("checkmark") == checkMark) {
          targetNode.parent.children[i].getChildByName("background").active = false;
          checkMark.active = true;
        } else {
          targetNode.parent.children[i].getChildByName("checkmark").active = false;
          targetNode.parent.children[i].getChildByName("background").active = true;
        }
      },
      onClick: function onClick(event, tag) {
        this.setPlayTypeNodeCheckMark(event.target);
        this.callback(this.wanfaIdx);
      }
    });
    cc._RF.pop();
  }, {} ],
  CreateCardGameBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e399f84cClOkalm2MUKvkSb", "CreateCardGameBase");
    "use strict";
    module.exports = cc.Class({
      extends: require("BaseLayer"),
      init: function init(buyConfig, gameID, TYPE_NAME_TAB) {
        cc.log(TYPE_NAME_TAB);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CreateRoomCheckBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92f24BWCEFI1Y9XXS5GlLl/", "CreateRoomCheckBox");
    "use strict";
    var selectedColor = new cc.Color(203, 44, 27, 255);
    var unSelectedColor = new cc.Color(61, 23, 1, 255);
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        text: cc.Label,
        index: cc.Integer,
        selectType: cc.Integer,
        backImg: {
          type: cc.SpriteFrame,
          default: []
        },
        checkmarkImg: {
          type: cc.SpriteFrame,
          default: []
        },
        disableBtnNode: cc.Node
      },
      setInteractableBtn: function setInteractableBtn(isDisable) {
        if (this.disableBtnNode) {
          this.disableBtnNode.active = isDisable;
          this.disableBtnNode.getComponent(cc.Sprite).spriteFrame = this.backImg[this.toggleContainer ? 0 : 1];
        }
        this.toggle.interactable = !isDisable;
      },
      setSelectedInteractableState: function setSelectedInteractableState(isSelected) {
        this.toggle.isChecked = isSelected;
        this.setInteractableBtn(!isSelected);
      },
      setSelectedState: function setSelectedState(isSelected) {
        this.toggle.isChecked = isSelected;
      },
      onLoad: function onLoad() {
        this.toggle = this.node.getComponent(cc.Toggle);
        this.setText(this.data);
        if (this.defaultAllUnselected) if (this.defaultAllDisabled) {
          this.toggle.isChecked = false;
          this.setInteractableBtn(true);
        } else {
          this.setInteractableBtn(false);
          this.toggle.isChecked = false;
        } else {
          this.setInteractableBtn(false);
          this.defaultAllSelected ? this.toggleContainer ? 0 === this.index ? this.toggle.isChecked = true : this.toggle.isChecked = false : this.defaultAllSelected && (this.toggle.isChecked = true) : 0 === this.index ? this.toggle.isChecked = true : this.toggle.isChecked = false;
        }
        this.setCheckboxImg();
      },
      init: function init(idx, data, selectType, callback, specialData, toggleContainer) {
        var _this = this;
        this.index = idx;
        this.data = data;
        this.selectType = selectType;
        this.callback = callback;
        this.defaultAllSelected = specialData.defaultAllSelected;
        this.defaultAllUnselected = specialData.defaultAllUnselected;
        this.defaultAllDisabled = specialData.defaultAllDisabled;
        this.specialUnSelectedCallBack = specialData.specialUnSelectedCallBack;
        this.defaultSelectIndex = specialData.defaultSelectIndex;
        this.toggleContainer = toggleContainer;
        this.isInitView = true;
        "undefined" == typeof this.defaultSelectIndex && null == this.defaultSelectIndex || idx == this.defaultSelectIndex && this.scheduleOnce(function() {
          _this.setSelectedState(true);
        }, .04);
      },
      setCheckboxImg: function setCheckboxImg() {
        var imgIdx = 1 === this.selectType ? 0 : 1;
        var backImg = this.toggle.node.getChildByName("Background");
        var markImg = this.toggle.node.getChildByName("checkmark");
        backImg.getComponent(cc.Sprite).spriteFrame = this.backImg[imgIdx];
        markImg.getComponent(cc.Sprite).spriteFrame = this.checkmarkImg[imgIdx];
      },
      setText: function setText(text) {
        this.text.string = text;
      },
      getText: function getText() {
        return this.text.string;
      },
      onChecked: function onChecked(toggle) {
        var isChecked = toggle.isChecked;
        isChecked || !this.specialUnSelectedCallBack || this.isInitView || this.specialUnSelectedCallBack(this.getText() + "", this.index);
        this.isInitView = false;
        if (this.selectType === SELECT_TYPE_ONE && false === isChecked) return;
        this.setChecked(isChecked);
      },
      setChecked: function setChecked(isChecked) {
        this.setTextDescColor(isChecked);
        true == isChecked ? this.callback(isChecked, this.index) : console.log("ujuuuuuu");
      },
      setTextDescColor: function setTextDescColor(isChecked) {
        this.text.node.color = isChecked ? selectedColor : unSelectedColor;
      },
      getChecked: function getChecked() {
        return this.toggle.isChecked;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CreateRoomDaikai: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93a71GNRBlLIZfRvZkuANrc", "CreateRoomDaikai");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        roomId: cc.Label
      },
      initDataView: function initDataView(roomId, createRoomNode, target, parentNode) {
        this.roomIdStr = roomId;
        this.roomId.string = "\u4ee3\u5f00\u623f\u95f4\u6210\u529f!\u623f\u95f4\u53f7\u4e3a:" + roomId;
        if (createRoomNode) {
          this.node.active = true;
          createRoomNode.active = false;
        }
        this.target = target;
      },
      onClickCancel: function onClickCancel() {
        this.target.removeFromParent();
      },
      onClickJoinRoom: function onClickJoinRoom() {
        this.LobbyRoomLogic = new (require("LobbyRoomLogic"))();
        this.LobbyRoomLogic.joinRoom(this.roomIdStr);
        this.target.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    LobbyRoomLogic: "LobbyRoomLogic"
  } ],
  CreateRoomInput: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6db8bviUFP/o1AFzlI3sej", "CreateRoomInput");
    "use strict";
    var panelLength = 1018;
    var offset = -panelLength / 2 + 40;
    var textDescWidth = 115;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        text: cc.Label,
        input: cc.EditBox
      },
      init: function init(key, textDesc, inputRange, idx) {
        this.key = key;
        this.textDesc = textDesc;
        this.inputRange = inputRange;
        this.idx = idx;
        this.inputRange.length > 0 && (this.input.placeholder = "\u8303\u56f4" + this.inputRange[0] + "-" + this.inputRange[1]);
      },
      onLoad: function onLoad() {
        this.text.string = this.textDesc;
        this.calculatePosX(this.idx);
      },
      onEditDidEnd: function onEditDidEnd() {
        var _this = this;
        var lowRange = this.inputRange[0];
        var highRange = this.inputRange[1];
        var input = this.input.string;
        if (input < lowRange) {
          createTips("\u8f93\u5165\u503c\u4e0d\u80fd\u4f4e\u4e8e" + lowRange);
          this.scheduleOnce(function() {
            _this.input.string = lowRange + "";
          }, .3);
        }
        if (input > highRange) {
          createTips("\u8f93\u5165\u503c\u4e0d\u80fd\u5927\u4e8e" + highRange);
          this.scheduleOnce(function() {
            _this.input.string = highRange + "";
          }, .3);
        }
      },
      getInput: function getInput() {
        return this.input.string;
      },
      calculatePosX: function calculatePosX(idx) {
        1 == idx && (idx = 2);
        this.node.y = -32;
        var wholeLength = panelLength - textDescWidth;
        var singleLength = wholeLength / (CELL_NUM + 1);
        var length = singleLength * (idx + 1) + textDescWidth;
        var posX = length + offset - cc.winSize.width / 1280 * 100;
        this.node.x = posX;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  CreateRoomLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05b6ehMEeNIs4ljuF6YcGWC", "CreateRoomLayer");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var LobbyRoomLogic = require("LobbyRoomLogic");
    var CreateRoomSelectData = require("CreateRoomSelectData");
    var CALLBACK = null;
    var TIPS_TEXT = "\u6ce8: \u9996\u5c40\u7ed3\u7b97\u524d\u5c06\n\u8fd4\u8fd8\u6263\u9664{0}";
    var CLUB_TIPS_TEXT = "\u6ce8: \u9996\u5c40\u7ed3\u7b97\u524d\u5c06\u8fd4\u8fd8\u6263\u9664{0}\n\u4ff1\u4e50\u90e8\u4ee3\u5f00\u623f\u95f4\u7edf\u4e00\u6d88\u8017\u7fa4\u4e3b\u7684{0}";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        gameTabPrefab: cc.Prefab,
        panelSelectPrefab: cc.Prefab,
        gameTab: {
          type: cc.ScrollView,
          default: null
        },
        panelView: {
          default: null,
          type: cc.ScrollView
        },
        playTypePrefab: cc.Prefab,
        titleSpriteNode: [ cc.Node ],
        type: null,
        playTypeList: null,
        panelMap: null,
        scaleBox: cc.Node,
        createRoomBtn: cc.Button,
        daikaiRoomBtn: cc.Button,
        createPanelNode: cc.Node,
        daiKaiNode: cc.Node,
        text_tips: cc.Label
      },
      init: function init(roomType, gameList, gameID, friendsGroupID, deskID, callback, parentNode) {
        cc.winSize.width / 1280 < 1 && this.scaleBox.setScale(cc.winSize.width / 1280, cc.winSize.width / 1280);
        this.rolling = false;
        this.lobbyRoomLogic = new LobbyRoomLogic();
        this.initRoomType = roomType;
        if (roomType == E_ROOM_TYPE.MATCH) {
          this.selectedGameList = gameList;
          console.log(">>>gameIDgameID" + gameID);
          console.log(gameList + ">>>>>>>>>gameList[0]" + gameList[0]);
          this.selectedGameID = gameID || gameList[0];
        } else {
          this.selectedGameList = gameList[0];
          console.log(">>>gameIDgameID" + gameID);
          console.log(gameList + ">>>>>>>>>gameList[0]" + gameList[0][0]);
          this.selectedGameID = gameID || gameList[0][0];
        }
        this.friendsGroupID = friendsGroupID || 0;
        this.deskID = deskID || 0;
        CALLBACK = callback;
        this.parentNode = parentNode;
        this.roomSelectData = new CreateRoomSelectData();
        this.roomSelectData.gameID = this.selectedGameID;
        this.roomSelectData.roomType = roomType;
        for (var i = 0; i < this.selectedGameList.length; i++) if (this.selectedGameID == this.selectedGameList[i]) {
          this.selectedGameIndex = i;
          break;
        }
        this.selectedGameIndex = this.selectedGameIndex ? this.selectedGameIndex : 0;
        this.selectedCreateGame = null;
        this.selectedCreateGameList = {};
        if (null != friendsGroupID) {
          this.createRoomBtn.node.active = false;
          this.daikaiRoomBtn.node.x = 505;
          this.isClub = true;
        } else this.isClub = false;
      },
      onLoad: function onLoad() {
        this.initUIData();
      },
      initUIData: function initUIData() {
        this.initGameListView();
        if (this.initRoomType == E_ROOM_TYPE.MATCH) {
          this.createRoomBtn.node.active = false;
          this.daikaiRoomBtn.node.active = true;
          this.text_tips.string = tools.stringFormat(CLUB_TIPS_TEXT, "\u94bb\u77f3", "\u94bb\u77f3");
        } else this.isClub ? this.text_tips.string = tools.stringFormat(CLUB_TIPS_TEXT, "\u94bb\u77f3", "\u94bb\u77f3") : this.text_tips.string = tools.stringFormat(TIPS_TEXT, "\u94bb\u77f3");
      },
      initGameListView: function initGameListView() {
        var item;
        for (var i = 0; i < this.selectedGameList.length; i++) {
          var gameID = this.selectedGameList[i];
          item = cc.instantiate(this.gameTabPrefab);
          item.getComponent("CreatGameTypePrefab").updateContent(gameID, i, this.gameTabClick.bind(this));
          this.gameTab.content.addChild(item);
        }
        this.initTab(this.selectedGameID, 0);
      },
      onResourceChanged: function onResourceChanged(type) {},
      initTab: function initTab(gameID, tabIdx) {
        this.selectedGameIndex = tabIdx;
        this.selectedGameID = gameID;
        this.roomSelectData.gameID = this.selectedGameID;
        this.gameTab.content.children.forEach(function(item) {
          item.getComponent("CreatGameTypePrefab").gameID == gameID && item.getComponent("CreatGameTypePrefab").onClickBtn();
        });
      },
      gameTabClick: function gameTabClick(gameID, tabIdx, gameTypePrefabComponent) {
        this.selectedGameIndex = tabIdx;
        this.selectedGameID = gameID;
        this.roomSelectData.gameID = this.selectedGameID;
        console.log(gameID + "\u70b9\u51fb\u4e86\u6e38\u620f tab \u70b9\u51fb" + tabIdx);
        this.playTab = gameTypePrefabComponent.playTypeView;
        this.gameTypePrefabComponent = gameTypePrefabComponent;
        this.doGetBuyConfig();
      },
      doGetBuyConfig: function doGetBuyConfig() {
        var gameType = E_ROOM_TYPE.PRIVATE;
        var callback = function(gameBuyConfig) {
          this.roomSelectData.setGameBuyConfig(gameBuyConfig);
          this.setSelectedCreateGameUI();
        }.bind(this);
        var gameIDInfo = "";
        for (var item in G_REGIST_GAME_LIST) {
          var game = G_REGIST_GAME_LIST[item];
          game.id && (gameIDInfo += game.id + ",");
        }
        gameIDInfo.lastIndexOf(",") == gameIDInfo.length - 1 && (gameIDInfo = gameIDInfo.substring(0, gameIDInfo.lastIndexOf(",")));
        this.lobbyRoomLogic.getBuyConfig(this.selectedGameID, gameType, callback, gameIDInfo);
      },
      setJSONDataToView: function setJSONDataToView(object, roomType, ojectPrivate) {
        this.panelView.stopAutoScroll();
        this.panelView.scrollToTop(0);
        this.roomSelectData.setGameConfig(object, roomType, ojectPrivate || null, this);
        this.initTypeListView();
      },
      setSelectedCreateGameUI: function setSelectedCreateGameUI() {
        var jsonPath;
        if (this.initRoomType == E_ROOM_TYPE.NORMAL) {
          this.titleSpriteNode.forEach(function(v, i) {
            v.active = 0 == i;
          });
          jsonPath = tools.stringFormat("json/{0}/CardRoomConfig", this.selectedGameID);
        } else if (this.initRoomType == E_ROOM_TYPE.MATCH) {
          this.titleSpriteNode.forEach(function(v, i) {
            v.active = 1 == i;
          });
          jsonPath = tools.stringFormat("json/{0}/MatchRoomConfig", this.selectedGameID);
        }
        cc.loader.loadRes(jsonPath, function(err, object) {
          if (err) {
            cc.log(err);
            return;
          }
          if (this.initRoomType == E_ROOM_TYPE.NORMAL) {
            this.roomType = E_ROOM_TYPE.PRIVATE;
            jsonPath = tools.stringFormat("json/{0}/PrivateRoomConfig", this.selectedGameID);
            cc.loader.loadRes(jsonPath, function(err, objectPrivate) {
              if (err) {
                cc.log(err);
                return;
              }
              this.setJSONDataToView(object, this.roomType, objectPrivate);
            }.bind(this));
          } else this.setJSONDataToView(object, this.initRoomType);
        }.bind(this));
      },
      initTypeListView: function initTypeListView() {
        var _this = this;
        this.playTab && this.playTab.removeAllChildren();
        var gameConfig = this.roomSelectData.getGameConfig();
        for (var i in gameConfig) {
          var singleGameConfig = gameConfig[i];
          var tq = cc.instantiate(this.playTypePrefab);
          var script = tq.getComponent("CreatPlayTypePrefab");
          script.updateContent(this.selectedGameID, singleGameConfig, i, this.onTouchTypeCallback.bind(this));
          this.playTab && this.playTab.addChild(tq);
        }
        this.gameTypePrefabComponent.resetGameTypeNodeHeight(gameConfig);
        this.onTouchTypeCallback(0);
        this.scheduleOnce(function() {
          _this.playTab && _this.playTab.children[0].getComponent("CreatPlayTypePrefab").setPlayTypeNodeCheckMark(_this.playTab.children[0]);
        }, .032);
      },
      onTouchTypeCallback: function onTouchTypeCallback(wanfaIdx) {
        this.roomSelectData.setWanfa(wanfaIdx);
        this.setSelectListView();
      },
      setSelectListView: function setSelectListView() {
        var _this2 = this;
        this.panelView.content.removeAllChildren();
        var showList = this.roomSelectData.getShowList();
        for (var _iterator = _createForOfIteratorHelperLoose(showList), _step; !(_step = _iterator()).done; ) {
          var tab = _step.value;
          var prefab = cc.instantiate(this.panelSelectPrefab);
          var script = prefab.getComponent("PanelSelect");
          script.updateContent(tab, this.roomSelectData.registerCheckBox.bind(this.roomSelectData), this.roomType);
          script.setRefreshRoomTypeFun(function() {
            _this2.refreshRoomTypeData();
          });
          script.setRefreshCSLFun(function() {
            _this2.refreshCSLData();
          });
          script.setRefreshPayFun(function() {
            _this2.refreshPayData();
          });
          script.setRefreshHuChiQiangGangFun(function(checkType, index) {
            _this2.refreshHuChiDataQiangGang(checkType, index);
          });
          script.setRefreshHuChiJokerFun(function() {
            _this2.refreshHuChiDataJoker();
          });
          script.setRefreshHuChiJokerTuoFun(function(checkType, index) {
            _this2.refreshHuChiDataJokerTuo(checkType, index);
          });
          script.setRefreshHuChiJokerTuoSiGuiFun(function() {
            _this2.refreshHuChiJokerTuoSiGui();
          });
          script.setRefreshHuChiMaPaiFun(function() {
            _this2.refreshHuChiDataMaPai();
          });
          this.panelView.content.addChild(prefab);
        }
      },
      refreshRoomTypeData: function refreshRoomTypeData() {
        this.roomSelectData.refreshRoomTypeData();
      },
      refreshCSLData: function refreshCSLData() {
        this.roomSelectData.refreshCSLData();
      },
      refreshPayData: function refreshPayData() {
        this.roomSelectData.refreshPayData();
      },
      refreshHuChiDataQiangGang: function refreshHuChiDataQiangGang(checkType, index) {
        this.roomSelectData.refreshHuChiQiangGangData(checkType, index);
      },
      refreshHuChiDataJoker: function refreshHuChiDataJoker() {
        this.roomSelectData.refreshHuChiJokerData();
      },
      refreshHuChiDataJokerTuo: function refreshHuChiDataJokerTuo(checkType, index) {
        this.roomSelectData.refreshHuChiJokerTuoData(checkType, index);
      },
      refreshHuChiJokerTuoSiGui: function refreshHuChiJokerTuoSiGui() {
        this.roomSelectData.refreshHuChiJokerTuoSiGuiData();
      },
      refreshHuChiDataMaPai: function refreshHuChiDataMaPai() {
        this.roomSelectData.refreshHuChiMaPaiData();
      },
      refreshHuChiDataQiDui: function refreshHuChiDataQiDui(index) {
        this.roomSelectData.refreshHuChiQiDuiData(index);
      },
      doBuyDesk: function doBuyDesk(isHelpOther) {
        var data = this.roomSelectData.getSelectedData();
        var gameID = data[0], roomID = data[1], count = data[2], jsonStr = data[3];
        var json = JSON.parse(jsonStr);
        if (this.roomType == E_ROOM_TYPE.MATCH) {
          var lPoint = GameManager.getLPointByJsonRule(jsonStr);
          var mPoint = GameManager.getMPointByJsonRule(jsonStr);
          if (0 == mPoint) return createTips("\u8bf7\u8f93\u5165\u706b\u5e01\u51c6\u5165\u9650\u5236");
          if ("undefined" != typeof lPoint && 0 == lPoint) return createTips("\u8bf7\u8f93\u5165\u706b\u5e01\u4e0a\u9650\u9650\u5236");
          cc.log(">>>>>>>>>>>>>>>>>>>>>>>>>>json.mPointjson.mPoint" + json.mPoint);
          cc.log(">>>>>>>>>>>>>>>>>>>>>>>>>>json.mPointjson.mPoint" + mPoint);
        } else if (this.roomType == E_ROOM_TYPE.PRIVATE) {
          var _lPoint = GameManager.getLPointByJsonRule(jsonStr);
          var _mPoint = GameManager.getMPointByJsonRule(jsonStr);
          console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>json.lPoint.lPoint" + _mPoint);
          console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>json.lPoint.lPoint" + _lPoint);
          if (0 == _mPoint) return createTips("\u8bf7\u8f93\u5165\u91d1\u5e01\u51c6\u5165\u9650\u5236");
          if ("undefined" != typeof _lPoint && 0 == _lPoint) return createTips("\u8bf7\u8f93\u5165\u91d1\u5e01\u4e0b\u9650\u9650\u5236");
          var mDesc = "\u51c6\u5165\u91d1\u5e01";
          var lDesc = "\u4e0b\u9650\u91d1\u5e01";
          if (_lPoint > _mPoint) return createTips(tools.stringFormat("{0}\u4e0d\u80fd\u5927\u4e8e{1}", lDesc, mDesc));
        }
        var callback = function(roomId) {
          if (isHelpOther) {
            this.daiKaiNode.active = true;
            this.daiKaiNode.getComponent("CreateRoomDaikai").initDataView(roomId, this.createPanelNode, this.node, this.parentNode);
          } else loadsceneRes("Texture", function() {});
        }.bind(this);
        if (this.roomType == E_ROOM_TYPE.PRIVATE) {
          json.lPoint = F_GetMoneyInput(json.lPoint);
          json.mPoint = F_GetMoneyInput(json.mPoint);
          json.bPoint = F_GetMoneyInput(json.bPoint);
          json.cCSFS = 2;
          json.cCSL = 5;
        }
        this.roomType == E_ROOM_TYPE.MATCH && (json.lPoint = 1);
        if (20161010 == gameID) {
          console.log(">>>>>>ddddddd" + JSON.stringify(json));
          json.wanfa = [];
          json.wanfa.push(json.wanfa_1);
          delete json.wanfa_1;
          json.wanfa.push(json.wanfa_2);
          delete json.wanfa_2;
          json.wanfa.push(json.wanfa_3);
          delete json.wanfa_3;
          json.tuoz = [];
          json.tuoz.push(0);
          json.tuoz.push(json.tuoz_1);
          delete json.tuoz_1;
          json.tuoz.push(json.tuoz_2);
          delete json.tuoz_2;
          json.tuoz.push(json.tuoz_3);
          delete json.tuoz_3;
          json.tuoz.push(json.tuoz_4);
          delete json.tuoz_4;
          json.tuoz.push(json.tuoz_5);
          delete json.tuoz_5;
          json.tuoz.push(json.tuoz_6);
          delete json.tuoz_6;
          var tempData = json.joker;
          json.joker = [];
          for (var i = 0; i < 4; i++) i == tempData ? json.joker.push(1) : json.joker.push(0);
          json.joker.push(json.jokerTuo_1);
          delete json.jokerTuo_1;
          json.joker.push(json.jokerTuo_2);
          delete json.jokerTuo_2;
          json.joker.push(json.jokerTuo_3);
          delete json.jokerTuo_3;
          json.joker.push(json.jokerTuo_4);
          delete json.jokerTuo_4;
          tempData = json.mapai;
          json.mapai = [];
          json.mapai.push(tempData);
          json.mapai.push(json.magen_1);
          delete json.magen_1;
        }
        if (30000606 == gameID) {
          json.gameIdx >= 3 && (json.rs = 5);
          2 != json.gameIdx && 4 != json.gameIdx || (json.Stopjoin = 0);
          json.wfIdx = json.gameIdx;
          if (6 == json.rs) {
            json.duHong = 0;
            json.yaRuan = 0;
          }
        }
        jsonStr = JSON.stringify(json);
        this.lobbyRoomLogic.buyDesk(gameID, roomID, count, jsonStr, isHelpOther, this.friendsGroupID, this.deskID, callback);
      },
      onCreateRoom: function onCreateRoom(event, param) {
        switch (param) {
         case "daikai":
          this.doBuyDesk(true);
          break;

         case "create":
          this.doBuyDesk(false);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    CreateRoomSelectData: "CreateRoomSelectData",
    LobbyRoomLogic: "LobbyRoomLogic"
  } ],
  CreateRoomMsgDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2235Z4/BFIYqGIuDL/4aUC", "CreateRoomMsgDialog");
    "use strict";
    var LobbyRoomLogic = require("LobbyRoomLogic");
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Text_Name: cc.Label,
        Text_MonenyTip: cc.Label,
        toggleOne: cc.Toggle,
        toggleTwo: cc.Toggle,
        toggleThree: cc.Toggle,
        Text_toggleOneColor: cc.Label,
        Text_toggleTwoColor: cc.Label,
        annimetions: cc.Node
      },
      onLoad: function onLoad() {
        this.MagicGold = ConfigDataManager.getConfigDataByKey("useMagicExpressCostMoney", 0) / G_MULTI_NUM || 0;
        this.MagicGold = parseInt(this.MagicGold + "");
        this.lobbyRoomLogic = new LobbyRoomLogic();
        this.configList = [];
        this.count = 15;
        this.rs = 4;
        this.wf = 0;
        this.gameID = 20161004;
      },
      start: function start() {
        var _this = this;
        setTimeout(function() {
          _this.annimetions && cc.isValid(_this.annimetions) && (_this.annimetions.active = true);
        }, 2500);
      },
      init: function init(id, callback) {
        this.gameID = 0;
        this.model = 0;
        this.m_callback = callback;
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.Text_Name.string = this.getGameNameconfig(id);
        this.Text_MonenyTip.string = "\u514d\u8d39";
        this.toggleTwo.interactable = false;
        this.toggleThree.interactable = false;
        this.Text_toggleOneColor.node.color = new cc.Color(146, 146, 146);
        this.Text_toggleTwoColor.node.color = new cc.Color(146, 146, 146);
      },
      onClickSports: function onClickSports(target, data) {
        if (target.isChecked) switch (data) {
         case "count_1":
          this.count = 15;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "count_2":
          this.count = 24;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "count_3":
          this.count = 30;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "count_4":
          this.count = 60;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "count_5":
          this.count = 8;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "count_6":
          this.count = 16;
          this.Text_MonenyTip.string = "\u514d\u8d39";
          break;

         case "rs_1":
          this.rs = 4;
          this.toggleTwo.interactable = false;
          this.toggleThree.interactable = false;
          this.Text_toggleOneColor.node.color = new cc.Color(146, 146, 146);
          this.Text_toggleTwoColor.node.color = new cc.Color(146, 146, 146);
          this.toggleOne.getComponent(cc.Toggle).check();
          break;

         case "rs_2":
          this.rs = 3;
          this.toggleTwo.interactable = true;
          this.toggleThree.interactable = false;
          this.Text_toggleOneColor.node.color = new cc.Color(0, 255, 227);
          this.Text_toggleTwoColor.node.color = new cc.Color(146, 146, 146);
          this.toggleOne.getComponent(cc.Toggle).check();
          break;

         case "rs_3":
          this.rs = 2;
          this.toggleTwo.interactable = true;
          this.toggleThree.interactable = true;
          this.Text_toggleOneColor.node.color = new cc.Color(0, 255, 227);
          this.Text_toggleTwoColor.node.color = new cc.Color(0, 255, 227);
          break;

         case "wf_1":
          this.wf = 0;
          break;

         case "wf_2":
          this.wf = 1;
          break;

         case "wf_3":
          this.wf = 2;
        } else cc.log(">>>>>roomInforoomInfo" + data);
      },
      doBuyDesk: function doBuyDesk(isHelpOther) {
        var jsonObj = {};
        jsonObj["count"] = this.count;
        jsonObj["rs"] = this.rs;
        jsonObj["wf"] = this.wf;
        jsonObj["model"] = this.model;
        jsonObj["pay"] = 2;
        var callback = function(bHandleCode) {
          if (bHandleCode && GlobalError.ERROR_NOT_ENOUGH_JEWELS == bHandleCode) {
            var btnName1 = "\u786e  \u5b9a";
            var msgCallback = function(btnName) {
              if (btnName == btnName1) {
                this.m_callback && this.m_callback();
                this.node && this.node.removeFromParent();
              }
            }.bind(this);
            var msgObj = {};
            msgObj.msg = "\u94bb\u77f3\u4e0d\u8db3";
            msgObj.btn1 = btnName1;
            msgObj.callbackFun = msgCallback;
            createMsgBox(msgObj);
          }
        }.bind(this);
        var jsonStr = JSON.stringify(jsonObj);
        this.lobbyRoomLogic.buyDesk(this.gameID, this.count, jsonStr, callback);
      },
      onCreateRoom: function onCreateRoom(event, param) {
        switch (param) {
         case "create":
          this.doBuyDesk(false);
        }
      },
      getGameNameconfig: function getGameNameconfig(id) {
        var gameName = "";
        if ("game_1" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 1;
        } else if ("game_2" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 2;
        } else if ("game_3" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 3;
        } else if ("game_4" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 4;
        } else if ("game_5" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 5;
        } else if ("game_6" == id) {
          gameName = "\u5168\u5357\u9ebb\u5c06";
          this.gameID = 20161004;
          this.model = 6;
        }
        console.log(gameName);
        return gameName;
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic",
    LobbyRoomLogic: "LobbyRoomLogic"
  } ],
  CreateRoomSelectData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa7e1tR+GhAArcej0bcuur/", "CreateRoomSelectData");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    cc.Class({
      ctor: function ctor() {
        this.gameID = null;
        this.gameConfig = null;
        this.FUN_NAME_TAB = null;
        this.checkboxMap = new Map();
        this.saveJSONConfigData = null;
        this.saveJSONPrivateConfigData = null;
        this.saveCreateRoomLayerComponent = null;
      },
      setGameConfig: function setGameConfig(jsonConfig, roomType, jsonPrivateConfig, createRoomLayerComponent) {
        this.saveJSONConfigData = jsonConfig;
        this.saveJSONPrivateConfigData = jsonPrivateConfig;
        this.saveCreateRoomLayerComponent = createRoomLayerComponent;
        var gameBuyConfig = this.gameBuyConfig;
        jsonConfig = jsonConfig.json;
        console.log(">>>>>>>>>>>>>gameBuyConfiggameBuyConfig" + JSON.stringify(gameBuyConfig));
        roomType == E_ROOM_TYPE.NORMAL && (roomType = E_ROOM_TYPE.PRIVATE);
        roomType == E_ROOM_TYPE.PRIVATE && (jsonConfig = jsonPrivateConfig.json);
        for (var _iterator = _createForOfIteratorHelperLoose(jsonConfig), _step; !(_step = _iterator()).done; ) {
          var wanfaInfo = _step.value;
          var wanfaInfoTab = wanfaInfo.tab;
          for (var _iterator2 = _createForOfIteratorHelperLoose(wanfaInfoTab), _step2; !(_step2 = _iterator2()).done; ) {
            var _wanfaInfo = _step2.value;
            if ("Count" === _wanfaInfo.name) for (var i = 0; i < _wanfaInfo.textDescList.length; i++) gameBuyConfig[i] && gameBuyConfig[i].count ? _wanfaInfo.textDescList[i] = gameBuyConfig[i].count + "\u5c40" : cc.log("\u5f53\u524d php \u83b7\u53d6\u7684\u6570\u636e\u662f\u5426\u5b58\u5728\u8be5\u73a9\u6cd5\u7684\u5c40\u6570\u914d\u7f6e \u4e0d\u5b58\u5728\uff0c\u5e94\u7528\u672c\u5730json\u5c40\u6570");
            if ("pay" === _wanfaInfo.name) {
              var costData = this.getCostByCount(this.getCountByIdx(0));
              for (var _i = 0; _i < _wanfaInfo.textDescList.length; _i++) {
                "\u623f\u4e3b\u652f\u4ed8" == _wanfaInfo.textDescList[_i] && (_wanfaInfo.textDescList[_i] += "(\u91d1\u5e01x" + F_GetMoneyDisplay(costData.costNums) + ")");
                "AA\u652f\u4ed8" == _wanfaInfo.textDescList[_i] && (_wanfaInfo.textDescList[_i] += "(\u6bcf\u4eba\u91d1\u5e01x" + F_GetMoneyDisplay(costData.AAcostNums) + ")");
              }
            }
          }
        }
        this.gameConfig = jsonConfig;
        this.roomType = roomType;
      },
      getCostByCount: function getCostByCount(count) {
        for (var _iterator3 = _createForOfIteratorHelperLoose(this.gameBuyConfig), _step3; !(_step3 = _iterator3()).done; ) {
          var buyConfig = _step3.value;
          if (buyConfig.count == count) return {
            costNums: buyConfig.costNums,
            AAcostNums: buyConfig.AAcostNums
          };
        }
      },
      getCountByIdx: function getCountByIdx(idx) {
        return this.gameBuyConfig[idx].count;
      },
      getGameConfig: function getGameConfig() {
        return this.gameConfig;
      },
      setWanfa: function setWanfa(idx) {
        this.selectedTypeIndex = idx;
        cc.log(">>>this.gameConfig", this.gameConfig);
        this.FUN_NAME_TAB = this.gameConfig[idx].tab;
        this._CHECKBOX_KEY = [];
        this._CHECKBOX_TAG = {};
        for (var _iterator4 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step4; !(_step4 = _iterator4()).done; ) {
          var tab = _step4.value;
          for (var _i2 = 1; _i2 <= tab.num; _i2++) if (tab.selectType <= SELECT_TYPE_OTHER) {
            var _checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, _i2);
            this._CHECKBOX_KEY.push(_checkboxName);
          }
        }
        for (var i = 1; i < this._CHECKBOX_KEY.length; i++) {
          var checkboxName = this._CHECKBOX_KEY[i];
          this._CHECKBOX_TAG[checkboxName] = 200 + i;
        }
        var showList = [];
        for (var _iterator5 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step5; !(_step5 = _iterator5()).done; ) {
          var _tab = _step5.value;
          var cell_num = CELL_NUM;
          "undefined" != typeof _tab.customerCELL_NUM && (cell_num = _tab.customerCELL_NUM);
          var cellNum = Math.ceil(_tab.num / cell_num);
          if (1 === cellNum) {
            _tab.cellIndex = 1;
            showList.push(_tab);
          } else for (var _i3 = 1; _i3 <= cellNum; _i3++) {
            var newTab = cloneObject(_tab);
            newTab.num = cell_num;
            cellNum == _i3 && (newTab.num = _tab.num - (_i3 - 1) * cell_num);
            newTab.textDescList = {};
            for (var j = 0; j < newTab.num; j++) newTab.textDescList[j] = _tab.textDescList[(_i3 - 1) * cell_num + j];
            1 !== _i3 && (newTab.desc = "");
            newTab.cellIndex = _i3;
            showList.push(newTab);
          }
        }
        this.showList = showList;
      },
      getSelectedData: function getSelectedData() {
        cc.log(this.roomType + "\u8fdb\u6765\u9009\u62e9\u623f\u7c7b\u578b getSelectedDatagetSelectedDatagetSelectedDatagetSelectedData");
        var gameID = this.gameID;
        var roomID = 0;
        var count = 0;
        var jsonStr = "";
        count = this.getSelectedGameCount();
        jsonStr = this.getSelectedJsonStr();
        var roomInfo;
        this.roomType == E_ROOM_TYPE.CARD ? roomInfo = RoomListManager.getCardRoomByGameID(gameID) : this.roomType == E_ROOM_TYPE.MATCH ? roomInfo = RoomListManager.getMatchRoomByGameID(gameID) : this.roomType == E_ROOM_TYPE.PRIVATE && (roomInfo = RoomListManager.getPrivateRoomByGameID(gameID));
        cc.log(">>>>>roomInforoomInfo" + JSON.stringify(roomInfo));
        roomInfo && (roomID = roomInfo.roomID);
        return [ gameID, roomID, count, jsonStr ];
      },
      refreshHuChiQiangGangData: function refreshHuChiQiangGangData(checkType, index) {
        var jsonObj = {};
        var qiangGangCheckBoxs = [];
        for (var _iterator6 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step6; !(_step6 = _iterator6()).done; ) {
          var tab = _step6.value;
          if ("\u73a9\u6cd5" != tab.desc && "wanfa" != tab.name && 3 != tab.num) continue;
          if ("\u73a9\u6cd5" == tab.desc && "wanfa" == tab.name && 3 == tab.num) for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            qiangGangCheckBoxs.push(checkbox);
          }
        }
        qiangGangCheckBoxs.length > 0 && 3 == qiangGangCheckBoxs.length && ("selected" == checkType ? 2 == index && qiangGangCheckBoxs[1].setSelectedState(true) : "unSelected" == checkType && qiangGangCheckBoxs[2].setSelectedState(false));
      },
      refreshHuChiJokerData: function refreshHuChiJokerData() {
        var jsonObj = {};
        var jokerTuoCheckBoxs = [];
        for (var _iterator7 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step7; !(_step7 = _iterator7()).done; ) {
          var tab = _step7.value;
          if ("\u9b3c\u724c" != tab.desc && "joker" != tab.name && "jokerTuo" != tab.name) continue;
          if ("joker" == tab.name) for (var _i5 = 0; _i5 < tab.num; _i5++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, _i5);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = _i5;
              break;
            }
          } else if ("jokerTuo" == tab.name) for (var _i6 = 0; _i6 < tab.num; _i6++) {
            var _checkboxName2 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i6);
            var _checkbox = this.checkboxMap.get(_checkboxName2).getComponent("BaseLayer");
            jokerTuoCheckBoxs.push(_checkbox);
          }
        }
        if (jsonObj && 0 == jsonObj.joker) for (var i = 0; i < jokerTuoCheckBoxs.length; i++) jokerTuoCheckBoxs[i].setSelectedInteractableState(false); else {
          for (var _i4 = 0; _i4 < jokerTuoCheckBoxs.length; _i4++) jokerTuoCheckBoxs[_i4].setInteractableBtn(false);
          1 != jsonObj.joker && 2 != jsonObj.joker || jokerTuoCheckBoxs.length > 0 && jokerTuoCheckBoxs[0].setSelectedState(false);
        }
      },
      refreshHuChiJokerTuoData: function refreshHuChiJokerTuoData(checkType, index) {
        var jsonObj = [];
        var jokerCheckBoxs = [];
        var jokerTuoCheckBoxs = [];
        for (var _iterator8 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step8; !(_step8 = _iterator8()).done; ) {
          var tab = _step8.value;
          if ("\u9b3c\u724c" != tab.desc && "joker" != tab.name && "jokerTuo" != tab.name) continue;
          if ("jokerTuo" == tab.name) {
            for (var i = 0; i < tab.num; i++) {
              var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
              var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
              var isCheck = checkbox.getChecked();
              jsonObj.push(isCheck);
            }
            for (var _i7 = 0; _i7 < tab.num; _i7++) {
              var _checkboxName3 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i7);
              var _checkbox2 = this.checkboxMap.get(_checkboxName3).getComponent("BaseLayer");
              jokerTuoCheckBoxs.push(_checkbox2);
            }
          } else if ("joker" == tab.name) for (var _i8 = 0; _i8 < tab.num; _i8++) {
            var _checkboxName4 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i8);
            var _checkbox3 = this.checkboxMap.get(_checkboxName4).getComponent("BaseLayer");
            jokerCheckBoxs.push(_checkbox3);
          }
        }
        if ("selected" == checkType) {
          jsonObj && jsonObj[0] && 0 == index && jokerCheckBoxs[jokerCheckBoxs.length - 1].setSelectedState(true);
          jsonObj && jsonObj[3] && 3 == index && jokerTuoCheckBoxs[2].setSelectedState(true);
        } else "unSelected" == checkType;
      },
      refreshHuChiJokerTuoSiGuiData: function refreshHuChiJokerTuoSiGuiData() {
        var jokerTuoCheckBoxs = [];
        for (var _iterator9 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step9; !(_step9 = _iterator9()).done; ) {
          var tab = _step9.value;
          if ("jokerTuo" != tab.name) continue;
          if ("jokerTuo" == tab.name) for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            jokerTuoCheckBoxs.push(checkbox);
          }
        }
        jokerTuoCheckBoxs[jokerTuoCheckBoxs.length - 1].setSelectedState(false);
      },
      refreshHuChiMaPaiData: function refreshHuChiMaPaiData() {
        var jsonObj = {};
        var maPaiCheckBoxs = [];
        for (var _iterator10 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step10; !(_step10 = _iterator10()).done; ) {
          var tab = _step10.value;
          if ("\u9a6c\u724c" != tab.desc && "mapai" != tab.name && "magen" != tab.name) continue;
          if ("mapai" == tab.name) for (var _i10 = 0; _i10 < tab.num; _i10++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, _i10);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = _i10;
              break;
            }
          }
          if ("magen" == tab.name) for (var _i11 = 0; _i11 < tab.num; _i11++) {
            var _checkboxName5 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i11);
            var _checkbox4 = this.checkboxMap.get(_checkboxName5).getComponent("BaseLayer");
            maPaiCheckBoxs.push(_checkbox4);
          }
        }
        if (jsonObj && 0 == jsonObj.mapai) for (var i = 0; i < maPaiCheckBoxs.length; i++) maPaiCheckBoxs[i].setSelectedInteractableState(false); else for (var _i9 = 0; _i9 < maPaiCheckBoxs.length; _i9++) maPaiCheckBoxs[_i9].setInteractableBtn(false);
      },
      refreshHuChiQiDuiData: function refreshHuChiQiDuiData(index) {
        var jsonObj = {};
        var qiDuiCheckBoxs = [];
        for (var _iterator11 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step11; !(_step11 = _iterator11()).done; ) {
          var tab = _step11.value;
          if ("\u62d3\u5c55" != tab.desc && "tuoz" != tab.name) continue;
          for (var _i12 = 0; _i12 < 2; _i12++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, _i12);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = _i12;
              break;
            }
          }
          for (var _i13 = 0; _i13 < 2; _i13++) {
            var _checkboxName6 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i13);
            var _checkbox5 = this.checkboxMap.get(_checkboxName6);
            qiDuiCheckBoxs.push(_checkbox5);
          }
        }
        if (2 == qiDuiCheckBoxs.length) for (var i = 0; i < 2; i++) if (index != i) {
          qiDuiCheckBoxs[i].getComponent("BaseLayer").toggle.isChecked = false;
          qiDuiCheckBoxs[i].getComponent("BaseLayer").setChecked(false);
        }
      },
      refreshRoomTypeData: function refreshRoomTypeData() {
        var jsonObj = {};
        for (var _iterator12 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step12; !(_step12 = _iterator12()).done; ) {
          var tab = _step12.value;
          if ("RoomType" != tab.name) continue;
          for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = tab.valueList[i];
              break;
            }
          }
        }
        if (jsonObj.RoomType == E_ROOM_TYPE.CARD) {
          if (this.roomType != E_ROOM_TYPE.CARD) {
            this.roomType = E_ROOM_TYPE.CARD;
            this.saveCreateRoomLayerComponent && this.saveCreateRoomLayerComponent.setJSONDataToView(this.saveJSONConfigData, this.roomType, this.saveJSONPrivateConfigData);
          }
        } else if (jsonObj.RoomType == E_ROOM_TYPE.PRIVATE && this.roomType != E_ROOM_TYPE.PRIVATE) {
          this.roomType = E_ROOM_TYPE.PRIVATE;
          this.saveCreateRoomLayerComponent && this.saveCreateRoomLayerComponent.setJSONDataToView(this.saveJSONConfigData, this.roomType, this.saveJSONPrivateConfigData);
        }
      },
      refreshCSLData: function refreshCSLData() {
        var jsonObj = {};
        var cCSLCheckBoxs = [];
        for (var _iterator13 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step13; !(_step13 = _iterator13()).done; ) {
          var tab = _step13.value;
          if ("\u62bd\u6c34\u65b9\u5f0f" != tab.desc && "cCSFS" != tab.name && "cCSL" != tab.name) continue;
          if ("cCSFS" == tab.name) for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = tab.valueList[i];
              break;
            }
          } else if ("cCSL" == tab.name) for (var _i14 = 0; _i14 < tab.num; _i14++) {
            var _checkboxName7 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i14);
            var _checkbox6 = this.checkboxMap.get(_checkboxName7).getComponent("BaseLayer");
            cCSLCheckBoxs.push(_checkbox6);
          }
          if (jsonObj && 0 == jsonObj.cCSFS) for (var _i15 = 0; _i15 < cCSLCheckBoxs.length; _i15++) cCSLCheckBoxs[_i15].setSelectedInteractableState(false); else for (var _i16 = 0; _i16 < cCSLCheckBoxs.length; _i16++) cCSLCheckBoxs[_i16].setInteractableBtn(false);
        }
      },
      refreshPayData: function refreshPayData() {
        var jsonObj = {};
        for (var _iterator14 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step14; !(_step14 = _iterator14()).done; ) {
          var tab = _step14.value;
          if ("Count" != tab.name && "rs" != tab.name) continue;
          for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              jsonObj[key] = i;
              break;
            }
          }
        }
        for (var _iterator15 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step15; !(_step15 = _iterator15()).done; ) {
          var _tab2 = _step15.value;
          if ("pay" != _tab2.name) continue;
          cc.log("refreshPayData");
          cc.log(_tab2);
          for (var _i17 = 0; _i17 < _tab2.num; _i17++) {
            var _checkboxName8 = tools.stringFormat(CHECKBOX_NAME, _tab2.name, _i17);
            var _checkbox7 = this.checkboxMap.get(_checkboxName8).getComponent("BaseLayer");
            var payType = _checkbox7.getText();
            payType = payType.substr(0, 4);
            var costData = this.getCostByCount(this.getCountByIdx(jsonObj.Count));
            "\u623f\u4e3b\u652f\u4ed8" == payType ? _checkbox7.setText(payType + "(\u91d1\u5e01x" + F_GetMoneyDisplay(costData.costNums) + ")") : "AA\u652f\u4ed8" == payType && _checkbox7.setText(payType + "(\u6bcf\u4eba\u91d1\u5e01x" + F_GetMoneyDisplay(costData.AAcostNums) + ")");
          }
        }
      },
      getSelectedJsonStr: function getSelectedJsonStr() {
        var jsonObject = this.getSelectedJsonObject();
        30100008 == this.gameID && (jsonObject.Qiangzhuan = 4);
        return JSON.stringify(jsonObject);
      },
      getSelectedJsonObject: function getSelectedJsonObject() {
        var jsonObj = {};
        for (var _iterator16 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step16; !(_step16 = _iterator16()).done; ) {
          var tab = _step16.value;
          if ("Count" === tab.name) continue;
          if (tab.selectType === SELECT_TYPE_ONE) for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var checkbox = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            var isCheck = checkbox.getChecked();
            if (isCheck) {
              var key = tab.name;
              tab.keyList && tab.keyList[i] && (key = tab.keyList[i]);
              jsonObj[key] = i + 1;
              tab.valueList && (jsonObj[key] = tab.valueList[i]);
              break;
            }
          } else if (tab.selectType === SELECT_TYPE_MORE) for (var _i18 = 0; _i18 < tab.num; _i18++) {
            var _checkboxName9 = tools.stringFormat(CHECKBOX_NAME, tab.name, _i18);
            var _checkbox8 = this.checkboxMap.get(_checkboxName9).getComponent("BaseLayer");
            var isChecked = _checkbox8.getChecked();
            var _key = tools.stringFormat("{0}_{1}", tab.name, _i18 + 1);
            tab.keyList && tab.keyList[_i18] && (_key = tab.keyList[_i18]);
            jsonObj[_key] = isChecked ? 1 : 0;
          } else if (tab.selectType === SELECT_TYPE_INPUT) for (var _i19 = 0; _i19 < tab.num; _i19++) {
            var _checkboxName10 = tools.stringFormat(INPUTBOX_NAME, tab.name, _i19);
            var _checkbox9 = this.checkboxMap.get(_checkboxName10).getComponent("BaseLayer");
            var input = _checkbox9.getInput();
            var _key2 = tab.keyList[_i19];
            jsonObj[_key2] = Number(input) || 0;
          }
        }
        "undefined" != typeof this.gameConfig[this.selectedTypeIndex].gameIdx && (jsonObj["gameIdx"] = this.gameConfig[this.selectedTypeIndex].gameIdx);
        if (0 == jsonObj.cCSFS) {
          jsonObj.cCSL && (jsonObj.cCSL = null);
          jsonObj.cCSL2 && (jsonObj.cCSL2 = null);
        } else 1 == jsonObj.cCSFS && jsonObj.cCSL2 && (jsonObj.cCSL2 = null);
        return jsonObj;
      },
      getSelectedGameCount: function getSelectedGameCount() {
        var count = 0;
        for (var _iterator17 = _createForOfIteratorHelperLoose(this.FUN_NAME_TAB), _step17; !(_step17 = _iterator17()).done; ) {
          var tab = _step17.value;
          if ("Count" === tab.name) for (var i = 0; i < tab.num; i++) {
            var checkboxName = tools.stringFormat(CHECKBOX_NAME, tab.name, i);
            var script = this.checkboxMap.get(checkboxName).getComponent("BaseLayer");
            if (script.getChecked()) {
              this.gameBuyConfig[i] && (count = this.gameBuyConfig[i].count);
              break;
            }
          }
        }
        return count;
      },
      registerCheckBox: function registerCheckBox(checkbox) {
        this.checkboxMap.set(checkbox.name, checkbox);
      },
      getShowList: function getShowList() {
        return this.showList;
      },
      setGameBuyConfig: function setGameBuyConfig(gameConfig) {
        this.gameBuyConfig = gameConfig;
      },
      getGameBuyConfig: function getGameBuyConfig() {
        return this.gameBuyConfig;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ecb03AieFHyY5xxMNJfM2W", "DDZ_ZhanJi_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        cards: cc.Node,
        cardItem: cc.Node,
        bankerView: cc.Node
      },
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.bankerView.active = data.isBanker;
        for (var i = 0; i < data.handCards.length; i++) if (255 != data.handCards[i]) {
          var card = cc.instantiate(this.cardItem);
          card.setContentSize(cc.size(75, 90));
          card.active = true;
          setTexture(card.getComponent(cc.Sprite), tools.stringFormat("CSDDZ/card/{0}", data.handCards[i]));
          this.cards.addChild(card);
        } else this.cards.children[i].active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  DataManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f54bfLPixhLGLqWLyW9yPCH", "DataManager");
    "use strict";
    var DataManager = cc.Class({
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.dataManagerList = {};
      },
      addManager: function addManager(name, manager) {
        for (var k in this.dataManagerList) if (k == name) {
          this.dataManagerList[name] = manager;
          break;
        }
        this.dataManagerList[name] = manager;
      },
      removeManager: function removeManager(name) {
        for (var k in this.dataManagerList) if (k == name) {
          this.dataManagerList[name] = null;
          break;
        }
      },
      clear: function clear() {
        for (var k in this.dataManagerList) {
          var manager = this.dataManagerList[k];
          if (manager && manager.clear) {
            manager.clear();
            this.dataManagerList[k] = null;
          }
        }
      }
    });
    DataManager.instance = new DataManager();
    module.exports = DataManager;
    cc._RF.pop();
  }, {} ],
  DataNotify: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "049cdrJ4IJLr4Ca/sZHWbar", "DataNotify");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    module.exports = cc.Class({
      ctor: function ctor() {
        this.uiList = [];
      },
      addListener: function addListener(ui) {
        for (var i = 0; i < this.uiList.length; i++) if (ui == this.uiList[i]) return;
        this.uiList.push(ui);
      },
      removeListener: function removeListener(ui) {
        for (var i = 0; i < this.uiList.length; i++) ui == this.uiList[i] && this.uiList.splice(i, 1);
      },
      onDiamondChanged: function onDiamondChanged(diamond) {
        UserInfoManager.getMyInfo().jewels = diamond;
        for (var _iterator = _createForOfIteratorHelperLoose(this.uiList), _step; !(_step = _iterator()).done; ) {
          var ui = _step.value;
          ui.onDiamondChanged && ui.onDiamondChanged(diamond);
        }
      },
      onMoneyChanged: function onMoneyChanged(money) {
        UserInfoManager.getMyInfo().money = money;
        for (var _iterator2 = _createForOfIteratorHelperLoose(this.uiList), _step2; !(_step2 = _iterator2()).done; ) {
          var ui = _step2.value;
          ui.onMoneyChanged && ui.onMoneyChanged(money);
        }
      },
      onGiftCardChanged: function onGiftCardChanged(giftCard) {
        UserInfoManager.getMyInfo().giftCard = giftCard;
        for (var _iterator3 = _createForOfIteratorHelperLoose(this.uiList), _step3; !(_step3 = _iterator3()).done; ) {
          var ui = _step3.value;
          ui.onGiftCardChanged && ui.onGiftCardChanged(giftCard);
        }
      },
      onTransfernumChanged: function onTransfernumChanged(Transfernum) {
        UserInfoManager.getMyInfo().transferNum = Transfernum;
        for (var _iterator4 = _createForOfIteratorHelperLoose(this.uiList), _step4; !(_step4 = _iterator4()).done; ) {
          var ui = _step4.value;
          ui.onTransfernumChanged && ui.onTransfernumChanged(Transfernum);
        }
      },
      onLogonGamePeoplecountChange: function onLogonGamePeoplecountChange(peopleCount) {
        UserInfoManager.getMyInfo().peopleCount = peopleCount;
        for (var _iterator5 = _createForOfIteratorHelperLoose(this.uiList), _step5; !(_step5 = _iterator5()).done; ) {
          var ui = _step5.value;
          ui.onLogonGamePeoplecountChange && ui.onLogonGamePeoplecountChange(peopleCount);
        }
      },
      onLogonNewMsgComing1: function onLogonNewMsgComing1(msgData) {
        for (var _iterator6 = _createForOfIteratorHelperLoose(this.uiList), _step6; !(_step6 = _iterator6()).done; ) {
          var ui = _step6.value;
          ui.onLogonNewMsgComing1 && ui.onLogonNewMsgComing1(msgData);
        }
      },
      onLogonNewMsgComing2: function onLogonNewMsgComing2(msgData) {
        for (var _iterator7 = _createForOfIteratorHelperLoose(this.uiList), _step7; !(_step7 = _iterator7()).done; ) {
          var ui = _step7.value;
          ui.onLogonNewMsgComing2 && ui.onLogonNewMsgComing2(msgData);
        }
      },
      onScoreChanged: function onScoreChanged(score) {
        for (var _iterator8 = _createForOfIteratorHelperLoose(this.uiList), _step8; !(_step8 = _iterator8()).done; ) {
          var ui = _step8.value;
          ui.onScoreChanged && ui.onScoreChanged(score);
        }
      },
      onPointChanged: function onPointChanged(point) {
        for (var _iterator9 = _createForOfIteratorHelperLoose(this.uiList), _step9; !(_step9 = _iterator9()).done; ) {
          var ui = _step9.value;
          ui.onPointChanged && ui.onPointChanged(point);
        }
      },
      onBgChanged: function onBgChanged(bgId) {
        for (var _iterator10 = _createForOfIteratorHelperLoose(this.uiList), _step10; !(_step10 = _iterator10()).done; ) {
          var ui = _step10.value;
          ui.onBgChanged && ui.onBgChanged(bgId);
        }
      },
      onMapChanged: function onMapChanged(mapName) {
        for (var _iterator11 = _createForOfIteratorHelperLoose(this.uiList), _step11; !(_step11 = _iterator11()).done; ) {
          var ui = _step11.value;
          ui.onMapChanged && ui.onMapChanged(mapName);
        }
      },
      onOpenRoomChanged: function onOpenRoomChanged() {
        for (var _iterator12 = _createForOfIteratorHelperLoose(this.uiList), _step12; !(_step12 = _iterator12()).done; ) {
          var ui = _step12.value;
          ui.onOpenRoomChanged && ui.onOpenRoomChanged();
        }
      },
      onLobbyLayoutTypeChanged: function onLobbyLayoutTypeChanged(lobbyLayoutType) {
        for (var _iterator13 = _createForOfIteratorHelperLoose(this.uiList), _step13; !(_step13 = _iterator13()).done; ) {
          var ui = _step13.value;
          ui.onLobbyLayoutTypeChanged && ui.onLobbyLayoutTypeChanged(lobbyLayoutType);
        }
      },
      onBankMoneyChanged: function onBankMoneyChanged(bankMoney) {
        UserInfoManager.getMyInfo().bankMoney = bankMoney;
        for (var _iterator14 = _createForOfIteratorHelperLoose(this.uiList), _step14; !(_step14 = _iterator14()).done; ) {
          var ui = _step14.value;
          ui.onBankMoneyChanged && ui.onBankMoneyChanged(bankMoney);
        }
      },
      onMailRedSpot: function onMailRedSpot(info) {
        for (var _iterator15 = _createForOfIteratorHelperLoose(this.uiList), _step15; !(_step15 = _iterator15()).done; ) {
          var ui = _step15.value;
          ui.onMailRedSpot && ui.onMailRedSpot(info);
        }
      },
      onFriendNotifyAdd: function onFriendNotifyAdd(friendNotify) {
        FriendManager.addFriendNotify(friendNotify);
        FriendManager.addFriendInvitePlayNotify(friendNotify);
        for (var _iterator16 = _createForOfIteratorHelperLoose(this.uiList), _step16; !(_step16 = _iterator16()).done; ) {
          var ui = _step16.value;
          ui.onFriendNotifyAdd && ui.onFriendNotifyAdd(friendNotify);
        }
      },
      onFriendNotifyDel: function onFriendNotifyDel(notifyID) {
        FriendManager.delFriendNotify(notifyID);
        FriendManager.delFriendInvitePlayNotify(notifyID);
        for (var _iterator17 = _createForOfIteratorHelperLoose(this.uiList), _step17; !(_step17 = _iterator17()).done; ) {
          var ui = _step17.value;
          ui.onFriendNotifyDel && ui.onFriendNotifyDel(notifyID);
        }
      },
      onFriendAdd: function onFriendAdd(friend) {
        FriendManager.addFriend(friend);
        for (var _iterator18 = _createForOfIteratorHelperLoose(this.uiList), _step18; !(_step18 = _iterator18()).done; ) {
          var ui = _step18.value;
          ui.onFriendAdd && ui.onFriendAdd(friend);
        }
      },
      onFriendDel: function onFriendDel(friendID) {
        FriendManager.delFriend(friendID);
        for (var _iterator19 = _createForOfIteratorHelperLoose(this.uiList), _step19; !(_step19 = _iterator19()).done; ) {
          var ui = _step19.value;
          ui.onFriendDel && ui.onFriendDel(friendID);
        }
      },
      onBuyDeskInfoDel: function onBuyDeskInfoDel(passwd) {
        cc.log("\u5f00\u623f\u5217\u8868\u4fe1\u606f\u66f4\u65b0 \u6682\u672a\u5904\u7406");
        RoomRecordManager.delRoomRecord(passwd);
        for (var _iterator20 = _createForOfIteratorHelperLoose(this.uiList), _step20; !(_step20 = _iterator20()).done; ) {
          var ui = _step20.value;
          ui.onBuyDeskInfoDel && ui.onBuyDeskInfoDel(passwd);
        }
      },
      onBuyDeskInfoUpdate: function onBuyDeskInfoUpdate(data) {
        cc.log("\u5f00\u623f\u684c\u5b50\u4fe1\u606f\u66f4\u65b0 \u6682\u672a\u5904\u7406");
        RoomRecordManager.updateRoomRecord(data);
        for (var _iterator21 = _createForOfIteratorHelperLoose(this.uiList), _step21; !(_step21 = _iterator21()).done; ) {
          var ui = _step21.value;
          ui.onBuyDeskInfoUpdate && ui.onBuyDeskInfoUpdate(data);
        }
      },
      onFriendOnlineStatusChange: function onFriendOnlineStatusChange(data) {
        FriendManager.setFriendOnlineStatus(data.friendID, data.onlineStatus);
        for (var _iterator22 = _createForOfIteratorHelperLoose(this.uiList), _step22; !(_step22 = _iterator22()).done; ) {
          var ui = _step22.value;
          ui.onFriendOnlineStatusChange && ui.onFriendOnlineStatusChange(data.friendID, data.onlineStatus);
        }
      },
      onDeskUserSit: function onDeskUserSit(userID) {
        for (var _iterator23 = _createForOfIteratorHelperLoose(this.uiList), _step23; !(_step23 = _iterator23()).done; ) {
          var ui = _step23.value;
          ui.onDeskUserSit && ui.onDeskUserSit(userID);
        }
      },
      onDeskUserUp: function onDeskUserUp(userID) {
        for (var _iterator24 = _createForOfIteratorHelperLoose(this.uiList), _step24; !(_step24 = _iterator24()).done; ) {
          var ui = _step24.value;
          ui.onDeskUserUp && ui.onDeskUserUp(userID);
        }
      },
      onFriendRedSpotChange: function onFriendRedSpotChange(info) {
        FriendManager.setFriendListRedSpotCount(info.friendListRedSpotCount);
        FriendManager.setNotifyListRedSpotCount(info.notifyListRedSpotCount);
        for (var _iterator25 = _createForOfIteratorHelperLoose(this.uiList), _step25; !(_step25 = _iterator25()).done; ) {
          var ui = _step25.value;
          ui.onFriendRedSpotChange && ui.onFriendRedSpotChange(info);
        }
      },
      onFriendsGroupAdd: function onFriendsGroupAdd(friendsGroup) {
        for (var _iterator26 = _createForOfIteratorHelperLoose(this.uiList), _step26; !(_step26 = _iterator26()).done; ) {
          var ui = _step26.value;
          ui.onFriendsGroupAdd && ui.onFriendsGroupAdd(friendsGroup);
        }
      },
      onFriendsGroupDel: function onFriendsGroupDel(friendsGroupID) {
        for (var _iterator27 = _createForOfIteratorHelperLoose(this.uiList), _step27; !(_step27 = _iterator27()).done; ) {
          var ui = _step27.value;
          ui.onFriendsGroupDel && ui.onFriendsGroupDel(friendsGroupID);
        }
      },
      onFriendsGroupNotifyAdd: function onFriendsGroupNotifyAdd(notify) {
        for (var _iterator28 = _createForOfIteratorHelperLoose(this.uiList), _step28; !(_step28 = _iterator28()).done; ) {
          var ui = _step28.value;
          ui.onFriendsGroupNotifyAdd && ui.onFriendsGroupNotifyAdd(notify);
        }
      },
      onFriendsGroupNotifyDel: function onFriendsGroupNotifyDel(notifyID) {
        FriendsGroupManager.delNotify(notifyID);
        for (var _iterator29 = _createForOfIteratorHelperLoose(this.uiList), _step29; !(_step29 = _iterator29()).done; ) {
          var ui = _step29.value;
          ui.onFriendsGroupNotifyDel && ui.onFriendsGroupNotifyDel(notifyID);
        }
      },
      onFriendsGroupMemberAdd: function onFriendsGroupMemberAdd(friendsGroupID, member) {
        for (var _iterator30 = _createForOfIteratorHelperLoose(this.uiList), _step30; !(_step30 = _iterator30()).done; ) {
          var ui = _step30.value;
          ui.onFriendsGroupMemberAdd && ui.onFriendsGroupMemberAdd(friendsGroupID, member);
        }
      },
      onFriendsGroupMemberDel: function onFriendsGroupMemberDel(friendsGroupID, userID) {
        for (var _iterator31 = _createForOfIteratorHelperLoose(this.uiList), _step31; !(_step31 = _iterator31()).done; ) {
          var ui = _step31.value;
          ui.onFriendsGroupMemberDel && ui.onFriendsGroupMemberDel(friendsGroupID, userID);
        }
      },
      onFriendsGroupRoomMsgAdd: function onFriendsGroupRoomMsgAdd(friendsGroupID, roomMsg) {
        for (var _iterator32 = _createForOfIteratorHelperLoose(this.uiList), _step32; !(_step32 = _iterator32()).done; ) {
          var ui = _step32.value;
          ui.onFriendsGroupRoomMsgAdd && ui.onFriendsGroupRoomMsgAdd(friendsGroupID, roomMsg);
        }
      },
      onFriendsGroupRoomMsgDel: function onFriendsGroupRoomMsgDel(friendsGroupID, roomMsgID) {
        for (var _iterator33 = _createForOfIteratorHelperLoose(this.uiList), _step33; !(_step33 = _iterator33()).done; ) {
          var ui = _step33.value;
          ui.onFriendsGroupRoomMsgDel && ui.onFriendsGroupRoomMsgDel(friendsGroupID, roomMsgID);
        }
      },
      onFriendsGroupRoomMsgUpdate: function onFriendsGroupRoomMsgUpdate(friendsGroupID, roomMsgID, curPeopleCount) {
        for (var _iterator34 = _createForOfIteratorHelperLoose(this.uiList), _step34; !(_step34 = _iterator34()).done; ) {
          var ui = _step34.value;
          ui.onFriendsGroupRoomMsgUpdate && ui.onFriendsGroupRoomMsgUpdate(friendsGroupID, roomMsgID);
        }
      },
      onFriendsGroupAccoMsgAdd: function onFriendsGroupAccoMsgAdd(friendsGroupID, accoMsg) {
        for (var _iterator35 = _createForOfIteratorHelperLoose(this.uiList), _step35; !(_step35 = _iterator35()).done; ) {
          var ui = _step35.value;
          ui.onFriendsGroupAccoMsgAdd && ui.onFriendsGroupAccoMsgAdd(friendsGroupID, accoMsg);
        }
      },
      onFriendsGroupAccoMsgDel: function onFriendsGroupAccoMsgDel(friendsGroupID, accoMsgID) {
        for (var _iterator36 = _createForOfIteratorHelperLoose(this.uiList), _step36; !(_step36 = _iterator36()).done; ) {
          var ui = _step36.value;
          ui.onFriendsGroupAccoMsgDel && ui.onFriendsGroupAccoMsgDel(friendsGroupID, accoMsgID);
        }
      },
      onFriendsGroupNameChange: function onFriendsGroupNameChange(friendsGroupID, name) {
        for (var _iterator37 = _createForOfIteratorHelperLoose(this.uiList), _step37; !(_step37 = _iterator37()).done; ) {
          var ui = _step37.value;
          ui.onFriendsGroupNameChange && ui.onFriendsGroupNameChange(friendsGroupID, name);
        }
      },
      onFriendsGroupRedSpotChange: function onFriendsGroupRedSpotChange(info) {
        for (var _iterator38 = _createForOfIteratorHelperLoose(this.uiList), _step38; !(_step38 = _iterator38()).done; ) {
          var ui = _step38.value;
          ui.onFriendsGroupRedSpotChange && ui.onFriendsGroupRedSpotChange(info);
        }
      },
      onFriendsGroupNoticeChange: function onFriendsGroupNoticeChange(friendsGroupID, notice) {
        for (var _iterator39 = _createForOfIteratorHelperLoose(this.uiList), _step39; !(_step39 = _iterator39()).done; ) {
          var ui = _step39.value;
          ui.onFriendsGroupNoticeChange && ui.onFriendsGroupNoticeChange(friendsGroupID, notice);
        }
      },
      onFriendsGroupWechatChange: function onFriendsGroupWechatChange(friendsGroupID, wechat) {
        for (var _iterator40 = _createForOfIteratorHelperLoose(this.uiList), _step40; !(_step40 = _iterator40()).done; ) {
          var ui = _step40.value;
          ui.onFriendsGroupWechatChange && ui.onFriendsGroupWechatChange(friendsGroupID, wechat);
        }
      },
      onFriendsGroupScoreChange: function onFriendsGroupScoreChange(friendsGroupID, userID, score) {
        for (var _iterator41 = _createForOfIteratorHelperLoose(this.uiList), _step41; !(_step41 = _iterator41()).done; ) {
          var ui = _step41.value;
          ui.onFriendsGroupScoreChange && ui.onFriendsGroupScoreChange(friendsGroupID, userID, score);
        }
      },
      onFriendsGroupDeskAdd: function onFriendsGroupDeskAdd(friendsGroupID, desk) {
        for (var _iterator42 = _createForOfIteratorHelperLoose(this.uiList), _step42; !(_step42 = _iterator42()).done; ) {
          var ui = _step42.value;
          ui.onFriendsGroupDeskAdd && ui.onFriendsGroupDeskAdd(friendsGroupID, desk);
        }
      },
      onFriendsGroupDeskChange: function onFriendsGroupDeskChange(friendsGroupID, desk) {
        for (var _iterator43 = _createForOfIteratorHelperLoose(this.uiList), _step43; !(_step43 = _iterator43()).done; ) {
          var ui = _step43.value;
          ui.onFriendsGroupDeskChange && ui.onFriendsGroupDeskChange(friendsGroupID, desk);
        }
      },
      onFriendsGroupDeskDel: function onFriendsGroupDeskDel(friendsGroupID, desk) {
        for (var _iterator44 = _createForOfIteratorHelperLoose(this.uiList), _step44; !(_step44 = _iterator44()).done; ) {
          var ui = _step44.value;
          ui.onFriendsGroupDeskDel && ui.onFriendsGroupDeskDel(friendsGroupID, desk);
        }
      },
      onFriendsGroupVIPDeskAdd: function onFriendsGroupVIPDeskAdd(friendsGroupID, desk) {
        for (var _iterator45 = _createForOfIteratorHelperLoose(this.uiList), _step45; !(_step45 = _iterator45()).done; ) {
          var ui = _step45.value;
          ui.onFriendsGroupVIPDeskAdd && ui.onFriendsGroupVIPDeskAdd(friendsGroupID, desk);
        }
      },
      onFriendsGroupVIPDeskChange: function onFriendsGroupVIPDeskChange(friendsGroupID, desk) {
        for (var _iterator46 = _createForOfIteratorHelperLoose(this.uiList), _step46; !(_step46 = _iterator46()).done; ) {
          var ui = _step46.value;
          ui.onFriendsGroupVIPDeskChange && ui.onFriendsGroupVIPDeskChange(friendsGroupID, desk);
        }
      },
      onFriendsGroupVIPDeskDel: function onFriendsGroupVIPDeskDel(friendsGroupID, deskID) {
        for (var _iterator47 = _createForOfIteratorHelperLoose(this.uiList), _step47; !(_step47 = _iterator47()).done; ) {
          var ui = _step47.value;
          ui.onFriendsGroupVIPDeskDel && ui.onFriendsGroupVIPDeskDel(friendsGroupID, deskID);
        }
      },
      onFriendsGroupStatusChange: function onFriendsGroupStatusChange(friendsGroupID, userID, status) {
        console.log(this.uiList.length + "?length>>>>>" + status + ">>>>" + userID + ">>>>>>>>>>>>>>onFriendsGroupStatusChange" + friendsGroupID);
        for (var _iterator48 = _createForOfIteratorHelperLoose(this.uiList), _step48; !(_step48 = _iterator48()).done; ) {
          var ui = _step48.value;
          ui.onFriendsGroupStatusChange && ui.onFriendsGroupStatusChange(friendsGroupID, userID, status);
        }
      },
      onFriendsGroupPowerChange: function onFriendsGroupPowerChange(friendsGroupID, userID, power) {
        console.log(power + ">>>>" + userID + ">>>>>>>>>>>>>>onFriendsGroupPowerChange" + friendsGroupID);
        for (var _iterator49 = _createForOfIteratorHelperLoose(this.uiList), _step49; !(_step49 = _iterator49()).done; ) {
          var ui = _step49.value;
          ui.onFriendsGroupPowerChange && ui.onFriendsGroupPowerChange(friendsGroupID, userID, power);
        }
      },
      onFriendsGroupMemberFireCoinChange: function onFriendsGroupMemberFireCoinChange(friendsGroupID, userID, fireCoin) {
        for (var _iterator50 = _createForOfIteratorHelperLoose(this.uiList), _step50; !(_step50 = _iterator50()).done; ) {
          var ui = _step50.value;
          ui.onFriendsGroupMemberFireCoinChange && ui.onFriendsGroupMemberFireCoinChange(friendsGroupID, userID, fireCoin);
        }
      },
      onCurMatchStart: function onCurMatchStart(info) {
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          ui.onCurMatchStart && ui.onCurMatchStart(info);
        }
      },
      onCurMatchChange: function onCurMatchChange(info) {
        cc.error("onCurMatchChangeonCurMatchChangeonCurMatchChangeonCurMatchChange");
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          ui.onCurMatchChange && ui.onCurMatchChange(info);
        }
      },
      onCurMatchFail: function onCurMatchFail(info) {
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          ui.onCurMatchFail && ui.onCurMatchFail(info);
        }
      },
      onCurMatchComeSoon: function onCurMatchComeSoon(curCount, allCount) {
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          cc.log(this.uiList);
          ui.onCurMatchComeSoon && ui.onCurMatchComeSoon(curCount, allCount);
        }
      },
      onCurMatchResult: function onCurMatchResult(info) {
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          ui.onCurMatchResult && ui.onCurMatchResult(info);
        }
      },
      showMatchGameDeskInfo: function showMatchGameDeskInfo() {
        cc.log(this.uiList, "this.uiList++++");
        for (var _ in this.uiList) {
          var ui = this.uiList[_];
          ui.showMatchGameDeskInfo && ui.showMatchGameDeskInfo();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DayAwardRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e715XllN5Dab86xpM5hE9p", "DayAwardRecord");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        ListView_Reward: cc.ScrollView,
        Panel_Reward: cc.Node,
        page_text: cc.Label,
        buttonPre: cc.Button,
        buttonNext: cc.Button
      },
      init: function init() {
        this.PAGE_COUNT_Record = 8;
        this.curPage_Record = 0;
        this.maxPage_Record = 0;
        this.setPageInfo();
      },
      setPageInfo: function setPageInfo() {
        var Text_Page = this.page_text;
        var Button_Pre = this.buttonPre;
        var Button_Next = this.buttonNext;
        var curPage = this.curPage_Record;
        var maxPage = this.maxPage_Record;
        Text_Page.string = curPage + " / " + maxPage;
        Button_Pre.interactable = !(curPage <= 1);
        Button_Next.interactable = !(curPage >= maxPage);
      },
      onButtonPre: function onButtonPre() {
        this.curPage_Record = this.curPage_Record - 1;
        this.curPage_Record <= 0 && (this.curPage_Record = 1);
        this.requestInfo();
      },
      onButtonNext: function onButtonNext() {
        this.curPage_Record = this.curPage_Record + 1;
        this.curPage_Record > this.maxPage_Record && (this.curPage_Record = this.maxPage_Record);
        this.requestInfo();
      },
      createTime: function createTime(v) {
        var now = new Date(v);
        var yy = now.getFullYear();
        var mm = now.getMonth() + 1;
        var dd = now.getDate();
        var hh = now.getHours();
        var ii = now.getMinutes();
        var ss = now.getSeconds();
        var clock = yy + "-";
        mm < 10 && (clock += "0");
        clock += mm + "-";
        dd < 10 && (clock += "0");
        clock += dd + " ";
        hh < 10 && (clock += "0");
        clock += hh + ":";
        ii < 10 && (clock += "0");
        clock += ii + ":";
        ss < 10 && (clock += "0");
        clock += ss;
        return clock;
      },
      initRewardListView: function initRewardListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Text_Rank = item.getChildByName("Text_Rank").getComponent(cc.Label);
          var Text_Start = item.getChildByName("Text_Start").getComponent(cc.Label);
          var Text_Money = item.getChildByName("Text_Money").getComponent(cc.Label);
          var Text_LQ = item.getChildByName("Text_LQ").getComponent(cc.Label);
          Text_Rank.string = data.ranking + "";
          Text_Start.string = this.createTime(1e3 * data.time_start) + "";
          Text_Money.string = data.gold + "";
          Text_LQ.string = this.createTime(1e3 * data.create_time) + "";
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Reward, this.Panel_Reward, 1);
      },
      requestInfo: function requestInfo() {
        var _this = this;
        MatchManager.requestMatchRewardRecordList(function(info) {
          var rankList = info.data;
          if (void 0 == info.page) {
            _this.buttonPre.active = false;
            _this.buttonNext.active = false;
            _this.page_text.active = false;
          } else {
            _this.buttonPre.active = true;
            _this.buttonNext.active = true;
            _this.page_text.active = true;
            _this.curPage_Record = Number(info.page || 1);
            _this.maxPage_Record = Number(info.totalPage || 1);
            if (0 == info.totalPage) {
              info.page = 0;
              _this.curPage_Record = 0;
              _this.maxPage_Record = 0;
            }
            _this.setPageInfo();
          }
          _this.initRewardListView(rankList);
        }, this.curPage_Record, 10);
      },
      onEnable: function onEnable() {
        this.requestInfo();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  DayPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c88c3FkL4xFyZq1rOrB+84w", "DayPanel");
    "use strict";
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        AtlasLabel_Enroll_Cost: cc.Label,
        Text_Time: cc.Label,
        Enroll_Cost_Node: cc.Node,
        Button_Enroll: cc.Node,
        Image_Free: cc.Node,
        Enrolled: cc.Node,
        Enroll_Stop: cc.Button,
        AtlasLabel_Time_1: cc.Label,
        AtlasLabel_Time_2: cc.Label,
        AtlasLabel_Time_3: cc.Label,
        AtlasLabel_Time_4: cc.Label,
        AtlasLabel_Time_5: cc.Label,
        AtlasLabel_Time_6: cc.Label,
        text_chouma: cc.Label,
        text_fee: cc.Label,
        text_title: cc.Label
      },
      init: function init(data, index) {
        "undefined" != typeof index && this.refresh_panel(data, index);
      },
      getChineseText: function getChineseText(n) {
        var cnum = [ "\u96f6", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d", "\u4e03", "\u516b", "\u4e5d" ];
        var s = "";
        n = "" + n;
        for (var i = 0; i < n.length; i++) s += cnum[parseInt(n.charAt(i))];
        return s;
      },
      refresh_panel: function refresh_panel(data, index) {
        this.matchId = data.id;
        this.EndTimeStamp = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3);
        this.text_title.string = "\u6bcf\u65e5\u8d5b" + this.getChineseText(index + 1);
        this.Text_Time.string = "\u6bd4\u8d5b\u65f6\u95f4" + data.start_time + "~" + data.end_time;
        this.text_chouma.string = data.game_money + "";
        this.text_fee.string = data.fee + "";
        this.AtlasLabel_Enroll_Cost.string = tools.stringFormat("X{0}", data.game_money + data.fee);
        if (0 == data.status) {
          this.Enrolled.active = false;
          this.Button_Enroll.active = true;
          var cost = parseInt(data.enroll_cost_gold);
          cost <= 0 && (this.AtlasLabel_Enroll_Cost.string = "\u514d\u8d39");
        } else {
          this.Enrolled.active = true;
          this.Button_Enroll.active = false;
        }
        this.currentTime = data.current_time;
        this.leftTime = data.match_time - this.currentTime;
        if (this.leftTime > 1) {
          if (this.EndTimeStamp - this.currentTime <= 0) {
            this.Enrolled.active = false;
            this.Button_Enroll.active = false;
            this.Enroll_Stop.node.active = true;
          }
          if (this.matchBeginTimeSchedule) {
            this.unschedule(this.matchBeginTimeSchedule);
            this.matchBeginTimeSchedule = null;
          }
          var matchBeginTimeSchedule = function(dt) {
            this.leftTime = this.leftTime - 1;
            this.currentTime = this.currentTime + 1;
            if (this.leftTime <= 300 || this.EndTimeStamp - this.currentTime <= 0) {
              this.Enrolled.active = false;
              this.Button_Enroll.active = false;
              this.Enroll_Stop.node.active = true;
            } else this.Enroll_Stop.node.active = false;
            if (this.leftTime <= 0) {
              this.unschedule(this.matchBeginTimeSchedule);
              this.matchBeginTimeSchedule = null;
              return;
            }
            var result = parseInt(this.leftTime);
            var h = (Math.floor(result / 3600) < 10, Math.floor(result / 3600));
            var m = (Math.floor(result / 60 % 60) < 10, Math.floor(result / 60 % 60));
            var s = (Math.floor(result % 60) < 10, Math.floor(result % 60));
            var tab = [];
            tab.push((tools.fillZero2(h, 1) + "").substr(0, 1));
            tab.push((tools.fillZero2(h, 1) + "").substr(1, 1));
            tab.push((tools.fillZero2(m, 1) + "").substr(0, 1));
            tab.push((tools.fillZero2(m, 1) + "").substr(1, 1));
            tab.push((tools.fillZero2(s, 1) + "").substr(0, 1));
            tab.push((tools.fillZero2(s, 1) + "").substr(1, 1));
            for (var i = 1; i <= 6; i++) this[tools.stringFormat("AtlasLabel_Time_{0}", i)].string = tab[i - 1];
          }.bind(this);
          this.matchBeginTimeSchedule = matchBeginTimeSchedule;
          this.schedule(this.matchBeginTimeSchedule, 1, cc.macro.REPEAT_FOREVER);
        } else {
          for (var i = 1; i <= 6; i++) this[tools.stringFormat("AtlasLabel_Time_{0}", i)].string = "0";
          this.Enrolled.active = false;
          this.Button_Enroll.active = false;
          this.Enroll_Stop.node.active = true;
        }
      },
      enroll_btn_clicked: function enroll_btn_clicked() {
        var _this = this;
        if (false == this.Button_Enroll.active) {
          createTips("\u672c\u573a\u6bd4\u8d5b\u5df2\u7ecf\u62a5\u540d");
          return;
        }
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var msgCallback = function msgCallback(btnName) {
          if (btnName == btnName1) {
            var callback = function(data) {
              createTips("\u62a5\u540d\u6210\u529f");
              false == this.Button_Enroll.active;
              this.Enrolled.active = true;
            }.bind(_this);
            "undefined" != typeof _this.matchId && MatchManager.requestMatchEnroll(_this.matchId, callback);
          }
        };
        var msgObj = {};
        msgObj.msg = "\u5c06\u8f6c\u6362\u4f59\u989d\u4e3a\u6bd4\u8d5b\u7b79\u7801?";
        msgObj.btn1 = btnName1;
        msgObj.btn2 = btnName2;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      matchEnrollCancelClick: function matchEnrollCancelClick() {
        var _this2 = this;
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var msgCallback = function msgCallback(btnName) {
          if (btnName == btnName1) {
            var callback = function(data) {
              createTips("\u53d6\u6d88\u62a5\u540d\u6210\u529f");
              this.Enrolled.active = false;
              this.Button_Enroll.active = true;
            }.bind(_this2);
            "undefined" != typeof _this2.matchId && MatchManager.requestMatchEnrollCancel(_this2.matchId, callback);
          }
        };
        var msgObj = {};
        msgObj.msg = "\u53d6\u6d88\u6bd4\u8d5b\u7b79\u7801\u5c06\u9000\u56de\uff0c\u4f46\u62a5\u540d\u8d39\u4e0d\u9000\u56de?";
        msgObj.btn1 = btnName1;
        msgObj.btn2 = btnName2;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      doButton_Enroll_StopClick: function doButton_Enroll_StopClick() {
        this.leftTime <= 0 ? createTips("\u5df2\u7ecf\u8fc7\u4e86\u62a5\u540d\u65f6\u95f4") : createTips("\u8ddd\u79bb\u5f00\u8d5b5\u5206\u949f\u5185\u4e0d\u80fd\u62a5\u540d");
      },
      requestCurMatchInfo: function requestCurMatchInfo() {
        MatchManager.requestCurMatchInfo(function(data) {
          this.refresh_panel(data);
        }.bind(this));
      },
      onCurMatchChange: function onCurMatchChange(info) {
        dump("onCurMatchChange", info);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    LobbyBaseLayer: "LobbyBaseLayer"
  } ],
  DealTingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0196clolllB+qdPlueZvqqN", "DealTingLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        moneyLabel: cc.Label,
        editBox: cc.EditBox,
        moneySlider: cc.Slider,
        zhuangScrollView: cc.ScrollView,
        zhuangItemPrefab: cc.Prefab,
        Text_tips: cc.Label,
        Button_apply: cc.Node,
        Button_ApplyDown: cc.Node,
        disableSliderMoney: cc.Node,
        Text_MinMoney: cc.Label,
        Text_MaxMoney: cc.Label
      },
      init: function init(tableUIComponet) {
        if (!tableUIComponet) return;
        this._delegete = tableUIComponet;
      },
      showData: function showData(tableUIComponet, zhaunListInfo, isShangZhuang, money) {
        var _this = this;
        if (!tableUIComponet) return;
        this._money = tableUIComponet.tableLogic.getMinShangZhuangMoney();
        this.Text_MinMoney.getComponent("mlabel").setString(this._money, false);
        "undefined" != typeof money ? this.moneyLabel.getComponent("mlabel").setString(money, false) : this.moneyLabel.getComponent("mlabel").setString(Number(tableUIComponet.tableLogic.getMyMoney()), false);
        this.moneySliderComponent = this.moneySlider.getComponent("CommonSlider");
        if (this.isLoadedData) this.scheduleOnce(function() {
          _this.moneySlider.progress = _this._percent || 0;
          _this.moneySliderComponent.updateProgressImg(_this._percent || 0);
        }, .05); else {
          this.isLoadedData = true;
          this.editBox.getComponent("mlabel").setString(this._money, false);
          this.scheduleOnce(function() {
            var onValueChange = function onValueChange(value) {
              _this._percent = value;
              _this._money = Math.floor(_this._percent * (_this._delegete.tableLogic.getMyMoney() - _this._delegete.tableLogic.getMinShangZhuangMoney())) + _this._delegete.tableLogic.getMinShangZhuangMoney();
              _this.editBox.getComponent("mlabel").setString(_this._money, false);
            };
            _this.moneySlider.node.getComponent("CommonSlider").init(onValueChange);
          }, .05);
          var minMoney = this.Text_MinMoney.string;
          this.Text_tips.string = "\u6ce8\uff1a\u4e0a\u5e84\u91d1\u989d\u4e0d\u5c11\u4e8e " + minMoney + " ,\u6309\u4e0a\u5e84\u91d1\u5e01\u591a\u5c11\u6392\u5e8f,\n\u5f53\u4e0a\u5e84\u91d1\u989d\u4f4e\u4e8e " + minMoney + " \u65f6\u5c06\u81ea\u52a8\u4e0b\u5e84";
        }
        this.refreshShangzhaunList(zhaunListInfo, isShangZhuang);
        isShangZhuang && this.refreshShangZhuangMoney();
      },
      refreshShangzhaunList: function refreshShangzhaunList(zhaunListInfo, isShangZhuang) {
        this.refreshApplyBtn(isShangZhuang);
        var zhuanDate = [];
        for (var i = 0; i < 5; i++) "" == zhaunListInfo[i].name && 0 == zhaunListInfo[i].userID || (zhuanDate[zhuanDate.length] = zhaunListInfo[i]);
        this.zhuangScrollView.content.children.forEach(function(node) {
          node.destroy();
        });
        var compare = function compare(obj1, obj2) {
          var val1 = obj1.shangzhuangMoney;
          var val2 = obj2.shangzhuangMoney;
          return val1 < val2 ? 1 : val1 > val2 ? -1 : 0;
        };
        var sortArr = zhuanDate.sort(compare);
        zhuanDate = sortArr;
        for (var _i = 0; _i < zhuanDate.length; _i++) {
          var zhuangNode = cc.instantiate(this.zhuangItemPrefab);
          this.zhuangScrollView.content.addChild(zhuangNode);
          zhuanDate[_i].ranking = "\u7b2c" + String(_i + 1) + "\u540d";
          zhuangNode.x = 0;
          zhuangNode.getComponent("item_deal_ting").setData(zhuanDate[_i]);
          if (zhuanDate[_i].userID == this._delegete.tableLogic.getMyID()) {
            this.editBox.getComponent("mlabel").setString(zhuanDate[_i].shangzhuangMoney, true);
            this._money = zhuanDate[_i].shangzhuangMoney;
            this._percent = (zhuanDate[_i].shangzhuangMoney - this._delegete.tableLogic.getMinShangZhuangMoney()) / (this._delegete.tableLogic.getMyMoney() - this._delegete.tableLogic.getMinShangZhuangMoney());
            var moneySliderComponent = this.moneySlider.getComponent("CommonSlider");
            moneySliderComponent.updateProgressImg(this._percent);
            this.moneySlider.progress = this._percent;
          }
        }
        var curBanker = this._delegete.tableLogic.getBanekrInfo();
        if (curBanker && curBanker.userID == this._delegete.tableLogic.getMyID()) {
          var curBankerShangZhuangMoney = curBanker.shangzhuangMoney;
          this.editBox.getComponent("mlabel").setString(curBankerShangZhuangMoney, true);
          this._money = curBankerShangZhuangMoney;
          this._percent = (curBankerShangZhuangMoney - this._delegete.tableLogic.getMinShangZhuangMoney()) / (this._delegete.tableLogic.getMyMoney() - this._delegete.tableLogic.getMinShangZhuangMoney());
          var moneySliderComponent = this.moneySlider.getComponent("CommonSlider");
          moneySliderComponent.updateProgressImg(this._percent);
          this.moneySlider.progress = this._percent;
        }
      },
      refreshApplyBtn: function refreshApplyBtn(isShangZhuang) {
        if (!this._delegete) return;
        if (isShangZhuang) {
          this.Button_apply.active = true;
          this.Button_apply.getComponent(cc.Button).interactable = true;
          this.Button_ApplyDown.active = false;
          this.Button_ApplyDown.getComponent(cc.Button).interactable = true;
          this.moneySlider.node.getChildByName("Handle").getComponent(cc.Button).interactable = true;
          this.disableSliderMoney.active = false;
        } else {
          this.Button_ApplyDown.active = true;
          this.Button_apply.active = false;
          this.Button_apply.getComponent(cc.Button).interactable = false;
          this.moneySlider.node.getChildByName("Handle").getComponent(cc.Button).interactable = false;
          this.disableSliderMoney.active = true;
        }
        this._money < this._delegete.tableLogic.getMinShangZhuangMoney() || this._money >= this._delegete.tableLogic.getMyMoney() - (this._delegete.tableLogic.getMinShangZhuangMoney() + 100);
        if (this._delegete.tableLogic.getMyMoney() < this._delegete.tableLogic.getMinShangZhuangMoney()) {
          this.moneySlider.node.getChildByName("Handle").getComponent(cc.Button).interactable = false;
          this.disableSliderMoney.active = true;
          this.Button_apply.active = true;
          this.Button_apply.getComponent(cc.Button).interactable = true;
          this.Button_ApplyDown.getComponent(cc.Button).interactable = false;
        }
      },
      refreshShangZhuangMoney: function refreshShangZhuangMoney() {
        if (!this._delegete) return;
        if (this._delegete.tableLogic.getMyMoney() < this._delegete.tableLogic.getMinShangZhuangMoney()) this.disableSliderMoney.active = true; else {
          this.disableSliderMoney.active = false;
          this._money = this._delegete.tableLogic.getMinShangZhuangMoney();
          this.editBox.getComponent("mlabel").setString(this._money, false);
          this.moneySlider.progress = 0;
        }
      },
      refreshButtonXiaZhuang: function refreshButtonXiaZhuang(isEnabled) {
        this.Button_ApplyDown.getComponent(cc.Button).interactable = isEnabled;
      },
      doButtonApplyCilck: function doButtonApplyCilck() {
        if (!this._delegete) return;
        if (this._money < this._delegete.tableLogic.getMinShangZhuangMoney()) {
          var str = "\u4e0a\u5e84\u91d1\u5e01\u5fc5\u987b\u5927\u4e8e" + this._delegete.tableLogic.getMinShangZhuangMoney() + "\uff01";
          createTips(str);
          return;
        }
        if (this._money > this._delegete.tableLogic.getMyMoney()) {
          createTips("\u4e0a\u5e84\u91d1\u5e01\u4e0d\u80fd\u5927\u4e8e\u6211\u7684\u91d1\u5e01");
          return;
        }
        this._delegete && this._delegete.sendApplyorLeaveDate(this._money);
      },
      doButtonApplyDownClick: function doButtonApplyDownClick(sender) {
        this._delegete && this._delegete.sendApplyorLeaveDate(0);
      },
      refreshApplyBtnState: function refreshApplyBtnState(isCanApply, isCanLeaveBaner) {
        isCanApply || isCanApply || isCanLeaveBaner || this.refreshApplyBtn(false);
      },
      onUpdateDeskUser: function onUpdateDeskUser(user) {},
      onHideView: function onHideView() {
        this.node.active = false;
      },
      onLoad: function onLoad() {
        this.isLoadedData = false;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  DemoTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9ff091S2PJHIbBldLOmPntO", "DemoTest");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TestReslutType;
    (function(TestReslutType) {
      TestReslutType[TestReslutType["\u5c0f\u7ed3\u7b97"] = 0] = "\u5c0f\u7ed3\u7b97";
      TestReslutType[TestReslutType["\u95ef\u5173\u7ed3\u7b97"] = 1] = "\u95ef\u5173\u7ed3\u7b97";
    })(TestReslutType || (TestReslutType = {}));
    cc.Enum(TestReslutType);
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.text = "hello";
        _this.mjSpriteAlt = null;
        _this._testType = TestReslutType.\u5c0f\u7ed3\u7b97;
        return _this;
      }
      Object.defineProperty(NewClass.prototype, "testType", {
        get: function() {
          return this._testType;
        },
        set: function(v) {},
        enumerable: false,
        configurable: true
      });
      NewClass.prototype.onLoad = function() {
        globalThis.GameEvent || (globalThis.GameEvent = new cc.EventTarget());
      };
      NewClass.prototype.resetSize = function(cav) {
        var canvas = cc.Canvas.instance;
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          canvas.fitHeight = true;
          canvas.fitWidth = false;
          console.log("TableUI \u9002\u914d \u957f\u5c4f \u56fa\u5b9a\u9ad8\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        } else {
          canvas.fitWidth = true;
          canvas.fitHeight = false;
          console.log("TableUI \u9002\u914d \u77ed\u5c4f \u56fa\u5b9a\u5bbd\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        }
      };
      NewClass.prototype.start = function() {
        var url = "https://ouwan.hmzb.top/uploads/62342a1b65bda.png";
        url = "http://ouwan.hmzb.top/head/man/1485.jpg";
        url = "https://ouwan.hmzb.top/head/man/test.png";
        var sp = this.node.getChildByName("icon");
        cc.loader.load({
          url: url,
          type: "png"
        }, function(err, res) {
          if (err) {
            console.error("load remote spriteframe res failed url:" + url, err.message, err.stack);
            return;
          }
          var sf = new cc.SpriteFrame(res);
          sp && cc.isValid(sp) && (sp.getComponent(cc.Sprite).spriteFrame = sf);
        });
        this.resetSize(this.node);
        this.testGameEndResult();
      };
      NewClass.prototype.testCheckPointResult = function() {
        var MATCH_RESULT_TEST = [ '{"userID":123127,"checkPointNum":3,"bAgain":0,"score":8}' ];
        var GAME_RESULT_TEST = [ '{"isReplay":false,"mySeatNo":0,"resultType":1,"isGoldRoom":true,"isBarrierMatchRoom":true,"byMJCardType":0,"playsData":[{"userID":123127,"name":"jzt006","avatar":"https://ouwan.hmzb.top/head/man/1413.jpg","score":0.01,"isBanker":false,"byHuMode":255,"resultType":1,"handCards":[2,2,3,3,3,4,4,4,5,6,7,8,32,32],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":14,"byPs":3,"byHuDouble":[3,255,255,255],"iFanCount":2,"iHuFen":2,"bycountGangFen":-1,"iJiZhuangTimes":1,"byMJCardType":0},{"userID":120719,"name":"\u62b9\u4e0d\u6389\u7684\u75d5\u8ff9","avatar":"https://ouwan.hmzb.top/head/man/1146.jpg","score":-0.01,"isBanker":true,"byHuMode":255,"resultType":2,"handCards":[5,6,7,7,8,9,9],"ChiCards":[],"pengCards":[31],"gangCards":[34],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":7,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":-2,"bycountGangFen":1,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":2,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":2,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0}]}' ];
        var MATCH_CONFIG_TEST = [ '{"passNum":"3","config":[{"levelID":1,"score":32,"cost":10000,"award":0},{"levelID":2,"score":32,"cost":20000,"award":0},{"levelID":3,"score":32,"cost":30000,"award":0},{"levelID":4,"score":32,"cost":40000,"award":0},{"levelID":5,"score":32,"cost":50000,"award":0},{"levelID":6,"score":32,"cost":60000,"award":0},{"levelID":7,"score":32,"cost":70000,"award":300}]}' ];
        var matchResultInfo = JSON.parse(MATCH_RESULT_TEST[0]);
        var gameResultInfo = JSON.parse(GAME_RESULT_TEST[0]);
        var chekcPointInfo = JSON.parse(MATCH_CONFIG_TEST[0]);
        var node = this.node.getChildByName("MatchCheckPointResultLayer");
        node.active = true;
        node.getComponent("MatchCheckPointResultLayer").init("", matchResultInfo, gameResultInfo, chekcPointInfo);
      };
      NewClass.prototype.testGameEndResult = function() {
        var myInfo = {
          userID: 123127
        };
        globalThis.UserInfoManager.setMyInfo(myInfo);
        var GAME_RESULT_TEST = [ '{"isReplay":false,"mySeatNo":0,"resultType":0,"isGoldRoom":true,"isBarrierMatchRoom":false,"byMJCardType":0,"playsData":[{"userID":123127,"name":"jzt006","avatar":"https://ouwan.hmzb.top/head/man/1413.jpg","score":0,"isBanker":true,"byHuMode":255,"resultType":0,"handCards":[1,2,3,3,5,6,9,31,32,32,33,33,35],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":13,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":117511,"name":"\u83ab\u7b49\u95f2\u5931\u4e86\u7231","avatar":"https://ouwan.hmzb.top/head/woman/1001712.jpg","score":0,"isBanker":false,"byHuMode":255,"resultType":0,"handCards":[3,4,4,5,6,6,7,8,8,9],"ChiCards":[],"pengCards":[37],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":10,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":0,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":0,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0}]}', '{"isReplay":false,"mySeatNo":0,"resultType":1,"rewardGiftCard":10,"isGoldRoom":true,"isBarrierMatchRoom":true,"byMJCardType":0,"playsData":[{"userID":123127,"name":"jzt006","avatar":"https://ouwan.hmzb.top/head/man/1413.jpg","score":0.01,"isBanker":false,"byHuMode":255,"resultType":1,"handCards":[2,2,3,3,3,4,4,4,5,6,7,8,32,32],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":14,"byPs":3,"byHuDouble":[3,255,255,255],"iFanCount":2,"iHuFen":2,"bycountGangFen":-1,"iJiZhuangTimes":1,"byMJCardType":0},{"userID":120719,"name":"\u62b9\u4e0d\u6389\u7684\u75d5\u8ff9","avatar":"https://ouwan.hmzb.top/head/man/1146.jpg","score":-0.01,"isBanker":true,"byHuMode":255,"resultType":2,"handCards":[5,6,7,7,8,9,9],"ChiCards":[],"pengCards":[31],"gangCards":[34],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":7,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":-2,"bycountGangFen":1,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":2,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0},{"userID":0,"name":"","score":0,"isBanker":false,"byHuMode":255,"resultType":2,"handCards":[],"ChiCards":[],"pengCards":[],"gangCards":[],"anGangCards":[],"gangCount":0,"buGangCount":0,"anGangCount":0,"handCardCount":0,"byPs":255,"byHuDouble":[255,255,255,255],"iFanCount":0,"iHuFen":0,"bycountGangFen":0,"iJiZhuangTimes":255,"byMJCardType":0}]}' ];
        var gameResultInfo = JSON.parse(GAME_RESULT_TEST[1]);
        var node = this.node.getChildByName("gameOver");
        node.active = true;
        node.getComponent("HZMJ_GameOver").show(gameResultInfo);
      };
      __decorate([ property(cc.Label) ], NewClass.prototype, "label", void 0);
      __decorate([ property ], NewClass.prototype, "text", void 0);
      __decorate([ property(cc.SpriteAtlas) ], NewClass.prototype, "mjSpriteAlt", void 0);
      __decorate([ property({
        type: TestReslutType
      }) ], NewClass.prototype, "testType", null);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {} ],
  DismissRoomLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "635b7ikrHZMN7/GWT72u5lk", "DismissRoomLayer");
    "use strict";
    var DismissType = {
      DISMISS_TYPE_DEFAULT: 0,
      DISMISS_TYPE_AGREE: 1,
      DISMISS_TYPE_DISAGREE: 2
    };
    var CALLBACK = null;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Image_Bg_Main: cc.Node,
        AtlasLabel_Time: cc.Node,
        Button_Agree: cc.Node,
        Button_Refuse: cc.Node,
        ListView_User: cc.Node,
        Panel_User: cc.Node
      },
      init: function init(info, removeCallback) {
        cc.winSize.width / 1280 < 1 && this.node.setScale(cc.winSize.width / 1280);
        this.info = info;
        CALLBACK = removeCallback;
        this.initUI();
      },
      initUI: function initUI() {
        this.initUIVisible();
        this.initUIData();
        this.initUIEventListener();
      },
      initUIVisible: function initUIVisible() {
        this.Button_Agree.active = false;
        this.Button_Refuse.active = false;
      },
      initUIData: function initUIData() {
        this.initCountTime();
        this.initTips();
        this.initUserListView();
      },
      initTips: function initTips() {},
      initCountTime: function initCountTime() {
        var time = this.info.time || this.info.cfgTime;
        this.AtlasLabel_Time.getComponent(cc.Label).string = "";
        var countDown = function() {
          time -= 1;
          if (time <= 0) {
            time = 0;
            this.unschedule(countDown);
            this.removeLayer();
          }
          var minute = Math.floor(time / 60);
          var left = time % 60;
          var minStr = minute;
          var leftStr = left;
          if (minStr <= 0) var TimeStr = "\u5728" + leftStr + "\u79d2\u540e\u5c06\u81ea\u52a8\u540c\u610f"; else var TimeStr = "\u5728" + minStr + "\u5206" + leftStr + "\u79d2\u540e\u5c06\u81ea\u52a8\u540c\u610f";
          this.AtlasLabel_Time.getComponent(cc.Label).string = TimeStr;
        }.bind(this);
        this.schedule(countDown, 1);
      },
      initUserListView: function initUserListView() {
        var sortfunc = function(userA, userB) {
          if (userA.deskStation == this.info.myDeskStation) return 1;
          if (userA.dismissType < userB.dismissType) return 1;
          return -1;
        }.bind(this);
        var userList = cloneObject(this.info.userList);
        var userArray = objectGetArr(userList);
        userArray = userArray.sort(sortfunc);
        var onAddUserCallback = function(listView, item, data, pos) {
          item.active = true;
          var Text_Name = item.getChildByName("Text_Name");
          var Image_Status = item.getChildByName("Image_Status");
          Text_Name.getComponent(cc.Label).string = data.name;
          if (data.dismissType == DismissType.DISMISS_TYPE_AGREE) {
            data.deskStation == this.info.deskStation ? Image_Status.loadTexture("lobby/ui/DismissRoom/img_apply") : Image_Status.loadTexture("lobby/ui/DismissRoom/img_agree");
            this.Button_Agree.active = false;
            this.Button_Refuse.active = false;
          } else if (data.dismissType == DismissType.DISMISS_TYPE_DEFAULT) {
            Image_Status.loadTexture("lobby/ui/DismissRoom/img_wait");
            if (data.deskStation == this.info.myDeskStation) {
              this.Button_Agree.active = true;
              this.Button_Refuse.active = true;
            }
          } else Image_Status.loadTexture("lobby/ui/DismissRoom/img_wait");
        }.bind(this);
        var keys = Object.keys(this.info.userList);
        var userCount = keys.length;
        userCount > 6;
        F_InitListView(userArray, onAddUserCallback, this.ListView_User, this.Panel_User, 1);
      },
      initUIEventListener: function initUIEventListener() {
        this.Button_Agree.on(cc.Node.EventType.TOUCH_END, this.doButtonAgreeClick.bind(this));
        this.Button_Refuse.on(cc.Node.EventType.TOUCH_END, this.doButtonRefuseClick.bind(this));
      },
      doButtonAgreeClick: function doButtonAgreeClick() {
        this.doCallback(true);
      },
      doButtonRefuseClick: function doButtonRefuseClick() {
        this.doCallback(false);
      },
      doCallback: function doCallback(isAgree) {
        this.info && this.info.callback && this.info.callback(isAgree);
      },
      updateLayer: function updateLayer(info) {
        this.info = info;
        this.initUserListView();
      },
      removeLayer: function removeLayer() {
        this.node.destroy();
        this.node.parent = null;
      },
      removeLayerEx: function removeLayerEx() {
        this.removeFromParent();
      },
      onDestroy: function onDestroy() {
        if (CALLBACK) {
          CALLBACK();
          CALLBACK = null;
        }
      },
      onLoad: function onLoad() {
        this._super();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  DuanWeiAward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d29dQfv1NPUIfN1Xs8tjKW", "DuanWeiAward");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        panel_award: cc.ScrollView,
        prefab_award: cc.Prefab
      },
      init: function init() {
        this.panleAwardContent = this.panel_award.content;
      },
      onAwardRecord: function onAwardRecord() {
        var layerName = "prefab/Qualifying/HisRecord";
        this.simpleAddLayer(layerName, null, null, null, null, this.node);
      },
      onEnable: function onEnable() {
        var _this = this;
        MatchManager.getDuanWeiAwardList(function(rankList) {
          _this.panleAwardContent.children.forEach(function(node) {
            node.destroy();
          });
          for (var i = 0; i < rankList.length; i++) {
            var matchRank = cc.instantiate(_this.prefab_award);
            _this.panleAwardContent.addChild(matchRank);
            matchRank.getComponent("Item_DuanWei_Award").setData(rankList[i]);
          }
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  DuanWeiRank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a58bqa+o1Gsp0smbdqNUOJ", "DuanWeiRank");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        panel_rank: cc.ScrollView,
        prefab_rank: cc.Prefab
      },
      init: function init() {
        this.panleRankContent = this.panel_rank.content;
      },
      start: function start() {},
      onEnable: function onEnable() {
        var _this = this;
        MatchManager.requestMatchRankRankList(function(rankList) {
          _this.panleRankContent.children.forEach(function(node) {
            node.destroy();
          });
          for (var i = 0; i < rankList.length; i++) {
            var matchRank = cc.instantiate(_this.prefab_rank);
            _this.panleRankContent.addChild(matchRank);
            matchRank.getComponent("Item_DuanWei_Rank").setData(rankList[i], i + 1);
          }
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  DuanWeiRewardLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8bb44iq8sRAfYIFR01p0uU3", "DuanWeiRewardLayer");
    "use strict";
    var TYPE_DETAIL = 1;
    var TYPE_RULE = 2;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        rewardImages: [ cc.SpriteFrame ],
        Button_Rule: cc.Button,
        Button_Detail: cc.Button,
        Image_Rule: cc.Node,
        Panel_Detail: cc.Node,
        ListView_Reward: cc.ScrollView,
        Panel_Reward: cc.Node
      },
      init: function init() {
        this.selectedButtonType = TYPE_DETAIL;
        for (var i = 1; i <= 7; i++) {
          this[tools.stringFormat("Text_{0}", i)] = this.Panel_Detail.getChildByName(tools.stringFormat("Text_{0}", i)).getComponent(cc.Label);
          this[tools.stringFormat("Text_{0}", i)].node.active = false;
        }
        this.Panel_Reward.active = false;
        this.Panel_Detail.active = false;
        this.Image_Rule.active = false;
        this.initSelectedButton();
        this.requestRewardInfo();
      },
      initSelectedButton: function initSelectedButton() {
        cc.log(this.selectedButtonType == TYPE_DETAIL);
        cc.log(this.selectedButtonType == TYPE_RULE);
        this.Button_Rule.interactable = !(this.selectedButtonType == TYPE_RULE);
        this.Button_Detail.interactable = !(this.selectedButtonType == TYPE_DETAIL);
        this.Image_Rule.active = this.selectedButtonType == TYPE_RULE;
        this.Panel_Detail.active = this.selectedButtonType == TYPE_DETAIL;
        if (this.selectedButtonType == TYPE_DETAIL) {
          for (var i = 1; i <= 7; i++) this[tools.stringFormat("Text_{0}", i)].node.active = true;
          this[tools.stringFormat("Text_{0}", 2)].string = tools.stringFormat("\u6bd4\u8d5b\u7c7b\u578b\uff1a{0}", "\u6392\u4f4d\u8d5b");
          "" == window.rankInfoData.startTime ? this[tools.stringFormat("Text_{0}", 3)].string = "\u6bd4\u8d5b\u65f6\u95f4\uff1a\u65e0" : this[tools.stringFormat("Text_{0}", 3)].string = tools.stringFormat("\n \u5f00\u59cb\u65f6\u95f4\uff1a{0}\n \u7ed3\u675f\u65f6\u95f4\uff1a{1}", window.rankInfoData.startTime, window.rankInfoData.endTime);
          this[tools.stringFormat("Text_{0}", 7)].node.active = false;
        }
      },
      initRewardListView: function initRewardListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Image_Rank = item.getChildByName("Image_Rank");
          var Text_Rank = item.getChildByName("Text_Rank").getComponent(cc.Label);
          var AtlasLabel_Gold = item.getChildByName("AtlasLabel_Gold").getComponent(cc.Label);
          Image_Rank.getComponent(cc.Sprite).spriteFrame = this.rewardImages[parseInt(data.level / 5)];
          AtlasLabel_Gold.string = data.award;
          Text_Rank.string = data.remark + "";
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Reward, this.Panel_Reward, 1);
      },
      requestRewardInfo: function requestRewardInfo() {
        var callback = function(dataList) {
          this.initRewardListView(dataList);
        }.bind(this);
        MatchManager.getDuanWeiAwardList(callback);
      },
      doButton_DetailClick: function doButton_DetailClick() {
        if (this.selectedButtonType == TYPE_DETAIL) return;
        this.selectedButtonType = TYPE_DETAIL;
        this.initSelectedButton();
      },
      doButton_RuleClick: function doButton_RuleClick() {
        if (this.selectedButtonType == TYPE_RULE) return;
        this.selectedButtonType = TYPE_RULE;
        this.initSelectedButton();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  EmailFujian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "239b6jTnS5DyZjMOObj7Yw5", "EmailFujian");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        numLabel: cc.Label,
        gold: cc.Node,
        zuan: cc.Node,
        lingqu: cc.Node
      },
      init: function init(data, isReceived) {
        cc.log(data);
        if (2 == data.goodsType) {
          this.numLabel.string = "\u94bb\u77f3x" + data.goodsNums;
          this.zuan.active = true;
          this.gold.active = false;
        } else if (1 == data.goodsType) {
          this.numLabel.string = "\u91d1\u5e01x" + data.goodsNums;
          this.gold.active = true;
          this.zuan.active = false;
        }
        0 == isReceived ? this.lingqu.active = false : 1 == isReceived && (this.lingqu.active = true);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  EmailItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d80cf8aW/lB37bbl3/owq7g", "EmailItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        WeiDuSprite: cc.Node,
        YiDuSprite: cc.Node,
        nameLabel: cc.Label,
        fromLabel: cc.Label,
        timeLabel: cc.Label,
        GouSprite: cc.Node,
        EmailMsgLayer: cc.Prefab
      },
      onLoad: function onLoad() {},
      start: function start() {},
      init: function init(data, layer) {
        cc.log(data);
        this.data = data;
        this.layer = layer;
        if (0 == data.isRead || 0 == data.isReceived) {
          this.WeiDuSprite.active = true;
          this.YiDuSprite.active = false;
        } else {
          this.WeiDuSprite.active = false;
          this.YiDuSprite.active = true;
        }
        this.nameLabel.string = data.title;
        data.mailType && 1014 == data.mailType && (this.fromLabel.string = "\u6765\u6e90\uff1a\u4e2a\u4eba\u90ae\u4ef6");
        var date = new Date(1e3 * data.sendtime);
        var Y = date.getFullYear() + "";
        var M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "";
        var D = (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) + "";
        this.timeLabel.string = Y + "/" + M + "/" + D;
      },
      onButton: function onButton() {
        var GouSprite = this.layer.getChildByName("Panel_Bottom").getChildByName("XuanLabel").getChildByName("GouSprite");
        cc.log(this.data);
        if (0 == this.data.isRead) {
          createTips("\u8be5\u90ae\u4ef6\u672a\u8bfb\u6216\u6709\u9644\u4ef6\u672a\u9886\u53d6");
          this.GouSprite.active = false;
        } else if (true == this.GouSprite.active) {
          this.GouSprite.active = false;
          GouSprite.active = false;
        } else {
          this.GouSprite.active = true;
          var children = this.layer.getChildByName("New ScrollView").getChildByName("view").getChildByName("content").children;
          for (var i = 0; i < children.length; i++) {
            if (false == children[i].getChildByName("GouSprite").active) {
              GouSprite.active = false;
              break;
            }
            GouSprite.active = true;
          }
        }
      },
      onButton_xuanze: function onButton_xuanze(num) {
        0 == num ? 0 == this.data.isRead ? this.GouSprite.active = false : this.GouSprite.active = true : this.GouSprite.active = false;
      },
      onEmailID: function onEmailID() {
        return this.data.emailID;
      },
      onZhanKai: function onZhanKai() {
        var _this = this;
        this.WeiDuSprite.active = false;
        this.YiDuSprite.active = true;
        this.data.isRead = 1;
        this.MailLogic = new (require("MailLogic"))();
        var callback = function callback(mailInfo) {
          var item = cc.instantiate(_this.EmailMsgLayer);
          var script = item.getComponent("EmailMsgLayer");
          script.init(mailInfo, _this.data.title, _this.data.isReceived);
          _this.layer.addChild(item);
        };
        this.MailLogic.requestMailInfo(this.data.mailID, callback);
      }
    });
    cc._RF.pop();
  }, {
    MailLogic: "MailLogic"
  } ],
  EmailLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18e9ekq+xZNOIT3Ds84ja0D", "EmailLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        EmailView: cc.Node,
        EmailItem: cc.Prefab,
        noSprite: cc.Node,
        Panel_Buttom: cc.Node,
        GouSprite: cc.Node,
        Panel_Top: cc.Node,
        Panel_NeiRong: cc.Node
      },
      onLoad: function onLoad() {
        if (cc.winSize.width / 1280 < 1) {
          this.Panel_Top.setScale(cc.winSize.width / 1280);
          this.Panel_Buttom.setScale(cc.winSize.width / 1280);
          this.Panel_NeiRong.setScale(cc.winSize.width / 1280);
        }
        this.MailManager = new (require("MailManager"))();
        this.MailLogic = new (require("MailLogic"))();
        this.initUIData();
        this.AllmailList = [];
      },
      start: function start() {},
      initUIData: function initUIData() {
        var _this = this;
        var callback = function callback(mailList) {
          if (mailList.length > 0) for (var i = 0; i < mailList.length; i++) {
            var item = cc.instantiate(_this.EmailItem);
            var script = item.getComponent("EmailItem");
            script.init(mailList[i], _this.node);
            _this.EmailView.addChild(item);
          } else {
            _this.noSprite.active = true;
            _this.Panel_Buttom.active = false;
          }
        };
        this.MailLogic.requestMailList(callback);
      },
      doButton_All: function doButton_All() {
        for (var i = 0; i < this.EmailView.children.length; i++) true == this.GouSprite.active ? this.EmailView.children[i].getComponent("EmailItem").onButton_xuanze(1) : this.EmailView.children[i].getComponent("EmailItem").onButton_xuanze(0);
        if (true == this.GouSprite.active) {
          this.GouSprite.active = false;
          this.AllmailList = [];
        } else this.GouSprite.active = true;
      },
      doButton_DelClick: function doButton_DelClick() {
        for (var j = 0; j < this.EmailView.children.length; j++) if (true == this.EmailView.children[j].getChildByName("GouSprite").active) {
          this.AllmailList.push(this.EmailView.children[j].getComponent("EmailItem").onEmailID());
          this.EmailView.children[j].destroy();
          cc.log(this.EmailView.children);
        }
        var isDel = false;
        for (var i = 0; i < this.AllmailList.length; i++) {
          var callback = function callback() {
            createTips("\u5220\u9664\u6210\u529f");
          };
          isDel = true;
          this.MailLogic.requestDelMail(this.AllmailList[i], callback);
        }
        false == isDel && createTips("\u6ca1\u6709\u53ef\u4ee5\u5220\u9664\u7684\u90ae\u4ef6");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    MailLogic: "MailLogic",
    MailManager: "MailManager"
  } ],
  EmailMsgLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "178c5KChHBC5KkKFZaE1S9a", "EmailMsgLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        titleLabel: cc.Label,
        neirongLabel: cc.Label,
        buttonLabel: cc.Label,
        item: cc.Node,
        EmailFujian: cc.Prefab,
        EmailReward: cc.Prefab,
        RewardCeng: cc.Node
      },
      start: function start() {},
      init: function init(data, title, isReceived) {
        cc.log(data);
        this.mailID = data.mailID;
        this.titleLabel.string = title;
        this.neirongLabel.string = data.content;
        this.buttonLabel.string = 0 == isReceived ? "\u4e00\u952e\u9886\u53d6" : "\u786e  \u5b9a";
        this.Emailfujian(data.goodsList, isReceived);
      },
      Emailfujian: function Emailfujian(data, isReceived) {
        cc.log(data);
        this.data = data;
        for (var i = 0; i < data.length; i++) {
          var item = cc.instantiate(this.EmailFujian);
          var script = item.getComponent("EmailFujian");
          script.init(data[i], isReceived);
          this.item.addChild(item);
          var Reward = cc.instantiate(this.EmailReward);
          this.Reward = Reward;
          var Rewardscript = this.Reward.getComponent("RewardNode");
          Rewardscript.init(data[i]);
          this.RewardCeng.addChild(this.Reward);
        }
      },
      doButtonSure: function doButtonSure() {
        var _this = this;
        if ("\u4e00\u952e\u9886\u53d6" == this.buttonLabel.string) {
          this.MailLogic = new (require("MailLogic"))();
          var callback = function callback(result) {
            if (result) {
              _this.item.removeAllChildren();
              _this.RewardCeng.active = true;
              for (var i = 0; i < _this.RewardCeng.children.length; i++) _this.RewardCeng.children[i].active = true;
              _this.buttonLabel.string = "\u4e00\u952e\u9886\u53d6";
              for (var _i = 0; _i < _this.data.length; _i++) {
                var item = cc.instantiate(_this.EmailFujian);
                var script = item.getComponent("EmailFujian");
                script.init(_this.data[_i], 1);
                _this.item.addChild(item);
              }
            }
          };
          this.MailLogic.requestTakeReward(this.mailID, callback);
        } else "\u786e  \u5b9a" == this.buttonLabel.string && this.onCloseBtn();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    MailLogic: "MailLogic"
  } ],
  EventEmiter: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "187aekQhyVKz4QDnssX7rvU", "EventEmiter");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameEvent = exports.GlobalEvent = exports.EventEmitter = void 0;
    var EventEmitter = function() {
      function EventEmitter() {
        this._handlers = {};
      }
      EventEmitter.prototype.on = function(eventName, handler, target) {
        var objHandler = {
          handler: handler,
          target: target
        };
        var handlerList = this._handlers[eventName];
        if (!handlerList) {
          handlerList = [];
          this._handlers[eventName] = handlerList;
        }
        var index = handlerList.findIndex(function(v) {
          return v.handler === handler && (!target || target === v.target);
        });
        if (index >= 0) {
          console.warn("EventEmitter repeate on EventName:" + eventName + " ", handler, target);
          return;
        }
        for (var i = 0; i < handlerList.length; i++) if (!handlerList[i]) {
          handlerList[i] = objHandler;
          return i;
        }
        handlerList.push(objHandler);
        return handlerList.length;
      };
      EventEmitter.prototype.off = function(eventName, handler, target) {
        var handlerList = this._handlers[eventName];
        if (!handlerList) return;
        for (var i = 0; i < handlerList.length; i++) {
          var oldObj = handlerList[i];
          if (oldObj.handler === handler && (!target || target === oldObj.target)) {
            handlerList.splice(i, 1);
            break;
          }
        }
      };
      EventEmitter.prototype.remove = function(eventName) {
        var handlerList = this._handlers[eventName];
        handlerList && (this._handlers[eventName] = []);
      };
      EventEmitter.prototype.emit = function(eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
        var handlerList = this._handlers[eventName];
        var args1 = [];
        var i;
        for (i = 1; i < arguments.length; i++) args1.push(arguments[i]);
        if (!handlerList) return;
        for (i = 0; i < handlerList.length; i++) {
          var objHandler = handlerList[i];
          objHandler.handler && objHandler.handler.apply(objHandler.target, args1);
        }
      };
      return EventEmitter;
    }();
    exports.EventEmitter = EventEmitter;
    var GlobalEvent = function(_super) {
      __extends(GlobalEvent, _super);
      function GlobalEvent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(GlobalEvent, "instance", {
        get: function() {
          if (this._instance) return this._instance;
          this._instance = new GlobalEvent();
          return this._instance;
        },
        enumerable: false,
        configurable: true
      });
      return GlobalEvent;
    }(EventEmitter);
    exports.GlobalEvent = GlobalEvent;
    var GameEvent = function(_super) {
      __extends(GameEvent, _super);
      function GameEvent() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(GameEvent, "instance", {
        get: function() {
          if (this._instance) return this._instance;
          this._instance = new GameEvent();
          return this._instance;
        },
        enumerable: false,
        configurable: true
      });
      return GameEvent;
    }(EventEmitter);
    exports.GameEvent = GameEvent;
    cc._RF.pop();
  }, {} ],
  FeedKeFuNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1a0aQ0ozdLOIsXDHxxSpuT", "FeedKeFuNode");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        annimetions: cc.Node
      },
      onLoad: function onLoad() {},
      start: function start() {},
      doButton_Feed: function doButton_Feed(event, param) {
        param;
      },
      doButton_Dragonex: function doButton_Dragonex() {
        cc.sys.openURL("https://dragonex.co/zh-hans/open");
      },
      doButton_download: function doButton_download() {
        cc.sys.openURL("https://dragonex.co/zh-hans/open");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  FeedLayer_width: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0eeecSleGpJeaC7jU9TAaR7", "FeedLayer_width");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Panel_Lift: cc.Node,
        kefuNode: cc.Node,
        lishiNode: cc.Node,
        lishiBtn: cc.Node,
        fankuiBtn: cc.Node,
        TipLabel: cc.Label,
        EditBox: cc.EditBox,
        itemScrl: cc.Node,
        item_1: cc.Prefab
      },
      onLoad: function onLoad() {
        var _this = this;
        this.FeedbackLogic = new (require("FeedbackLogic"))();
        this.FeedbackManager = new (require("FeedbackManager"))();
        var getMyFeedbackCallback = function getMyFeedbackCallback(list) {
          for (var i = 0; i < list.length; i++) if (3 != list[i].read_type) {
            _this.doButton_LiShi();
            break;
          }
        };
        this.FeedbackLogic.getMyFeedback(getMyFeedbackCallback);
      },
      init: function init() {},
      start: function start() {
        this.Feedback_Type = 1;
      },
      doButton_LiShi: function doButton_LiShi() {
        var _this2 = this;
        this.lishiNode.active = true;
        this.kefuNode.active = false;
        this.lishiBtn.active = true;
        this.fankuiBtn.active = false;
        for (var z = 0; z < this.itemScrl.children.length; z++) {
          this.itemScrl.removeChild(this.itemScrl.children[z]);
          z--;
        }
        var getMyFeedbackCallback = function getMyFeedbackCallback(list) {
          var id = 0;
          for (var i = 0; i < list.length; i++) if ("" != list[i].id) {
            var item = cc.instantiate(_this2.item_1);
            item.children[0].children[2]._components[0].string = list[i].content;
            item.children[0].children[3]._components[0].string = F_GetDateStringByTime(list[i].f_time);
            if (list[i].read_type > 1) {
              item.children[2].active = true;
              item.children[3].active = true;
              item.children[0].children[1].active = false;
            }
            _this2.itemScrl.addChild(item);
            item.children[0]._components[0].clickEvents[0].customEventData = list[i].id;
            id = item.children[0]._components[0].clickEvents[0].customEventData;
            var KeFuItem = item.getComponent("KeFuItem");
            KeFuItem.init(id, list[i].read_type, _this2.node.parent);
          }
        };
        this.FeedbackLogic.getMyFeedback(getMyFeedbackCallback);
      },
      doButton_FanKui: function doButton_FanKui() {
        this.lishiBtn.active = false;
        this.fankuiBtn.active = true;
        this.kefuNode.active = true;
        this.lishiNode.active = false;
      },
      onMenuButton: function onMenuButton(event, param) {
        this.Feedback_Type = param;
      },
      FeedbackEditChanged: function FeedbackEditChanged() {
        var zhuyi = 90 - this.EditBox.string.length;
        this.TipLabel.string = "\u6ce8:\u4f60\u8fd8\u53ef\u4ee5\u8f93\u5165" + zhuyi + "\u5b57";
      },
      doButtonFinishClick: function doButtonFinishClick() {
        var _this3 = this;
        var FeedbackLogic = new (require("FeedbackLogic"))();
        if ("" == this.EditBox.string) return createTips("\u8bf7\u8be6\u7ec6\u63cf\u8ff0\u4f60\u9047\u5230\u7684\u95ee\u9898\uff0c\u5305\u62ec\u4f60\u7684\u7528\u6237ID\u548c\u65f6\u95f4\u3002\u6700\u591a90\u5b57\u3002");
        var callback = function callback(result, feedback) {
          if (result) {
            _this3.EditBox.string = "";
            createTips("\u63d0\u4ea4\u53cd\u9988\u6210\u529f");
          }
        };
        FeedbackLogic.sendFeedback(this.Feedback_Type, this.EditBox.string, callback);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    FeedbackLogic: "FeedbackLogic",
    FeedbackManager: "FeedbackManager"
  } ],
  FeedLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf4ddPdHBhHBIAFP2RL3RAl", "FeedLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Panel_Lift: cc.Node,
        kefuNode: cc.Node,
        lishiNode: cc.Node,
        lishiBtn: cc.Node,
        fankuiBtn: cc.Node,
        TipLabel: cc.Label,
        EditBox: cc.EditBox,
        itemScrl: cc.Node,
        item: cc.Prefab
      },
      onLoad: function onLoad() {
        var _this = this;
        this.FeedbackLogic = new (require("FeedbackLogic"))();
        this.FeedbackManager = new (require("FeedbackManager"))();
        var getMyFeedbackCallback = function getMyFeedbackCallback(list) {
          for (var i = 0; i < list.length; i++) if (3 != list[i].read_type) {
            _this.doButton_LiShi();
            break;
          }
        };
        this.FeedbackLogic.getMyFeedback(getMyFeedbackCallback);
      },
      init: function init() {},
      start: function start() {
        this.Feedback_Type = 1;
      },
      doButton_LiShi: function doButton_LiShi() {
        var _this2 = this;
        this.lishiNode.active = true;
        this.kefuNode.active = false;
        this.lishiBtn.active = true;
        this.fankuiBtn.active = false;
        for (var z = 0; z < this.itemScrl.children.length; z++) {
          this.itemScrl.removeChild(this.itemScrl.children[z]);
          z--;
        }
        var getMyFeedbackCallback = function getMyFeedbackCallback(list) {
          var id = 0;
          for (var i = 0; i < list.length; i++) if ("" != list[i].id) {
            var item = cc.instantiate(_this2.item);
            item.children[0].children[2]._components[0].string = list[i].content;
            item.children[0].children[3]._components[0].string = F_GetDateStringByTime(list[i].f_time);
            if (list[i].read_type > 1) {
              item.children[2].active = true;
              item.children[3].active = true;
              item.children[0].children[1].active = false;
            }
            _this2.itemScrl.addChild(item);
            item.children[0]._components[0].clickEvents[0].customEventData = list[i].id;
            id = item.children[0]._components[0].clickEvents[0].customEventData;
            var KeFuItem = item.getComponent("KeFuItem");
            KeFuItem.init(id, list[i].read_type, _this2.node.parent);
          }
        };
        this.FeedbackLogic.getMyFeedback(getMyFeedbackCallback);
      },
      doButton_FanKui: function doButton_FanKui() {
        this.lishiBtn.active = false;
        this.fankuiBtn.active = true;
        this.kefuNode.active = true;
        this.lishiNode.active = false;
      },
      onMenuButton: function onMenuButton(event, param) {
        this.Feedback_Type = param;
      },
      FeedbackEditChanged: function FeedbackEditChanged() {
        var zhuyi = 90 - this.EditBox.string.length;
        this.TipLabel.string = "\u6ce8:\u4f60\u8fd8\u53ef\u4ee5\u8f93\u5165" + zhuyi + "\u5b57";
      },
      doButtonFinishClick: function doButtonFinishClick() {
        var _this3 = this;
        var FeedbackLogic = new (require("FeedbackLogic"))();
        if ("" == this.EditBox.string) return createTips("\u8bf7\u8be6\u7ec6\u63cf\u8ff0\u4f60\u9047\u5230\u7684\u95ee\u9898\uff0c\u5305\u62ec\u4f60\u7684\u7528\u6237ID\u548c\u65f6\u95f4\u3002\u6700\u591a90\u5b57\u3002");
        var callback = function callback(result, feedback) {
          if (result) {
            _this3.EditBox.string = "";
            createTips("\u63d0\u4ea4\u53cd\u9988\u6210\u529f");
          }
        };
        FeedbackLogic.sendFeedback(this.Feedback_Type, this.EditBox.string, callback);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    FeedbackLogic: "FeedbackLogic",
    FeedbackManager: "FeedbackManager"
  } ],
  FeedbackLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a8b5cB4pZD8KNL9mYxLJQ7", "FeedbackLogic");
    "use strict";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {},
      sendFeedback: function sendFeedback(style, content, callback) {
        FeedbackManager.sendFeedback(style, content, callback);
      },
      getMyFeedback: function getMyFeedback(callback) {
        FeedbackManager.getMyFeedback(callback);
      },
      getFeedbackDetails: function getFeedbackDetails(c_id, callback) {
        FeedbackManager.getFeedbackDetails(c_id, callback);
      },
      sendFeedbackCallback: function sendFeedbackCallback(c_id, c_content, callback) {
        FeedbackManager.sendFeedbackCallback(c_id, c_content, callback);
      },
      deleteFeedback: function deleteFeedback(c_id, callback) {
        FeedbackManager.deleteFeedback(c_id, callback);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  FeedbackManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a092dDQt4FD/75XpXRwGKjv", "FeedbackManager");
    "use strict";
    var DataManager = require("DataManager");
    var API = "feedback";
    var FeedbackManager = cc.Class({
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.feedbackList = [];
        this.liebiaoData = [];
      },
      getMyFeedback: function getMyFeedback(callback) {
        var _this = this;
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this.feedbackList = jsonData.data;
            _this.liebiaoData = _this.feedbackList;
            callback(_this.feedbackList);
          } else createTips(jsonData.msg);
        };
        var args = [];
        args.params = {
          userID: UserInfoManager.getMyInfo().userID
        };
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/feedback/feedbackList";
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      sendFeedbackCallback: function sendFeedbackCallback(c_id, c_content, callback) {
        var actionName = "replyFeedback";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) callback(true); else {
            createTips(jsonData.msg);
            callback(false);
          }
        };
        var args = [];
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          feedbackID: c_id,
          content: c_content
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      sendFeedback: function sendFeedback(style, content, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (jsonData.status == G_HANDLE_CODE_OK) {
            var feedback = jsonData.data;
            callback(true);
          } else {
            createTips(jsonData.msg);
            callback(false);
          }
        };
        var args = [];
        args.params = {
          feedbackType: style,
          userID: UserInfoManager.getMyInfo().userID,
          content: content
        };
        args.url = "http://" + NetConfig.getPHP_IP() + "/api/v1/feedback/commitFeedback";
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      getFeedbackDetails: function getFeedbackDetails(c_id, callback) {
        var actionName = "feedbackInfo";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = [];
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          feedbackID: c_id
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      deleteFeedback: function deleteFeedback(c_id, callback) {
        var _this2 = this;
        var actionName = "delFeedback";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this2.delFeedbackByID(c_id);
            callback(true);
          } else {
            createTips(jsonData.msg);
            callback(false);
          }
        };
        var args = [];
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          feedbackID: c_id
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      getFeedbackList: function getFeedbackList() {
        return this.liebiaoData;
      },
      updateFeedbackReadTypeByID: function updateFeedbackReadTypeByID(c_id) {
        for (var i in this.feedbackList) {
          var v = this.feedbackList[i];
          if (v.id == c_id) {
            v.reed_type == E_FeedbackStatus.NO_READ && (this.feedbackList[i].reed_type = E_FeedbackStatus.READ);
            break;
          }
        }
      },
      addFeedbackByID: function addFeedbackByID(feedback) {
        for (var v in this.feedbackList) this.feedbackList[this.feedbackList.length] = this.feedbackList[feedback];
      },
      delFeedbackByID: function delFeedbackByID(c_id) {
        for (var i in this.feedbackList) {
          var v = this.feedbackList[i];
          if (v.id == c_id) {
            this.feedbackList.splice(i, 1);
            break;
          }
        }
      },
      clear: function clear() {
        this.feedbackList = [];
        instance = null;
      }
    });
    module.exports = FeedbackManager;
    cc._RF.pop();
  }, {
    DataManager: "DataManager"
  } ],
  FriendManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a5dfNYZWVBvbjEyRilNvb3", "FriendManager");
    "use strict";
    var DataManager = require("DataManager");
    var FriendManager = cc.Class({
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.friendList = {};
        this.friendNotifyList = [];
        this.friendInvitePlayNotifyList = [];
        DataManager.instance.addManager("FriendManager", this);
      },
      _Resolve_OneFriendInfo: function _Resolve_OneFriendInfo(netMsg) {
        var struct = {};
        struct.userID = netMsg.popINT();
        struct.onlineStatus = netMsg.popBYTE();
        struct.rewardStatus = netMsg.popBYTE();
        return struct;
      },
      _Resolve_OneFriendNotify: function _Resolve_OneFriendNotify(netMsg) {
        var struct = {};
        struct.notifyID = netMsg.popINT();
        struct.type = netMsg.popINT();
        struct.targetID = netMsg.popINT();
        struct.time = netMsg.popINT();
        struct.param1 = netMsg.popINT();
        struct.param2 = netMsg.popINT();
        return struct;
      },
      setFriendList: function setFriendList(friendList) {
        this.friendList = {};
        for (var friend in friendList) this.addFriend(friendList[friend]);
      },
      addFriend: function addFriend(friend) {
        this.friendList[friend.userID] = friend;
      },
      delFriend: function delFriend(friendID) {
        this.friendList[friendID] = null;
      },
      getFriendList: function getFriendList() {
        var friendList = [];
        for (var friend in this.friendList) friendList[friendList.length] = this.friendList[friend];
        for (var i = 0; i < friendList.length; i++) if (null == friendList[i]) {
          friendList.splice(i, 1);
          i--;
        }
        friendList.sort(function(friendA, friendB) {
          if (friendA.onlineStatus == friendB.onlineStatus) return friendA.userID < friendB.userID;
          return friendA.onlineStatus > friendB.onlineStatus;
        });
        return friendList;
      },
      getFriend: function getFriend(friendID) {
        return this.friendList[friendID];
      },
      isMyFriend: function isMyFriend(friendID) {
        return !!this.getFriend(friendID);
      },
      setFriendRewardStatus: function setFriendRewardStatus(friendID, status) {
        var friend = this.getFriend(friendID);
        friend && (friend.rewardStatus = status);
      },
      setFriendOnlineStatus: function setFriendOnlineStatus(friendID, status) {
        var friend = this.getFriend(friendID);
        friend && (friend.onlineStatus = status);
      },
      getOnlineFriendList: function getOnlineFriendList() {
        var onlineFriendList = [];
        for (var friend in this.friendList) friend.onlineStatus == E_FriendOnlineStatus.ON && table.insert(onlineFriendList, friend);
        onlineFriendList.srot(function(friendA, friendB) {
          return friendA.userID < friendB.userID;
        });
        return onlineFriendList;
      },
      setFriendNotifyList: function setFriendNotifyList(friendNotifyList) {
        this.friendNotifyList = {};
        for (var friendNotify in friendNotifyList) this.addFriendNotify(friendNotifyList[friendNotify]);
      },
      addFriendNotify: function addFriendNotify(friendNotify) {
        this.friendNotifyList[friendNotify.notifyID] = friendNotify;
      },
      delFriendNotify: function delFriendNotify(notifyID) {
        delete this.friendNotifyList[notifyID];
      },
      getFriendNotifyList: function getFriendNotifyList() {
        var friendNotifyList = [];
        for (var friendNotify in this.friendNotifyList) friendNotifyList.push(this.friendNotifyList[friendNotify]);
        return friendNotifyList;
      },
      setFriendListRedSpotCount: function setFriendListRedSpotCount(count) {
        this.friendListRedSpotCount = count;
      },
      getFriendListRedSpotCount: function getFriendListRedSpotCount() {
        return this.friendListRedSpotCount;
      },
      setNotifyListRedSpotCount: function setNotifyListRedSpotCount(count) {
        this.notifyListRedSpotCount = count;
      },
      getNotifyListRedSpotCount: function getNotifyListRedSpotCount() {
        return this.notifyListRedSpotCount;
      },
      getFriendInvitePlayNotifyList: function getFriendInvitePlayNotifyList() {
        var friendNotifyList = [];
        for (var friendNotify in this.friendInvitePlayNotifyList) table.insert(friendNotifyList, friendNotify);
        friendNotifyList.srot(function(friendNotifyA, friendNotifyB) {
          if (friendNotifyA.time == friendNotifyB.time) return friendNotifyA.notifyID < friendNotifyB.notifyID;
          return friendNotifyA.time > friendNotifyB.time;
        });
        return friendNotifyList;
      },
      addFriendInvitePlayNotify: function addFriendInvitePlayNotify(friendNotify) {
        if (friendNotify.type !== E_FriendNotifyType.INVITE_PLAYGAME) return;
        this.friendInvitePlayNotifyList[friendNotify.notifyID] = friendNotify;
      },
      delFriendInvitePlayNotify: function delFriendInvitePlayNotify(notifyID) {
        this.friendInvitePlayNotifyList[notifyID] = null;
      },
      clear: function clear() {
        this.friendList = {};
        this.friendNotifyList = {};
        this.friendListRedSpotCount = 0;
        this.notifyListRedSpotCount = 0;
      }
    });
    module.exports = FriendManager;
    cc._RF.pop();
  }, {
    DataManager: "DataManager"
  } ],
  FriendsGroupManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0b63lePllCco51byO1pWAn", "FriendsGroupManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var DataManager = require("DataManager");
    var GlobalEnum = require("GlobalEnum");
    var STATUS_WEIGHT = [];
    STATUS_WEIGHT[E_FriendsGroupMemberStatus.NORMAL] = 0;
    STATUS_WEIGHT[E_FriendsGroupMemberStatus.MANAGER] = 2;
    STATUS_WEIGHT[E_FriendsGroupMemberStatus.KING] = 4;
    var FriendsGroupManager = cc.Class({
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.friendsGroupList = {};
        this.notifyList = {};
        this.notifyRedSpotCount = 0;
        this.selectFriendsGroupID = 0;
        this.msgRedSpotList = {};
        DataManager.instance.addManager("FriendsGroupManager", this);
      },
      getWeightByStatus: function getWeightByStatus(status) {
        return STATUS_WEIGHT[status] || -1;
      },
      isUserHasManagerStatus: function isUserHasManagerStatus(friendsGroupID, userID) {
        var status = E_FriendsGroupMemberStatus.NORMAL;
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) if (userID) for (var _i = 0, _Object$values = Object.values(friendsGroup.memberList); _i < _Object$values.length; _i++) {
          var _member = _Object$values[_i];
          if (userID == _member.userID) {
            status = _member.status;
            break;
          }
        } else status = friendsGroup.status;
        return STATUS_WEIGHT[status] >= STATUS_WEIGHT[E_FriendsGroupMemberStatus.MANAGER];
      },
      isUserHasKingStatus: function isUserHasKingStatus(friendsGroupID, userID) {
        var status = E_FriendsGroupMemberStatus.NORMAL;
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) if (userID) for (var i in friendsGroup.memberList) {
          var _member2 = friendsGroup.memberList[i];
          if (userID == _member2.userID) {
            status = friendsGroup.memberList[i].status;
            break;
          }
        } else status = friendsGroup.status;
        return STATUS_WEIGHT[status] >= STATUS_WEIGHT[E_FriendsGroupMemberStatus.KING];
      },
      isUserHasFuncPower: function isUserHasFuncPower(friendsGroupID, funcPower, userID) {
        if (this.isUserHasKingStatus(friendsGroupID, userID)) return true;
        if (objIsEmpty(E_FriendsGroupPowerType.hasOwnProperty(funcPower))) return false;
        if (this.isUserHasManagerStatus(friendsGroupID, userID)) {
          var power = E_FriendsGroupPowerType.NO;
          var friendsGroup = this.getFriendsGroup(friendsGroupID);
          if (friendsGroup) if (objIsEmpty(userID)) power = friendsGroup.power; else for (var _i2 = 0, _Object$values2 = Object.values(friendsGroup.memberList); _i2 < _Object$values2.length; _i2++) {
            var _member3 = _Object$values2[_i2];
            if (userID == _member3.userID) {
              power = _member3.power;
              break;
            }
          }
          return (power & funcPower) == funcPower;
        }
        return false;
      },
      _Resolve_OneFriendsGroupInfo: function _Resolve_OneFriendsGroupInfo(netMsg) {
        var struct = {};
        struct.friendsGroupID = netMsg.popINT();
        struct.status = netMsg.popBYTE();
        struct.currOnlineCount = netMsg.popINT();
        struct.peopleCount = netMsg.popINT();
        struct.deskCount = netMsg.popINT();
        struct.VIPRoomCount = netMsg.popINT();
        struct.frontMember = [];
        for (var i = 1; i <= 9; ++i) {
          var userID = netMsg.popINT();
          userID > 0 && struct.frontMember.push(userID);
        }
        struct.createTime = netMsg.popINT();
        struct.masterID = netMsg.popINT();
        struct.name = netMsg.popNCHAR(24);
        struct.notice = netMsg.popNCHAR(128);
        struct.wechat = netMsg.popNCHAR(48);
        struct.power = netMsg.popBYTE();
        struct.fireCoin = netMsg.popINT();
        return struct;
      },
      _Resolve_OneFriendsGroupUserInfo: function _Resolve_OneFriendsGroupUserInfo(netMsg) {
        var struct = {};
        struct.userID = netMsg.popINT();
        struct.joinTime = netMsg.popINT();
        struct.onlineStatus = netMsg.popBYTE();
        struct.score = netMsg.popINT();
        struct.money = netMsg.popLONGLONG();
        struct.fireCoin = netMsg.popINT();
        struct.status = netMsg.popBYTE();
        struct.carryFireCoin = netMsg.popINT();
        struct.power = netMsg.popBYTE();
        return struct;
      },
      _Resolve_OneFriendsGroupNotify: function _Resolve_OneFriendsGroupNotify(netMsg) {
        var struct = {};
        struct.notifyID = netMsg.popINT();
        struct.userID = netMsg.popINT();
        struct.targetFriendsGroupID = netMsg.popINT();
        struct.name = netMsg.popNCHAR(24);
        struct.type = netMsg.popBYTE();
        struct.time = netMsg.popINT();
        struct.param1 = netMsg.popINT();
        struct.param2 = netMsg.popINT();
        struct.alreadyOper = netMsg.popBYTE();
        return struct;
      },
      _Resolve_OneFriendsGroupRoomMsg: function _Resolve_OneFriendsGroupRoomMsg(netMsg) {
        var struct = {};
        struct.friendsGroupID = netMsg.popINT();
        struct.userID = netMsg.popINT();
        struct.roomMsgID = netMsg.popINT();
        struct.time = netMsg.popINT();
        struct.roomID = netMsg.popINT();
        struct.roomCount = netMsg.popINT();
        struct.curPeopleCount = netMsg.popINT();
        struct.allPeopleCount = netMsg.popINT();
        struct.playCount = netMsg.popINT();
        struct.passwd = netMsg.popNCHAR(20);
        struct.gameRules = netMsg.popNCHAR(256);
        return struct;
      },
      _Resolve_OneFriendsGroupAccoMsg: function _Resolve_OneFriendsGroupAccoMsg(netMsg) {
        var struct = {};
        struct.friendsGroupID = netMsg.popINT();
        struct.userID = netMsg.popINT();
        struct.time = netMsg.popINT();
        struct.roomID = netMsg.popINT();
        struct.realPlayCount = netMsg.popINT();
        struct.playCount = netMsg.popINT();
        struct.playMode = netMsg.popBYTE();
        struct.passwd = netMsg.popNCHAR(20);
        struct.userInfoListStr = netMsg.popNCHAR(192);
        struct.roomType = netMsg.popBYTE();
        struct.deskID = netMsg.popBYTE();
        var keyList = [ "userID", "score" ];
        struct.userInfoList = tools.getSplitData(struct.userInfoListStr, keyList);
        return struct;
      },
      _Resolve_OneFriendsGroupMsgRedSpot: function _Resolve_OneFriendsGroupMsgRedSpot(netMsg) {
        var struct = [];
        struct.friendsGroupID = netMsg.popINT();
        struct.deskMsgRedSpotCount = netMsg.popINT();
        struct.VIPRoomMsgRedSpotCount = netMsg.popINT();
        cc.log("\u5355\u4e2a\u4ff1\u4e50\u90e8\u5c0f\u7ea2\u70b9\u7ed3\u6784\u4f53_Resolve_OneFriendsGroupMsgRedSpot", struct);
        return struct;
      },
      _Resolve_OneFriendsGroupDeskInfo: function _Resolve_OneFriendsGroupDeskInfo(netMsg) {
        var struct = {};
        struct.friendsGroupID = netMsg.popINT();
        struct.deskID = netMsg.popINT();
        struct.time = netMsg.popINT();
        struct.roomID = netMsg.popINT();
        struct.gameID = netMsg.popINT();
        struct.roomType = netMsg.popINT();
        struct.curPeopleCount = netMsg.popINT();
        struct.allPeopleCount = netMsg.popINT();
        struct.playCount = netMsg.popINT();
        struct.gameStatus = netMsg.popBYTE();
        struct.passwd = netMsg.popNCHAR(20);
        struct.gameRules = netMsg.popNCHAR(256);
        struct.userIDList = [];
        for (var i = 1; i <= G_WAR_RECORD_PLAYER_NUM; i++) {
          var userID = netMsg.popINT();
          userID > 0 && struct.userIDList.push(userID);
        }
        return struct;
      },
      _Resolve_OneSimlpeFriendsGroupAcco: function _Resolve_OneSimlpeFriendsGroupAcco(netMsg) {
        var struct = {};
        struct.userID = netMsg.popINT();
        struct.score = netMsg.popINT();
        struct.money = netMsg.popLONGLONG();
        struct.fireCoin = netMsg.popINT();
        return struct;
      },
      _Resolve_OneSimlpeFriendsGroupDeskAcco: function _Resolve_OneSimlpeFriendsGroupDeskAcco(netMsg) {
        var struct = {};
        struct.costMoney = netMsg.popLONGLONG() / G_MULTI_NUM;
        struct.costJewels = netMsg.popINT();
        struct.fireCoinRecharge = netMsg.popLONGLONG();
        struct.fireCoinExchange = netMsg.popLONGLONG();
        struct.moneyPump = netMsg.popLONGLONG() / G_MULTI_NUM;
        struct.fireCoinPump = netMsg.popLONGLONG();
        return struct;
      },
      _Resolve_StatusChangeStruct: function _Resolve_StatusChangeStruct(netMsg) {
        var struct = {};
        struct.userID = netMsg.popINT();
        struct.status = netMsg.popBYTE();
        struct.power = netMsg.popBYTE();
        return struct;
      },
      setFriendsGroupList: function setFriendsGroupList(friendsGroupList) {
        this.friendsGroupList = {};
        for (var _i3 = 0, _Object$values3 = Object.values(friendsGroupList); _i3 < _Object$values3.length; _i3++) {
          var friendsGroup = _Object$values3[_i3];
          this.addFriendsGroup(friendsGroup);
        }
        this.initSelectFriendsGroup();
      },
      initSelectFriendsGroup: function initSelectFriendsGroup() {
        var friendsGroupList = this.getFriendsGroupList();
        var firstFriendsGroup = friendsGroupList[0];
        if (objIsEmpty(firstFriendsGroup)) return;
        var zhiDingFriendsGroupID = this.getZhiDingFriendsGroupID();
        if (0 == zhiDingFriendsGroupID) {
          zhiDingFriendsGroupID = firstFriendsGroup.friendsGroupID;
          this.setZhiDingFriendsGroupID(zhiDingFriendsGroupID);
        } else if (objIsEmpty(this.getFriendsGroup(zhiDingFriendsGroupID))) {
          zhiDingFriendsGroupID = firstFriendsGroup.friendsGroupID;
          this.setZhiDingFriendsGroupID(zhiDingFriendsGroupID);
        }
        0 == this.selectFriendsGroupID && this.setSelectFriendsGroupID(zhiDingFriendsGroupID);
      },
      addFriendsGroup: function addFriendsGroup(friendsGroup) {
        this.friendsGroupList[parseInt(friendsGroup.friendsGroupID)] = friendsGroup;
        this.friendsGroupList[parseInt(friendsGroup.friendsGroupID)].memberList = [];
        this.friendsGroupList[parseInt(friendsGroup.friendsGroupID)].roomMsgList = [];
        this.friendsGroupList[parseInt(friendsGroup.friendsGroupID)].accoMsgList = [];
        this.friendsGroupList[friendsGroup.friendsGroupID].deskList = [];
        for (var i = 1; i <= G_CLUB_DESK_LEN; ++i) {
          var tempTab = this.createDeskInfo(friendsGroup.friendsGroupID, i);
          this.friendsGroupList[friendsGroup.friendsGroupID].deskList.push(tempTab);
        }
        this.friendsGroupList[friendsGroup.friendsGroupID].vipDeskList = [];
        for (var _i4 = 1; _i4 <= G_CLUB_DESK_LEN; ++_i4) {
          var _tempTab = this.createVIPDeskInfo(friendsGroup.friendsGroupID, _i4 + G_CLUB_DESK_LEN);
          this.friendsGroupList[friendsGroup.friendsGroupID].vipDeskList.push(_tempTab);
        }
      },
      delFriendsGroup: function delFriendsGroup(friendsGroupID) {
        this.friendsGroupList[friendsGroupID] = null;
        delete this.friendsGroupList[friendsGroupID];
      },
      getFriendsGroupList: function getFriendsGroupList() {
        var friendsGroupList = [];
        for (var i in this.friendsGroupList) friendsGroupList.push(this.friendsGroupList[i]);
        var sortFunction = function(friendsGroupA, friendsGroupB) {
          if (objIsEmpty(friendsGroupA) || objIsEmpty(friendsGroupB)) return 1;
          if (friendsGroupA == friendsGroupB) return 1;
          var zhiDingFriendsGroupID = this.getZhiDingFriendsGroupID();
          if (friendsGroupA.friendsGroupID == zhiDingFriendsGroupID) return -1;
          if (friendsGroupB.friendsGroupID == zhiDingFriendsGroupID) return 1;
          if (this.getWeightByStatus(friendsGroupA.status) == this.getWeightByStatus(friendsGroupB.status)) {
            if (friendsGroupA.createTime == friendsGroupB.createTime) return friendsGroupA.friendsGroupID < friendsGroupB.friendsGroupID ? -1 : 1;
            return friendsGroupA.createTime < friendsGroupB.createTime ? -1 : 1;
          }
          return this.getWeightByStatus(friendsGroupA.status) > this.getWeightByStatus(friendsGroupB.status) ? 1 : -1;
        }.bind(this);
        friendsGroupList.sort(sortFunction);
        return friendsGroupList;
      },
      getFriendsGroup: function getFriendsGroup(friendsGroupID) {
        return this.friendsGroupList[friendsGroupID];
      },
      getAllFriendsGroupNum: function getAllFriendsGroupNum() {
        var allNum = 0;
        for (var friendGroup in this.friendsGroupList) {
          friendGroup = this.friendsGroupList[friendGroup];
          friendGroup && friendGroup.masterID && (allNum += 1);
        }
        return allNum;
      },
      getCreateFriendsGroupNum: function getCreateFriendsGroupNum() {
        var createNum = 0;
        var userID = UserInfoManager.getMyInfo().userID;
        for (var _i5 = 0, _Object$values4 = Object.values(this.friendsGroupList); _i5 < _Object$values4.length; _i5++) {
          var friendsGroup = _Object$values4[_i5];
          friendsGroup && friendsGroup.masterID == userID && (createNum += 1);
        }
        return createNum;
      },
      changeFriendsGroupName: function changeFriendsGroupName(friendsGroupID, name) {
        for (var i in this.friendsGroupList) {
          var friendsGroup = this.friendsGroupList[i];
          if (friendsGroup.friendsGroupID == friendsGroupID) {
            this.friendsGroupList[i].name = name;
            break;
          }
        }
      },
      changeFriendsGroupNotice: function changeFriendsGroupNotice(friendsGroupID, notice) {
        for (var i in this.friendsGroupList) {
          var friendsGroup = this.friendsGroupList[i];
          if (friendsGroup.friendsGroupID == friendsGroupID) {
            this.friendsGroupList[i].notice = notice;
            break;
          }
        }
      },
      changeFriendsGroupWechat: function changeFriendsGroupWechat(friendsGroupID, wechat) {
        for (var i in this.friendsGroupList) {
          var friendsGroup = this.friendsGroupList[i];
          if (friendsGroup.friendsGroupID == friendsGroupID) {
            this.friendsGroupList[i].wechat = wechat;
            break;
          }
        }
      },
      getFriendsGroupName: function getFriendsGroupName(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) return friendsGroup.name;
        return "";
      },
      changeFriendsGroupPeopleCount: function changeFriendsGroupPeopleCount(friendsGroupID, changeCount) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.peopleCount = friendsGroup.peopleCount + changeCount);
      },
      changeFriendsGroupRoomCount: function changeFriendsGroupRoomCount(friendsGroupID, changeCount) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.roomCount = friendsGroup.roomCount + changeCount);
      },
      changeFriendsGroupDeskCount: function changeFriendsGroupDeskCount(friendsGroupID, changeCount) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.deskCount = friendsGroup.deskCount + changeCount);
      },
      changeFriendsGroupVIPRoomCount: function changeFriendsGroupVIPRoomCount(friendsGroupID, changeCount) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.VIPRoomCount = friendsGroup.VIPRoomCount + changeCount);
      },
      changeFriendsGroupScore: function changeFriendsGroupScore(friendsGroupID, accoMsg) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i in friendsGroup.memberList) for (var _i6 = 0, _Object$values5 = Object.values(accoMsg.userInfoList); _i6 < _Object$values5.length; _i6++) {
          var user = _Object$values5[_i6];
          if (Number(user.userID) == member.userID) {
            friendsGroup.memberList[i].score = friendsGroup.memberList[i].score + Number(user.score);
            DataNotify.onFriendsGroupScoreChange(friendsGroupID, member.userID, friendsGroup.memberList[i].score);
            break;
          }
        }
      },
      isJoinFriendsGroup: function isJoinFriendsGroup(friendsGroupID, userID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var _i7 = 0, _Object$values6 = Object.values(friendsGroup.memberList); _i7 < _Object$values6.length; _i7++) {
          var _member4 = _Object$values6[_i7];
          if (_member4.userID == userID) return true;
        }
        return false;
      },
      setFriendsGroupMemberList: function setFriendsGroupMemberList(friendsGroupID, memberList) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.memberList = {});
        for (var k in memberList) {
          var _member5 = memberList[k];
          this.addFriendsGroupMember(friendsGroupID, _member5);
        }
      },
      addFriendsGroupMember: function addFriendsGroupMember(friendsGroupID, member) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.memberList[member.userID] = member);
      },
      addFriendsGroupFrontMember: function addFriendsGroupFrontMember(friendsGroupID, member) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          var count = friendsGroup.frontMember.length;
          if (count >= 9) return;
          for (var id in friendsGroup.frontMember) if (member.userID == id) return;
          friendsGroup.frontMember.push(member.userID);
        }
      },
      delFriendsGroupMember: function delFriendsGroupMember(friendsGroupID, userID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          friendsGroup.memberList[userID] = null;
          delete friendsGroup.memberList[userID];
        }
      },
      delFriendsGroupFrontMember: function delFriendsGroupFrontMember(friendsGroupID, userID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i in friendsGroup.frontMember) {
          var id = friendsGroup.frontMember[i];
          if (userID == id) {
            friendsGroup.frontMember.splice(i, 1);
            break;
          }
        }
      },
      getFriendsGroupMemberList: function getFriendsGroupMemberList(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        var memberList = [];
        if (void 0 != friendsGroup || null != friendsGroup) for (var _member6 in friendsGroup.memberList) {
          _member6 = friendsGroup.memberList[_member6];
          memberList.push(_member6);
        }
        var sortFunction = function(memberA, memberB) {
          if (this.getWeightByStatus(memberA.status) == this.getWeightByStatus(memberB.status)) {
            if (memberA.onlineStatus == memberB.onlineStatus) return memberA.joinTime < memberB.joinTime ? -1 : 1;
            return memberA.onlineStatus > memberB.onlineStatus ? -1 : 1;
          }
          return this.getWeightByStatus(memberA.status) > this.getWeightByStatus(memberB.status) ? -1 : 1;
        }.bind(this);
        memberList.sort(sortFunction);
        return memberList;
      },
      getFriendsGroupMemberManagerList: function getFriendsGroupMemberManagerList(friendsGroupID) {
        var memberList = this.getFriendsGroupMemberList(friendsGroupID);
        var managerList = [];
        for (var _i8 = 0, _Object$values7 = Object.values(memberList); _i8 < _Object$values7.length; _i8++) {
          var _member7 = _Object$values7[_i8];
          _member7.status == E_FriendsGroupMemberStatus.MANAGER && managerList.push(_member7);
        }
        return managerList;
      },
      findFriendsGroupMemberList: function findFriendsGroupMemberList(friendsGroupID, userID) {
        var memberList = this.getFriendsGroupMemberList(friendsGroupID);
        var findList = [];
        for (var i in memberList) {
          var _member8 = memberList[i];
          var a = String(_member8.userID).charAt(String(userID));
          a && findList.push(_member8);
        }
        return findList;
      },
      getFriendsGroupMember: function getFriendsGroupMember(friendsGroupID, userID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i in friendsGroup.memberList) {
          var _member9 = friendsGroup.memberList[i];
          if (userID == _member9.userID) return _member9;
        }
        return null;
      },
      changeFriendsGroupMemberStatus: function changeFriendsGroupMemberStatus(friendsGroupID, userID, status) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          var myInfo = UserInfoManager.getMyInfo();
          myInfo && myInfo.userID == userID && (friendsGroup.status = status);
          status == E_FriendsGroupMemberStatus.KING && (friendsGroup.masterID = userID);
          for (var i in friendsGroup.memberList) {
            var _member10 = friendsGroup.memberList[i];
            if (userID == _member10.userID) {
              friendsGroup.memberList[i].status = status;
              break;
            }
          }
        }
      },
      changeFriendsGroupMemberPower: function changeFriendsGroupMemberPower(friendsGroupID, userID, power) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          var myInfo = UserInfoManager.getMyInfo();
          myInfo && myInfo.userID == userID && (friendsGroup.power = power);
          for (var i in friendsGroup.memberList) {
            var _member11 = friendsGroup.memberList[i];
            if (userID == _member11.userID) {
              friendsGroup.memberList[i].power = power;
              break;
            }
          }
        }
      },
      changeFriendsGroupMemberFireCoin: function changeFriendsGroupMemberFireCoin(friendsGroupID, userID, fireCoin) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          var myInfo = UserInfoManager.getMyInfo();
          myInfo && myInfo.userID == userID && (friendsGroup.fireCoin = fireCoin);
          for (var i in friendsGroup.memberList) {
            var _member12 = friendsGroup.memberList[i];
            if (userID == _member12.userID) {
              friendsGroup.memberList[i].carryFireCoin = fireCoin;
              break;
            }
          }
        }
      },
      setFriendsGroupRoomMsgList: function setFriendsGroupRoomMsgList(friendsGroupID, roomMsgList) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.roomMsgList = {});
        for (var _i9 = 0, _Object$values8 = Object.values(roomMsgList); _i9 < _Object$values8.length; _i9++) {
          var roomMsg = _Object$values8[_i9];
          this.addFriendsGroupRoomMsg(friendsGroupID, roomMsg);
        }
      },
      addFriendsGroupRoomMsg: function addFriendsGroupRoomMsg(friendsGroupID, roomMsg) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.roomMsgList[roomMsg.roomMsgID] = roomMsg);
      },
      delFriendsGroupRoomMsg: function delFriendsGroupRoomMsg(friendsGroupID, roomMsgID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          friendsGroup.roomMsgList[roomMsgID] = null;
          delete friendsGroup.roomMsgList[roomMsgID];
        }
      },
      updateFriendsGroupRoomMsg: function updateFriendsGroupRoomMsg(friendsGroupID, roomMsgID, curPeopleCount) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && friendsGroup.roomMsgList && friendsGroup.roomMsgList[roomMsgID] && (friendsGroup.roomMsgList[roomMsgID].curPeopleCount = curPeopleCount);
      },
      getFriendsGroupRoomMsg: function getFriendsGroupRoomMsg(friendsGroupID, roomMsgID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) return friendsGroup.roomMsgList[roomMsgID];
      },
      getFriendsGroupRoomMsgList: function getFriendsGroupRoomMsgList(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        var roomMsgList = [];
        for (var i in friendsGroup.roomMsgList) {
          var roomMsg = friendsGroup.roomMsgList[i];
          roomMsgList.push(roomMsg);
        }
        var sortFunction = function(roomMsgA, roomMsgB) {
          if (roomMsgA.time == roomMsgB.time) return roomMsgA.roomMsgID < roomMsgB.roomMsgID ? -1 : 1;
          return roomMsgA.time > roomMsgB.time ? -1 : 1;
        }.bind(this);
        roomMsgList.sort(sortFunction);
        return roomMsgList;
      },
      setFriendsGroupAccoMsgList: function setFriendsGroupAccoMsgList(friendsGroupID, accoMsgList) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.accoMsgList = {});
        for (var _i10 = 0, _Object$values9 = Object.values(accoMsgList); _i10 < _Object$values9.length; _i10++) {
          var accoMsg = _Object$values9[_i10];
          this.addFriendsGroupAccoMsg(friendsGroupID, accoMsg);
        }
      },
      addFriendsGroupAccoMsg: function addFriendsGroupAccoMsg(friendsGroupID, accoMsg) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        friendsGroup && (friendsGroup.accoMsgList[accoMsg.accoMsgID] = accoMsg);
      },
      delFriendsGroupAccoMsg: function delFriendsGroupAccoMsg(friendsGroupID, accoMsgID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) {
          friendsGroup.accoMsgList[accoMsgID] = null;
          delete friendsGroup.accoMsgList[accoMsgID];
        }
      },
      getFriendsGroupAccoMsgList: function getFriendsGroupAccoMsgList(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        var accoMsgList = [];
        for (var i in friendsGroup.accoMsgList) {
          var accoMsg = friendsGroup.accoMsgList[i];
          accoMsgList.push(accoMsg);
        }
        var sortFunction = function(accoMsgA, accoMsgB) {
          if (accoMsgA.time == accoMsgB.time) return accoMsgA.accoMsgID < accoMsgB.accoMsgID ? -1 : 1;
          return accoMsgA.time > accoMsgB.time ? -1 : 1;
        }.bind(this);
        accoMsgList.sort(sortFunction);
        return accoMsgList;
      },
      setNotifyList: function setNotifyList(notifyList) {
        this.notifyList = {};
        for (var notify in notifyList) {
          notify = notifyList[notify];
          this.addNotify(notify);
        }
      },
      addNotify: function addNotify(notify) {
        this.notifyList[notify.notifyID] = notify;
      },
      delNotify: function delNotify(notifyID) {
        this.notifyList[notifyID] = null;
        delete this.notifyList[notifyID];
      },
      getNotifyList: function getNotifyList() {
        var notifyList = [];
        for (var notify in this.notifyList) {
          notify = this.notifyList[notify];
          notifyList.push(notify);
        }
        var sortFunction = function(notifyA, notifyB) {
          if (notifyA.time == notifyB.time) return notifyA.notifyID < notifyB.notifyID ? 1 : -1;
          return notifyA.time > notifyB.time ? -1 : 1;
        }.bind(this);
        notifyList.sort(sortFunction);
        return notifyList;
      },
      setNotifyRedSpotCount: function setNotifyRedSpotCount(count) {
        this.notifyRedSpotCount = count;
      },
      getNotifyRedSpotCount: function getNotifyRedSpotCount() {
        return this.notifyRedSpotCount || 0;
      },
      clearFriendsGroupMsgRedSpotList: function clearFriendsGroupMsgRedSpotList() {
        this.msgRedSpotList = {};
      },
      getFriendsGroupMsgRedSpotList: function getFriendsGroupMsgRedSpotList() {
        return this.msgRedSpotList;
      },
      setFriendsGroupMsgRedSpot: function setFriendsGroupMsgRedSpot(friendsGroupID, msgRedSpot) {
        this.msgRedSpotList[friendsGroupID] = msgRedSpot;
      },
      getFriendsGroupMsgRedSpot: function getFriendsGroupMsgRedSpot(friendsGroupID) {
        return this.msgRedSpotList[friendsGroupID];
      },
      getFriendsGroupDeskMsgRedSpotCount: function getFriendsGroupDeskMsgRedSpotCount(friendsGroupID) {
        var msgRedSpot = this.getFriendsGroupMsgRedSpot(friendsGroupID);
        if (msgRedSpot) return msgRedSpot.deskMsgRedSpotCount;
        return 0;
      },
      getFriendsGroupVIPRoomMsgRedSpotCount: function getFriendsGroupVIPRoomMsgRedSpotCount(friendsGroupID) {
        var msgRedSpot = this.getFriendsGroupMsgRedSpot(friendsGroupID);
        if (msgRedSpot) return msgRedSpot.VIPRoomMsgRedSpotCount;
        return 0;
      },
      getFriendsGroupTotalRedSpotCount: function getFriendsGroupTotalRedSpotCount() {
        var totalCount = 0;
        var notifyCount = this.getNotifyRedSpotCount();
        var msgCount = 0;
        for (var _i11 = 0, _Object$values10 = Object.values(this.msgRedSpotList); _i11 < _Object$values10.length; _i11++) {
          var msgRedSpot = _Object$values10[_i11];
          var deskCount = this.getFriendsGroupDeskMsgRedSpotCount(msgRedSpot.friendsGroupID);
          var vipCount = this.getFriendsGroupVIPRoomMsgRedSpotCount(msgRedSpot.friendsGroupID);
          msgCount = deskCount + vipCount;
        }
        totalCount = notifyCount + msgCount;
        return totalCount;
      },
      getFriendsGroupRedSpotInfo: function getFriendsGroupRedSpotInfo() {
        var info = [];
        info.notifyRedSpotCount = this.getNotifyRedSpotCount();
        info.msgRedSpotList = this.getFriendsGroupMsgRedSpotList();
        cc.log("\u83b7\u53d6\u4ff1\u4e50\u90e8\u6218\u7ee9\u6d88\u606f\u5c0f\u7ea2\u70b9\u6570\u91cfgetFriendsGroupRedSpotInfo", info);
        return info;
      },
      createDeskInfo: function createDeskInfo(friendsGroupID, deskID) {
        var tempTab = {};
        tempTab.friendsGroupID = friendsGroupID;
        tempTab.deskID = deskID;
        tempTab.roomID = 0;
        tempTab.gameID = 0;
        tempTab.count = 0;
        tempTab.curPeopleCount = 0;
        tempTab.allPeopleCount = 0;
        tempTab.playCount = 0;
        tempTab.gameStatus = -1;
        tempTab.passwd = "";
        tempTab.gameRules = "{}";
        tempTab.userIDList = [];
        return tempTab;
      },
      createVIPDeskInfo: function createVIPDeskInfo(friendsGroupID, deskID) {
        var tempTab = {};
        tempTab.friendsGroupID = friendsGroupID;
        tempTab.deskID = deskID;
        tempTab.roomID = 0;
        tempTab.gameID = 0;
        tempTab.count = 0;
        tempTab.curPeopleCount = 0;
        tempTab.allPeopleCount = 0;
        tempTab.playCount = 0;
        tempTab.gameStatus = -1;
        tempTab.passwd = "";
        tempTab.gameRules = "{}";
        tempTab.userIDList = [];
        return tempTab;
      },
      addDeskList: function addDeskList(friendsGroupID, deskList) {
        for (var desk in deskList) {
          desk = deskList[desk];
          this.addDeskInfo(friendsGroupID, desk);
        }
      },
      addDeskInfo: function addDeskInfo(friendsGroupID, desk) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i in friendsGroup.deskList) {
          var tempDesk = friendsGroup.deskList[i];
          if (tempDesk.deskID == desk.deskID) {
            friendsGroup.deskList[i] = desk;
            break;
          }
        }
      },
      getDeskList: function getDeskList(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) return friendsGroup.deskList;
        return [];
      },
      addVIPDeskList: function addVIPDeskList(friendsGroupID, deskList) {
        for (var _iterator = _createForOfIteratorHelperLoose(deskList), _step; !(_step = _iterator()).done; ) {
          var desk = _step.value;
          console.log(">>>>>>>deskListdeskList" + JSON.stringify(desk));
          this.addVIPDeskInfo(friendsGroupID, desk);
        }
      },
      addVIPDeskInfo: function addVIPDeskInfo(friendsGroupID, desk) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i = 0; i < friendsGroup.vipDeskList.length; i++) {
          var tempDesk = friendsGroup.vipDeskList[i];
          if (tempDesk.deskID == desk.deskID) {
            friendsGroup.vipDeskList[i] = desk;
            break;
          }
        }
      },
      getVIPDeskList: function getVIPDeskList(friendsGroupID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) return friendsGroup.vipDeskList;
        return [];
      },
      changeDeskInfo: function changeDeskInfo(friendsGroupID, desk) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var i in friendsGroup.deskList) {
          var tempDesk = friendsGroup.deskList[i];
          if (tempDesk.deskID == desk.deskID) {
            friendsGroup.deskList[i].gameStatus = desk.gameStatus;
            friendsGroup.deskList[i].curPeopleCount = desk.curPeopleCount;
            if (desk.userID > 0) if (0 == desk.updateType) friendsGroup.deskList[i].userIDList.push(desk.userID); else if (1 == desk.updateType) for (var j in friendsGroup.deskList[i].userIDList) {
              var userID = friendsGroup.deskList[i].userIDList[j];
              if (userID == desk.userID) {
                friendsGroup.deskList[i].userIDList.splice(j, 1);
                break;
              }
            }
            return friendsGroup.deskList[i];
          }
        }
        return desk;
      },
      changeVIPDeskInfo: function changeVIPDeskInfo(friendsGroupID, desk) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup && friendsGroup.vipDeskList[desk.deskID]) {
          friendsGroup.vipDeskList[desk.deskID].gameStatus = desk.gameStatus;
          friendsGroup.vipDeskList[desk.deskID].curPeopleCount = desk.curPeopleCount;
          if (desk.userID > 0) if (0 == desk.updateType) friendsGroup.vipDeskList[desk.deskID].userIDList.push(desk.userID); else if (1 == desk.updateType) for (var i in friendsGroup.vipDeskList[desk.deskID].userIDList) {
            var userID = friendsGroup.vipDeskList[desk.deskID].userIDList[i];
            if (userID == desk.userID) {
              friendsGroup.vipDeskList[desk.deskID].userIDList.splice(i, 1);
              break;
            }
          }
          return friendsGroup.vipDeskList[desk.deskID];
        }
        return desk;
      },
      delDeskInfo: function delDeskInfo(friendsGroupID, deskID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var tempDesk in friendsGroup.deskList) {
          tempDesk = friendsGroup.deskList[tempDesk];
          if (tempDesk.deskID == deskID) {
            var tempTab = this.createDeskInfo(friendsGroupID, deskID);
            this.addDeskInfo(friendsGroupID, tempTab);
            break;
          }
        }
      },
      delVIPDeskInfo: function delVIPDeskInfo(friendsGroupID, deskID) {
        var friendsGroup = this.getFriendsGroup(friendsGroupID);
        if (friendsGroup) for (var tempDesk in friendsGroup.vipDeskList) {
          tempDesk = friendsGroup.vipDeskList[tempDesk];
          if (tempDesk.deskID == deskID) {
            var tempTab = this.createVIPDeskInfo(friendsGroupID, deskID);
            this.addVIPDeskInfo(friendsGroupID, tempTab);
            break;
          }
        }
      },
      onFriendsGroupNotifyMessage: function onFriendsGroupNotifyMessage(netMsg) {
        MSG_NTF_LOGON_FRIENDSGROUP_NOTIFY_MSG == netMsg.bAssistantID ? this.dealFriendsGroupNotifyMsg(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_ROOM_MSG == netMsg.bAssistantID ? this.dealFriendsGroupRoomMsg(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_ACCO_MSG == netMsg.bAssistantID ? this.dealFriendsGroupAccoMsg(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_REDSPOT == netMsg.bAssistantID ? this.dealFriendsGroupRedSpot(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_MSG_HAVE_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupMsgHaveChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_CREATE_FG == netMsg.bAssistantID ? this.dealFriendsGroupCreateFG(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_NAME_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupNameChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_PEOPLE_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupPeopleChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_DISMISS == netMsg.bAssistantID ? this.dealFriendsGroupDismiss(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_NOTICE_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupNoticeChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_MSG == netMsg.bAssistantID ? this.dealFriendsGroupDeskInfoMsg(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupDeskInfoChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_STATUS_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupStatusChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_WECHAT_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupWechatChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_POWER_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupPowerChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_NEW_VIPROOM_MSG == netMsg.bAssistantID ? this.dealFriendsGroupDeskInfoMsg(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_VIPROOM_CHANGE == netMsg.bAssistantID ? this.dealFriendsGroupDeskInfoChange(netMsg) : MSG_NTF_LOGON_FRIENDSGROUP_FIRECOIN_CHANGE == netMsg.bAssistantID && this.dealFriendsGroupFireCoinChange(netMsg);
      },
      dealFriendsGroupNotifyMsg: function dealFriendsGroupNotifyMsg(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushNotify = function(netMsg) {
            var struct = {};
            struct.notify = this._Resolve_OneFriendsGroupNotify(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushNotify(netMsg);
          this.addNotify(info.notify);
          DataNotify.onFriendsGroupNotifyAdd(info.notify);
        }
      },
      dealFriendsGroupRoomMsg: function dealFriendsGroupRoomMsg(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushRoomMsg = function(netMsg) {
            var struct = {};
            struct.roomMsg = this._Resolve_OneFriendsGroupRoomMsg(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushRoomMsg(netMsg);
          this.changeFriendsGroupRoomCount(info.roomMsg.friendsGroupID, 1);
          this.addFriendsGroupRoomMsg(info.roomMsg.friendsGroupID, info.roomMsg);
          DataNotify.onFriendsGroupRoomMsgAdd(info.roomMsg.friendsGroupID, info.roomMsg);
        }
      },
      dealFriendsGroupAccoMsg: function dealFriendsGroupAccoMsg(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushAccoMsg = function(netMsg) {
            var struct = {};
            struct.accoMsg = this._Resolve_OneFriendsGroupAccoMsg(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushAccoMsg(netMsg);
          this.changeFriendsGroupScore(info.accoMsg.friendsGroupID, info.accoMsg);
          this.addFriendsGroupAccoMsg(info.accoMsg.friendsGroupID, info.accoMsg);
          DataNotify.onFriendsGroupAccoMsgAdd(info.accoMsg.friendsGroupID, info.accoMsg);
        }
      },
      dealFriendsGroupRedSpot: function dealFriendsGroupRedSpot(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushRedSpot = function(netMsg) {
            var struct = [];
            struct.notifyRedSpotCount = netMsg.popINT();
            struct.friendsGroupCount = netMsg.popINT();
            struct.msgRedSpotList = [];
            for (var i = 1; i <= struct.friendsGroupCount; ++i) struct.msgRedSpotList.push(this._Resolve_OneFriendsGroupMsgRedSpot(netMsg));
            cc.log("\u670d\u52a1\u5668\u63a8\u9001\u7684\u5c0f\u7ea2\u70b9\u6570\u91cfdealFriendsGroupRedSpot", struct);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushRedSpot(netMsg);
          this.setNotifyRedSpotCount(info.notifyRedSpotCount);
          this.clearFriendsGroupMsgRedSpotList();
          for (var msgRedSpot in info.msgRedSpotList) {
            msgRedSpot = info.msgRedSpotList[msgRedSpot];
            this.setFriendsGroupMsgRedSpot(msgRedSpot.friendsGroupID, msgRedSpot);
          }
          cc.log("dealFriendsGroupRedSpot_info", info);
          DataNotify.onFriendsGroupRedSpotChange(info);
        }
      },
      dealFriendsGroupMsgHaveChange: function dealFriendsGroupMsgHaveChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonChatMsgChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.operType = netMsg.popBYTE();
            struct.msgType = netMsg.popBYTE();
            struct.ID = netMsg.popINT();
            struct.roomCount = netMsg.popINT();
            struct.curPeopleCount = netMsg.popINT();
            return struct;
          }.bind(this);
          var info = _Resolve_LogonChatMsgChange(netMsg);
          if (0 == info.operType) {
            if (0 == info.msgType) {
              this.updateFriendsGroupRoomMsg(info.friendsGroupID, info.ID, info.curPeopleCount);
              DataNotify.onFriendsGroupRoomMsgUpdate(info.friendsGroupID, info.ID, info.curPeopleCount);
            }
          } else if (1 == info.operType) if (0 == info.msgType) {
            this.changeFriendsGroupRoomCount(info.friendsGroupID, -1);
            this.delFriendsGroupRoomMsg(info.friendsGroupID, info.ID);
            DataNotify.onFriendsGroupRoomMsgDel(info.friendsGroupID, info.ID);
          } else 1 == info.msgType && DataNotify.onFriendsGroupAccoMsgDel(info.friendsGroupID, info.ID);
        }
      },
      dealFriendsGroupCreateFG: function dealFriendsGroupCreateFG(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushFGMsg = function(netMsg) {
            var struct = {};
            struct.friendsGroup = this._Resolve_OneFriendsGroupInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushFGMsg(netMsg);
          this.addFriendsGroup(info.friendsGroup);
          cc.log("dealFriendsGroupCreateFGdealFriendsGroupCreateFG");
          DataNotify.onFriendsGroupAdd(info.friendsGroup);
        }
      },
      dealFriendsGroupNameChange: function dealFriendsGroupNameChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupNameChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.name = netMsg.popNCHAR(24);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupNameChange(netMsg);
          this.changeFriendsGroupName(info.friendsGroupID, info.name);
          cc.log("dealFriendsGroupNameChangedealFriendsGroupNameChange");
          DataNotify.onFriendsGroupNameChange(info.friendsGroupID, info.name);
        }
      },
      dealFriendsGroupPeopleChange: function dealFriendsGroupPeopleChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPeopleChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.type = netMsg.popBYTE();
            struct.member = this._Resolve_OneFriendsGroupUserInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPeopleChange(netMsg);
          if (0 == info.type) ; else if (1 == info.type) {
            this.changeFriendsGroupPeopleCount(info.friendsGroupID, 1);
            this.addFriendsGroupMember(info.friendsGroupID, info.member);
            this.addFriendsGroupFrontMember(info.friendsGroupID, info.member);
            cc.log("dealFriendsGroupPeopleChangedealFriendsGroupPeopleChange");
            DataNotify.onFriendsGroupMemberAdd(info.friendsGroupID, info.member);
          } else if (2 == info.type) {
            this.changeFriendsGroupPeopleCount(info.friendsGroupID, -1);
            this.delFriendsGroupMember(info.friendsGroupID, info.member.userID);
            this.delFriendsGroupFrontMember(info.friendsGroupID, info.member.userID);
            cc.log("dealFriendsGroupPeopleChangedealFriendsGroupPeopleChange");
            DataNotify.onFriendsGroupMemberDel(info.friendsGroupID, info.member.userID);
          }
        }
      },
      dealFriendsGroupDismiss: function dealFriendsGroupDismiss(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupPushDismiss = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupPushDismiss(netMsg);
          this.delFriendsGroup(info.friendsGroupID);
          cc.log("dealFriendsGroupDismissdealFriendsGroupDismiss");
          DataNotify.onFriendsGroupDel(info.friendsGroupID);
        }
      },
      dealFriendsGroupNoticeChange: function dealFriendsGroupNoticeChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupNoticeChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.notice = netMsg.popNCHAR(128);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupNoticeChange(netMsg);
          this.changeFriendsGroupNotice(info.friendsGroupID, info.notice);
          DataNotify.onFriendsGroupNoticeChange(info.friendsGroupID, info.notice);
        }
      },
      dealFriendsGroupDeskInfoMsg: function dealFriendsGroupDeskInfoMsg(netMsg) {
        this.ClubLayer = new (require("ClubLayer"))();
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupAddDeskInfo = function(netMsg) {
            var struct = [];
            struct.desk = this._Resolve_OneFriendsGroupDeskInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupAddDeskInfo(netMsg);
          if (MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_MSG == netMsg.bAssistantID) {
            cc.log("\u5b9e\u65f6\u589e\u52a0\u684c\u5b50\u5728\u8fd9\u91cc++++++++++++++++++++++++++++++++");
            this.addDeskInfo(info.desk.friendsGroupID, info.desk);
            this.changeFriendsGroupDeskCount(info.desk.friendsGroupID, 1);
            DataNotify.onFriendsGroupDeskAdd(info.desk.friendsGroupID, info.desk);
          } else if (MSG_NTF_LOGON_FRIENDSGROUP_NEW_VIPROOM_MSG == netMsg.bAssistantID) {
            var isRepeat = this.addVIPDeskInfo(info.desk.friendsGroupID, info.desk);
            if (!isRepeat) {
              cc.log("\u5b9e\u65f6\u589e\u52a0VIP\u684c\u5b50\u5728\u8fd9\u91cc++++++++++++++++++++++++++++++++");
              this.addVIPDeskInfo(info.desk.friendsGroupID, info.desk);
              this.changeFriendsGroupVIPRoomCount(info.desk.friendsGroupID, 1);
              DataNotify.onFriendsGroupVIPDeskAdd(info.desk.friendsGroupID, info.desk);
            }
          }
        }
      },
      dealFriendsGroupDeskInfoChange: function dealFriendsGroupDeskInfoChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupDeskInfoChange = function(netMsg) {
            var struct = [];
            struct.friendsGroupID = netMsg.popINT();
            struct.operType = netMsg.popBYTE();
            struct.deskID = netMsg.popINT();
            struct.curPeopleCount = netMsg.popINT();
            struct.gameStatus = netMsg.popBYTE();
            struct.updateType = netMsg.popBYTE();
            struct.userID = netMsg.popINT();
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupDeskInfoChange(netMsg);
          if (0 == info.operType) {
            if (MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_CHANGE == netMsg.bAssistantID) {
              var desk = this.changeDeskInfo(info.friendsGroupID, info);
              DataNotify.onFriendsGroupDeskChange(desk.friendsGroupID, desk);
            } else if (MSG_NTF_LOGON_FRIENDSGROUP_VIPROOM_CHANGE == netMsg.bAssistantID) {
              var _desk = this.changeVIPDeskInfo(info.friendsGroupID, info);
              DataNotify.onFriendsGroupVIPDeskChange(_desk.friendsGroupID, _desk);
            }
          } else if (1 == info.operType) if (MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_CHANGE == netMsg.bAssistantID) {
            this.delDeskInfo(info.friendsGroupID, info.deskID);
            this.changeFriendsGroupDeskCount(info.friendsGroupID, -1);
            var _desk2 = this.createDeskInfo(info.friendsGroupID, info.deskID);
            DataNotify.onFriendsGroupDeskDel(_desk2.friendsGroupID, _desk2);
          } else if (MSG_NTF_LOGON_FRIENDSGROUP_VIPROOM_CHANGE == netMsg.bAssistantID) {
            this.delVIPDeskInfo(info.friendsGroupID, info.deskID);
            this.changeFriendsGroupVIPRoomCount(info.friendsGroupID, -1);
            var _desk3 = this.createVIPDeskInfo(info.friendsGroupID, info.deskID);
            DataNotify.onFriendsGroupVIPDeskDel(_desk3.friendsGroupID, _desk3);
          }
        }
      },
      dealFriendsGroupStatusChange: function dealFriendsGroupStatusChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupUserStatusChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.count = netMsg.popINT();
            struct.userList = {};
            for (var i = 1; i <= struct.count; ++i) struct.userList[i] = this._Resolve_StatusChangeStruct(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupUserStatusChange(netMsg);
          for (var user in info.userList) {
            user = info.userList[user];
            this.changeFriendsGroupMemberStatus(info.friendsGroupID, user.userID, user.status);
            DataNotify.onFriendsGroupStatusChange(info.friendsGroupID, user.userID, user.status);
          }
        }
      },
      dealFriendsGroupWechatChange: function dealFriendsGroupWechatChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupWechatChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.wechat = netMsg.popNCHAR(48);
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupWechatChange(netMsg);
          window.index = 0;
          window.QMBH = info.wechat;
          window.BH = true;
          this.changeFriendsGroupWechat(info.friendsGroupID, info.wechat);
          DataNotify.onFriendsGroupWechatChange(info.friendsGroupID, info.wechat);
        }
      },
      dealFriendsGroupPowerChange: function dealFriendsGroupPowerChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupUserPowerChange = function(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.friendsGroupID = netMsg.popINT();
            struct.power = netMsg.popBYTE();
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupUserPowerChange(netMsg);
          this.changeFriendsGroupMemberPower(info.friendsGroupID, info.userID, info.power);
          DataNotify.onFriendsGroupPowerChange(info.friendsGroupID, info.userID, info.power);
        }
      },
      dealFriendsGroupFireCoinChange: function dealFriendsGroupFireCoinChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonFriendsGroupUserFireCoinChange = function(netMsg) {
            var struct = {};
            struct.friendsGroupID = netMsg.popINT();
            struct.changInfoList = [];
            for (var i = 1; i <= G_WAR_RECORD_PLAYER_NUM; ++i) {
              var changInfo = {};
              changInfo.userID = netMsg.popINT();
              changInfo.fireCoin = netMsg.popINT();
              changInfo.userID > 0 && struct.changInfoList.push(changInfo);
            }
            return struct;
          }.bind(this);
          var info = _Resolve_LogonFriendsGroupUserFireCoinChange(netMsg);
          for (var changInfo in info.changInfoList) {
            changInfo = info.changInfoList[changInfo];
            this.changeFriendsGroupMemberFireCoin(info.friendsGroupID, changInfo.userID, changInfo.fireCoin);
            DataNotify.onFriendsGroupMemberFireCoinChange(info.friendsGroupID, changInfo.userID, changInfo.fireCoin);
          }
        }
      },
      getSelectFriendsGroup: function getSelectFriendsGroup() {
        return this.getFriendsGroup(this.selectFriendsGroupID);
      },
      setSelectFriendsGroupID: function setSelectFriendsGroupID(friendsGroupID) {
        this.selectFriendsGroupID = friendsGroupID;
      },
      getSelectFriendsGroupID: function getSelectFriendsGroupID() {
        return this.selectFriendsGroupID;
      },
      setZhiDingFriendsGroupID: function setZhiDingFriendsGroupID(friendsGroupID) {
        var userID = UserInfoManager.getMyInfo().userID;
        cc.sys.localStorage.setItem(tools.stringFormat(G_ZHIDING_CLUB_ID, userID), friendsGroupID);
      },
      getZhiDingFriendsGroupID: function getZhiDingFriendsGroupID() {
        var userID = UserInfoManager.getMyInfo().userID;
        var zhiDingFriendsGroupId = Number(cc.sys.localStorage.getItem(tools.stringFormat(G_ZHIDING_CLUB_ID, userID)));
        return zhiDingFriendsGroupId;
      },
      setJoinRoomScene: function setJoinRoomScene(scene) {
        var userID = UserInfoManager.getMyInfo().userID;
        cc.sys.localStorage.setItem(tools.stringFormat(G_JOIN_ROOM_SCENE, userID), scene);
      },
      getJoinRoomScene: function getJoinRoomScene() {
        var userID = UserInfoManager.getMyInfo().userID;
        return cc.sys.localStorage.getItem(tools.stringFormat(G_JOIN_ROOM_SCENE, userID));
      },
      requestTuiJianClub: function requestTuiJianClub(callback) {
        var actionName = "clubRecommend";
        var userID = UserInfoManager.getMyInfo().userID;
        var fCallback = function() {
          cc.log("\u8bf7\u6c42\u83b7\u53d6\u63a8\u8350\u4ff1\u4e50\u90e8\u4fe1\u606f\u8d85\u65f6");
        }.bind(this);
        var sCallback = function(jsonData) {
          jsonData.status == G_JSON_DATA_STATUS_OK ? callback(jsonData[actionName]) : createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/API/index.php");
        args.params = {
          action: actionName,
          userID: userID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      clear: function clear() {
        this.friendGroupsList = {};
        this.notifyList = {};
        this.notifyRedSpotCount = 0;
        this.msgRedSpotList = {};
        this.instance = null;
      }
    });
    module.exports = FriendsGroupManager;
    cc._RF.pop();
  }, {
    ClubLayer: void 0,
    DataManager: "DataManager",
    GlobalEnum: "GlobalEnum"
  } ],
  15: [ function(require, module, exports) {
    "use strict";
    function freeze(object, oc) {
      void 0 === oc && (oc = Object);
      return oc && "function" === typeof oc.freeze ? oc.freeze(object) : object;
    }
    function assign(target, source) {
      if (null === target || "object" !== typeof target) throw new TypeError("target is not an object");
      for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
      return target;
    }
    var MIME_TYPE = freeze({
      HTML: "text/html",
      isHTML: function(value) {
        return value === MIME_TYPE.HTML;
      },
      XML_APPLICATION: "application/xml",
      XML_TEXT: "text/xml",
      XML_XHTML_APPLICATION: "application/xhtml+xml",
      XML_SVG_IMAGE: "image/svg+xml"
    });
    var NAMESPACE = freeze({
      HTML: "http://www.w3.org/1999/xhtml",
      isHTML: function(uri) {
        return uri === NAMESPACE.HTML;
      },
      SVG: "http://www.w3.org/2000/svg",
      XML: "http://www.w3.org/XML/1998/namespace",
      XMLNS: "http://www.w3.org/2000/xmlns/"
    });
    exports.assign = assign;
    exports.freeze = freeze;
    exports.MIME_TYPE = MIME_TYPE;
    exports.NAMESPACE = NAMESPACE;
  }, {} ],
  16: [ function(require, module, exports) {
    var conventions = require("./conventions");
    var dom = require("./dom");
    var entities = require("./entities");
    var sax = require("./sax");
    var DOMImplementation = dom.DOMImplementation;
    var NAMESPACE = conventions.NAMESPACE;
    var ParseError = sax.ParseError;
    var XMLReader = sax.XMLReader;
    function normalizeLineEndings(input) {
      return input.replace(/\r[\n\u0085]/g, "\n").replace(/[\r\u0085\u2028]/g, "\n");
    }
    function DOMParser(options) {
      this.options = options || {
        locator: {}
      };
    }
    DOMParser.prototype.parseFromString = function(source, mimeType) {
      var options = this.options;
      var sax = new XMLReader();
      var domBuilder = options.domBuilder || new DOMHandler();
      var errorHandler = options.errorHandler;
      var locator = options.locator;
      var defaultNSMap = options.xmlns || {};
      var isHTML = /\/x?html?$/.test(mimeType);
      var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;
      locator && domBuilder.setDocumentLocator(locator);
      sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);
      sax.domBuilder = options.domBuilder || domBuilder;
      isHTML && (defaultNSMap[""] = NAMESPACE.HTML);
      defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
      var normalize = options.normalizeLineEndings || normalizeLineEndings;
      source && "string" === typeof source ? sax.parse(normalize(source), defaultNSMap, entityMap) : sax.errorHandler.error("invalid doc source");
      return domBuilder.doc;
    };
    function buildErrorHandler(errorImpl, domBuilder, locator) {
      if (!errorImpl) {
        if (domBuilder instanceof DOMHandler) return domBuilder;
        errorImpl = domBuilder;
      }
      var errorHandler = {};
      var isCallback = errorImpl instanceof Function;
      locator = locator || {};
      function build(key) {
        var fn = errorImpl[key];
        !fn && isCallback && (fn = 2 == errorImpl.length ? function(msg) {
          errorImpl(key, msg);
        } : errorImpl);
        errorHandler[key] = fn && function(msg) {
          fn("[xmldom " + key + "]\t" + msg + _locator(locator));
        } || function() {};
      }
      build("warning");
      build("error");
      build("fatalError");
      return errorHandler;
    }
    function DOMHandler() {
      this.cdata = false;
    }
    function position(locator, node) {
      node.lineNumber = locator.lineNumber;
      node.columnNumber = locator.columnNumber;
    }
    DOMHandler.prototype = {
      startDocument: function() {
        this.doc = new DOMImplementation().createDocument(null, null, null);
        this.locator && (this.doc.documentURI = this.locator.systemId);
      },
      startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        appendElement(this, el);
        this.currentElement = el;
        this.locator && position(this.locator, el);
        for (var i = 0; i < len; i++) {
          var namespaceURI = attrs.getURI(i);
          var value = attrs.getValue(i);
          var qName = attrs.getQName(i);
          var attr = doc.createAttributeNS(namespaceURI, qName);
          this.locator && position(attrs.getLocator(i), attr);
          attr.value = attr.nodeValue = value;
          el.setAttributeNode(attr);
        }
      },
      endElement: function(namespaceURI, localName, qName) {
        var current = this.currentElement;
        var tagName = current.tagName;
        this.currentElement = current.parentNode;
      },
      startPrefixMapping: function(prefix, uri) {},
      endPrefixMapping: function(prefix) {},
      processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && position(this.locator, ins);
        appendElement(this, ins);
      },
      ignorableWhitespace: function(ch, start, length) {},
      characters: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        if (chars) {
          if (this.cdata) var charNode = this.doc.createCDATASection(chars); else var charNode = this.doc.createTextNode(chars);
          this.currentElement ? this.currentElement.appendChild(charNode) : /^\s*$/.test(chars) && this.doc.appendChild(charNode);
          this.locator && position(this.locator, charNode);
        }
      },
      skippedEntity: function(name) {},
      endDocument: function() {
        this.doc.normalize();
      },
      setDocumentLocator: function(locator) {
        (this.locator = locator) && (locator.lineNumber = 0);
      },
      comment: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && position(this.locator, comm);
        appendElement(this, comm);
      },
      startCDATA: function() {
        this.cdata = true;
      },
      endCDATA: function() {
        this.cdata = false;
      },
      startDTD: function(name, publicId, systemId) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
          var dt = impl.createDocumentType(name, publicId, systemId);
          this.locator && position(this.locator, dt);
          appendElement(this, dt);
          this.doc.doctype = dt;
        }
      },
      warning: function(error) {
        console.warn("[xmldom warning]\t" + error, _locator(this.locator));
      },
      error: function(error) {
        console.error("[xmldom error]\t" + error, _locator(this.locator));
      },
      fatalError: function(error) {
        throw new ParseError(error, this.locator);
      }
    };
    function _locator(l) {
      if (l) return "\n@" + (l.systemId || "") + "#[line:" + l.lineNumber + ",col:" + l.columnNumber + "]";
    }
    function _toString(chars, start, length) {
      if ("string" == typeof chars) return chars.substr(start, length);
      if (chars.length >= start + length || start) return new java.lang.String(chars, start, length) + "";
      return chars;
    }
    "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(key) {
      DOMHandler.prototype[key] = function() {
        return null;
      };
    });
    function appendElement(hander, node) {
      hander.currentElement ? hander.currentElement.appendChild(node) : hander.doc.appendChild(node);
    }
    exports.__DOMHandler = DOMHandler;
    exports.normalizeLineEndings = normalizeLineEndings;
    exports.DOMParser = DOMParser;
  }, {
    "./conventions": 15,
    "./dom": 17,
    "./entities": 18,
    "./sax": 20
  } ],
  17: [ function(require, module, exports) {
    var conventions = require("./conventions");
    var NAMESPACE = conventions.NAMESPACE;
    function notEmptyString(input) {
      return "" !== input;
    }
    function splitOnASCIIWhitespace(input) {
      return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : [];
    }
    function orderedSetReducer(current, element) {
      current.hasOwnProperty(element) || (current[element] = true);
      return current;
    }
    function toOrderedSet(input) {
      if (!input) return [];
      var list = splitOnASCIIWhitespace(input);
      return Object.keys(list.reduce(orderedSetReducer, {}));
    }
    function arrayIncludes(list) {
      return function(element) {
        return list && -1 !== list.indexOf(element);
      };
    }
    function copy(src, dest) {
      for (var p in src) dest[p] = src[p];
    }
    function _extends(Class, Super) {
      var pt = Class.prototype;
      if (!(pt instanceof Super)) {
        function t() {}
        t.prototype = Super.prototype;
        t = new t();
        copy(pt, t);
        Class.prototype = pt = t;
      }
      if (pt.constructor != Class) {
        "function" != typeof Class && console.error("unknown Class:" + Class);
        pt.constructor = Class;
      }
    }
    var NodeType = {};
    var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;
    var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
    var TEXT_NODE = NodeType.TEXT_NODE = 3;
    var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
    var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
    var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
    var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
    var COMMENT_NODE = NodeType.COMMENT_NODE = 8;
    var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
    var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
    var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
    var NOTATION_NODE = NodeType.NOTATION_NODE = 12;
    var ExceptionCode = {};
    var ExceptionMessage = {};
    var INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = "Index size error", 
    1);
    var DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = "DOMString size error", 
    2);
    var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = "Hierarchy request error", 
    3);
    var WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = "Wrong document", 
    4);
    var INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = "Invalid character", 
    5);
    var NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = "No data allowed", 
    6);
    var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = "No modification allowed", 
    7);
    var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = "Not found", 
    8);
    var NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = "Not supported", 
    9);
    var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = "Attribute in use", 
    10);
    var INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = "Invalid state", 
    11);
    var SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = "Syntax error", 
    12);
    var INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = "Invalid modification", 
    13);
    var NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = "Invalid namespace", 
    14);
    var INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = "Invalid access", 
    15);
    function DOMException(code, message) {
      if (message instanceof Error) var error = message; else {
        error = this;
        Error.call(this, ExceptionMessage[code]);
        this.message = ExceptionMessage[code];
        Error.captureStackTrace && Error.captureStackTrace(this, DOMException);
      }
      error.code = code;
      message && (this.message = this.message + ": " + message);
      return error;
    }
    DOMException.prototype = Error.prototype;
    copy(ExceptionCode, DOMException);
    function NodeList() {}
    NodeList.prototype = {
      length: 0,
      item: function(index) {
        return this[index] || null;
      },
      toString: function(isHTML, nodeFilter) {
        for (var buf = [], i = 0; i < this.length; i++) serializeToString(this[i], buf, isHTML, nodeFilter);
        return buf.join("");
      }
    };
    function LiveNodeList(node, refresh) {
      this._node = node;
      this._refresh = refresh;
      _updateLiveList(this);
    }
    function _updateLiveList(list) {
      var inc = list._node._inc || list._node.ownerDocument._inc;
      if (list._inc != inc) {
        var ls = list._refresh(list._node);
        __set__(list, "length", ls.length);
        copy(ls, list);
        list._inc = inc;
      }
    }
    LiveNodeList.prototype.item = function(i) {
      _updateLiveList(this);
      return this[i];
    };
    _extends(LiveNodeList, NodeList);
    function NamedNodeMap() {}
    function _findNodeIndex(list, node) {
      var i = list.length;
      while (i--) if (list[i] === node) return i;
    }
    function _addNamedNode(el, list, newAttr, oldAttr) {
      oldAttr ? list[_findNodeIndex(list, oldAttr)] = newAttr : list[list.length++] = newAttr;
      if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
          oldAttr && _onRemoveAttribute(doc, el, oldAttr);
          _onAddAttribute(doc, el, newAttr);
        }
      }
    }
    function _removeNamedNode(el, list, attr) {
      var i = _findNodeIndex(list, attr);
      if (!(i >= 0)) throw DOMException(NOT_FOUND_ERR, new Error(el.tagName + "@" + attr));
      var lastIndex = list.length - 1;
      while (i < lastIndex) list[i] = list[++i];
      list.length = lastIndex;
      if (el) {
        var doc = el.ownerDocument;
        if (doc) {
          _onRemoveAttribute(doc, el, attr);
          attr.ownerElement = null;
        }
      }
    }
    NamedNodeMap.prototype = {
      length: 0,
      item: NodeList.prototype.item,
      getNamedItem: function(key) {
        var i = this.length;
        while (i--) {
          var attr = this[i];
          if (attr.nodeName == key) return attr;
        }
      },
      setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el != this._ownerElement) throw new DOMException(INUSE_ATTRIBUTE_ERR);
        var oldAttr = this.getNamedItem(attr.nodeName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      setNamedItemNS: function(attr) {
        var el = attr.ownerElement, oldAttr;
        if (el && el != this._ownerElement) throw new DOMException(INUSE_ATTRIBUTE_ERR);
        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      removeNamedItem: function(key) {
        var attr = this.getNamedItem(key);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      getNamedItemNS: function(namespaceURI, localName) {
        var i = this.length;
        while (i--) {
          var node = this[i];
          if (node.localName == localName && node.namespaceURI == namespaceURI) return node;
        }
        return null;
      }
    };
    function DOMImplementation() {}
    DOMImplementation.prototype = {
      hasFeature: function(feature, version) {
        return true;
      },
      createDocument: function(namespaceURI, qualifiedName, doctype) {
        var doc = new Document();
        doc.implementation = this;
        doc.childNodes = new NodeList();
        doc.doctype = doctype || null;
        doctype && doc.appendChild(doctype);
        if (qualifiedName) {
          var root = doc.createElementNS(namespaceURI, qualifiedName);
          doc.appendChild(root);
        }
        return doc;
      },
      createDocumentType: function(qualifiedName, publicId, systemId) {
        var node = new DocumentType();
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId || "";
        node.systemId = systemId || "";
        return node;
      }
    };
    function Node() {}
    Node.prototype = {
      firstChild: null,
      lastChild: null,
      previousSibling: null,
      nextSibling: null,
      attributes: null,
      parentNode: null,
      childNodes: null,
      ownerDocument: null,
      nodeValue: null,
      namespaceURI: null,
      prefix: null,
      localName: null,
      insertBefore: function(newChild, refChild) {
        return _insertBefore(this, newChild, refChild);
      },
      replaceChild: function(newChild, oldChild) {
        this.insertBefore(newChild, oldChild);
        oldChild && this.removeChild(oldChild);
      },
      removeChild: function(oldChild) {
        return _removeChild(this, oldChild);
      },
      appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
      },
      hasChildNodes: function() {
        return null != this.firstChild;
      },
      cloneNode: function(deep) {
        return cloneNode(this.ownerDocument || this, this, deep);
      },
      normalize: function() {
        var child = this.firstChild;
        while (child) {
          var next = child.nextSibling;
          if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {
            this.removeChild(next);
            child.appendData(next.data);
          } else {
            child.normalize();
            child = next;
          }
        }
      },
      isSupported: function(feature, version) {
        return this.ownerDocument.implementation.hasFeature(feature, version);
      },
      hasAttributes: function() {
        return this.attributes.length > 0;
      },
      lookupPrefix: function(namespaceURI) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) for (var n in map) if (map[n] == namespaceURI) return n;
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      lookupNamespaceURI: function(prefix) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map && prefix in map) return map[prefix];
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return null == prefix;
      }
    };
    function _xmlEncoder(c) {
      return ("<" == c ? "&lt;" : ">" == c && "&gt;") || "&" == c && "&amp;" || '"' == c && "&quot;" || "&#" + c.charCodeAt() + ";";
    }
    copy(NodeType, Node);
    copy(NodeType, Node.prototype);
    function _visitNode(node, callback) {
      if (callback(node)) return true;
      if (node = node.firstChild) do {
        if (_visitNode(node, callback)) return true;
      } while (node = node.nextSibling);
    }
    function Document() {}
    function _onAddAttribute(doc, el, newAttr) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      ns === NAMESPACE.XMLNS && (el._nsMap[newAttr.prefix ? newAttr.localName : ""] = newAttr.value);
    }
    function _onRemoveAttribute(doc, el, newAttr, remove) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      ns === NAMESPACE.XMLNS && delete el._nsMap[newAttr.prefix ? newAttr.localName : ""];
    }
    function _onUpdateChild(doc, el, newChild) {
      if (doc && doc._inc) {
        doc._inc++;
        var cs = el.childNodes;
        if (newChild) cs[cs.length++] = newChild; else {
          var child = el.firstChild;
          var i = 0;
          while (child) {
            cs[i++] = child;
            child = child.nextSibling;
          }
          cs.length = i;
          delete cs[cs.length];
        }
      }
    }
    function _removeChild(parentNode, child) {
      var previous = child.previousSibling;
      var next = child.nextSibling;
      previous ? previous.nextSibling = next : parentNode.firstChild = next;
      next ? next.previousSibling = previous : parentNode.lastChild = previous;
      child.parentNode = null;
      child.previousSibling = null;
      child.nextSibling = null;
      _onUpdateChild(parentNode.ownerDocument, parentNode);
      return child;
    }
    function _insertBefore(parentNode, newChild, nextChild) {
      var cp = newChild.parentNode;
      cp && cp.removeChild(newChild);
      if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var newFirst = newChild.firstChild;
        if (null == newFirst) return newChild;
        var newLast = newChild.lastChild;
      } else newFirst = newLast = newChild;
      var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;
      newFirst.previousSibling = pre;
      newLast.nextSibling = nextChild;
      pre ? pre.nextSibling = newFirst : parentNode.firstChild = newFirst;
      null == nextChild ? parentNode.lastChild = newLast : nextChild.previousSibling = newLast;
      do {
        newFirst.parentNode = parentNode;
      } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
      _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);
      newChild.nodeType == DOCUMENT_FRAGMENT_NODE && (newChild.firstChild = newChild.lastChild = null);
      return newChild;
    }
    function _appendSingleChild(parentNode, newChild) {
      newChild.parentNode && newChild.parentNode.removeChild(newChild);
      newChild.parentNode = parentNode;
      newChild.previousSibling = parentNode.lastChild;
      newChild.nextSibling = null;
      newChild.previousSibling ? newChild.previousSibling.nextSibling = newChild : parentNode.firstChild = newChild;
      parentNode.lastChild = newChild;
      _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
      return newChild;
    }
    Document.prototype = {
      nodeName: "#document",
      nodeType: DOCUMENT_NODE,
      doctype: null,
      documentElement: null,
      _inc: 1,
      insertBefore: function(newChild, refChild) {
        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
          var child = newChild.firstChild;
          while (child) {
            var next = child.nextSibling;
            this.insertBefore(child, refChild);
            child = next;
          }
          return newChild;
        }
        null == this.documentElement && newChild.nodeType == ELEMENT_NODE && (this.documentElement = newChild);
        return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;
      },
      removeChild: function(oldChild) {
        this.documentElement == oldChild && (this.documentElement = null);
        return _removeChild(this, oldChild);
      },
      importNode: function(importedNode, deep) {
        return importNode(this, importedNode, deep);
      },
      getElementById: function(id) {
        var rtv = null;
        _visitNode(this.documentElement, function(node) {
          if (node.nodeType == ELEMENT_NODE && node.getAttribute("id") == id) {
            rtv = node;
            return true;
          }
        });
        return rtv;
      },
      getElementsByClassName: function(classNames) {
        var classNamesSet = toOrderedSet(classNames);
        return new LiveNodeList(this, function(base) {
          var ls = [];
          classNamesSet.length > 0 && _visitNode(base.documentElement, function(node) {
            if (node !== base && node.nodeType === ELEMENT_NODE) {
              var nodeClassNames = node.getAttribute("class");
              if (nodeClassNames) {
                var matches = classNames === nodeClassNames;
                if (!matches) {
                  var nodeClassNamesSet = toOrderedSet(nodeClassNames);
                  matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
                }
                matches && ls.push(node);
              }
            }
          });
          return ls;
        });
      },
      createElement: function(tagName) {
        var node = new Element();
        node.ownerDocument = this;
        node.nodeName = tagName;
        node.tagName = tagName;
        node.localName = tagName;
        node.childNodes = new NodeList();
        var attrs = node.attributes = new NamedNodeMap();
        attrs._ownerElement = node;
        return node;
      },
      createDocumentFragment: function() {
        var node = new DocumentFragment();
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        return node;
      },
      createTextNode: function(data) {
        var node = new Text();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createComment: function(data) {
        var node = new Comment();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createCDATASection: function(data) {
        var node = new CDATASection();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createProcessingInstruction: function(target, data) {
        var node = new ProcessingInstruction();
        node.ownerDocument = this;
        node.tagName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
      },
      createAttribute: function(name) {
        var node = new Attr();
        node.ownerDocument = this;
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
      },
      createEntityReference: function(name) {
        var node = new EntityReference();
        node.ownerDocument = this;
        node.nodeName = name;
        return node;
      },
      createElementNS: function(namespaceURI, qualifiedName) {
        var node = new Element();
        var pl = qualifiedName.split(":");
        var attrs = node.attributes = new NamedNodeMap();
        node.childNodes = new NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = namespaceURI;
        if (2 == pl.length) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else node.localName = qualifiedName;
        attrs._ownerElement = node;
        return node;
      },
      createAttributeNS: function(namespaceURI, qualifiedName) {
        var node = new Attr();
        var pl = qualifiedName.split(":");
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.namespaceURI = namespaceURI;
        node.specified = true;
        if (2 == pl.length) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else node.localName = qualifiedName;
        return node;
      }
    };
    _extends(Document, Node);
    function Element() {
      this._nsMap = {};
    }
    Element.prototype = {
      nodeType: ELEMENT_NODE,
      hasAttribute: function(name) {
        return null != this.getAttributeNode(name);
      },
      getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr && attr.value || "";
      },
      getAttributeNode: function(name) {
        return this.attributes.getNamedItem(name);
      },
      setAttribute: function(name, value) {
        var attr = this.ownerDocument.createAttribute(name);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
      },
      appendChild: function(newChild) {
        return newChild.nodeType === DOCUMENT_FRAGMENT_NODE ? this.insertBefore(newChild, null) : _appendSingleChild(this, newChild);
      },
      setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
      },
      setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
      },
      removeAttributeNode: function(oldAttr) {
        return this.attributes.removeNamedItem(oldAttr.nodeName);
      },
      removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
      },
      hasAttributeNS: function(namespaceURI, localName) {
        return null != this.getAttributeNodeNS(namespaceURI, localName);
      },
      getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr && attr.value || "";
      },
      setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
      },
      getElementsByTagName: function(tagName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            node === base || node.nodeType != ELEMENT_NODE || "*" !== tagName && node.tagName != tagName || ls.push(node);
          });
          return ls;
        });
      },
      getElementsByTagNameNS: function(namespaceURI, localName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            node === base || node.nodeType !== ELEMENT_NODE || "*" !== namespaceURI && node.namespaceURI !== namespaceURI || "*" !== localName && node.localName != localName || ls.push(node);
          });
          return ls;
        });
      }
    };
    Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
    Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
    _extends(Element, Node);
    function Attr() {}
    Attr.prototype.nodeType = ATTRIBUTE_NODE;
    _extends(Attr, Node);
    function CharacterData() {}
    CharacterData.prototype = {
      data: "",
      substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
      },
      appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
      },
      insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
      },
      appendChild: function(newChild) {
        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);
      },
      deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
      },
      replaceData: function(offset, count, text) {
        var start = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
      }
    };
    _extends(CharacterData, Node);
    function Text() {}
    Text.prototype = {
      nodeName: "#text",
      nodeType: TEXT_NODE,
      splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        this.parentNode && this.parentNode.insertBefore(newNode, this.nextSibling);
        return newNode;
      }
    };
    _extends(Text, CharacterData);
    function Comment() {}
    Comment.prototype = {
      nodeName: "#comment",
      nodeType: COMMENT_NODE
    };
    _extends(Comment, CharacterData);
    function CDATASection() {}
    CDATASection.prototype = {
      nodeName: "#cdata-section",
      nodeType: CDATA_SECTION_NODE
    };
    _extends(CDATASection, CharacterData);
    function DocumentType() {}
    DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
    _extends(DocumentType, Node);
    function Notation() {}
    Notation.prototype.nodeType = NOTATION_NODE;
    _extends(Notation, Node);
    function Entity() {}
    Entity.prototype.nodeType = ENTITY_NODE;
    _extends(Entity, Node);
    function EntityReference() {}
    EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
    _extends(EntityReference, Node);
    function DocumentFragment() {}
    DocumentFragment.prototype.nodeName = "#document-fragment";
    DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
    _extends(DocumentFragment, Node);
    function ProcessingInstruction() {}
    ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
    _extends(ProcessingInstruction, Node);
    function XMLSerializer() {}
    XMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {
      return nodeSerializeToString.call(node, isHtml, nodeFilter);
    };
    Node.prototype.toString = nodeSerializeToString;
    function nodeSerializeToString(isHtml, nodeFilter) {
      var buf = [];
      var refNode = 9 == this.nodeType && this.documentElement || this;
      var prefix = refNode.prefix;
      var uri = refNode.namespaceURI;
      if (uri && null == prefix) {
        var prefix = refNode.lookupPrefix(uri);
        if (null == prefix) var visibleNamespaces = [ {
          namespace: uri,
          prefix: null
        } ];
      }
      serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
      return buf.join("");
    }
    function needNamespaceDefine(node, isHTML, visibleNamespaces) {
      var prefix = node.prefix || "";
      var uri = node.namespaceURI;
      if (!uri) return false;
      if ("xml" === prefix && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) return false;
      var i = visibleNamespaces.length;
      while (i--) {
        var ns = visibleNamespaces[i];
        if (ns.prefix === prefix) return ns.namespace !== uri;
      }
      return true;
    }
    function addSerializedAttribute(buf, qualifiedName, value) {
      buf.push(" ", qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"');
    }
    function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
      visibleNamespaces || (visibleNamespaces = []);
      if (nodeFilter) {
        node = nodeFilter(node);
        if (!node) return;
        if ("string" == typeof node) {
          buf.push(node);
          return;
        }
      }
      switch (node.nodeType) {
       case ELEMENT_NODE:
        var attrs = node.attributes;
        var len = attrs.length;
        var child = node.firstChild;
        var nodeName = node.tagName;
        isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;
        var prefixedNodeName = nodeName;
        if (!isHTML && !node.prefix && node.namespaceURI) {
          var defaultNS;
          for (var ai = 0; ai < attrs.length; ai++) if ("xmlns" === attrs.item(ai).name) {
            defaultNS = attrs.item(ai).value;
            break;
          }
          if (!defaultNS) for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
            var namespace = visibleNamespaces[nsi];
            if ("" === namespace.prefix && namespace.namespace === node.namespaceURI) {
              defaultNS = namespace.namespace;
              break;
            }
          }
          if (defaultNS !== node.namespaceURI) for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
            var namespace = visibleNamespaces[nsi];
            if (namespace.namespace === node.namespaceURI) {
              namespace.prefix && (prefixedNodeName = namespace.prefix + ":" + nodeName);
              break;
            }
          }
        }
        buf.push("<", prefixedNodeName);
        for (var i = 0; i < len; i++) {
          var attr = attrs.item(i);
          "xmlns" == attr.prefix ? visibleNamespaces.push({
            prefix: attr.localName,
            namespace: attr.value
          }) : "xmlns" == attr.nodeName && visibleNamespaces.push({
            prefix: "",
            namespace: attr.value
          });
        }
        for (var i = 0; i < len; i++) {
          var attr = attrs.item(i);
          if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
            var prefix = attr.prefix || "";
            var uri = attr.namespaceURI;
            addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
            visibleNamespaces.push({
              prefix: prefix,
              namespace: uri
            });
          }
          serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
        }
        if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
          var prefix = node.prefix || "";
          var uri = node.namespaceURI;
          addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
          visibleNamespaces.push({
            prefix: prefix,
            namespace: uri
          });
        }
        if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
          buf.push(">");
          if (isHTML && /^script$/i.test(nodeName)) while (child) {
            child.data ? buf.push(child.data) : serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
            child = child.nextSibling;
          } else while (child) {
            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
            child = child.nextSibling;
          }
          buf.push("</", prefixedNodeName, ">");
        } else buf.push("/>");
        return;

       case DOCUMENT_NODE:
       case DOCUMENT_FRAGMENT_NODE:
        var child = node.firstChild;
        while (child) {
          serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
          child = child.nextSibling;
        }
        return;

       case ATTRIBUTE_NODE:
        return addSerializedAttribute(buf, node.name, node.value);

       case TEXT_NODE:
        return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));

       case CDATA_SECTION_NODE:
        return buf.push("<![CDATA[", node.data, "]]>");

       case COMMENT_NODE:
        return buf.push("\x3c!--", node.data, "--\x3e");

       case DOCUMENT_TYPE_NODE:
        var pubid = node.publicId;
        var sysid = node.systemId;
        buf.push("<!DOCTYPE ", node.name);
        if (pubid) {
          buf.push(" PUBLIC ", pubid);
          sysid && "." != sysid && buf.push(" ", sysid);
          buf.push(">");
        } else if (sysid && "." != sysid) buf.push(" SYSTEM ", sysid, ">"); else {
          var sub = node.internalSubset;
          sub && buf.push(" [", sub, "]");
          buf.push(">");
        }
        return;

       case PROCESSING_INSTRUCTION_NODE:
        return buf.push("<?", node.target, " ", node.data, "?>");

       case ENTITY_REFERENCE_NODE:
        return buf.push("&", node.nodeName, ";");

       default:
        buf.push("??", node.nodeName);
      }
    }
    function importNode(doc, node, deep) {
      var node2;
      switch (node.nodeType) {
       case ELEMENT_NODE:
        node2 = node.cloneNode(false);
        node2.ownerDocument = doc;

       case DOCUMENT_FRAGMENT_NODE:
        break;

       case ATTRIBUTE_NODE:
        deep = true;
      }
      node2 || (node2 = node.cloneNode(false));
      node2.ownerDocument = doc;
      node2.parentNode = null;
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(importNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function cloneNode(doc, node, deep) {
      var node2 = new node.constructor();
      for (var n in node) {
        var v = node[n];
        "object" != typeof v && v != node2[n] && (node2[n] = v);
      }
      node.childNodes && (node2.childNodes = new NodeList());
      node2.ownerDocument = doc;
      switch (node2.nodeType) {
       case ELEMENT_NODE:
        var attrs = node.attributes;
        var attrs2 = node2.attributes = new NamedNodeMap();
        var len = attrs.length;
        attrs2._ownerElement = node2;
        for (var i = 0; i < len; i++) node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));
        break;

       case ATTRIBUTE_NODE:
        deep = true;
      }
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(cloneNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function __set__(object, key, value) {
      object[key] = value;
    }
    try {
      if (Object.defineProperty) {
        Object.defineProperty(LiveNodeList.prototype, "length", {
          get: function() {
            _updateLiveList(this);
            return this.$$length;
          }
        });
        Object.defineProperty(Node.prototype, "textContent", {
          get: function() {
            return getTextContent(this);
          },
          set: function(data) {
            switch (this.nodeType) {
             case ELEMENT_NODE:
             case DOCUMENT_FRAGMENT_NODE:
              while (this.firstChild) this.removeChild(this.firstChild);
              (data || String(data)) && this.appendChild(this.ownerDocument.createTextNode(data));
              break;

             default:
              this.data = data;
              this.value = data;
              this.nodeValue = data;
            }
          }
        });
        function getTextContent(node) {
          switch (node.nodeType) {
           case ELEMENT_NODE:
           case DOCUMENT_FRAGMENT_NODE:
            var buf = [];
            node = node.firstChild;
            while (node) {
              7 !== node.nodeType && 8 !== node.nodeType && buf.push(getTextContent(node));
              node = node.nextSibling;
            }
            return buf.join("");

           default:
            return node.nodeValue;
          }
        }
        __set__ = function(object, key, value) {
          object["$$" + key] = value;
        };
      }
    } catch (e) {}
    exports.DocumentType = DocumentType;
    exports.DOMException = DOMException;
    exports.DOMImplementation = DOMImplementation;
    exports.Element = Element;
    exports.Node = Node;
    exports.NodeList = NodeList;
    exports.XMLSerializer = XMLSerializer;
  }, {
    "./conventions": 15
  } ],
  18: [ function(require, module, exports) {
    var freeze = require("./conventions").freeze;
    exports.XML_ENTITIES = freeze({
      amp: "&",
      apos: "'",
      gt: ">",
      lt: "<",
      quot: '"'
    });
    exports.HTML_ENTITIES = freeze({
      lt: "<",
      gt: ">",
      amp: "&",
      quot: '"',
      apos: "'",
      Agrave: "\xc0",
      Aacute: "\xc1",
      Acirc: "\xc2",
      Atilde: "\xc3",
      Auml: "\xc4",
      Aring: "\xc5",
      AElig: "\xc6",
      Ccedil: "\xc7",
      Egrave: "\xc8",
      Eacute: "\xc9",
      Ecirc: "\xca",
      Euml: "\xcb",
      Igrave: "\xcc",
      Iacute: "\xcd",
      Icirc: "\xce",
      Iuml: "\xcf",
      ETH: "\xd0",
      Ntilde: "\xd1",
      Ograve: "\xd2",
      Oacute: "\xd3",
      Ocirc: "\xd4",
      Otilde: "\xd5",
      Ouml: "\xd6",
      Oslash: "\xd8",
      Ugrave: "\xd9",
      Uacute: "\xda",
      Ucirc: "\xdb",
      Uuml: "\xdc",
      Yacute: "\xdd",
      THORN: "\xde",
      szlig: "\xdf",
      agrave: "\xe0",
      aacute: "\xe1",
      acirc: "\xe2",
      atilde: "\xe3",
      auml: "\xe4",
      aring: "\xe5",
      aelig: "\xe6",
      ccedil: "\xe7",
      egrave: "\xe8",
      eacute: "\xe9",
      ecirc: "\xea",
      euml: "\xeb",
      igrave: "\xec",
      iacute: "\xed",
      icirc: "\xee",
      iuml: "\xef",
      eth: "\xf0",
      ntilde: "\xf1",
      ograve: "\xf2",
      oacute: "\xf3",
      ocirc: "\xf4",
      otilde: "\xf5",
      ouml: "\xf6",
      oslash: "\xf8",
      ugrave: "\xf9",
      uacute: "\xfa",
      ucirc: "\xfb",
      uuml: "\xfc",
      yacute: "\xfd",
      thorn: "\xfe",
      yuml: "\xff",
      nbsp: "\xa0",
      iexcl: "\xa1",
      cent: "\xa2",
      pound: "\xa3",
      curren: "\xa4",
      yen: "\xa5",
      brvbar: "\xa6",
      sect: "\xa7",
      uml: "\xa8",
      copy: "\xa9",
      ordf: "\xaa",
      laquo: "\xab",
      not: "\xac",
      shy: "\xad\xad",
      reg: "\xae",
      macr: "\xaf",
      deg: "\xb0",
      plusmn: "\xb1",
      sup2: "\xb2",
      sup3: "\xb3",
      acute: "\xb4",
      micro: "\xb5",
      para: "\xb6",
      middot: "\xb7",
      cedil: "\xb8",
      sup1: "\xb9",
      ordm: "\xba",
      raquo: "\xbb",
      frac14: "\xbc",
      frac12: "\xbd",
      frac34: "\xbe",
      iquest: "\xbf",
      times: "\xd7",
      divide: "\xf7",
      forall: "\u2200",
      part: "\u2202",
      exist: "\u2203",
      empty: "\u2205",
      nabla: "\u2207",
      isin: "\u2208",
      notin: "\u2209",
      ni: "\u220b",
      prod: "\u220f",
      sum: "\u2211",
      minus: "\u2212",
      lowast: "\u2217",
      radic: "\u221a",
      prop: "\u221d",
      infin: "\u221e",
      ang: "\u2220",
      and: "\u2227",
      or: "\u2228",
      cap: "\u2229",
      cup: "\u222a",
      int: "\u222b",
      there4: "\u2234",
      sim: "\u223c",
      cong: "\u2245",
      asymp: "\u2248",
      ne: "\u2260",
      equiv: "\u2261",
      le: "\u2264",
      ge: "\u2265",
      sub: "\u2282",
      sup: "\u2283",
      nsub: "\u2284",
      sube: "\u2286",
      supe: "\u2287",
      oplus: "\u2295",
      otimes: "\u2297",
      perp: "\u22a5",
      sdot: "\u22c5",
      Alpha: "\u0391",
      Beta: "\u0392",
      Gamma: "\u0393",
      Delta: "\u0394",
      Epsilon: "\u0395",
      Zeta: "\u0396",
      Eta: "\u0397",
      Theta: "\u0398",
      Iota: "\u0399",
      Kappa: "\u039a",
      Lambda: "\u039b",
      Mu: "\u039c",
      Nu: "\u039d",
      Xi: "\u039e",
      Omicron: "\u039f",
      Pi: "\u03a0",
      Rho: "\u03a1",
      Sigma: "\u03a3",
      Tau: "\u03a4",
      Upsilon: "\u03a5",
      Phi: "\u03a6",
      Chi: "\u03a7",
      Psi: "\u03a8",
      Omega: "\u03a9",
      alpha: "\u03b1",
      beta: "\u03b2",
      gamma: "\u03b3",
      delta: "\u03b4",
      epsilon: "\u03b5",
      zeta: "\u03b6",
      eta: "\u03b7",
      theta: "\u03b8",
      iota: "\u03b9",
      kappa: "\u03ba",
      lambda: "\u03bb",
      mu: "\u03bc",
      nu: "\u03bd",
      xi: "\u03be",
      omicron: "\u03bf",
      pi: "\u03c0",
      rho: "\u03c1",
      sigmaf: "\u03c2",
      sigma: "\u03c3",
      tau: "\u03c4",
      upsilon: "\u03c5",
      phi: "\u03c6",
      chi: "\u03c7",
      psi: "\u03c8",
      omega: "\u03c9",
      thetasym: "\u03d1",
      upsih: "\u03d2",
      piv: "\u03d6",
      OElig: "\u0152",
      oelig: "\u0153",
      Scaron: "\u0160",
      scaron: "\u0161",
      Yuml: "\u0178",
      fnof: "\u0192",
      circ: "\u02c6",
      tilde: "\u02dc",
      ensp: "\u2002",
      emsp: "\u2003",
      thinsp: "\u2009",
      zwnj: "\u200c",
      zwj: "\u200d",
      lrm: "\u200e",
      rlm: "\u200f",
      ndash: "\u2013",
      mdash: "\u2014",
      lsquo: "\u2018",
      rsquo: "\u2019",
      sbquo: "\u201a",
      ldquo: "\u201c",
      rdquo: "\u201d",
      bdquo: "\u201e",
      dagger: "\u2020",
      Dagger: "\u2021",
      bull: "\u2022",
      hellip: "\u2026",
      permil: "\u2030",
      prime: "\u2032",
      Prime: "\u2033",
      lsaquo: "\u2039",
      rsaquo: "\u203a",
      oline: "\u203e",
      euro: "\u20ac",
      trade: "\u2122",
      larr: "\u2190",
      uarr: "\u2191",
      rarr: "\u2192",
      darr: "\u2193",
      harr: "\u2194",
      crarr: "\u21b5",
      lceil: "\u2308",
      rceil: "\u2309",
      lfloor: "\u230a",
      rfloor: "\u230b",
      loz: "\u25ca",
      spades: "\u2660",
      clubs: "\u2663",
      hearts: "\u2665",
      diams: "\u2666"
    });
    exports.entityMap = exports.HTML_ENTITIES;
  }, {
    "./conventions": 15
  } ],
  19: [ function(require, module, exports) {
    var dom = require("./dom");
    exports.DOMImplementation = dom.DOMImplementation;
    exports.XMLSerializer = dom.XMLSerializer;
    exports.DOMParser = require("./dom-parser").DOMParser;
  }, {
    "./dom": 17,
    "./dom-parser": 16
  } ],
  20: [ function(require, module, exports) {
    var NAMESPACE = require("./conventions").NAMESPACE;
    var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var nameChar = new RegExp("[\\-\\.0-9" + nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
    var tagNamePattern = new RegExp("^" + nameStartChar.source + nameChar.source + "*(?::" + nameStartChar.source + nameChar.source + "*)?$");
    var S_TAG = 0;
    var S_ATTR = 1;
    var S_ATTR_SPACE = 2;
    var S_EQ = 3;
    var S_ATTR_NOQUOT_VALUE = 4;
    var S_ATTR_END = 5;
    var S_TAG_SPACE = 6;
    var S_TAG_CLOSE = 7;
    function ParseError(message, locator) {
      this.message = message;
      this.locator = locator;
      Error.captureStackTrace && Error.captureStackTrace(this, ParseError);
    }
    ParseError.prototype = new Error();
    ParseError.prototype.name = ParseError.name;
    function XMLReader() {}
    XMLReader.prototype = {
      parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        _copy(defaultNSMap, defaultNSMap = {});
        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
        domBuilder.endDocument();
      }
    };
    function parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
      function fixedFromCharCode(code) {
        if (code > 65535) {
          code -= 65536;
          var surrogate1 = 55296 + (code >> 10), surrogate2 = 56320 + (1023 & code);
          return String.fromCharCode(surrogate1, surrogate2);
        }
        return String.fromCharCode(code);
      }
      function entityReplacer(a) {
        var k = a.slice(1, -1);
        if (Object.hasOwnProperty.call(entityMap, k)) return entityMap[k];
        if ("#" === k.charAt(0)) return fixedFromCharCode(parseInt(k.substr(1).replace("x", "0x")));
        errorHandler.error("entity not found:" + a);
        return a;
      }
      function appendText(end) {
        if (end > start) {
          var xt = source.substring(start, end).replace(/&#?\w+;/g, entityReplacer);
          locator && position(start);
          domBuilder.characters(xt, 0, end - start);
          start = end;
        }
      }
      function position(p, m) {
        while (p >= lineEnd && (m = linePattern.exec(source))) {
          lineStart = m.index;
          lineEnd = lineStart + m[0].length;
          locator.lineNumber++;
        }
        locator.columnNumber = p - lineStart + 1;
      }
      var lineStart = 0;
      var lineEnd = 0;
      var linePattern = /.*(?:\r\n?|\n)|.*$/g;
      var locator = domBuilder.locator;
      var parseStack = [ {
        currentNSMap: defaultNSMapCopy
      } ];
      var closeMap = {};
      var start = 0;
      while (true) {
        try {
          var tagStart = source.indexOf("<", start);
          if (tagStart < 0) {
            if (!source.substr(start).match(/^\s*$/)) {
              var doc = domBuilder.doc;
              var text = doc.createTextNode(source.substr(start));
              doc.appendChild(text);
              domBuilder.currentElement = text;
            }
            return;
          }
          tagStart > start && appendText(tagStart);
          switch (source.charAt(tagStart + 1)) {
           case "/":
            var end = source.indexOf(">", tagStart + 3);
            var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, "");
            var config = parseStack.pop();
            if (end < 0) {
              tagName = source.substring(tagStart + 2).replace(/[\s<].*/, "");
              errorHandler.error("end tag name: " + tagName + " is not complete:" + config.tagName);
              end = tagStart + 1 + tagName.length;
            } else if (tagName.match(/\s</)) {
              tagName = tagName.replace(/[\s<].*/, "");
              errorHandler.error("end tag name: " + tagName + " maybe not complete");
              end = tagStart + 1 + tagName.length;
            }
            var localNSMap = config.localNSMap;
            var endMatch = config.tagName == tagName;
            var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();
            if (endIgnoreCaseMach) {
              domBuilder.endElement(config.uri, config.localName, tagName);
              if (localNSMap) for (var prefix in localNSMap) domBuilder.endPrefixMapping(prefix);
              endMatch || errorHandler.fatalError("end tag name: " + tagName + " is not match the current start tagName:" + config.tagName);
            } else parseStack.push(config);
            end++;
            break;

           case "?":
            locator && position(tagStart);
            end = parseInstruction(source, tagStart, domBuilder);
            break;

           case "!":
            locator && position(tagStart);
            end = parseDCC(source, tagStart, domBuilder, errorHandler);
            break;

           default:
            locator && position(tagStart);
            var el = new ElementAttributes();
            var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
            var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
            var len = el.length;
            if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {
              el.closed = true;
              entityMap.nbsp || errorHandler.warning("unclosed xml attribute");
            }
            if (locator && len) {
              var locator2 = copyLocator(locator, {});
              for (var i = 0; i < len; i++) {
                var a = el[i];
                position(a.offset);
                a.locator = copyLocator(locator, {});
              }
              domBuilder.locator = locator2;
              appendElement(el, domBuilder, currentNSMap) && parseStack.push(el);
              domBuilder.locator = locator;
            } else appendElement(el, domBuilder, currentNSMap) && parseStack.push(el);
            NAMESPACE.isHTML(el.uri) && !el.closed ? end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder) : end++;
          }
        } catch (e) {
          if (e instanceof ParseError) throw e;
          errorHandler.error("element parse error: " + e);
          end = -1;
        }
        end > start ? start = end : appendText(Math.max(tagStart, start) + 1);
      }
    }
    function copyLocator(f, t) {
      t.lineNumber = f.lineNumber;
      t.columnNumber = f.columnNumber;
      return t;
    }
    function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {
      function addAttribute(qname, value, startIndex) {
        el.attributeNames.hasOwnProperty(qname) && errorHandler.fatalError("Attribute " + qname + " redefined");
        el.addValue(qname, value.replace(/[\t\n\r]/g, " ").replace(/&#?\w+;/g, entityReplacer), startIndex);
      }
      var attrName;
      var value;
      var p = ++start;
      var s = S_TAG;
      while (true) {
        var c = source.charAt(p);
        switch (c) {
         case "=":
          if (s === S_ATTR) {
            attrName = source.slice(start, p);
            s = S_EQ;
          } else {
            if (s !== S_ATTR_SPACE) throw new Error("attribute equal must after attrName");
            s = S_EQ;
          }
          break;

         case "'":
         case '"':
          if (s === S_EQ || s === S_ATTR) {
            if (s === S_ATTR) {
              errorHandler.warning('attribute value must after "="');
              attrName = source.slice(start, p);
            }
            start = p + 1;
            p = source.indexOf(c, start);
            if (!(p > 0)) throw new Error("attribute value no end '" + c + "' match");
            value = source.slice(start, p);
            addAttribute(attrName, value, start - 1);
            s = S_ATTR_END;
          } else {
            if (s != S_ATTR_NOQUOT_VALUE) throw new Error('attribute value must after "="');
            value = source.slice(start, p);
            addAttribute(attrName, value, start);
            errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ")!!");
            start = p + 1;
            s = S_ATTR_END;
          }
          break;

         case "/":
          switch (s) {
           case S_TAG:
            el.setTagName(source.slice(start, p));

           case S_ATTR_END:
           case S_TAG_SPACE:
           case S_TAG_CLOSE:
            s = S_TAG_CLOSE;
            el.closed = true;

           case S_ATTR_NOQUOT_VALUE:
           case S_ATTR:
           case S_ATTR_SPACE:
            break;

           default:
            throw new Error("attribute invalid close char('/')");
          }
          break;

         case "":
          errorHandler.error("unexpected end of input");
          s == S_TAG && el.setTagName(source.slice(start, p));
          return p;

         case ">":
          switch (s) {
           case S_TAG:
            el.setTagName(source.slice(start, p));

           case S_ATTR_END:
           case S_TAG_SPACE:
           case S_TAG_CLOSE:
            break;

           case S_ATTR_NOQUOT_VALUE:
           case S_ATTR:
            value = source.slice(start, p);
            if ("/" === value.slice(-1)) {
              el.closed = true;
              value = value.slice(0, -1);
            }

           case S_ATTR_SPACE:
            s === S_ATTR_SPACE && (value = attrName);
            if (s == S_ATTR_NOQUOT_VALUE) {
              errorHandler.warning('attribute "' + value + '" missed quot(")!');
              addAttribute(attrName, value, start);
            } else {
              NAMESPACE.isHTML(currentNSMap[""]) && value.match(/^(?:disabled|checked|selected)$/i) || errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
              addAttribute(value, value, start);
            }
            break;

           case S_EQ:
            throw new Error("attribute value missed!!");
          }
          return p;

         case "\x80":
          c = " ";

         default:
          if (c <= " ") switch (s) {
           case S_TAG:
            el.setTagName(source.slice(start, p));
            s = S_TAG_SPACE;
            break;

           case S_ATTR:
            attrName = source.slice(start, p);
            s = S_ATTR_SPACE;
            break;

           case S_ATTR_NOQUOT_VALUE:
            var value = source.slice(start, p);
            errorHandler.warning('attribute "' + value + '" missed quot(")!!');
            addAttribute(attrName, value, start);

           case S_ATTR_END:
            s = S_TAG_SPACE;
          } else switch (s) {
           case S_ATTR_SPACE:
            var tagName = el.tagName;
            NAMESPACE.isHTML(currentNSMap[""]) && attrName.match(/^(?:disabled|checked|selected)$/i) || errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
            addAttribute(attrName, attrName, start);
            start = p;
            s = S_ATTR;
            break;

           case S_ATTR_END:
            errorHandler.warning('attribute space is required"' + attrName + '"!!');

           case S_TAG_SPACE:
            s = S_ATTR;
            start = p;
            break;

           case S_EQ:
            s = S_ATTR_NOQUOT_VALUE;
            start = p;
            break;

           case S_TAG_CLOSE:
            throw new Error("elements closed character '/' and '>' must be connected to");
          }
        }
        p++;
      }
    }
    function appendElement(el, domBuilder, currentNSMap) {
      var tagName = el.tagName;
      var localNSMap = null;
      var i = el.length;
      while (i--) {
        var a = el[i];
        var qName = a.qName;
        var value = a.value;
        var nsp = qName.indexOf(":");
        if (nsp > 0) {
          var prefix = a.prefix = qName.slice(0, nsp);
          var localName = qName.slice(nsp + 1);
          var nsPrefix = "xmlns" === prefix && localName;
        } else {
          localName = qName;
          prefix = null;
          nsPrefix = "xmlns" === qName && "";
        }
        a.localName = localName;
        if (false !== nsPrefix) {
          if (null == localNSMap) {
            localNSMap = {};
            _copy(currentNSMap, currentNSMap = {});
          }
          currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
          a.uri = NAMESPACE.XMLNS;
          domBuilder.startPrefixMapping(nsPrefix, value);
        }
      }
      var i = el.length;
      while (i--) {
        a = el[i];
        var prefix = a.prefix;
        if (prefix) {
          "xml" === prefix && (a.uri = NAMESPACE.XML);
          "xmlns" !== prefix && (a.uri = currentNSMap[prefix || ""]);
        }
      }
      var nsp = tagName.indexOf(":");
      if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
      } else {
        prefix = null;
        localName = el.localName = tagName;
      }
      var ns = el.uri = currentNSMap[prefix || ""];
      domBuilder.startElement(ns, localName, tagName, el);
      if (!el.closed) {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        return true;
      }
      domBuilder.endElement(ns, localName, tagName);
      if (localNSMap) for (prefix in localNSMap) domBuilder.endPrefixMapping(prefix);
    }
    function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
      if (/^(?:script|textarea)$/i.test(tagName)) {
        var elEndStart = source.indexOf("</" + tagName + ">", elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (/[&<]/.test(text)) {
          if (/^script$/i.test(tagName)) {
            domBuilder.characters(text, 0, text.length);
            return elEndStart;
          }
          text = text.replace(/&#?\w+;/g, entityReplacer);
          domBuilder.characters(text, 0, text.length);
          return elEndStart;
        }
      }
      return elStartEnd + 1;
    }
    function fixSelfClosed(source, elStartEnd, tagName, closeMap) {
      var pos = closeMap[tagName];
      if (null == pos) {
        pos = source.lastIndexOf("</" + tagName + ">");
        pos < elStartEnd && (pos = source.lastIndexOf("</" + tagName));
        closeMap[tagName] = pos;
      }
      return pos < elStartEnd;
    }
    function _copy(source, target) {
      for (var n in source) target[n] = source[n];
    }
    function parseDCC(source, start, domBuilder, errorHandler) {
      var next = source.charAt(start + 2);
      switch (next) {
       case "-":
        if ("-" === source.charAt(start + 3)) {
          var end = source.indexOf("--\x3e", start + 4);
          if (end > start) {
            domBuilder.comment(source, start + 4, end - start - 4);
            return end + 3;
          }
          errorHandler.error("Unclosed comment");
          return -1;
        }
        return -1;

       default:
        if ("CDATA[" == source.substr(start + 3, 6)) {
          var end = source.indexOf("]]>", start + 9);
          domBuilder.startCDATA();
          domBuilder.characters(source, start + 9, end - start - 9);
          domBuilder.endCDATA();
          return end + 3;
        }
        var matchs = split(source, start);
        var len = matchs.length;
        if (len > 1 && /!doctype/i.test(matchs[0][0])) {
          var name = matchs[1][0];
          var pubid = false;
          var sysid = false;
          if (len > 3) if (/^public$/i.test(matchs[2][0])) {
            pubid = matchs[3][0];
            sysid = len > 4 && matchs[4][0];
          } else /^system$/i.test(matchs[2][0]) && (sysid = matchs[3][0]);
          var lastMatch = matchs[len - 1];
          domBuilder.startDTD(name, pubid, sysid);
          domBuilder.endDTD();
          return lastMatch.index + lastMatch[0].length;
        }
      }
      return -1;
    }
    function parseInstruction(source, start, domBuilder) {
      var end = source.indexOf("?>", start);
      if (end) {
        var match = source.substring(start, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
        if (match) {
          var len = match[0].length;
          domBuilder.processingInstruction(match[1], match[2]);
          return end + 2;
        }
        return -1;
      }
      return -1;
    }
    function ElementAttributes() {
      this.attributeNames = {};
    }
    ElementAttributes.prototype = {
      setTagName: function(tagName) {
        if (!tagNamePattern.test(tagName)) throw new Error("invalid tagName:" + tagName);
        this.tagName = tagName;
      },
      addValue: function(qName, value, offset) {
        if (!tagNamePattern.test(qName)) throw new Error("invalid attribute:" + qName);
        this.attributeNames[qName] = this.length;
        this[this.length++] = {
          qName: qName,
          value: value,
          offset: offset
        };
      },
      length: 0,
      getLocalName: function(i) {
        return this[i].localName;
      },
      getLocator: function(i) {
        return this[i].locator;
      },
      getQName: function(i) {
        return this[i].qName;
      },
      getURI: function(i) {
        return this[i].uri;
      },
      getValue: function(i) {
        return this[i].value;
      }
    };
    function split(source, start) {
      var match;
      var buf = [];
      var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
      reg.lastIndex = start;
      reg.exec(source);
      while (match = reg.exec(source)) {
        buf.push(match);
        if (match[1]) return buf;
      }
    }
    exports.XMLReader = XMLReader;
    exports.ParseError = ParseError;
  }, {
    "./conventions": 15
  } ],
  21: [ function(require, module, exports) {
    module.exports = require("./lib/axios");
  }, {
    "./lib/axios": 23
  } ],
  22: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var settle = require("./../core/settle");
    var cookies = require("./../helpers/cookies");
    var buildURL = require("./../helpers/buildURL");
    var buildFullPath = require("../core/buildFullPath");
    var parseHeaders = require("./../helpers/parseHeaders");
    var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
    var transitionalDefaults = require("../defaults/transitional");
    var AxiosError = require("../core/AxiosError");
    var CanceledError = require("../cancel/CanceledError");
    var parseProtocol = require("../helpers/parseProtocol");
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          config.cancelToken && config.cancelToken.unsubscribe(onCanceled);
          config.signal && config.signal.removeEventListener("abort", onCanceled);
        }
        utils.isFormData(requestData) && utils.isStandardBrowserEnv() && delete requestHeaders["Content-Type"];
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) return;
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = responseType && "text" !== responseType && "json" !== responseType ? request.response : request.responseText;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        "onloadend" in request ? request.onloadend = onloadend : request.onreadystatechange = function handleLoad() {
          if (!request || 4 !== request.readyState) return;
          if (0 === request.status && !(request.responseURL && 0 === request.responseURL.indexOf("file:"))) return;
          setTimeout(onloadend);
        };
        request.onabort = function handleAbort() {
          if (!request) return;
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          config.timeoutErrorMessage && (timeoutErrorMessage = config.timeoutErrorMessage);
          reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          xsrfValue && (requestHeaders[config.xsrfHeaderName] = xsrfValue);
        }
        "setRequestHeader" in request && utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          "undefined" === typeof requestData && "content-type" === key.toLowerCase() ? delete requestHeaders[key] : request.setRequestHeader(key, val);
        });
        utils.isUndefined(config.withCredentials) || (request.withCredentials = !!config.withCredentials);
        responseType && "json" !== responseType && (request.responseType = config.responseType);
        "function" === typeof config.onDownloadProgress && request.addEventListener("progress", config.onDownloadProgress);
        "function" === typeof config.onUploadProgress && request.upload && request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) return;
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          config.signal && (config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled));
        }
        requestData || (requestData = null);
        var protocol = parseProtocol(fullPath);
        if (protocol && -1 === [ "http", "https", "file" ].indexOf(protocol)) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }, {
    "../cancel/CanceledError": 25,
    "../core/AxiosError": 28,
    "../core/buildFullPath": 30,
    "../defaults/transitional": 36,
    "../helpers/parseProtocol": 48,
    "./../core/settle": 33,
    "./../helpers/buildURL": 39,
    "./../helpers/cookies": 41,
    "./../helpers/isURLSameOrigin": 44,
    "./../helpers/parseHeaders": 47,
    "./../utils": 52
  } ],
  23: [ function(require, module, exports) {
    "use strict";
    var utils = require("./utils");
    var bind = require("./helpers/bind");
    var Axios = require("./core/Axios");
    var mergeConfig = require("./core/mergeConfig");
    var defaults = require("./defaults");
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require("./cancel/CanceledError");
    axios.CancelToken = require("./cancel/CancelToken");
    axios.isCancel = require("./cancel/isCancel");
    axios.VERSION = require("./env/data").version;
    axios.toFormData = require("./helpers/toFormData");
    axios.AxiosError = require("../lib/core/AxiosError");
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require("./helpers/spread");
    axios.isAxiosError = require("./helpers/isAxiosError");
    module.exports = axios;
    module.exports.default = axios;
  }, {
    "../lib/core/AxiosError": 28,
    "./cancel/CancelToken": 24,
    "./cancel/CanceledError": 25,
    "./cancel/isCancel": 26,
    "./core/Axios": 27,
    "./core/mergeConfig": 32,
    "./defaults": 35,
    "./env/data": 37,
    "./helpers/bind": 38,
    "./helpers/isAxiosError": 43,
    "./helpers/spread": 49,
    "./helpers/toFormData": 50,
    "./utils": 52
  } ],
  24: [ function(require, module, exports) {
    "use strict";
    var CanceledError = require("./CanceledError");
    function CancelToken(executor) {
      if ("function" !== typeof executor) throw new TypeError("executor must be a function.");
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) token._listeners[i](cancel);
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) return;
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) throw this.reason;
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      this._listeners ? this._listeners.push(listener) : this._listeners = [ listener ];
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) return;
      var index = this._listeners.indexOf(listener);
      -1 !== index && this._listeners.splice(index, 1);
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };
    module.exports = CancelToken;
  }, {
    "./CanceledError": 25
  } ],
  25: [ function(require, module, exports) {
    "use strict";
    var AxiosError = require("../core/AxiosError");
    var utils = require("../utils");
    function CanceledError(message) {
      AxiosError.call(this, null == message ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module.exports = CanceledError;
  }, {
    "../core/AxiosError": 28,
    "../utils": 52
  } ],
  26: [ function(require, module, exports) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }, {} ],
  27: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var buildURL = require("../helpers/buildURL");
    var InterceptorManager = require("./InterceptorManager");
    var dispatchRequest = require("./dispatchRequest");
    var mergeConfig = require("./mergeConfig");
    var buildFullPath = require("./buildFullPath");
    var validator = require("../helpers/validator");
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if ("string" === typeof configOrUrl) {
        config = config || {};
        config.url = configOrUrl;
      } else config = configOrUrl || {};
      config = mergeConfig(this.defaults, config);
      config.method ? config.method = config.method.toLowerCase() : this.defaults.method ? config.method = this.defaults.method.toLowerCase() : config.method = "get";
      var transitional = config.transitional;
      void 0 !== transitional && validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if ("function" === typeof interceptor.runWhen && false === interceptor.runWhen(config)) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [ dispatchRequest, void 0 ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) promise = promise.then(chain.shift(), chain.shift());
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach([ "delete", "get", "head", "options" ], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach([ "post", "put", "patch" ], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url,
            data: data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module.exports = Axios;
  }, {
    "../helpers/buildURL": 39,
    "../helpers/validator": 51,
    "./../utils": 52,
    "./InterceptorManager": 29,
    "./buildFullPath": 30,
    "./dispatchRequest": 31,
    "./mergeConfig": 32
  } ],
  28: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [ "ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED" ].forEach(function(code) {
      descriptors[code] = {
        value: code
      };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", {
      value: true
    });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module.exports = AxiosError;
  }, {
    "../utils": 52
  } ],
  29: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: !!options && options.synchronous,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      this.handlers[id] && (this.handlers[id] = null);
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        null !== h && fn(h);
      });
    };
    module.exports = InterceptorManager;
  }, {
    "./../utils": 52
  } ],
  30: [ function(require, module, exports) {
    "use strict";
    var isAbsoluteURL = require("../helpers/isAbsoluteURL");
    var combineURLs = require("../helpers/combineURLs");
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
      return requestedURL;
    };
  }, {
    "../helpers/combineURLs": 40,
    "../helpers/isAbsoluteURL": 42
  } ],
  31: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var transformData = require("./transformData");
    var isCancel = require("../cancel/isCancel");
    var defaults = require("../defaults");
    var CanceledError = require("../cancel/CanceledError");
    function throwIfCancellationRequested(config) {
      config.cancelToken && config.cancelToken.throwIfRequested();
      if (config.signal && config.signal.aborted) throw new CanceledError();
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach([ "delete", "get", "head", "post", "put", "patch", "common" ], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          reason && reason.response && (reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse));
        }
        return Promise.reject(reason);
      });
    };
  }, {
    "../cancel/CanceledError": 25,
    "../cancel/isCancel": 26,
    "../defaults": 35,
    "./../utils": 52,
    "./transformData": 34
  } ],
  32: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        if (utils.isPlainObject(source)) return utils.merge({}, source);
        if (utils.isArray(source)) return source.slice();
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        if (!utils.isUndefined(config1[prop])) return getMergedValue(void 0, config1[prop]);
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(void 0, config2[prop]);
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(void 0, config2[prop]);
        if (!utils.isUndefined(config1[prop])) return getMergedValue(void 0, config1[prop]);
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        if (prop in config1) return getMergedValue(void 0, config1[prop]);
      }
      var mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }, {
    "../utils": 52
  } ],
  33: [ function(require, module, exports) {
    "use strict";
    var AxiosError = require("./AxiosError");
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      response.status && validateStatus && !validateStatus(response.status) ? reject(new AxiosError("Request failed with status code " + response.status, [ AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE ][Math.floor(response.status / 100) - 4], response.config, response.request, response)) : resolve(response);
    };
  }, {
    "./AxiosError": 28
  } ],
  34: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var defaults = require("../defaults");
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }, {
    "../defaults": 35,
    "./../utils": 52
  } ],
  35: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      var utils = require("../utils");
      var normalizeHeaderName = require("../helpers/normalizeHeaderName");
      var AxiosError = require("../core/AxiosError");
      var transitionalDefaults = require("./transitional");
      var toFormData = require("../helpers/toFormData");
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        !utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"]) && (headers["Content-Type"] = value);
      }
      function getDefaultAdapter() {
        var adapter;
        "undefined" !== typeof XMLHttpRequest ? adapter = require("../adapters/xhr") : "undefined" !== typeof process && "[object process]" === Object.prototype.toString.call(process) && (adapter = require("../adapters/http"));
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if ("SyntaxError" !== e.name) throw e;
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: transitionalDefaults,
        adapter: getDefaultAdapter(),
        transformRequest: [ function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
          if (utils.isArrayBufferView(data)) return data.buffer;
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          var isObjectPayload = utils.isObject(data);
          var contentType = headers && headers["Content-Type"];
          var isFileList;
          if ((isFileList = utils.isFileList(data)) || isObjectPayload && "multipart/form-data" === contentType) {
            var _FormData = this.env && this.env.FormData;
            return toFormData(isFileList ? {
              "files[]": data
            } : data, _FormData && new _FormData());
          }
          if (isObjectPayload || "application/json" === contentType) {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        } ],
        transformResponse: [ function transformResponse(data) {
          var transitional = this.transitional || defaults.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && "json" === this.responseType;
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if ("SyntaxError" === e.name) throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              throw e;
            }
          }
          return data;
        } ],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: require("./env/FormData")
        },
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
        headers: {
          common: {
            Accept: "application/json, text/plain, */*"
          }
        }
      };
      utils.forEach([ "delete", "get", "head" ], function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      });
      utils.forEach([ "post", "put", "patch" ], function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults;
    }).call(this, require("_process"));
  }, {
    "../adapters/http": 22,
    "../adapters/xhr": 22,
    "../core/AxiosError": 28,
    "../helpers/normalizeHeaderName": 45,
    "../helpers/toFormData": 50,
    "../utils": 52,
    "./env/FormData": 46,
    "./transitional": 36,
    _process: 11
  } ],
  36: [ function(require, module, exports) {
    "use strict";
    module.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }, {} ],
  37: [ function(require, module, exports) {
    module.exports = {
      version: "0.27.2"
    };
  }, {} ],
  38: [ function(require, module, exports) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) args[i] = arguments[i];
        return fn.apply(thisArg, args);
      };
    };
  }, {} ],
  39: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) return url;
      var serializedParams;
      if (paramsSerializer) serializedParams = paramsSerializer(params); else if (utils.isURLSearchParams(params)) serializedParams = params.toString(); else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (null === val || "undefined" === typeof val) return;
          utils.isArray(val) ? key += "[]" : val = [ val ];
          utils.forEach(val, function parseValue(v) {
            utils.isDate(v) ? v = v.toISOString() : utils.isObject(v) && (v = JSON.stringify(v));
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        -1 !== hashmarkIndex && (url = url.slice(0, hashmarkIndex));
        url += (-1 === url.indexOf("?") ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }, {
    "./../utils": 52
  } ],
  40: [ function(require, module, exports) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }, {} ],
  41: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          utils.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils.isString(path) && cookie.push("path=" + path);
          utils.isString(domain) && cookie.push("domain=" + domain);
          true === secure && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() {
          return null;
        },
        remove: function remove() {}
      };
    }();
  }, {
    "./../utils": 52
  } ],
  42: [ function(require, module, exports) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }, {} ],
  43: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    module.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && true === payload.isAxiosError;
    };
  }, {
    "./../utils": 52
  } ],
  44: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }, {
    "./../utils": 52
  } ],
  45: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }, {
    "../utils": 52
  } ],
  46: [ function(require, module, exports) {
    module.exports = null;
  }, {} ],
  47: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var ignoreDuplicateOf = [ "age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent" ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) return parsed;
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
          parsed[key] = "set-cookie" === key ? (parsed[key] ? parsed[key] : []).concat([ val ]) : parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
  }, {
    "./../utils": 52
  } ],
  48: [ function(require, module, exports) {
    "use strict";
    module.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }, {} ],
  49: [ function(require, module, exports) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }, {} ],
  50: [ function(require, module, exports) {
    (function(Buffer) {
      "use strict";
      var utils = require("../utils");
      function toFormData(obj, formData) {
        formData = formData || new FormData();
        var stack = [];
        function convertValue(value) {
          if (null === value) return "";
          if (utils.isDate(value)) return value.toISOString();
          if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) return "function" === typeof Blob ? new Blob([ value ]) : Buffer.from(value);
          return value;
        }
        function build(data, parentKey) {
          if (utils.isPlainObject(data) || utils.isArray(data)) {
            if (-1 !== stack.indexOf(data)) throw Error("Circular reference detected in " + parentKey);
            stack.push(data);
            utils.forEach(data, function each(value, key) {
              if (utils.isUndefined(value)) return;
              var fullKey = parentKey ? parentKey + "." + key : key;
              var arr;
              if (value && !parentKey && "object" === typeof value) if (utils.endsWith(key, "{}")) value = JSON.stringify(value); else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
              build(value, fullKey);
            });
            stack.pop();
          } else formData.append(parentKey, convertValue(data));
        }
        build(obj);
        return formData;
      }
      module.exports = toFormData;
    }).call(this, require("buffer").Buffer);
  }, {
    "../utils": 52,
    buffer: 6
  } ],
  51: [ function(require, module, exports) {
    "use strict";
    var VERSION = require("../env/data").version;
    var AxiosError = require("../core/AxiosError");
    var validators = {};
    [ "object", "boolean", "number", "function", "string", "symbol" ].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (false === validator) throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return !validator || validator(value, opt, opts);
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if ("object" !== typeof options) throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = void 0 === value || validator(value, opt, options);
          if (true !== result) throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          continue;
        }
        if (true !== allowUnknown) throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
      }
    }
    module.exports = {
      assertOptions: assertOptions,
      validators: validators
    };
  }, {
    "../core/AxiosError": 28,
    "../env/data": 37
  } ],
  52: [ function(require, module, exports) {
    "use strict";
    var bind = require("./helpers/bind");
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return "undefined" === typeof val;
    }
    function isBuffer(val) {
      return null !== val && !isUndefined(val) && null !== val.constructor && !isUndefined(val.constructor) && "function" === typeof val.constructor.isBuffer && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      result = "undefined" !== typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(val) : val && val.buffer && isArrayBuffer(val.buffer);
      return result;
    }
    function isString(val) {
      return "string" === typeof val;
    }
    function isNumber(val) {
      return "number" === typeof val;
    }
    function isObject(val) {
      return null !== val && "object" === typeof val;
    }
    function isPlainObject(val) {
      if ("object" !== kindOf(val)) return false;
      var prototype = Object.getPrototypeOf(val);
      return null === prototype || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return "[object Function]" === toString.call(val);
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && ("function" === typeof FormData && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if ("undefined" !== typeof navigator && ("ReactNative" === navigator.product || "NativeScript" === navigator.product || "NS" === navigator.product)) return false;
      return "undefined" !== typeof window && "undefined" !== typeof document;
    }
    function forEach(obj, fn) {
      if (null === obj || "undefined" === typeof obj) return;
      "object" !== typeof obj && (obj = [ obj ]);
      if (isArray(obj)) for (var i = 0, l = obj.length; i < l; i++) fn.call(null, obj[i], i, obj); else for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && fn.call(null, obj[key], key, obj);
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        isPlainObject(result[key]) && isPlainObject(val) ? result[key] = merge(result[key], val) : isPlainObject(val) ? result[key] = merge({}, val) : isArray(val) ? result[key] = val.slice() : result[key] = val;
      }
      for (var i = 0, l = arguments.length; i < l; i++) forEach(arguments[i], assignValue);
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        a[key] = thisArg && "function" === typeof val ? bind(val, thisArg) : val;
      });
      return a;
    }
    function stripBOM(content) {
      65279 === content.charCodeAt(0) && (content = content.slice(1));
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      (void 0 === position || position > str.length) && (position = str.length);
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return -1 !== lastIndex && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) arr[i] = thing[i];
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }("undefined" !== typeof Uint8Array && Object.getPrototypeOf(Uint8Array));
    module.exports = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };
  }, {
    "./helpers/bind": 38
  } ],
  53: [ function(require, module, exports) {
    var COS = require("./src/cos");
    module.exports = COS;
  }, {
    "./src/cos": 62
  } ],
  54: [ function(require, module, exports) {
    var CryptoJS = CryptoJS || function(g, l) {
      var e = {}, d = e.lib = {}, m = function() {}, k = d.Base = {
        extend: function(a) {
          m.prototype = this;
          var c = new m();
          a && c.mixIn(a);
          c.hasOwnProperty("init") || (c.init = function() {
            c.$super.init.apply(this, arguments);
          });
          c.init.prototype = c;
          c.$super = this;
          return c;
        },
        create: function() {
          var a = this.extend();
          a.init.apply(a, arguments);
          return a;
        },
        init: function() {},
        mixIn: function(a) {
          for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
          a.hasOwnProperty("toString") && (this.toString = a.toString);
        },
        clone: function() {
          return this.init.prototype.extend(this);
        }
      }, p = d.WordArray = k.extend({
        init: function(a, c) {
          a = this.words = a || [];
          this.sigBytes = c != l ? c : 4 * a.length;
        },
        toString: function(a) {
          return (a || n).stringify(this);
        },
        concat: function(a) {
          var c = this.words, q = a.words, f = this.sigBytes;
          a = a.sigBytes;
          this.clamp();
          if (f % 4) for (var b = 0; b < a; b++) c[f + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (f + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[f + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
          this.sigBytes += a;
          return this;
        },
        clamp: function() {
          var a = this.words, c = this.sigBytes;
          a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
          a.length = g.ceil(c / 4);
        },
        clone: function() {
          var a = k.clone.call(this);
          a.words = this.words.slice(0);
          return a;
        },
        random: function(a) {
          for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * g.random() | 0);
          return new p.init(c, a);
        }
      }), b = e.enc = {}, n = b.Hex = {
        stringify: function(a) {
          var c = a.words;
          a = a.sigBytes;
          for (var b = [], f = 0; f < a; f++) {
            var d = c[f >>> 2] >>> 24 - f % 4 * 8 & 255;
            b.push((d >>> 4).toString(16));
            b.push((15 & d).toString(16));
          }
          return b.join("");
        },
        parse: function(a) {
          for (var c = a.length, b = [], f = 0; f < c; f += 2) b[f >>> 3] |= parseInt(a.substr(f, 2), 16) << 24 - f % 8 * 4;
          return new p.init(b, c / 2);
        }
      }, j = b.Latin1 = {
        stringify: function(a) {
          var c = a.words;
          a = a.sigBytes;
          for (var b = [], f = 0; f < a; f++) b.push(String.fromCharCode(c[f >>> 2] >>> 24 - f % 4 * 8 & 255));
          return b.join("");
        },
        parse: function(a) {
          for (var c = a.length, b = [], f = 0; f < c; f++) b[f >>> 2] |= (255 & a.charCodeAt(f)) << 24 - f % 4 * 8;
          return new p.init(b, c);
        }
      }, h = b.Utf8 = {
        stringify: function(a) {
          try {
            return decodeURIComponent(escape(j.stringify(a)));
          } catch (c) {
            throw Error("Malformed UTF-8 data");
          }
        },
        parse: function(a) {
          return j.parse(unescape(encodeURIComponent(a)));
        }
      }, r = d.BufferedBlockAlgorithm = k.extend({
        reset: function() {
          this._data = new p.init();
          this._nDataBytes = 0;
        },
        _append: function(a) {
          "string" == typeof a && (a = h.parse(a));
          this._data.concat(a);
          this._nDataBytes += a.sigBytes;
        },
        _process: function(a) {
          var c = this._data, b = c.words, f = c.sigBytes, d = this.blockSize, e = f / (4 * d), e = a ? g.ceil(e) : g.max((0 | e) - this._minBufferSize, 0);
          a = e * d;
          f = g.min(4 * a, f);
          if (a) {
            for (var k = 0; k < a; k += d) this._doProcessBlock(b, k);
            k = b.splice(0, a);
            c.sigBytes -= f;
          }
          return new p.init(k, f);
        },
        clone: function() {
          var a = k.clone.call(this);
          a._data = this._data.clone();
          return a;
        },
        _minBufferSize: 0
      });
      d.Hasher = r.extend({
        cfg: k.extend(),
        init: function(a) {
          this.cfg = this.cfg.extend(a);
          this.reset();
        },
        reset: function() {
          r.reset.call(this);
          this._doReset();
        },
        update: function(a) {
          this._append(a);
          this._process();
          return this;
        },
        finalize: function(a) {
          a && this._append(a);
          return this._doFinalize();
        },
        blockSize: 16,
        _createHelper: function(a) {
          return function(b, d) {
            return new a.init(d).finalize(b);
          };
        },
        _createHmacHelper: function(a) {
          return function(b, d) {
            return new s.HMAC.init(a, d).finalize(b);
          };
        }
      });
      var s = e.algo = {};
      return e;
    }(Math);
    (function() {
      var g = CryptoJS, l = g.lib, e = l.WordArray, d = l.Hasher, m = [], l = g.algo.SHA1 = d.extend({
        _doReset: function() {
          this._hash = new e.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
        },
        _doProcessBlock: function(d, e) {
          for (var b = this._hash.words, n = b[0], j = b[1], h = b[2], g = b[3], l = b[4], a = 0; 80 > a; a++) {
            if (16 > a) m[a] = 0 | d[e + a]; else {
              var c = m[a - 3] ^ m[a - 8] ^ m[a - 14] ^ m[a - 16];
              m[a] = c << 1 | c >>> 31;
            }
            c = (n << 5 | n >>> 27) + l + m[a];
            c = 20 > a ? c + (1518500249 + (j & h | ~j & g)) : 40 > a ? c + (1859775393 + (j ^ h ^ g)) : 60 > a ? c + ((j & h | j & g | h & g) - 1894007588) : c + ((j ^ h ^ g) - 899497514);
            l = g;
            g = h;
            h = j << 30 | j >>> 2;
            j = n;
            n = c;
          }
          b[0] = b[0] + n | 0;
          b[1] = b[1] + j | 0;
          b[2] = b[2] + h | 0;
          b[3] = b[3] + g | 0;
          b[4] = b[4] + l | 0;
        },
        _doFinalize: function() {
          var d = this._data, e = d.words, b = 8 * this._nDataBytes, g = 8 * d.sigBytes;
          e[g >>> 5] |= 128 << 24 - g % 32;
          e[14 + (g + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
          e[15 + (g + 64 >>> 9 << 4)] = b;
          d.sigBytes = 4 * e.length;
          this._process();
          return this._hash;
        },
        clone: function() {
          var e = d.clone.call(this);
          e._hash = this._hash.clone();
          return e;
        }
      });
      g.SHA1 = d._createHelper(l);
      g.HmacSHA1 = d._createHmacHelper(l);
    })();
    (function() {
      var g = CryptoJS, l = g.enc.Utf8;
      g.algo.HMAC = g.lib.Base.extend({
        init: function(e, d) {
          e = this._hasher = new e.init();
          "string" == typeof d && (d = l.parse(d));
          var g = e.blockSize, k = 4 * g;
          d.sigBytes > k && (d = e.finalize(d));
          d.clamp();
          for (var p = this._oKey = d.clone(), b = this._iKey = d.clone(), n = p.words, j = b.words, h = 0; h < g; h++) n[h] ^= 1549556828, 
          j[h] ^= 909522486;
          p.sigBytes = b.sigBytes = k;
          this.reset();
        },
        reset: function() {
          var e = this._hasher;
          e.reset();
          e.update(this._iKey);
        },
        update: function(e) {
          this._hasher.update(e);
          return this;
        },
        finalize: function(e) {
          var d = this._hasher;
          e = d.finalize(e);
          d.reset();
          return d.finalize(this._oKey.clone().concat(e));
        }
      });
    })();
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_enc = C.enc;
      var Base64 = C_enc.Base64 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var map = this._map;
          wordArray.clamp();
          var base64Chars = [];
          for (var i = 0; i < sigBytes; i += 3) {
            var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
            var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
            var triplet = byte1 << 16 | byte2 << 8 | byte3;
            for (var j = 0; j < 4 && i + .75 * j < sigBytes; j++) base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
          }
          var paddingChar = map.charAt(64);
          if (paddingChar) while (base64Chars.length % 4) base64Chars.push(paddingChar);
          return base64Chars.join("");
        },
        parse: function(base64Str) {
          var base64StrLength = base64Str.length;
          var map = this._map;
          var paddingChar = map.charAt(64);
          if (paddingChar) {
            var paddingIndex = base64Str.indexOf(paddingChar);
            -1 != paddingIndex && (base64StrLength = paddingIndex);
          }
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) if (i % 4) {
            var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
            var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
            words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
            nBytes++;
          }
          return WordArray.create(words, nBytes);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
    })();
    "object" === typeof module ? module.exports = CryptoJS : window.CryptoJS = CryptoJS;
  }, {} ],
  55: [ function(require, module, exports) {
    var element_start_char = "a-zA-Z_\xc0-\xd6\xd8-\xf6\xf8-\xff\u0370-\u037d\u037f-\u1fff\u200c-\u200d\u2070-\u218f\u2c00-\u2fff\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd";
    var element_non_start_char = "-.0-9\xb7\u0300-\u036f\u203f\u2040";
    var element_replace = new RegExp("^([^" + element_start_char + "])|^((x|X)(m|M)(l|L))|([^" + element_start_char + element_non_start_char + "])", "g");
    var not_safe_in_xml = /[^\x09\x0A\x0D\x20-\xFF\x85\xA0-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]/gm;
    var objKeys = function(obj) {
      var l = [];
      if (obj instanceof Object) for (var k in obj) obj.hasOwnProperty(k) && l.push(k);
      return l;
    };
    var process_to_xml = function(node_data, options) {
      var makeNode = function(name, content, attributes, level, hasSubNodes) {
        var indent_value = void 0 !== options.indent ? options.indent : "\t";
        var indent = options.prettyPrint ? "\n" + new Array(level).join(indent_value) : "";
        options.removeIllegalNameCharacters && (name = name.replace(element_replace, "_"));
        var node = [ indent, "<", name, attributes || "" ];
        if (content && content.length > 0) {
          node.push(">");
          node.push(content);
          hasSubNodes && node.push(indent);
          node.push("</");
          node.push(name);
          node.push(">");
        } else node.push("/>");
        return node.join("");
      };
      return function fn(node_data, node_descriptor, level) {
        var type = typeof node_data;
        (Array.isArray ? Array.isArray(node_data) : node_data instanceof Array) ? type = "array" : node_data instanceof Date && (type = "date");
        switch (type) {
         case "array":
          var ret = [];
          node_data.map(function(v) {
            ret.push(fn(v, 1, level + 1));
          });
          options.prettyPrint && ret.push("\n");
          return ret.join("");

         case "date":
          return node_data.toJSON ? node_data.toJSON() : node_data + "";

         case "object":
          var nodes = [];
          for (var name in node_data) if (node_data.hasOwnProperty(name)) if (node_data[name] instanceof Array) for (var j = 0; j < node_data[name].length; j++) node_data[name].hasOwnProperty(j) && nodes.push(makeNode(name, fn(node_data[name][j], 0, level + 1), null, level + 1, objKeys(node_data[name][j]).length)); else nodes.push(makeNode(name, fn(node_data[name], 0, level + 1), null, level + 1));
          options.prettyPrint && nodes.length > 0 && nodes.push("\n");
          return nodes.join("");

         case "function":
          return node_data();

         default:
          return options.escape ? esc(node_data) : "" + node_data;
        }
      }(node_data, 0, 0);
    };
    var xml_header = function(standalone) {
      var ret = [ '<?xml version="1.0" encoding="UTF-8"' ];
      standalone && ret.push(' standalone="yes"');
      ret.push("?>");
      return ret.join("");
    };
    function esc(str) {
      return ("" + str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;").replace(not_safe_in_xml, "");
    }
    module.exports = function(obj, options) {
      options || (options = {
        xmlHeader: {
          standalone: true
        },
        prettyPrint: true,
        indent: "  ",
        escape: true
      });
      if ("string" == typeof obj) try {
        obj = JSON.parse(obj.toString());
      } catch (e) {
        return false;
      }
      var xmlheader = "";
      var docType = "";
      if (options) if ("object" == typeof options) {
        options.xmlHeader && (xmlheader = xml_header(!!options.xmlHeader.standalone));
        "undefined" != typeof options.docType && (docType = "<!DOCTYPE " + options.docType + ">");
      } else xmlheader = xml_header();
      options = options || {};
      var ret = [ xmlheader, options.prettyPrint && docType ? "\n" : "", docType, process_to_xml(obj, options) ];
      return ret.join("").replace(/\n{2,}/g, "\n").replace(/\s+$/g, "");
    };
  }, {} ],
  56: [ function(require, module, exports) {
    (function(process, global) {
      (function() {
        "use strict";
        var ERROR = "input is invalid type";
        var WINDOW = "object" === typeof window;
        var root = WINDOW ? window : {};
        root.JS_MD5_NO_WINDOW && (WINDOW = false);
        var WEB_WORKER = !WINDOW && "object" === typeof self;
        var NODE_JS = !root.JS_MD5_NO_NODE_JS && "object" === typeof process && process.versions && process.versions.node;
        NODE_JS ? root = global : WEB_WORKER && (root = self);
        var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && "object" === typeof module && module.exports;
        var AMD = "function" === typeof define && define.amd;
        var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && "undefined" !== typeof ArrayBuffer;
        var HEX_CHARS = "0123456789abcdef".split("");
        var EXTRA = [ 128, 32768, 8388608, -2147483648 ];
        var SHIFT = [ 0, 8, 16, 24 ];
        var OUTPUT_TYPES = [ "hex", "array", "digest", "buffer", "arrayBuffer", "base64" ];
        var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
        var blocks = [], buffer8;
        if (ARRAY_BUFFER) {
          var buffer = new ArrayBuffer(68);
          buffer8 = new Uint8Array(buffer);
          blocks = new Uint32Array(buffer);
        }
        !root.JS_MD5_NO_NODE_JS && Array.isArray || (Array.isArray = function(obj) {
          return "[object Array]" === Object.prototype.toString.call(obj);
        });
        !ARRAY_BUFFER || !root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(obj) {
          return "object" === typeof obj && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        });
        var createOutputMethod = function(outputType) {
          return function(message, isBinStr) {
            return new Md5(true).update(message, isBinStr)[outputType]();
          };
        };
        var createMethod = function() {
          var method = createOutputMethod("hex");
          NODE_JS && (method = nodeWrap(method));
          method.getCtx = method.create = function() {
            return new Md5();
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createOutputMethod(type);
          }
          return method;
        };
        var nodeWrap = function(method) {
          var crypto = eval("require('crypto')");
          var Buffer = eval("require('buffer').Buffer");
          var nodeMethod = function(message) {
            if ("string" === typeof message) return crypto.createHash("md5").update(message, "utf8").digest("hex");
            if (null === message || void 0 === message) throw ERROR;
            message.constructor === ArrayBuffer && (message = new Uint8Array(message));
            return Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer ? crypto.createHash("md5").update(new Buffer(message)).digest("hex") : method(message);
          };
          return nodeMethod;
        };
        function Md5(sharedMemory) {
          if (sharedMemory) {
            blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            this.blocks = blocks;
            this.buffer8 = buffer8;
          } else if (ARRAY_BUFFER) {
            var buffer = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer);
            this.blocks = new Uint32Array(buffer);
          } else this.blocks = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
          this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
          this.finalized = this.hashed = false;
          this.first = true;
        }
        Md5.prototype.update = function(message, isBinStr) {
          if (this.finalized) return;
          var code, index = 0, i, length = message.length, blocks = this.blocks;
          var buffer8 = this.buffer8;
          while (index < length) {
            if (this.hashed) {
              this.hashed = false;
              blocks[0] = blocks[16];
              blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            }
            if (ARRAY_BUFFER) for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (isBinStr || code < 128) buffer8[i++] = code; else if (code < 2048) {
                buffer8[i++] = 192 | code >> 6;
                buffer8[i++] = 128 | 63 & code;
              } else if (code < 55296 || code >= 57344) {
                buffer8[i++] = 224 | code >> 12;
                buffer8[i++] = 128 | code >> 6 & 63;
                buffer8[i++] = 128 | 63 & code;
              } else {
                code = 65536 + ((1023 & code) << 10 | 1023 & message.charCodeAt(++index));
                buffer8[i++] = 240 | code >> 18;
                buffer8[i++] = 128 | code >> 12 & 63;
                buffer8[i++] = 128 | code >> 6 & 63;
                buffer8[i++] = 128 | 63 & code;
              }
            } else for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (isBinStr || code < 128) blocks[i >> 2] |= code << SHIFT[3 & i++]; else if (code < 2048) {
                blocks[i >> 2] |= (192 | code >> 6) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else if (code < 55296 || code >= 57344) {
                blocks[i >> 2] |= (224 | code >> 12) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else {
                code = 65536 + ((1023 & code) << 10 | 1023 & message.charCodeAt(++index));
                blocks[i >> 2] |= (240 | code >> 18) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              }
            }
            this.lastByteIndex = i;
            this.bytes += i - this.start;
            if (i >= 64) {
              this.start = i - 64;
              this.hash();
              this.hashed = true;
            } else this.start = i;
          }
          if (this.bytes > 4294967295) {
            this.hBytes += this.bytes / 4294967296 << 0;
            this.bytes = this.bytes % 4294967296;
          }
          return this;
        };
        Md5.prototype.finalize = function() {
          if (this.finalized) return;
          this.finalized = true;
          var blocks = this.blocks, i = this.lastByteIndex;
          blocks[i >> 2] |= EXTRA[3 & i];
          if (i >= 56) {
            this.hashed || this.hash();
            blocks[0] = blocks[16];
            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          }
          blocks[14] = this.bytes << 3;
          blocks[15] = this.hBytes << 3 | this.bytes >>> 29;
          this.hash();
        };
        Md5.prototype.hash = function() {
          var a, b, c, d, bc, da, blocks = this.blocks;
          if (this.first) {
            a = blocks[0] - 680876937;
            a = (a << 7 | a >>> 25) - 271733879 << 0;
            d = (-1732584194 ^ 2004318071 & a) + blocks[1] - 117830708;
            d = (d << 12 | d >>> 20) + a << 0;
            c = (-271733879 ^ d & (-271733879 ^ a)) + blocks[2] - 1126478375;
            c = (c << 17 | c >>> 15) + d << 0;
            b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;
            b = (b << 22 | b >>> 10) + c << 0;
          } else {
            a = this.h0;
            b = this.h1;
            c = this.h2;
            d = this.h3;
            a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;
            a = (a << 7 | a >>> 25) + b << 0;
            d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;
            d = (d << 12 | d >>> 20) + a << 0;
            c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;
            c = (c << 17 | c >>> 15) + d << 0;
            b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;
            b = (b << 22 | b >>> 10) + c << 0;
          }
          a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[10] - 42063;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;
          b = (b << 22 | b >>> 10) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;
          b = (b << 20 | b >>> 12) + c << 0;
          a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;
          a = (a << 5 | a >>> 27) + b << 0;
          d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;
          d = (d << 9 | d >>> 23) + a << 0;
          c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;
          c = (c << 14 | c >>> 18) + d << 0;
          b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;
          b = (b << 20 | b >>> 12) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[5] - 378558;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[8] - 2022574463;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[11] + 1839030562;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[14] - 35309556;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[1] - 1530992060;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[4] + 1272893353;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[7] - 155497632;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[10] - 1094730640;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[13] + 681279174;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[0] - 358537222;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[3] - 722521979;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[6] + 76029189;
          b = (b << 23 | b >>> 9) + c << 0;
          bc = b ^ c;
          a += (bc ^ d) + blocks[9] - 640364487;
          a = (a << 4 | a >>> 28) + b << 0;
          d += (bc ^ a) + blocks[12] - 421815835;
          d = (d << 11 | d >>> 21) + a << 0;
          da = d ^ a;
          c += (da ^ b) + blocks[15] + 530742520;
          c = (c << 16 | c >>> 16) + d << 0;
          b += (da ^ c) + blocks[2] - 995338651;
          b = (b << 23 | b >>> 9) + c << 0;
          a += (c ^ (b | ~d)) + blocks[0] - 198630844;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[5] - 57434055;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[10] - 1051523;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[15] - 30611744;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
          b = (b << 21 | b >>> 11) + c << 0;
          a += (c ^ (b | ~d)) + blocks[4] - 145523070;
          a = (a << 6 | a >>> 26) + b << 0;
          d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
          d = (d << 10 | d >>> 22) + a << 0;
          c += (a ^ (d | ~b)) + blocks[2] + 718787259;
          c = (c << 15 | c >>> 17) + d << 0;
          b += (d ^ (c | ~a)) + blocks[9] - 343485551;
          b = (b << 21 | b >>> 11) + c << 0;
          if (this.first) {
            this.h0 = a + 1732584193 << 0;
            this.h1 = b - 271733879 << 0;
            this.h2 = c - 1732584194 << 0;
            this.h3 = d + 271733878 << 0;
            this.first = false;
          } else {
            this.h0 = this.h0 + a << 0;
            this.h1 = this.h1 + b << 0;
            this.h2 = this.h2 + c << 0;
            this.h3 = this.h3 + d << 0;
          }
        };
        Md5.prototype.hex = function() {
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
          return HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[15 & h0] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[15 & h1] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[15 & h2] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[15 & h3] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15];
        };
        Md5.prototype.toString = Md5.prototype.hex;
        Md5.prototype.digest = function(format) {
          if ("hex" === format) return this.hex();
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
          var res = [ 255 & h0, h0 >> 8 & 255, h0 >> 16 & 255, h0 >> 24 & 255, 255 & h1, h1 >> 8 & 255, h1 >> 16 & 255, h1 >> 24 & 255, 255 & h2, h2 >> 8 & 255, h2 >> 16 & 255, h2 >> 24 & 255, 255 & h3, h3 >> 8 & 255, h3 >> 16 & 255, h3 >> 24 & 255 ];
          return res;
        };
        Md5.prototype.array = Md5.prototype.digest;
        Md5.prototype.arrayBuffer = function() {
          this.finalize();
          var buffer = new ArrayBuffer(16);
          var blocks = new Uint32Array(buffer);
          blocks[0] = this.h0;
          blocks[1] = this.h1;
          blocks[2] = this.h2;
          blocks[3] = this.h3;
          return buffer;
        };
        Md5.prototype.buffer = Md5.prototype.arrayBuffer;
        Md5.prototype.base64 = function() {
          var v1, v2, v3, base64Str = "", bytes = this.array();
          for (var i = 0; i < 15; ) {
            v1 = bytes[i++];
            v2 = bytes[i++];
            v3 = bytes[i++];
            base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[63 & (v1 << 4 | v2 >>> 4)] + BASE64_ENCODE_CHAR[63 & (v2 << 2 | v3 >>> 6)] + BASE64_ENCODE_CHAR[63 & v3];
          }
          v1 = bytes[i];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
          return base64Str;
        };
        var exports = createMethod();
        if (COMMON_JS) module.exports = exports; else {
          root.md5 = exports;
          AMD && define(function() {
            return exports;
          });
        }
      })();
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 11
  } ],
  57: [ function(require, module, exports) {
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
       case "string":
        return v;

       case "boolean":
        return v ? "true" : "false";

       case "number":
        return isFinite(v) ? v : "";

       default:
        return "";
      }
    };
    var queryStringify = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      null === obj && (obj = void 0);
      if ("object" === typeof obj) return Object.keys(obj).map(function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        return Array.isArray(obj[k]) ? obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep) : ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }).filter(Boolean).join(sep);
      if (!name) return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
    var xhrRes = function(err, xhr, body) {
      var headers = {};
      xhr.getAllResponseHeaders().trim().split("\n").forEach(function(item) {
        if (item) {
          var index = item.indexOf(":");
          var key = item.substr(0, index).trim().toLowerCase();
          var val = item.substr(index + 1).trim();
          headers[key] = val;
        }
      });
      return {
        error: err,
        statusCode: xhr.status,
        statusMessage: xhr.statusText,
        headers: headers,
        body: body
      };
    };
    var xhrBody = function(xhr, dataType) {
      return dataType || "text" !== dataType ? xhr.response : xhr.responseText;
    };
    var request = function(opt, callback) {
      var method = (opt.method || "GET").toUpperCase();
      var url = opt.url;
      if (opt.qs) {
        var qsStr = queryStringify(opt.qs);
        qsStr && (url += (-1 === url.indexOf("?") ? "?" : "&") + qsStr);
      }
      var xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      xhr.responseType = opt.dataType || "text";
      if (opt.xhrFields) for (var xhrField in opt.xhrFields) xhr[xhrField] = opt.xhrFields[xhrField];
      var headers = opt.headers;
      if (headers) for (var key in headers) headers.hasOwnProperty(key) && "content-length" !== key.toLowerCase() && "user-agent" !== key.toLowerCase() && "origin" !== key.toLowerCase() && "host" !== key.toLowerCase() && xhr.setRequestHeader(key, headers[key]);
      opt.onProgress && xhr.upload && (xhr.upload.onprogress = opt.onProgress);
      opt.onDownloadProgress && (xhr.onprogress = opt.onDownloadProgress);
      opt.timeout && (xhr.timeout = opt.timeout);
      xhr.ontimeout = function(event) {
        var error = new Error("timeout");
        callback(xhrRes(error, xhr));
      };
      xhr.onload = function() {
        callback(xhrRes(null, xhr, xhrBody(xhr, opt.dataType)));
      };
      xhr.onerror = function(err) {
        var body = xhrBody(xhr, opt.dataType);
        if (body) callback(xhrRes(null, xhr, body)); else {
          var error = xhr.statusText;
          error || 0 !== xhr.status || (error = new Error("CORS blocked or network error"));
          callback(xhrRes(error, xhr, body));
        }
      };
      xhr.send(opt.body || "");
      return xhr;
    };
    module.exports = request;
  }, {} ],
  58: [ function(require, module, exports) {
    var DOMParser = require("@xmldom/xmldom").DOMParser;
    var xmlToJSON = function() {
      this.version = "1.3.5";
      var options = {
        mergeCDATA: true,
        normalize: true,
        stripElemPrefix: true
      };
      var prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      var trimMatch = new RegExp(/^\s+|\s+$/g);
      this.grokType = function(sValue) {
        if (/^\s*$/.test(sValue)) return null;
        if (/^(?:true|false)$/i.test(sValue)) return "true" === sValue.toLowerCase();
        if (isFinite(sValue)) return parseFloat(sValue);
        return sValue;
      };
      this.parseString = function(xmlString, opt) {
        if (xmlString) {
          var xml = this.stringToXML(xmlString);
          return xml.getElementsByTagName("parsererror").length ? null : this.parseXML(xml, opt);
        }
        return null;
      };
      this.parseXML = function(oXMLParent, opt) {
        for (var key in opt) options[key] = opt[key];
        var vResult = {}, nLength = 0, sCollectedTxt = "";
        var childNum = oXMLParent.childNodes.length;
        if (childNum) for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
          oNode = oXMLParent.childNodes.item(nItem);
          if (4 === oNode.nodeType) options.mergeCDATA && (sCollectedTxt += oNode.nodeValue); else if (3 === oNode.nodeType) sCollectedTxt += oNode.nodeValue; else if (1 === oNode.nodeType) {
            0 === nLength && (vResult = {});
            sProp = options.stripElemPrefix ? oNode.nodeName.replace(prefixMatch, "") : oNode.nodeName;
            vContent = xmlToJSON.parseXML(oNode);
            if (vResult.hasOwnProperty(sProp)) {
              vResult[sProp].constructor !== Array && (vResult[sProp] = [ vResult[sProp] ]);
              vResult[sProp].push(vContent);
            } else {
              vResult[sProp] = vContent;
              nLength++;
            }
          }
        }
        Object.keys(vResult).length || (vResult = sCollectedTxt || "");
        return vResult;
      };
      this.xmlToString = function(xmlDoc) {
        try {
          var xmlString = xmlDoc.xml ? xmlDoc.xml : new XMLSerializer().serializeToString(xmlDoc);
          return xmlString;
        } catch (err) {
          return null;
        }
      };
      this.stringToXML = function(xmlString) {
        try {
          var xmlDoc = null;
          if (window.DOMParser) {
            var parser = new DOMParser();
            xmlDoc = parser.parseFromString(xmlString, "text/xml");
            return xmlDoc;
          }
          xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
          xmlDoc.async = false;
          xmlDoc.loadXML(xmlString);
          return xmlDoc;
        } catch (e) {
          return null;
        }
      };
      return this;
    }.call({});
    var xml2json = function(xmlString) {
      return xmlToJSON.parseString(xmlString);
    };
    module.exports = xml2json;
  }, {
    "@xmldom/xmldom": 19
  } ],
  59: [ function(require, module, exports) {
    var session = require("./session");
    var Async = require("./async");
    var EventProxy = require("./event").EventProxy;
    var util = require("./util");
    function sliceUploadFile(params, callback) {
      var self = this;
      var ep = new EventProxy();
      var TaskId = params.TaskId;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var Body = params.Body;
      var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;
      var AsyncLimit = params.AsyncLimit;
      var StorageClass = params.StorageClass;
      var ServerSideEncryption = params.ServerSideEncryption;
      var FileSize;
      var onProgress;
      var onHashProgress = params.onHashProgress;
      ep.on("error", function(err) {
        if (!self._isRunningTask(TaskId)) return;
        err.UploadId = params.UploadData.UploadId || "";
        return callback(err);
      });
      ep.on("upload_complete", function(UploadCompleteData) {
        var _UploadCompleteData = util.extend({
          UploadId: params.UploadData.UploadId || ""
        }, UploadCompleteData);
        callback(null, _UploadCompleteData);
      });
      ep.on("upload_slice_complete", function(UploadData) {
        var metaHeaders = {};
        util.each(params.Headers, function(val, k) {
          var shortKey = k.toLowerCase();
          0 !== shortKey.indexOf("x-cos-meta-") && "pic-operations" !== shortKey || (metaHeaders[k] = val);
        });
        uploadSliceComplete.call(self, {
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          UploadId: UploadData.UploadId,
          SliceList: UploadData.SliceList,
          Headers: metaHeaders
        }, function(err, data) {
          if (!self._isRunningTask(TaskId)) return;
          session.removeUsing(UploadData.UploadId);
          if (err) {
            onProgress(null, true);
            return ep.emit("error", err);
          }
          session.removeUploadId.call(self, UploadData.UploadId);
          onProgress({
            loaded: FileSize,
            total: FileSize
          }, true);
          ep.emit("upload_complete", data);
        });
      });
      ep.on("get_upload_data_finish", function(UploadData) {
        var uuid = session.getFileId(Body, params.ChunkSize, Bucket, Key);
        uuid && session.saveUploadId.call(self, uuid, UploadData.UploadId, self.options.UploadIdCacheLimit);
        session.setUsing(UploadData.UploadId);
        onProgress(null, true);
        uploadSliceList.call(self, {
          TaskId: TaskId,
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          Body: Body,
          FileSize: FileSize,
          SliceSize: ChunkSize,
          AsyncLimit: AsyncLimit,
          ServerSideEncryption: ServerSideEncryption,
          UploadData: UploadData,
          Headers: params.Headers,
          onProgress: onProgress
        }, function(err, data) {
          if (!self._isRunningTask(TaskId)) return;
          if (err) {
            onProgress(null, true);
            return ep.emit("error", err);
          }
          ep.emit("upload_slice_complete", data);
        });
      });
      ep.on("get_file_size_finish", function() {
        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);
        if (params.UploadData.UploadId) ep.emit("get_upload_data_finish", params.UploadData); else {
          var _params = util.extend({
            TaskId: TaskId,
            Bucket: Bucket,
            Region: Region,
            Key: Key,
            Headers: params.Headers,
            StorageClass: StorageClass,
            Body: Body,
            FileSize: FileSize,
            SliceSize: ChunkSize,
            onHashProgress: onHashProgress
          }, params);
          getUploadIdAndPartList.call(self, _params, function(err, UploadData) {
            if (!self._isRunningTask(TaskId)) return;
            if (err) return ep.emit("error", err);
            params.UploadData.UploadId = UploadData.UploadId;
            params.UploadData.PartList = UploadData.PartList;
            ep.emit("get_upload_data_finish", params.UploadData);
          });
        }
      });
      FileSize = params.ContentLength;
      delete params.ContentLength;
      !params.Headers && (params.Headers = {});
      util.each(params.Headers, function(item, key) {
        "content-length" === key.toLowerCase() && delete params.Headers[key];
      });
      (function() {
        var SIZE = [ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 5120 ];
        var AutoChunkSize = 1048576;
        for (var i = 0; i < SIZE.length; i++) {
          AutoChunkSize = 1024 * SIZE[i] * 1024;
          if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;
        }
        params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);
      })();
      if (0 === FileSize) {
        params.Body = "";
        params.ContentLength = 0;
        params.SkipTask = true;
        self.putObject(params, callback);
      } else ep.emit("get_file_size_finish");
    }
    function getUploadIdAndPartList(params, callback) {
      var TaskId = params.TaskId;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var StorageClass = params.StorageClass;
      var self = this;
      var ETagMap = {};
      var FileSize = params.FileSize;
      var SliceSize = params.SliceSize;
      var SliceCount = Math.ceil(FileSize / SliceSize);
      var FinishSliceCount = 0;
      var FinishSize = 0;
      var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);
      var getChunkETag = function(PartNumber, callback) {
        var start = SliceSize * (PartNumber - 1);
        var end = Math.min(start + SliceSize, FileSize);
        var ChunkSize = end - start;
        ETagMap[PartNumber] ? callback(null, {
          PartNumber: PartNumber,
          ETag: ETagMap[PartNumber],
          Size: ChunkSize
        }) : util.fileSlice(params.Body, start, end, false, function(chunkItem) {
          util.getFileMd5(chunkItem, function(err, md5) {
            if (err) return callback(util.error(err));
            var ETag = '"' + md5 + '"';
            ETagMap[PartNumber] = ETag;
            FinishSliceCount += 1;
            FinishSize += ChunkSize;
            onHashProgress({
              loaded: FinishSize,
              total: FileSize
            });
            callback(null, {
              PartNumber: PartNumber,
              ETag: ETag,
              Size: ChunkSize
            });
          });
        });
      };
      var isAvailableUploadList = function(PartList, callback) {
        var PartCount = PartList.length;
        if (0 === PartCount) return callback(null, true);
        if (PartCount > SliceCount) return callback(null, false);
        if (PartCount > 1) {
          var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);
          if (PartSliceSize !== SliceSize) return callback(null, false);
        }
        var next = function(index) {
          if (index < PartCount) {
            var Part = PartList[index];
            getChunkETag(Part.PartNumber, function(err, chunk) {
              chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size ? next(index + 1) : callback(null, false);
            });
          } else callback(null, true);
        };
        next(0);
      };
      var ep = new EventProxy();
      ep.on("error", function(errData) {
        if (!self._isRunningTask(TaskId)) return;
        return callback(errData);
      });
      ep.on("upload_id_available", function(UploadData) {
        var map = {};
        var list = [];
        util.each(UploadData.PartList, function(item) {
          map[item.PartNumber] = item;
        });
        for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {
          var item = map[PartNumber];
          if (item) {
            item.PartNumber = PartNumber;
            item.Uploaded = true;
          } else item = {
            PartNumber: PartNumber,
            ETag: null,
            Uploaded: false
          };
          list.push(item);
        }
        UploadData.PartList = list;
        callback(null, UploadData);
      });
      ep.on("no_available_upload_id", function() {
        if (!self._isRunningTask(TaskId)) return;
        var _params = util.extend({
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          Query: util.clone(params.Query),
          StorageClass: StorageClass,
          Body: params.Body
        }, params);
        var headers = util.clone(params.Headers);
        delete headers["x-cos-mime-limit"];
        _params.Headers = headers;
        self.multipartInit(_params, function(err, data) {
          if (!self._isRunningTask(TaskId)) return;
          if (err) return ep.emit("error", err);
          var UploadId = data.UploadId;
          if (!UploadId) return callback(util.error(new Error("no such upload id")));
          ep.emit("upload_id_available", {
            UploadId: UploadId,
            PartList: []
          });
        });
      });
      ep.on("has_and_check_upload_id", function(UploadIdList) {
        UploadIdList = UploadIdList.reverse();
        Async.eachLimit(UploadIdList, 1, function(UploadId, asyncCallback) {
          if (!self._isRunningTask(TaskId)) return;
          if (session.using[UploadId]) {
            asyncCallback();
            return;
          }
          wholeMultipartListPart.call(self, {
            Bucket: Bucket,
            Region: Region,
            Key: Key,
            UploadId: UploadId
          }, function(err, PartListData) {
            if (!self._isRunningTask(TaskId)) return;
            if (err) {
              session.removeUsing(UploadId);
              return ep.emit("error", err);
            }
            var PartList = PartListData.PartList;
            PartList.forEach(function(item) {
              item.PartNumber *= 1;
              item.Size *= 1;
              item.ETag = item.ETag || "";
            });
            isAvailableUploadList(PartList, function(err, isAvailable) {
              if (!self._isRunningTask(TaskId)) return;
              if (err) return ep.emit("error", err);
              isAvailable ? asyncCallback({
                UploadId: UploadId,
                PartList: PartList
              }) : asyncCallback();
            });
          });
        }, function(AvailableUploadData) {
          if (!self._isRunningTask(TaskId)) return;
          onHashProgress(null, true);
          AvailableUploadData && AvailableUploadData.UploadId ? ep.emit("upload_id_available", AvailableUploadData) : ep.emit("no_available_upload_id");
        });
      });
      ep.on("seek_local_avail_upload_id", function(RemoteUploadIdList) {
        var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key);
        var LocalUploadIdList = session.getUploadIdList.call(self, uuid);
        if (!uuid || !LocalUploadIdList) {
          ep.emit("has_and_check_upload_id", RemoteUploadIdList);
          return;
        }
        var next = function(index) {
          if (index >= LocalUploadIdList.length) {
            ep.emit("has_and_check_upload_id", RemoteUploadIdList);
            return;
          }
          var UploadId = LocalUploadIdList[index];
          if (!util.isInArray(RemoteUploadIdList, UploadId)) {
            session.removeUploadId.call(self, UploadId);
            next(index + 1);
            return;
          }
          if (session.using[UploadId]) {
            next(index + 1);
            return;
          }
          wholeMultipartListPart.call(self, {
            Bucket: Bucket,
            Region: Region,
            Key: Key,
            UploadId: UploadId
          }, function(err, PartListData) {
            if (!self._isRunningTask(TaskId)) return;
            if (err) {
              session.removeUploadId.call(self, UploadId);
              next(index + 1);
            } else ep.emit("upload_id_available", {
              UploadId: UploadId,
              PartList: PartListData.PartList
            });
          });
        };
        next(0);
      });
      ep.on("get_remote_upload_id_list", function() {
        wholeMultipartList.call(self, {
          Bucket: Bucket,
          Region: Region,
          Key: Key
        }, function(err, data) {
          if (!self._isRunningTask(TaskId)) return;
          if (err) return ep.emit("error", err);
          var RemoteUploadIdList = util.filter(data.UploadList, function(item) {
            return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());
          }).reverse().map(function(item) {
            return item.UploadId || item.UploadID;
          });
          if (RemoteUploadIdList.length) ep.emit("seek_local_avail_upload_id", RemoteUploadIdList); else {
            var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key), LocalUploadIdList;
            uuid && (LocalUploadIdList = session.getUploadIdList.call(self, uuid)) && util.each(LocalUploadIdList, function(UploadId) {
              session.removeUploadId.call(self, UploadId);
            });
            ep.emit("no_available_upload_id");
          }
        });
      });
      ep.emit("get_remote_upload_id_list");
    }
    function wholeMultipartList(params, callback) {
      var self = this;
      var UploadList = [];
      var sendParams = {
        Bucket: params.Bucket,
        Region: params.Region,
        Prefix: params.Key
      };
      var next = function() {
        self.multipartList(sendParams, function(err, data) {
          if (err) return callback(err);
          UploadList.push.apply(UploadList, data.Upload || []);
          if ("true" === data.IsTruncated) {
            sendParams.KeyMarker = data.NextKeyMarker;
            sendParams.UploadIdMarker = data.NextUploadIdMarker;
            next();
          } else callback(null, {
            UploadList: UploadList
          });
        });
      };
      next();
    }
    function wholeMultipartListPart(params, callback) {
      var self = this;
      var PartList = [];
      var sendParams = {
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        UploadId: params.UploadId
      };
      var next = function() {
        self.multipartListPart(sendParams, function(err, data) {
          if (err) return callback(err);
          PartList.push.apply(PartList, data.Part || []);
          if ("true" === data.IsTruncated) {
            sendParams.PartNumberMarker = data.NextPartNumberMarker;
            next();
          } else callback(null, {
            PartList: PartList
          });
        });
      };
      next();
    }
    function uploadSliceList(params, cb) {
      var self = this;
      var TaskId = params.TaskId;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var UploadData = params.UploadData;
      var FileSize = params.FileSize;
      var SliceSize = params.SliceSize;
      var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);
      var Body = params.Body;
      var SliceCount = Math.ceil(FileSize / SliceSize);
      var FinishSize = 0;
      var ServerSideEncryption = params.ServerSideEncryption;
      var Headers = params.Headers;
      var needUploadSlices = util.filter(UploadData.PartList, function(SliceItem) {
        SliceItem["Uploaded"] && (FinishSize += SliceItem["PartNumber"] >= SliceCount && FileSize % SliceSize || SliceSize);
        return !SliceItem["Uploaded"];
      });
      var onProgress = params.onProgress;
      Async.eachLimit(needUploadSlices, ChunkParallel, function(SliceItem, asyncCallback) {
        if (!self._isRunningTask(TaskId)) return;
        var PartNumber = SliceItem["PartNumber"];
        var currentSize = Math.min(FileSize, SliceItem["PartNumber"] * SliceSize) - (SliceItem["PartNumber"] - 1) * SliceSize;
        var preAddSize = 0;
        uploadSliceItem.call(self, {
          TaskId: TaskId,
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          SliceSize: SliceSize,
          FileSize: FileSize,
          PartNumber: PartNumber,
          ServerSideEncryption: ServerSideEncryption,
          Body: Body,
          UploadData: UploadData,
          Headers: Headers,
          onProgress: function(data) {
            FinishSize += data.loaded - preAddSize;
            preAddSize = data.loaded;
            onProgress({
              loaded: FinishSize,
              total: FileSize
            });
          }
        }, function(err, data) {
          if (!self._isRunningTask(TaskId)) return;
          err || data.ETag || (err = 'get ETag error, please add "ETag" to CORS ExposeHeader setting.( \u83b7\u53d6ETag\u5931\u8d25\uff0c\u8bf7\u5728CORS ExposeHeader\u8bbe\u7f6e\u4e2d\u6dfb\u52a0ETag\uff0c\u8bf7\u53c2\u8003\u6587\u6863\uff1ahttps://cloud.tencent.com/document/product/436/13318 )');
          if (err) FinishSize -= preAddSize; else {
            FinishSize += currentSize - preAddSize;
            SliceItem.ETag = data.ETag;
          }
          onProgress({
            loaded: FinishSize,
            total: FileSize
          });
          asyncCallback(err || null, data);
        });
      }, function(err) {
        if (!self._isRunningTask(TaskId)) return;
        if (err) return cb(err);
        cb(null, {
          UploadId: UploadData.UploadId,
          SliceList: UploadData.PartList
        });
      });
    }
    function uploadSliceItem(params, callback) {
      var self = this;
      var TaskId = params.TaskId;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var FileSize = params.FileSize;
      var FileBody = params.Body;
      var PartNumber = 1 * params.PartNumber;
      var SliceSize = params.SliceSize;
      var ServerSideEncryption = params.ServerSideEncryption;
      var UploadData = params.UploadData;
      var Headers = params.Headers || {};
      var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;
      var start = SliceSize * (PartNumber - 1);
      var ContentLength = SliceSize;
      var end = start + SliceSize;
      if (end > FileSize) {
        end = FileSize;
        ContentLength = end - start;
      }
      var headersWhiteList = [ "x-cos-traffic-limit", "x-cos-mime-limit" ];
      var headers = {};
      util.each(Headers, function(v, k) {
        headersWhiteList.indexOf(k) > -1 && (headers[k] = v);
      });
      var PartItem = UploadData.PartList[PartNumber - 1];
      Async.retry(ChunkRetryTimes, function(tryCallback) {
        if (!self._isRunningTask(TaskId)) return;
        util.fileSlice(FileBody, start, end, true, function(Body) {
          self.multipartUpload({
            TaskId: TaskId,
            Bucket: Bucket,
            Region: Region,
            Key: Key,
            ContentLength: ContentLength,
            PartNumber: PartNumber,
            UploadId: UploadData.UploadId,
            ServerSideEncryption: ServerSideEncryption,
            Body: Body,
            Headers: headers,
            onProgress: params.onProgress
          }, function(err, data) {
            if (!self._isRunningTask(TaskId)) return;
            if (err) return tryCallback(err);
            PartItem.Uploaded = true;
            return tryCallback(null, data);
          });
        });
      }, function(err, data) {
        if (!self._isRunningTask(TaskId)) return;
        return callback(err, data);
      });
    }
    function uploadSliceComplete(params, callback) {
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var UploadId = params.UploadId;
      var SliceList = params.SliceList;
      var self = this;
      var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;
      var Headers = params.Headers;
      var Parts = SliceList.map(function(item) {
        return {
          PartNumber: item.PartNumber,
          ETag: item.ETag
        };
      });
      Async.retry(ChunkRetryTimes, function(tryCallback) {
        self.multipartComplete({
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          UploadId: UploadId,
          Parts: Parts,
          Headers: Headers
        }, tryCallback);
      }, function(err, data) {
        callback(err, data);
      });
    }
    function abortUploadTask(params, callback) {
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var UploadId = params.UploadId;
      var Level = params.Level || "task";
      var AsyncLimit = params.AsyncLimit;
      var self = this;
      var ep = new EventProxy();
      ep.on("error", function(errData) {
        return callback(errData);
      });
      ep.on("get_abort_array", function(AbortArray) {
        abortUploadTaskArray.call(self, {
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          Headers: params.Headers,
          AsyncLimit: AsyncLimit,
          AbortArray: AbortArray
        }, callback);
      });
      if ("bucket" === Level) wholeMultipartList.call(self, {
        Bucket: Bucket,
        Region: Region
      }, function(err, data) {
        if (err) return callback(err);
        ep.emit("get_abort_array", data.UploadList || []);
      }); else if ("file" === Level) {
        if (!Key) return callback(util.error(new Error("abort_upload_task_no_key")));
        wholeMultipartList.call(self, {
          Bucket: Bucket,
          Region: Region,
          Key: Key
        }, function(err, data) {
          if (err) return callback(err);
          ep.emit("get_abort_array", data.UploadList || []);
        });
      } else {
        if ("task" !== Level) return callback(util.error(new Error("abort_unknown_level")));
        if (!UploadId) return callback(util.error(new Error("abort_upload_task_no_id")));
        if (!Key) return callback(util.error(new Error("abort_upload_task_no_key")));
        ep.emit("get_abort_array", [ {
          Key: Key,
          UploadId: UploadId
        } ]);
      }
    }
    function abortUploadTaskArray(params, callback) {
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var AbortArray = params.AbortArray;
      var AsyncLimit = params.AsyncLimit || 1;
      var self = this;
      var index = 0;
      var resultList = new Array(AbortArray.length);
      Async.eachLimit(AbortArray, AsyncLimit, function(AbortItem, nextItem) {
        var eachIndex = index;
        if (Key && Key !== AbortItem.Key) {
          resultList[eachIndex] = {
            error: {
              KeyNotMatch: true
            }
          };
          nextItem(null);
          return;
        }
        var UploadId = AbortItem.UploadId || AbortItem.UploadID;
        self.multipartAbort({
          Bucket: Bucket,
          Region: Region,
          Key: AbortItem.Key,
          Headers: params.Headers,
          UploadId: UploadId
        }, function(err) {
          var task = {
            Bucket: Bucket,
            Region: Region,
            Key: AbortItem.Key,
            UploadId: UploadId
          };
          resultList[eachIndex] = {
            error: err,
            task: task
          };
          nextItem(null);
        });
        index++;
      }, function(err) {
        if (err) return callback(err);
        var successList = [];
        var errorList = [];
        for (var i = 0, len = resultList.length; i < len; i++) {
          var item = resultList[i];
          item["task"] && (item["error"] ? errorList.push(item["task"]) : successList.push(item["task"]));
        }
        return callback(null, {
          successList: successList,
          errorList: errorList
        });
      });
    }
    function uploadFile(params, callback) {
      var self = this;
      var SliceSize = void 0 === params.SliceSize ? self.options.SliceSize : params.SliceSize;
      var taskList = [];
      var Body = params.Body;
      var FileSize = Body.size || Body.length || 0;
      var fileInfo = {
        TaskId: ""
      };
      util.each(params, function(v, k) {
        "object" !== typeof v && "function" !== typeof v && (fileInfo[k] = v);
      });
      var _onTaskReady = params.onTaskReady;
      var onTaskReady = function(tid) {
        fileInfo.TaskId = tid;
        _onTaskReady && _onTaskReady(tid);
      };
      params.onTaskReady = onTaskReady;
      var _onFileFinish = params.onFileFinish;
      var onFileFinish = function(err, data) {
        _onFileFinish && _onFileFinish(err, data, fileInfo);
        callback && callback(err, data);
      };
      var api = FileSize > SliceSize ? "sliceUploadFile" : "putObject";
      taskList.push({
        api: api,
        params: params,
        callback: onFileFinish
      });
      self._addTasks(taskList);
    }
    function uploadFiles(params, callback) {
      var self = this;
      var SliceSize = void 0 === params.SliceSize ? self.options.SliceSize : params.SliceSize;
      var TotalSize = 0;
      var TotalFinish = 0;
      var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress);
      var unFinishCount = params.files.length;
      var _onTotalFileFinish = params.onFileFinish;
      var resultList = Array(unFinishCount);
      var onTotalFileFinish = function(err, data, options) {
        onTotalProgress(null, true);
        _onTotalFileFinish && _onTotalFileFinish(err, data, options);
        resultList[options.Index] = {
          options: options,
          error: err,
          data: data
        };
        --unFinishCount <= 0 && callback && callback(null, {
          files: resultList
        });
      };
      var taskList = [];
      util.each(params.files, function(fileParams, index) {
        (function() {
          var Body = fileParams.Body;
          var FileSize = Body.size || Body.length || 0;
          var fileInfo = {
            Index: index,
            TaskId: ""
          };
          TotalSize += FileSize;
          util.each(fileParams, function(v, k) {
            "object" !== typeof v && "function" !== typeof v && (fileInfo[k] = v);
          });
          var _onTaskReady = fileParams.onTaskReady;
          var onTaskReady = function(tid) {
            fileInfo.TaskId = tid;
            _onTaskReady && _onTaskReady(tid);
          };
          fileParams.onTaskReady = onTaskReady;
          var PreAddSize = 0;
          var _onProgress = fileParams.onProgress;
          var onProgress = function(info) {
            TotalFinish = TotalFinish - PreAddSize + info.loaded;
            PreAddSize = info.loaded;
            _onProgress && _onProgress(info);
            onTotalProgress({
              loaded: TotalFinish,
              total: TotalSize
            });
          };
          fileParams.onProgress = onProgress;
          var _onFileFinish = fileParams.onFileFinish;
          var onFileFinish = function(err, data) {
            _onFileFinish && _onFileFinish(err, data);
            onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);
          };
          var api = FileSize > SliceSize ? "sliceUploadFile" : "putObject";
          taskList.push({
            api: api,
            params: fileParams,
            callback: onFileFinish
          });
        })();
      });
      self._addTasks(taskList);
    }
    function sliceCopyFile(params, callback) {
      var ep = new EventProxy();
      var self = this;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var CopySource = params.CopySource;
      var m = util.getSourceParams.call(this, CopySource);
      if (!m) {
        callback(util.error(new Error("CopySource format error")));
        return;
      }
      var SourceBucket = m.Bucket;
      var SourceRegion = m.Region;
      var SourceKey = decodeURIComponent(m.Key);
      var CopySliceSize = void 0 === params.CopySliceSize ? self.options.CopySliceSize : params.CopySliceSize;
      CopySliceSize = Math.max(0, CopySliceSize);
      var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;
      var ChunkParallel = this.options.CopyChunkParallelLimit;
      var FinishSize = 0;
      var FileSize;
      var onProgress;
      ep.on("copy_slice_complete", function(UploadData) {
        var metaHeaders = {};
        util.each(params.Headers, function(val, k) {
          0 === k.toLowerCase().indexOf("x-cos-meta-") && (metaHeaders[k] = val);
        });
        var Parts = util.map(UploadData.PartList, function(item) {
          return {
            PartNumber: item.PartNumber,
            ETag: item.ETag
          };
        });
        self.multipartComplete({
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          UploadId: UploadData.UploadId,
          Parts: Parts
        }, function(err, data) {
          if (err) {
            onProgress(null, true);
            return callback(err);
          }
          onProgress({
            loaded: FileSize,
            total: FileSize
          }, true);
          callback(null, data);
        });
      });
      ep.on("get_copy_data_finish", function(UploadData) {
        Async.eachLimit(UploadData.PartList, ChunkParallel, function(SliceItem, asyncCallback) {
          var PartNumber = SliceItem.PartNumber;
          var CopySourceRange = SliceItem.CopySourceRange;
          var currentSize = SliceItem.end - SliceItem.start;
          copySliceItem.call(self, {
            Bucket: Bucket,
            Region: Region,
            Key: Key,
            CopySource: CopySource,
            UploadId: UploadData.UploadId,
            PartNumber: PartNumber,
            CopySourceRange: CopySourceRange
          }, function(err, data) {
            if (err) return asyncCallback(err);
            FinishSize += currentSize;
            onProgress({
              loaded: FinishSize,
              total: FileSize
            });
            SliceItem.ETag = data.ETag;
            asyncCallback(err || null, data);
          });
        }, function(err) {
          if (err) {
            onProgress(null, true);
            return callback(err);
          }
          ep.emit("copy_slice_complete", UploadData);
        });
      });
      ep.on("get_file_size_finish", function(SourceHeaders) {
        (function() {
          var SIZE = [ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 5120 ];
          var AutoChunkSize = 1048576;
          for (var i = 0; i < SIZE.length; i++) {
            AutoChunkSize = 1024 * SIZE[i] * 1024;
            if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;
          }
          params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);
          var ChunkCount = Math.ceil(FileSize / ChunkSize);
          var list = [];
          for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {
            var start = (partNumber - 1) * ChunkSize;
            var end = partNumber * ChunkSize < FileSize ? partNumber * ChunkSize - 1 : FileSize - 1;
            var item = {
              PartNumber: partNumber,
              start: start,
              end: end,
              CopySourceRange: "bytes=" + start + "-" + end
            };
            list.push(item);
          }
          params.PartList = list;
        })();
        var TargetHeader;
        TargetHeader = "Replaced" === params.Headers["x-cos-metadata-directive"] ? params.Headers : SourceHeaders;
        TargetHeader["x-cos-storage-class"] = params.Headers["x-cos-storage-class"] || SourceHeaders["x-cos-storage-class"];
        TargetHeader = util.clearKey(TargetHeader);
        if ("ARCHIVE" === SourceHeaders["x-cos-storage-class"] || "DEEP_ARCHIVE" === SourceHeaders["x-cos-storage-class"]) {
          var restoreHeader = SourceHeaders["x-cos-restore"];
          if (!restoreHeader || 'ongoing-request="true"' === restoreHeader) {
            callback(util.error(new Error("Unrestored archive object is not allowed to be copied")));
            return;
          }
        }
        delete TargetHeader["x-cos-copy-source"];
        delete TargetHeader["x-cos-metadata-directive"];
        delete TargetHeader["x-cos-copy-source-If-Modified-Since"];
        delete TargetHeader["x-cos-copy-source-If-Unmodified-Since"];
        delete TargetHeader["x-cos-copy-source-If-Match"];
        delete TargetHeader["x-cos-copy-source-If-None-Match"];
        self.multipartInit({
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          Headers: TargetHeader
        }, function(err, data) {
          if (err) return callback(err);
          params.UploadId = data.UploadId;
          ep.emit("get_copy_data_finish", params);
        });
      });
      self.headObject({
        Bucket: SourceBucket,
        Region: SourceRegion,
        Key: SourceKey
      }, function(err, data) {
        if (err) {
          err.statusCode && 404 === err.statusCode ? callback(util.error(err, {
            ErrorStatus: SourceKey + " Not Exist"
          })) : callback(err);
          return;
        }
        FileSize = params.FileSize = data.headers["content-length"];
        if (void 0 === FileSize || !FileSize) {
          callback(util.error(new Error('get Content-Length error, please add "Content-Length" to CORS ExposeHeader setting.\uff08 \u83b7\u53d6Content-Length\u5931\u8d25\uff0c\u8bf7\u5728CORS ExposeHeader\u8bbe\u7f6e\u4e2d\u6dfb\u52a0Content-Length\uff0c\u8bf7\u53c2\u8003\u6587\u6863\uff1ahttps://cloud.tencent.com/document/product/436/13318 \uff09')));
          return;
        }
        onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);
        if (FileSize <= CopySliceSize) {
          params.Headers["x-cos-metadata-directive"] || (params.Headers["x-cos-metadata-directive"] = "Copy");
          self.putObjectCopy(params, function(err, data) {
            if (err) {
              onProgress(null, true);
              return callback(err);
            }
            onProgress({
              loaded: FileSize,
              total: FileSize
            }, true);
            callback(err, data);
          });
        } else {
          var resHeaders = data.headers;
          var SourceHeaders = {
            "Cache-Control": resHeaders["cache-control"],
            "Content-Disposition": resHeaders["content-disposition"],
            "Content-Encoding": resHeaders["content-encoding"],
            "Content-Type": resHeaders["content-type"],
            Expires: resHeaders["expires"],
            "x-cos-storage-class": resHeaders["x-cos-storage-class"]
          };
          util.each(resHeaders, function(v, k) {
            var metaPrefix = "x-cos-meta-";
            0 === k.indexOf(metaPrefix) && k.length > metaPrefix.length && (SourceHeaders[k] = v);
          });
          ep.emit("get_file_size_finish", SourceHeaders);
        }
      });
    }
    function copySliceItem(params, callback) {
      var TaskId = params.TaskId;
      var Bucket = params.Bucket;
      var Region = params.Region;
      var Key = params.Key;
      var CopySource = params.CopySource;
      var UploadId = params.UploadId;
      var PartNumber = 1 * params.PartNumber;
      var CopySourceRange = params.CopySourceRange;
      var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;
      var self = this;
      Async.retry(ChunkRetryTimes, function(tryCallback) {
        self.uploadPartCopy({
          TaskId: TaskId,
          Bucket: Bucket,
          Region: Region,
          Key: Key,
          CopySource: CopySource,
          UploadId: UploadId,
          PartNumber: PartNumber,
          CopySourceRange: CopySourceRange
        }, function(err, data) {
          tryCallback(err || null, data);
        });
      }, function(err, data) {
        return callback(err, data);
      });
    }
    var API_MAP = {
      sliceUploadFile: sliceUploadFile,
      abortUploadTask: abortUploadTask,
      uploadFile: uploadFile,
      uploadFiles: uploadFiles,
      sliceCopyFile: sliceCopyFile
    };
    module.exports.init = function(COS, task) {
      task.transferToTaskMethod(API_MAP, "sliceUploadFile");
      util.each(API_MAP, function(fn, apiName) {
        COS.prototype[apiName] = util.apiWrapper(apiName, fn);
      });
    };
  }, {
    "./async": 60,
    "./event": 63,
    "./session": 64,
    "./util": 66
  } ],
  60: [ function(require, module, exports) {
    var eachLimit = function(arr, limit, iterator, callback) {
      callback = callback || function() {};
      if (!arr.length || limit <= 0) return callback();
      var completed = 0;
      var started = 0;
      var running = 0;
      (function replenish() {
        if (completed >= arr.length) return callback();
        while (running < limit && started < arr.length) {
          started += 1;
          running += 1;
          iterator(arr[started - 1], function(err) {
            if (err) {
              callback(err);
              callback = function() {};
            } else {
              completed += 1;
              running -= 1;
              completed >= arr.length ? callback() : replenish();
            }
          });
        }
      })();
    };
    var retry = function(times, iterator, callback) {
      var next = function(index) {
        iterator(function(err, data) {
          err && index < times ? next(index + 1) : callback(err, data);
        });
      };
      times < 1 ? callback() : next(1);
    };
    var async = {
      eachLimit: eachLimit,
      retry: retry
    };
    module.exports = async;
  }, {} ],
  61: [ function(require, module, exports) {
    var REQUEST = require("../lib/request");
    var util = require("./util");
    function getService(params, callback) {
      if ("function" === typeof params) {
        callback = params;
        params = {};
      }
      var protocol = this.options.Protocol || (util.isBrowser && "http:" === location.protocol ? "http:" : "https:");
      var domain = this.options.ServiceDomain;
      var appId = params.AppId || this.options.appId;
      var region = params.Region;
      if (domain) {
        domain = domain.replace(/\{\{AppId\}\}/gi, appId || "").replace(/\{\{Region\}\}/gi, region || "").replace(/\{\{.*?\}\}/gi, "");
        /^[a-zA-Z]+:\/\//.test(domain) || (domain = protocol + "//" + domain);
        "/" === domain.slice(-1) && (domain = domain.slice(0, -1));
      } else domain = region ? protocol + "//cos." + region + ".myqcloud.com" : protocol + "//service.cos.myqcloud.com";
      var SignHost = "";
      var standardHost = region ? "cos." + region + ".myqcloud.com" : "service.cos.myqcloud.com";
      var urlHost = domain.replace(/^https?:\/\/([^/]+)(\/.*)?$/, "$1");
      standardHost === urlHost && (SignHost = standardHost);
      submitRequest.call(this, {
        Action: "name/cos:GetService",
        url: domain,
        method: "GET",
        headers: params.Headers,
        SignHost: SignHost
      }, function(err, data) {
        if (err) return callback(err);
        var buckets = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Buckets && data.ListAllMyBucketsResult.Buckets.Bucket || [];
        buckets = util.isArray(buckets) ? buckets : [ buckets ];
        var owner = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Owner || {};
        callback(null, {
          Buckets: buckets,
          Owner: owner,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucket(params, callback) {
      var self = this;
      var xml = "";
      if (params["BucketAZConfig"]) {
        var CreateBucketConfiguration = {
          BucketAZConfig: params.BucketAZConfig
        };
        xml = util.json2xml({
          CreateBucketConfiguration: CreateBucketConfiguration
        });
      }
      submitRequest.call(this, {
        Action: "name/cos:PutBucket",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        body: xml
      }, function(err, data) {
        if (err) return callback(err);
        var url = getUrl({
          protocol: self.options.Protocol,
          domain: self.options.Domain,
          bucket: params.Bucket,
          region: params.Region,
          isLocation: true
        });
        callback(null, {
          Location: url,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function headBucket(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:HeadBucket",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        method: "HEAD"
      }, callback);
    }
    function getBucket(params, callback) {
      var reqParams = {};
      reqParams["prefix"] = params["Prefix"] || "";
      reqParams["delimiter"] = params["Delimiter"];
      reqParams["marker"] = params["Marker"];
      reqParams["max-keys"] = params["MaxKeys"];
      reqParams["encoding-type"] = params["EncodingType"];
      submitRequest.call(this, {
        Action: "name/cos:GetBucket",
        ResourceKey: reqParams["prefix"],
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        qs: reqParams
      }, function(err, data) {
        if (err) return callback(err);
        var ListBucketResult = data.ListBucketResult || {};
        var Contents = ListBucketResult.Contents || [];
        var CommonPrefixes = ListBucketResult.CommonPrefixes || [];
        Contents = util.isArray(Contents) ? Contents : [ Contents ];
        CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [ CommonPrefixes ];
        var result = util.clone(ListBucketResult);
        util.extend(result, {
          Contents: Contents,
          CommonPrefixes: CommonPrefixes,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function deleteBucket(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucket",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        method: "DELETE"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketAcl(params, callback) {
      var headers = params.Headers;
      var xml = "";
      if (params["AccessControlPolicy"]) {
        var AccessControlPolicy = util.clone(params["AccessControlPolicy"] || {});
        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;
        Grants = util.isArray(Grants) ? Grants : [ Grants ];
        delete AccessControlPolicy.Grant;
        delete AccessControlPolicy.Grants;
        AccessControlPolicy.AccessControlList = {
          Grant: Grants
        };
        xml = util.json2xml({
          AccessControlPolicy: AccessControlPolicy
        });
        headers["Content-Type"] = "application/xml";
        headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      }
      util.each(headers, function(val, key) {
        0 === key.indexOf("x-cos-grant-") && (headers[key] = uniqGrant(headers[key]));
      });
      submitRequest.call(this, {
        Action: "name/cos:PutBucketACL",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: headers,
        action: "acl",
        body: xml
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketAcl(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketACL",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "acl"
      }, function(err, data) {
        if (err) return callback(err);
        var AccessControlPolicy = data.AccessControlPolicy || {};
        var Owner = AccessControlPolicy.Owner || {};
        var Grant = AccessControlPolicy.AccessControlList.Grant || [];
        Grant = util.isArray(Grant) ? Grant : [ Grant ];
        var result = decodeAcl(AccessControlPolicy);
        data.headers && data.headers["x-cos-acl"] && (result.ACL = data.headers["x-cos-acl"]);
        result = util.extend(result, {
          Owner: Owner,
          Grants: Grant,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function putBucketCors(params, callback) {
      var CORSConfiguration = params["CORSConfiguration"] || {};
      var CORSRules = CORSConfiguration["CORSRules"] || params["CORSRules"] || [];
      CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [ CORSRules ]);
      util.each(CORSRules, function(rule) {
        util.each([ "AllowedOrigin", "AllowedHeader", "AllowedMethod", "ExposeHeader" ], function(key) {
          var sKey = key + "s";
          var val = rule[sKey] || rule[key] || [];
          delete rule[sKey];
          rule[key] = util.isArray(val) ? val : [ val ];
        });
      });
      var xml = util.json2xml({
        CORSConfiguration: {
          CORSRule: CORSRules
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketCORS",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "cors",
        headers: headers
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketCors(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketCORS",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "cors"
      }, function(err, data) {
        if (err) {
          if (404 === err.statusCode && err.error && "NoSuchCORSConfiguration" === err.error.Code) {
            var result = {
              CORSRules: [],
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          } else callback(err);
          return;
        }
        var CORSConfiguration = data.CORSConfiguration || {};
        var CORSRules = CORSConfiguration.CORSRules || CORSConfiguration.CORSRule || [];
        CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [ CORSRules ]);
        util.each(CORSRules, function(rule) {
          util.each([ "AllowedOrigin", "AllowedHeader", "AllowedMethod", "ExposeHeader" ], function(key) {
            var sKey = key + "s";
            var val = rule[sKey] || rule[key] || [];
            delete rule[key];
            rule[sKey] = util.isArray(val) ? val : [ val ];
          });
        });
        callback(null, {
          CORSRules: CORSRules,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketCors(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketCORS",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "cors"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode || err.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketLocation(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketLocation",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "location"
      }, callback);
    }
    function putBucketPolicy(params, callback) {
      var Policy = params["Policy"];
      try {
        "string" === typeof Policy && (Policy = JSON.parse(Policy));
      } catch (e) {}
      if (!Policy || "string" === typeof Policy) return callback(util.error(new Error("Policy format error")));
      var PolicyStr = JSON.stringify(Policy);
      Policy.version || (Policy.version = "2.0");
      var headers = params.Headers;
      headers["Content-Type"] = "application/json";
      headers["Content-MD5"] = util.binaryBase64(util.md5(PolicyStr));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketPolicy",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        action: "policy",
        body: PolicyStr,
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketPolicy(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketPolicy",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "policy",
        rawBody: true
      }, function(err, data) {
        if (err) {
          if (err.statusCode && 403 === err.statusCode) return callback(util.error(err, {
            ErrorStatus: "Access Denied"
          }));
          if (err.statusCode && 405 === err.statusCode) return callback(util.error(err, {
            ErrorStatus: "Method Not Allowed"
          }));
          if (err.statusCode && 404 === err.statusCode) return callback(util.error(err, {
            ErrorStatus: "Policy Not Found"
          }));
          return callback(err);
        }
        var Policy = {};
        try {
          Policy = JSON.parse(data.body);
        } catch (e) {}
        callback(null, {
          Policy: Policy,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketPolicy(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketPolicy",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "policy"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode || err.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketTagging(params, callback) {
      var Tagging = params["Tagging"] || {};
      var Tags = Tagging.TagSet || Tagging.Tags || params["Tags"] || [];
      Tags = util.clone(util.isArray(Tags) ? Tags : [ Tags ]);
      var xml = util.json2xml({
        Tagging: {
          TagSet: {
            Tag: Tags
          }
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketTagging",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "tagging",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketTagging(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketTagging",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "tagging"
      }, function(err, data) {
        if (err) {
          if (404 !== err.statusCode || !err.error || "Not Found" !== err.error && "NoSuchTagSet" !== err.error.Code) callback(err); else {
            var result = {
              Tags: [],
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          }
          return;
        }
        var Tags = [];
        try {
          Tags = data.Tagging.TagSet.Tag || [];
        } catch (e) {}
        Tags = util.clone(util.isArray(Tags) ? Tags : [ Tags ]);
        callback(null, {
          Tags: Tags,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketTagging(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketTagging",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "tagging"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketLifecycle(params, callback) {
      var LifecycleConfiguration = params["LifecycleConfiguration"] || {};
      var Rules = LifecycleConfiguration.Rules || params.Rules || [];
      Rules = util.clone(Rules);
      var xml = util.json2xml({
        LifecycleConfiguration: {
          Rule: Rules
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketLifecycle",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "lifecycle",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketLifecycle(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketLifecycle",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "lifecycle"
      }, function(err, data) {
        if (err) {
          if (404 === err.statusCode && err.error && "NoSuchLifecycleConfiguration" === err.error.Code) {
            var result = {
              Rules: [],
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          } else callback(err);
          return;
        }
        var Rules = [];
        try {
          Rules = data.LifecycleConfiguration.Rule || [];
        } catch (e) {}
        Rules = util.clone(util.isArray(Rules) ? Rules : [ Rules ]);
        callback(null, {
          Rules: Rules,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketLifecycle(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketLifecycle",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "lifecycle"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketVersioning(params, callback) {
      if (!params["VersioningConfiguration"]) {
        callback(util.error(new Error("missing param VersioningConfiguration")));
        return;
      }
      var VersioningConfiguration = params["VersioningConfiguration"] || {};
      var xml = util.json2xml({
        VersioningConfiguration: VersioningConfiguration
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketVersioning",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "versioning",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketVersioning(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketVersioning",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "versioning"
      }, function(err, data) {
        err || !data.VersioningConfiguration && (data.VersioningConfiguration = {});
        callback(err, data);
      });
    }
    function putBucketReplication(params, callback) {
      var ReplicationConfiguration = util.clone(params.ReplicationConfiguration);
      var xml = util.json2xml({
        ReplicationConfiguration: ReplicationConfiguration
      });
      xml = xml.replace(/<(\/?)Rules>/gi, "<$1Rule>");
      xml = xml.replace(/<(\/?)Tags>/gi, "<$1Tag>");
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketReplication",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "replication",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketReplication(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketReplication",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "replication"
      }, function(err, data) {
        if (err) {
          if (404 !== err.statusCode || !err.error || "Not Found" !== err.error && "ReplicationConfigurationnotFoundError" !== err.error.Code) callback(err); else {
            var result = {
              ReplicationConfiguration: {
                Rules: []
              },
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          }
          return;
        }
        !data.ReplicationConfiguration && (data.ReplicationConfiguration = {});
        if (data.ReplicationConfiguration.Rule) {
          data.ReplicationConfiguration.Rules = util.makeArray(data.ReplicationConfiguration.Rule);
          delete data.ReplicationConfiguration.Rule;
        }
        callback(err, data);
      });
    }
    function deleteBucketReplication(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketReplication",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "replication"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketWebsite(params, callback) {
      if (!params["WebsiteConfiguration"]) {
        callback(util.error(new Error("missing param WebsiteConfiguration")));
        return;
      }
      var WebsiteConfiguration = util.clone(params["WebsiteConfiguration"] || {});
      var RoutingRules = WebsiteConfiguration["RoutingRules"] || WebsiteConfiguration["RoutingRule"] || [];
      RoutingRules = util.isArray(RoutingRules) ? RoutingRules : [ RoutingRules ];
      delete WebsiteConfiguration.RoutingRule;
      delete WebsiteConfiguration.RoutingRules;
      RoutingRules.length && (WebsiteConfiguration.RoutingRules = {
        RoutingRule: RoutingRules
      });
      var xml = util.json2xml({
        WebsiteConfiguration: WebsiteConfiguration
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketWebsite",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "website",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketWebsite(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketWebsite",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        action: "website"
      }, function(err, data) {
        if (err) {
          if (404 === err.statusCode && "NoSuchWebsiteConfiguration" === err.error.Code) {
            var result = {
              WebsiteConfiguration: {},
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          } else callback(err);
          return;
        }
        var WebsiteConfiguration = data.WebsiteConfiguration || {};
        if (WebsiteConfiguration["RoutingRules"]) {
          var RoutingRules = util.clone(WebsiteConfiguration["RoutingRules"].RoutingRule || []);
          RoutingRules = util.makeArray(RoutingRules);
          WebsiteConfiguration.RoutingRules = RoutingRules;
        }
        callback(null, {
          WebsiteConfiguration: WebsiteConfiguration,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketWebsite(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketWebsite",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "website"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketReferer(params, callback) {
      if (!params["RefererConfiguration"]) {
        callback(util.error(new Error("missing param RefererConfiguration")));
        return;
      }
      var RefererConfiguration = util.clone(params["RefererConfiguration"] || {});
      var DomainList = RefererConfiguration["DomainList"] || {};
      var Domains = DomainList["Domains"] || DomainList["Domain"] || [];
      Domains = util.isArray(Domains) ? Domains : [ Domains ];
      Domains.length && (RefererConfiguration.DomainList = {
        Domain: Domains
      });
      var xml = util.json2xml({
        RefererConfiguration: RefererConfiguration
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketReferer",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "referer",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketReferer(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketReferer",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        action: "referer"
      }, function(err, data) {
        if (err) {
          if (404 === err.statusCode && "NoSuchRefererConfiguration" === err.error.Code) {
            var result = {
              WebsiteConfiguration: {},
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          } else callback(err);
          return;
        }
        var RefererConfiguration = data.RefererConfiguration || {};
        if (RefererConfiguration["DomainList"]) {
          var Domains = util.makeArray(RefererConfiguration["DomainList"].Domain || []);
          RefererConfiguration.DomainList = {
            Domains: Domains
          };
        }
        callback(null, {
          RefererConfiguration: RefererConfiguration,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketDomain(params, callback) {
      var DomainConfiguration = params["DomainConfiguration"] || {};
      var DomainRule = DomainConfiguration.DomainRule || params.DomainRule || [];
      DomainRule = util.clone(DomainRule);
      var xml = util.json2xml({
        DomainConfiguration: {
          DomainRule: DomainRule
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketDomain",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "domain",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketDomain(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketDomain",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "domain"
      }, function(err, data) {
        if (err) return callback(err);
        var DomainRule = [];
        try {
          DomainRule = data.DomainConfiguration.DomainRule || [];
        } catch (e) {}
        DomainRule = util.clone(util.isArray(DomainRule) ? DomainRule : [ DomainRule ]);
        callback(null, {
          DomainRule: DomainRule,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketDomain(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketDomain",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "domain"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketOrigin(params, callback) {
      var OriginConfiguration = params["OriginConfiguration"] || {};
      var OriginRule = OriginConfiguration.OriginRule || params.OriginRule || [];
      OriginRule = util.clone(OriginRule);
      var xml = util.json2xml({
        OriginConfiguration: {
          OriginRule: OriginRule
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketOrigin",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "origin",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketOrigin(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketOrigin",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "origin"
      }, function(err, data) {
        if (err) return callback(err);
        var OriginRule = [];
        try {
          OriginRule = data.OriginConfiguration.OriginRule || [];
        } catch (e) {}
        OriginRule = util.clone(util.isArray(OriginRule) ? OriginRule : [ OriginRule ]);
        callback(null, {
          OriginRule: OriginRule,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteBucketOrigin(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketOrigin",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "origin"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketLogging(params, callback) {
      var xml = util.json2xml({
        BucketLoggingStatus: params["BucketLoggingStatus"] || ""
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketLogging",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "logging",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketLogging(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketLogging",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "logging"
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          BucketLoggingStatus: data.BucketLoggingStatus,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketInventory(params, callback) {
      var InventoryConfiguration = util.clone(params["InventoryConfiguration"]);
      if (InventoryConfiguration.OptionalFields) {
        var Field = InventoryConfiguration.OptionalFields || [];
        InventoryConfiguration.OptionalFields = {
          Field: Field
        };
      }
      if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
        var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;
        if (Object.keys(Encryption).indexOf("SSECOS") > -1) {
          Encryption["SSE-COS"] = Encryption["SSECOS"];
          delete Encryption["SSECOS"];
        }
      }
      var xml = util.json2xml({
        InventoryConfiguration: InventoryConfiguration
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketInventory",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "inventory",
        qs: {
          id: params["Id"]
        },
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketInventory(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketInventory",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "inventory",
        qs: {
          id: params["Id"]
        }
      }, function(err, data) {
        if (err) return callback(err);
        var InventoryConfiguration = data["InventoryConfiguration"];
        if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {
          var Field = InventoryConfiguration.OptionalFields.Field;
          util.isArray(Field) || (Field = [ Field ]);
          InventoryConfiguration.OptionalFields = Field;
        }
        if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
          var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;
          if (Object.keys(Encryption).indexOf("SSE-COS") > -1) {
            Encryption["SSECOS"] = Encryption["SSE-COS"];
            delete Encryption["SSE-COS"];
          }
        }
        callback(null, {
          InventoryConfiguration: InventoryConfiguration,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function listBucketInventory(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:ListBucketInventory",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "inventory",
        qs: {
          "continuation-token": params["ContinuationToken"]
        }
      }, function(err, data) {
        if (err) return callback(err);
        var ListInventoryConfigurationResult = data["ListInventoryConfigurationResult"];
        var InventoryConfigurations = ListInventoryConfigurationResult.InventoryConfiguration || [];
        InventoryConfigurations = util.isArray(InventoryConfigurations) ? InventoryConfigurations : [ InventoryConfigurations ];
        delete ListInventoryConfigurationResult["InventoryConfiguration"];
        util.each(InventoryConfigurations, function(InventoryConfiguration) {
          if (InventoryConfiguration && InventoryConfiguration.OptionalFields && InventoryConfiguration.OptionalFields.Field) {
            var Field = InventoryConfiguration.OptionalFields.Field;
            util.isArray(Field) || (Field = [ Field ]);
            InventoryConfiguration.OptionalFields = Field;
          }
          if (InventoryConfiguration.Destination && InventoryConfiguration.Destination.COSBucketDestination && InventoryConfiguration.Destination.COSBucketDestination.Encryption) {
            var Encryption = InventoryConfiguration.Destination.COSBucketDestination.Encryption;
            if (Object.keys(Encryption).indexOf("SSE-COS") > -1) {
              Encryption["SSECOS"] = Encryption["SSE-COS"];
              delete Encryption["SSE-COS"];
            }
          }
        });
        ListInventoryConfigurationResult.InventoryConfigurations = InventoryConfigurations;
        util.extend(ListInventoryConfigurationResult, {
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, ListInventoryConfigurationResult);
      });
    }
    function deleteBucketInventory(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketInventory",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "inventory",
        qs: {
          id: params["Id"]
        }
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putBucketAccelerate(params, callback) {
      if (!params["AccelerateConfiguration"]) {
        callback(util.error(new Error("missing param AccelerateConfiguration")));
        return;
      }
      var configuration = {
        AccelerateConfiguration: params.AccelerateConfiguration || {}
      };
      var xml = util.json2xml(configuration);
      var headers = {};
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketAccelerate",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "accelerate",
        headers: headers
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketAccelerate(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketAccelerate",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        action: "accelerate"
      }, function(err, data) {
        err || !data.AccelerateConfiguration && (data.AccelerateConfiguration = {});
        callback(err, data);
      });
    }
    function putBucketEncryption(params, callback) {
      var conf = params.ServerSideEncryptionConfiguration || {};
      var Rules = conf.Rule || conf.Rules || [];
      var xml = util.json2xml({
        ServerSideEncryptionConfiguration: {
          Rule: Rules
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutBucketEncryption",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "encryption",
        headers: headers
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getBucketEncryption(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetBucketEncryption",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "encryption"
      }, function(err, data) {
        if (err) {
          if (404 === err.statusCode && "NoSuchEncryptionConfiguration" === err.code) {
            var result = {
              EncryptionConfiguration: {
                Rules: []
              },
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          } else callback(err);
          return;
        }
        var Rules = util.makeArray(data.EncryptionConfiguration && data.EncryptionConfiguration.Rule || []);
        data.EncryptionConfiguration = {
          Rules: Rules
        };
        callback(err, data);
      });
    }
    function deleteBucketEncryption(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteBucketReplication",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "encryption"
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function headObject(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:HeadObject",
        method: "HEAD",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        VersionId: params.VersionId,
        headers: params.Headers
      }, function(err, data) {
        if (err) {
          var statusCode = err.statusCode;
          if (params.Headers["If-Modified-Since"] && statusCode && 304 === statusCode) return callback(null, {
            NotModified: true,
            statusCode: statusCode
          });
          return callback(err);
        }
        data.ETag = util.attr(data.headers, "etag", "");
        callback(null, data);
      });
    }
    function listObjectVersions(params, callback) {
      var reqParams = {};
      reqParams["prefix"] = params["Prefix"] || "";
      reqParams["delimiter"] = params["Delimiter"];
      reqParams["key-marker"] = params["KeyMarker"];
      reqParams["version-id-marker"] = params["VersionIdMarker"];
      reqParams["max-keys"] = params["MaxKeys"];
      reqParams["encoding-type"] = params["EncodingType"];
      submitRequest.call(this, {
        Action: "name/cos:GetBucketObjectVersions",
        ResourceKey: reqParams["prefix"],
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        qs: reqParams,
        action: "versions"
      }, function(err, data) {
        if (err) return callback(err);
        var ListVersionsResult = data.ListVersionsResult || {};
        var DeleteMarkers = ListVersionsResult.DeleteMarker || [];
        DeleteMarkers = util.isArray(DeleteMarkers) ? DeleteMarkers : [ DeleteMarkers ];
        var Versions = ListVersionsResult.Version || [];
        Versions = util.isArray(Versions) ? Versions : [ Versions ];
        var result = util.clone(ListVersionsResult);
        delete result.DeleteMarker;
        delete result.Version;
        util.extend(result, {
          DeleteMarkers: DeleteMarkers,
          Versions: Versions,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function getObject(params, callback) {
      var reqParams = params.Query || {};
      var reqParamsStr = params.QueryString || "";
      var onProgress = util.throttleOnProgress.call(this, 0, params.onProgress);
      reqParams["response-content-type"] = params["ResponseContentType"];
      reqParams["response-content-language"] = params["ResponseContentLanguage"];
      reqParams["response-expires"] = params["ResponseExpires"];
      reqParams["response-cache-control"] = params["ResponseCacheControl"];
      reqParams["response-content-disposition"] = params["ResponseContentDisposition"];
      reqParams["response-content-encoding"] = params["ResponseContentEncoding"];
      submitRequest.call(this, {
        Action: "name/cos:GetObject",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        VersionId: params.VersionId,
        DataType: params.DataType,
        headers: params.Headers,
        qs: reqParams,
        qsStr: reqParamsStr,
        rawBody: true,
        onDownloadProgress: onProgress
      }, function(err, data) {
        onProgress(null, true);
        if (err) {
          var statusCode = err.statusCode;
          if (params.Headers["If-Modified-Since"] && statusCode && 304 === statusCode) return callback(null, {
            NotModified: true
          });
          return callback(err);
        }
        callback(null, {
          Body: data.body,
          ETag: util.attr(data.headers, "etag", ""),
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putObject(params, callback) {
      var self = this;
      var FileSize = params.ContentLength;
      var onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);
      var headers = params.Headers;
      headers["Cache-Control"] || headers["cache-control"] || (headers["Cache-Control"] = "");
      headers["Content-Type"] || headers["content-type"] || (headers["Content-Type"] = params.Body && params.Body.type || "");
      var needCalcMd5 = params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5 || self.options.UploadCheckContentMd5;
      util.getBodyMd5(needCalcMd5, params.Body, function(md5) {
        if (md5) {
          self.options.UploadCheckContentMd5 && (headers["Content-MD5"] = util.binaryBase64(md5));
          (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5) && (headers["x-cos-meta-md5"] = md5);
        }
        void 0 !== params.ContentLength && (headers["Content-Length"] = params.ContentLength);
        onProgress(null, true);
        submitRequest.call(self, {
          Action: "name/cos:PutObject",
          TaskId: params.TaskId,
          method: "PUT",
          Bucket: params.Bucket,
          Region: params.Region,
          Key: params.Key,
          headers: params.Headers,
          qs: params.Query,
          body: params.Body,
          onProgress: onProgress
        }, function(err, data) {
          if (err) {
            onProgress(null, true);
            return callback(err);
          }
          onProgress({
            loaded: FileSize,
            total: FileSize
          }, true);
          var url = getUrl({
            ForcePathStyle: self.options.ForcePathStyle,
            protocol: self.options.Protocol,
            domain: self.options.Domain,
            bucket: params.Bucket,
            region: self.options.UseAccelerate ? "accelerate" : params.Region,
            object: params.Key
          });
          url = url.substr(url.indexOf("://") + 3);
          data.Location = url;
          data.ETag = util.attr(data.headers, "etag", "");
          callback(null, data);
        });
      }, params.onHashProgress);
    }
    function deleteObject(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteObject",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        VersionId: params.VersionId,
        action: params.Recursive ? "recursive" : ""
      }, function(err, data) {
        if (err) {
          var statusCode = err.statusCode;
          return statusCode && 404 === statusCode ? callback(null, {
            BucketNotFound: true,
            statusCode: statusCode
          }) : callback(err);
        }
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getObjectAcl(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetObjectACL",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        action: "acl"
      }, function(err, data) {
        if (err) return callback(err);
        var AccessControlPolicy = data.AccessControlPolicy || {};
        var Owner = AccessControlPolicy.Owner || {};
        var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];
        Grant = util.isArray(Grant) ? Grant : [ Grant ];
        var result = decodeAcl(AccessControlPolicy);
        delete result.GrantWrite;
        data.headers && data.headers["x-cos-acl"] && (result.ACL = data.headers["x-cos-acl"]);
        result = util.extend(result, {
          Owner: Owner,
          Grants: Grant,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function putObjectAcl(params, callback) {
      var headers = params.Headers;
      var xml = "";
      if (params["AccessControlPolicy"]) {
        var AccessControlPolicy = util.clone(params["AccessControlPolicy"] || {});
        var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;
        Grants = util.isArray(Grants) ? Grants : [ Grants ];
        delete AccessControlPolicy.Grant;
        delete AccessControlPolicy.Grants;
        AccessControlPolicy.AccessControlList = {
          Grant: Grants
        };
        xml = util.json2xml({
          AccessControlPolicy: AccessControlPolicy
        });
        headers["Content-Type"] = "application/xml";
        headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      }
      util.each(headers, function(val, key) {
        0 === key.indexOf("x-cos-grant-") && (headers[key] = uniqGrant(headers[key]));
      });
      submitRequest.call(this, {
        Action: "name/cos:PutObjectACL",
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        action: "acl",
        headers: headers,
        body: xml
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function optionsObject(params, callback) {
      var headers = params.Headers;
      headers["Origin"] = params["Origin"];
      headers["Access-Control-Request-Method"] = params["AccessControlRequestMethod"];
      headers["Access-Control-Request-Headers"] = params["AccessControlRequestHeaders"];
      submitRequest.call(this, {
        Action: "name/cos:OptionsObject",
        method: "OPTIONS",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: headers
      }, function(err, data) {
        if (err) {
          if (err.statusCode && 403 === err.statusCode) return callback(null, {
            OptionsForbidden: true,
            statusCode: err.statusCode
          });
          return callback(err);
        }
        var headers = data.headers || {};
        callback(null, {
          AccessControlAllowOrigin: headers["access-control-allow-origin"],
          AccessControlAllowMethods: headers["access-control-allow-methods"],
          AccessControlAllowHeaders: headers["access-control-allow-headers"],
          AccessControlExposeHeaders: headers["access-control-expose-headers"],
          AccessControlMaxAge: headers["access-control-max-age"],
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function putObjectCopy(params, callback) {
      var self = this;
      var headers = params.Headers;
      headers["Cache-Control"] || headers["cache-control"] || (headers["Cache-Control"] = "");
      var CopySource = params.CopySource || "";
      var m = util.getSourceParams.call(this, CopySource);
      if (!m) {
        callback(util.error(new Error("CopySource format error")));
        return;
      }
      var SourceBucket = m[1];
      var SourceRegion = m[3];
      var SourceKey = decodeURIComponent(m[4]);
      submitRequest.call(this, {
        Scope: [ {
          action: "name/cos:GetObject",
          bucket: SourceBucket,
          region: SourceRegion,
          prefix: SourceKey
        }, {
          action: "name/cos:PutObject",
          bucket: params.Bucket,
          region: params.Region,
          prefix: params.Key
        } ],
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        VersionId: params.VersionId,
        headers: params.Headers
      }, function(err, data) {
        if (err) return callback(err);
        var result = util.clone(data.CopyObjectResult || {});
        var url = getUrl({
          ForcePathStyle: self.options.ForcePathStyle,
          protocol: self.options.Protocol,
          domain: self.options.Domain,
          bucket: params.Bucket,
          region: params.Region,
          object: params.Key,
          isLocation: true
        });
        util.extend(result, {
          Location: url,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function uploadPartCopy(params, callback) {
      var CopySource = params.CopySource || "";
      var m = util.getSourceParams.call(this, CopySource);
      if (!m) {
        callback(util.error(new Error("CopySource format error")));
        return;
      }
      var SourceBucket = m[1];
      var SourceRegion = m[3];
      var SourceKey = decodeURIComponent(m[4]);
      submitRequest.call(this, {
        Scope: [ {
          action: "name/cos:GetObject",
          bucket: SourceBucket,
          region: SourceRegion,
          prefix: SourceKey
        }, {
          action: "name/cos:PutObject",
          bucket: params.Bucket,
          region: params.Region,
          prefix: params.Key
        } ],
        method: "PUT",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        VersionId: params.VersionId,
        qs: {
          partNumber: params["PartNumber"],
          uploadId: params["UploadId"]
        },
        headers: params.Headers
      }, function(err, data) {
        if (err) return callback(err);
        var result = util.clone(data.CopyPartResult || {});
        util.extend(result, {
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function deleteMultipleObject(params, callback) {
      var Objects = params.Objects || [];
      var Quiet = params.Quiet;
      Objects = util.isArray(Objects) ? Objects : [ Objects ];
      var xml = util.json2xml({
        Delete: {
          Object: Objects,
          Quiet: Quiet || false
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      var Scope = util.map(Objects, function(v) {
        return {
          action: "name/cos:DeleteObject",
          bucket: params.Bucket,
          region: params.Region,
          prefix: v.Key
        };
      });
      submitRequest.call(this, {
        Scope: Scope,
        method: "POST",
        Bucket: params.Bucket,
        Region: params.Region,
        body: xml,
        action: "delete",
        headers: headers
      }, function(err, data) {
        if (err) return callback(err);
        var DeleteResult = data.DeleteResult || {};
        var Deleted = DeleteResult.Deleted || [];
        var Errors = DeleteResult.Error || [];
        Deleted = util.isArray(Deleted) ? Deleted : [ Deleted ];
        Errors = util.isArray(Errors) ? Errors : [ Errors ];
        var result = util.clone(DeleteResult);
        util.extend(result, {
          Error: Errors,
          Deleted: Deleted,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function restoreObject(params, callback) {
      var headers = params.Headers;
      if (!params["RestoreRequest"]) {
        callback(util.error(new Error("missing param RestoreRequest")));
        return;
      }
      var RestoreRequest = params.RestoreRequest || {};
      var xml = util.json2xml({
        RestoreRequest: RestoreRequest
      });
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:RestoreObject",
        method: "POST",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        VersionId: params.VersionId,
        body: xml,
        action: "restore",
        headers: headers
      }, callback);
    }
    function putObjectTagging(params, callback) {
      var Tagging = params["Tagging"] || {};
      var Tags = Tagging.TagSet || Tagging.Tags || params["Tags"] || [];
      Tags = util.clone(util.isArray(Tags) ? Tags : [ Tags ]);
      var xml = util.json2xml({
        Tagging: {
          TagSet: {
            Tag: Tags
          }
        }
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:PutObjectTagging",
        method: "PUT",
        Bucket: params.Bucket,
        Key: params.Key,
        Region: params.Region,
        body: xml,
        action: "tagging",
        headers: headers,
        VersionId: params.VersionId
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function getObjectTagging(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:GetObjectTagging",
        method: "GET",
        Key: params.Key,
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        action: "tagging",
        VersionId: params.VersionId
      }, function(err, data) {
        if (err) {
          if (404 !== err.statusCode || !err.error || "Not Found" !== err.error && "NoSuchTagSet" !== err.error.Code) callback(err); else {
            var result = {
              Tags: [],
              statusCode: err.statusCode
            };
            err.headers && (result.headers = err.headers);
            callback(null, result);
          }
          return;
        }
        var Tags = [];
        try {
          Tags = data.Tagging.TagSet.Tag || [];
        } catch (e) {}
        Tags = util.clone(util.isArray(Tags) ? Tags : [ Tags ]);
        callback(null, {
          Tags: Tags,
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function deleteObjectTagging(params, callback) {
      submitRequest.call(this, {
        Action: "name/cos:DeleteObjectTagging",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        action: "tagging",
        VersionId: params.VersionId
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function selectObjectContent(params, callback) {
      var SelectType = params["SelectType"];
      if (!SelectType) return callback(util.error(new Error("missing param SelectType")));
      var SelectRequest = params["SelectRequest"] || {};
      var xml = util.json2xml({
        SelectRequest: SelectRequest
      });
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:GetObject",
        method: "POST",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        action: "select",
        qs: {
          "select-type": params["SelectType"]
        },
        VersionId: params.VersionId,
        body: xml,
        DataType: "arraybuffer",
        rawBody: true
      }, function(err, data) {
        if (err && 204 === err.statusCode) return callback(null, {
          statusCode: err.statusCode
        });
        if (err) return callback(err);
        var result = util.parseSelectPayload(data.body);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers,
          Body: result.body,
          Payload: result.payload
        });
      });
    }
    function multipartInit(params, callback) {
      var self = this;
      var headers = params.Headers;
      headers["Cache-Control"] || headers["cache-control"] || (headers["Cache-Control"] = "");
      headers["Content-Type"] || headers["content-type"] || (headers["Content-Type"] = params.Body && params.Body.type || "");
      util.getBodyMd5(params.Body && (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5), params.Body, function(md5) {
        md5 && (params.Headers["x-cos-meta-md5"] = md5);
        submitRequest.call(self, {
          Action: "name/cos:InitiateMultipartUpload",
          method: "POST",
          Bucket: params.Bucket,
          Region: params.Region,
          Key: params.Key,
          action: "uploads",
          headers: params.Headers,
          qs: params.Query
        }, function(err, data) {
          if (err) return callback(err);
          data = util.clone(data || {});
          if (data && data.InitiateMultipartUploadResult) return callback(null, util.extend(data.InitiateMultipartUploadResult, {
            statusCode: data.statusCode,
            headers: data.headers
          }));
          callback(null, data);
        });
      }, params.onHashProgress);
    }
    function multipartUpload(params, callback) {
      var self = this;
      util.getFileSize("multipartUpload", params, function() {
        util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function(md5) {
          md5 && (params.Headers["Content-MD5"] = util.binaryBase64(md5));
          submitRequest.call(self, {
            Action: "name/cos:UploadPart",
            TaskId: params.TaskId,
            method: "PUT",
            Bucket: params.Bucket,
            Region: params.Region,
            Key: params.Key,
            qs: {
              partNumber: params["PartNumber"],
              uploadId: params["UploadId"]
            },
            headers: params.Headers,
            onProgress: params.onProgress,
            body: params.Body || null
          }, function(err, data) {
            if (err) return callback(err);
            callback(null, {
              ETag: util.attr(data.headers, "etag", ""),
              statusCode: data.statusCode,
              headers: data.headers
            });
          });
        });
      });
    }
    function multipartComplete(params, callback) {
      var self = this;
      var UploadId = params.UploadId;
      var Parts = params["Parts"];
      for (var i = 0, len = Parts.length; i < len; i++) {
        if (Parts[i]["ETag"] && 0 === Parts[i]["ETag"].indexOf('"')) continue;
        Parts[i]["ETag"] = '"' + Parts[i]["ETag"] + '"';
      }
      var xml = util.json2xml({
        CompleteMultipartUpload: {
          Part: Parts
        }
      });
      xml = xml.replace(/\n\s*/g, "");
      var headers = params.Headers;
      headers["Content-Type"] = "application/xml";
      headers["Content-MD5"] = util.binaryBase64(util.md5(xml));
      submitRequest.call(this, {
        Action: "name/cos:CompleteMultipartUpload",
        method: "POST",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        qs: {
          uploadId: UploadId
        },
        body: xml,
        headers: headers
      }, function(err, data) {
        if (err) return callback(err);
        var url = getUrl({
          ForcePathStyle: self.options.ForcePathStyle,
          protocol: self.options.Protocol,
          domain: self.options.Domain,
          bucket: params.Bucket,
          region: params.Region,
          object: params.Key,
          isLocation: true
        });
        var res = data.CompleteMultipartUploadResult || {};
        if (res.ProcessResults && res && res.ProcessResults) {
          res.UploadResult = {
            OriginalInfo: {
              Key: res.Key,
              Location: url,
              ETag: res.ETag,
              ImageInfo: res.ImageInfo
            },
            ProcessResults: res.ProcessResults
          };
          delete res.ImageInfo;
          delete res.ProcessResults;
        }
        var result = util.extend(res, {
          Location: url,
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function multipartList(params, callback) {
      var reqParams = {};
      reqParams["delimiter"] = params["Delimiter"];
      reqParams["encoding-type"] = params["EncodingType"];
      reqParams["prefix"] = params["Prefix"] || "";
      reqParams["max-uploads"] = params["MaxUploads"];
      reqParams["key-marker"] = params["KeyMarker"];
      reqParams["upload-id-marker"] = params["UploadIdMarker"];
      reqParams = util.clearKey(reqParams);
      submitRequest.call(this, {
        Action: "name/cos:ListMultipartUploads",
        ResourceKey: reqParams["prefix"],
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        headers: params.Headers,
        qs: reqParams,
        action: "uploads"
      }, function(err, data) {
        if (err) return callback(err);
        if (data && data.ListMultipartUploadsResult) {
          var Upload = data.ListMultipartUploadsResult.Upload || [];
          Upload = util.isArray(Upload) ? Upload : [ Upload ];
          data.ListMultipartUploadsResult.Upload = Upload;
        }
        var result = util.clone(data.ListMultipartUploadsResult || {});
        util.extend(result, {
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function multipartListPart(params, callback) {
      var reqParams = {};
      reqParams["uploadId"] = params["UploadId"];
      reqParams["encoding-type"] = params["EncodingType"];
      reqParams["max-parts"] = params["MaxParts"];
      reqParams["part-number-marker"] = params["PartNumberMarker"];
      submitRequest.call(this, {
        Action: "name/cos:ListParts",
        method: "GET",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        qs: reqParams
      }, function(err, data) {
        if (err) return callback(err);
        var ListPartsResult = data.ListPartsResult || {};
        var Part = ListPartsResult.Part || [];
        Part = util.isArray(Part) ? Part : [ Part ];
        ListPartsResult.Part = Part;
        var result = util.clone(ListPartsResult);
        util.extend(result, {
          statusCode: data.statusCode,
          headers: data.headers
        });
        callback(null, result);
      });
    }
    function multipartAbort(params, callback) {
      var reqParams = {};
      reqParams["uploadId"] = params["UploadId"];
      submitRequest.call(this, {
        Action: "name/cos:AbortMultipartUpload",
        method: "DELETE",
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        headers: params.Headers,
        qs: reqParams
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, {
          statusCode: data.statusCode,
          headers: data.headers
        });
      });
    }
    function request(params, callback) {
      submitRequest.call(this, {
        method: params.Method,
        Bucket: params.Bucket,
        Region: params.Region,
        Key: params.Key,
        action: params.Action,
        headers: params.Headers,
        qs: params.Query,
        body: params.Body,
        Url: params.Url,
        rawBody: params.RawBody,
        DataType: params.DataType
      }, function(err, data) {
        if (err) return callback(err);
        if (data && data.body) {
          data.Body = data.body;
          delete data.body;
        }
        callback(err, data);
      });
    }
    function appendObject(params, callback) {
      var headers = params.Headers;
      headers["Cache-Control"] || headers["cache-control"] || (headers["Cache-Control"] = "");
      headers["Content-Type"] || headers["content-type"] || (headers["Content-Type"] = params.Body && params.Body.type || "");
      submitRequest.call(this, {
        Action: "name/cos:AppendObject",
        method: "POST",
        Bucket: params.Bucket,
        Region: params.Region,
        action: "append",
        Key: params.Key,
        body: params.Body,
        qs: {
          position: params.Position
        },
        headers: params.Headers
      }, function(err, data) {
        if (err) return callback(err);
        callback(null, data);
      });
    }
    function getAuth(params) {
      var self = this;
      return util.getAuth({
        SecretId: params.SecretId || this.options.SecretId || "",
        SecretKey: params.SecretKey || this.options.SecretKey || "",
        Bucket: params.Bucket,
        Region: params.Region,
        Method: params.Method,
        Key: params.Key,
        Query: params.Query,
        Headers: params.Headers,
        Expires: params.Expires,
        UseRawKey: self.options.UseRawKey,
        SystemClockOffset: self.options.SystemClockOffset
      });
    }
    function getObjectUrl(params, callback) {
      var self = this;
      var useAccelerate = void 0 === params.UseAccelerate ? self.options.UseAccelerate : params.UseAccelerate;
      var url = getUrl({
        ForcePathStyle: self.options.ForcePathStyle,
        protocol: params.Protocol || self.options.Protocol,
        domain: params.Domain || self.options.Domain,
        bucket: params.Bucket,
        region: useAccelerate ? "accelerate" : params.Region,
        object: params.Key
      });
      var queryParamsStr = "";
      params.Query && (queryParamsStr += util.obj2str(params.Query));
      params.QueryString && (queryParamsStr += (queryParamsStr ? "&" : "") + params.QueryString);
      var syncUrl = url;
      if (void 0 !== params.Sign && !params.Sign) {
        queryParamsStr && (syncUrl += "?" + queryParamsStr);
        callback(null, {
          Url: syncUrl
        });
        return syncUrl;
      }
      var SignHost = getSignHost.call(this, {
        Bucket: params.Bucket,
        Region: params.Region,
        UseAccelerate: params.UseAccelerate,
        Url: url
      });
      var AuthData = getAuthorizationAsync.call(this, {
        Action: "PUT" === (params.Method || "").toUpperCase() ? "name/cos:PutObject" : "name/cos:GetObject",
        Bucket: params.Bucket || "",
        Region: params.Region || "",
        Method: params.Method || "get",
        Key: params.Key,
        Expires: params.Expires,
        Headers: params.Headers,
        Query: params.Query,
        SignHost: SignHost,
        ForceSignHost: false !== params.ForceSignHost && self.options.ForceSignHost
      }, function(err, AuthData) {
        if (!callback) return;
        if (err) {
          callback(err);
          return;
        }
        var replaceUrlParamList = function(url) {
          var urlParams = url.match(/q-url-param-list.*?(?=&)/g)[0];
          var encodedParams = "q-url-param-list=" + encodeURIComponent(urlParams.replace(/q-url-param-list=/, "")).toLowerCase();
          var reg = new RegExp(urlParams, "g");
          var replacedUrl = url.replace(reg, encodedParams);
          return replacedUrl;
        };
        var signUrl = url;
        signUrl += "?" + (AuthData.Authorization.indexOf("q-signature") > -1 ? replaceUrlParamList(AuthData.Authorization) : "sign=" + encodeURIComponent(AuthData.Authorization));
        AuthData.SecurityToken && (signUrl += "&x-cos-security-token=" + AuthData.SecurityToken);
        AuthData.ClientIP && (signUrl += "&clientIP=" + AuthData.ClientIP);
        AuthData.ClientUA && (signUrl += "&clientUA=" + AuthData.ClientUA);
        AuthData.Token && (signUrl += "&token=" + AuthData.Token);
        queryParamsStr && (signUrl += "&" + queryParamsStr);
        setTimeout(function() {
          callback(null, {
            Url: signUrl
          });
        });
      });
      if (AuthData) {
        syncUrl += "?" + AuthData.Authorization + (AuthData.SecurityToken ? "&x-cos-security-token=" + AuthData.SecurityToken : "");
        queryParamsStr && (syncUrl += "&" + queryParamsStr);
      } else queryParamsStr && (syncUrl += "?" + queryParamsStr);
      return syncUrl;
    }
    function decodeAcl(AccessControlPolicy) {
      var result = {
        GrantFullControl: [],
        GrantWrite: [],
        GrantRead: [],
        GrantReadAcp: [],
        GrantWriteAcp: [],
        ACL: ""
      };
      var GrantMap = {
        FULL_CONTROL: "GrantFullControl",
        WRITE: "GrantWrite",
        READ: "GrantRead",
        READ_ACP: "GrantReadAcp",
        WRITE_ACP: "GrantWriteAcp"
      };
      var AccessControlList = AccessControlPolicy && AccessControlPolicy.AccessControlList || {};
      var Grant = AccessControlList.Grant;
      Grant && (Grant = util.isArray(Grant) ? Grant : [ Grant ]);
      var PublicAcl = {
        READ: 0,
        WRITE: 0,
        FULL_CONTROL: 0
      };
      Grant && Grant.length && util.each(Grant, function(item) {
        "qcs::cam::anyone:anyone" === item.Grantee.ID || "http://cam.qcloud.com/groups/global/AllUsers" === item.Grantee.URI ? PublicAcl[item.Permission] = 1 : item.Grantee.ID !== AccessControlPolicy.Owner.ID && result[GrantMap[item.Permission]].push('id="' + item.Grantee.ID + '"');
      });
      PublicAcl.FULL_CONTROL || PublicAcl.WRITE && PublicAcl.READ ? result.ACL = "public-read-write" : PublicAcl.READ ? result.ACL = "public-read" : result.ACL = "private";
      util.each(GrantMap, function(item) {
        result[item] = uniqGrant(result[item].join(","));
      });
      return result;
    }
    function uniqGrant(str) {
      var arr = str.split(",");
      var exist = {};
      var i, item;
      for (i = 0; i < arr.length; ) {
        item = arr[i].trim();
        if (exist[item]) arr.splice(i, 1); else {
          exist[item] = true;
          arr[i] = item;
          i++;
        }
      }
      return arr.join(",");
    }
    function getUrl(params) {
      var region = params.region || "";
      var longBucket = params.bucket || "";
      var shortBucket = longBucket.substr(0, longBucket.lastIndexOf("-"));
      var appId = longBucket.substr(longBucket.lastIndexOf("-") + 1);
      var domain = params.domain;
      var object = params.object;
      "function" === typeof domain && (domain = domain({
        Bucket: longBucket,
        Region: region
      }));
      var protocol = params.protocol || (util.isBrowser && "http:" === location.protocol ? "http:" : "https:");
      if (!domain) {
        domain = [ "cn-south", "cn-south-2", "cn-north", "cn-east", "cn-southwest", "sg" ].indexOf(region) > -1 ? "{Region}.myqcloud.com" : "cos.{Region}.myqcloud.com";
        params.ForcePathStyle || (domain = "{Bucket}." + domain);
      }
      domain = domain.replace(/\{\{AppId\}\}/gi, appId).replace(/\{\{Bucket\}\}/gi, shortBucket).replace(/\{\{Region\}\}/gi, region).replace(/\{\{.*?\}\}/gi, "");
      domain = domain.replace(/\{AppId\}/gi, appId).replace(/\{BucketName\}/gi, shortBucket).replace(/\{Bucket\}/gi, longBucket).replace(/\{Region\}/gi, region).replace(/\{.*?\}/gi, "");
      /^[a-zA-Z]+:\/\//.test(domain) || (domain = protocol + "//" + domain);
      "/" === domain.slice(-1) && (domain = domain.slice(0, -1));
      var url = domain;
      params.ForcePathStyle && (url += "/" + longBucket);
      url += "/";
      object && (url += util.camSafeUrlEncode(object).replace(/%2F/g, "/"));
      params.isLocation && (url = url.replace(/^https?:\/\//, ""));
      return url;
    }
    var getSignHost = function(opt) {
      if (!opt.Bucket || !opt.Region) return "";
      var useAccelerate = void 0 === opt.UseAccelerate ? this.options.UseAccelerate : opt.UseAccelerate;
      var url = opt.Url || getUrl({
        ForcePathStyle: this.options.ForcePathStyle,
        protocol: this.options.Protocol,
        domain: this.options.Domain,
        bucket: opt.Bucket,
        region: useAccelerate ? "accelerate" : opt.Region
      });
      var urlHost = url.replace(/^https?:\/\/([^/]+)(\/.*)?$/, "$1");
      var standardHostReg = new RegExp("^([a-z\\d-]+-\\d+\\.)?(cos|cosv6|ci|pic)\\.([a-z\\d-]+)\\.myqcloud\\.com$");
      if (standardHostReg.test(urlHost)) return urlHost;
      return "";
    };
    function getAuthorizationAsync(params, callback) {
      var headers = util.clone(params.Headers);
      var headerHost = "";
      util.each(headers, function(v, k) {
        ("" === v || [ "content-type", "cache-control", "expires" ].indexOf(k.toLowerCase()) > -1) && delete headers[k];
        "host" === k.toLowerCase() && (headerHost = v);
      });
      var forceSignHost = false !== params.ForceSignHost;
      !headerHost && params.SignHost && forceSignHost && (headers.Host = params.SignHost);
      var cbDone = false;
      var cb = function(err, AuthData) {
        if (cbDone) return;
        cbDone = true;
        if (AuthData && AuthData.XCosSecurityToken && !AuthData.SecurityToken) {
          AuthData = util.clone(AuthData);
          AuthData.SecurityToken = AuthData.XCosSecurityToken;
          delete AuthData.XCosSecurityToken;
        }
        callback && callback(err, AuthData);
      };
      var self = this;
      var Bucket = params.Bucket || "";
      var Region = params.Region || "";
      var KeyName = params.Key || "";
      self.options.ForcePathStyle && Bucket && (KeyName = Bucket + "/" + KeyName);
      var Pathname = "/" + KeyName;
      var StsData = {};
      var Scope = params.Scope;
      if (!Scope) {
        var Action = params.Action || "";
        var ResourceKey = params.ResourceKey || params.Key || "";
        Scope = params.Scope || [ {
          action: Action,
          bucket: Bucket,
          region: Region,
          prefix: ResourceKey
        } ];
      }
      var ScopeKey = util.md5(JSON.stringify(Scope));
      self._StsCache = self._StsCache || [];
      (function() {
        var i, AuthData;
        for (i = self._StsCache.length - 1; i >= 0; i--) {
          AuthData = self._StsCache[i];
          var compareTime = Math.round(util.getSkewTime(self.options.SystemClockOffset) / 1e3) + 30;
          if (AuthData.StartTime && compareTime < AuthData.StartTime || compareTime >= AuthData.ExpiredTime) {
            self._StsCache.splice(i, 1);
            continue;
          }
          if (!AuthData.ScopeLimit || AuthData.ScopeLimit && AuthData.ScopeKey === ScopeKey) {
            StsData = AuthData;
            break;
          }
        }
      })();
      var calcAuthByTmpKey = function() {
        var KeyTime = "";
        StsData.StartTime && params.Expires ? KeyTime = StsData.StartTime + ";" + (StsData.StartTime + 1 * params.Expires) : StsData.StartTime && StsData.ExpiredTime && (KeyTime = StsData.StartTime + ";" + StsData.ExpiredTime);
        var Authorization = util.getAuth({
          SecretId: StsData.TmpSecretId,
          SecretKey: StsData.TmpSecretKey,
          Method: params.Method,
          Pathname: Pathname,
          Query: params.Query,
          Headers: headers,
          Expires: params.Expires,
          UseRawKey: self.options.UseRawKey,
          SystemClockOffset: self.options.SystemClockOffset,
          KeyTime: KeyTime,
          ForceSignHost: forceSignHost
        });
        var AuthData = {
          Authorization: Authorization,
          SecurityToken: StsData.SecurityToken || StsData.XCosSecurityToken || "",
          Token: StsData.Token || "",
          ClientIP: StsData.ClientIP || "",
          ClientUA: StsData.ClientUA || ""
        };
        cb(null, AuthData);
      };
      var checkAuthError = function(AuthData) {
        if (AuthData.Authorization) {
          var formatAllow = false;
          var auth = AuthData.Authorization;
          if (auth) if (auth.indexOf(" ") > -1) formatAllow = false; else if (auth.indexOf("q-sign-algorithm=") > -1 && auth.indexOf("q-ak=") > -1 && auth.indexOf("q-sign-time=") > -1 && auth.indexOf("q-key-time=") > -1 && auth.indexOf("q-url-param-list=") > -1) formatAllow = true; else try {
            auth = atob(auth);
            auth.indexOf("a=") > -1 && auth.indexOf("k=") > -1 && auth.indexOf("t=") > -1 && auth.indexOf("r=") > -1 && auth.indexOf("b=") > -1 && (formatAllow = true);
          } catch (e) {}
          if (!formatAllow) return util.error(new Error("getAuthorization callback params format error"));
        } else {
          if (!AuthData.TmpSecretId) return util.error(new Error('getAuthorization callback params missing "TmpSecretId"'));
          if (!AuthData.TmpSecretKey) return util.error(new Error('getAuthorization callback params missing "TmpSecretKey"'));
          if (!AuthData.SecurityToken && !AuthData.XCosSecurityToken) return util.error(new Error('getAuthorization callback params missing "SecurityToken"'));
          if (!AuthData.ExpiredTime) return util.error(new Error('getAuthorization callback params missing "ExpiredTime"'));
          if (AuthData.ExpiredTime && 10 !== AuthData.ExpiredTime.toString().length) return util.error(new Error('getAuthorization callback params "ExpiredTime" should be 10 digits'));
          if (AuthData.StartTime && 10 !== AuthData.StartTime.toString().length) return util.error(new Error('getAuthorization callback params "StartTime" should be 10 StartTime'));
        }
        return false;
      };
      if (StsData.ExpiredTime && StsData.ExpiredTime - util.getSkewTime(self.options.SystemClockOffset) / 1e3 > 60) calcAuthByTmpKey(); else if (self.options.getAuthorization) self.options.getAuthorization.call(self, {
        Bucket: Bucket,
        Region: Region,
        Method: params.Method,
        Key: KeyName,
        Pathname: Pathname,
        Query: params.Query,
        Headers: headers,
        Scope: Scope,
        SystemClockOffset: self.options.SystemClockOffset,
        ForceSignHost: forceSignHost
      }, function(AuthData) {
        "string" === typeof AuthData && (AuthData = {
          Authorization: AuthData
        });
        var AuthError = checkAuthError(AuthData);
        if (AuthError) return cb(AuthError);
        if (AuthData.Authorization) cb(null, AuthData); else {
          StsData = AuthData || {};
          StsData.Scope = Scope;
          StsData.ScopeKey = ScopeKey;
          self._StsCache.push(StsData);
          calcAuthByTmpKey();
        }
      }); else {
        if (!self.options.getSTS) return function() {
          var Authorization = util.getAuth({
            SecretId: params.SecretId || self.options.SecretId,
            SecretKey: params.SecretKey || self.options.SecretKey,
            Method: params.Method,
            Pathname: Pathname,
            Query: params.Query,
            Headers: headers,
            Expires: params.Expires,
            UseRawKey: self.options.UseRawKey,
            SystemClockOffset: self.options.SystemClockOffset,
            ForceSignHost: forceSignHost
          });
          var AuthData = {
            Authorization: Authorization,
            SecurityToken: self.options.SecurityToken || self.options.XCosSecurityToken
          };
          cb(null, AuthData);
          return AuthData;
        }();
        self.options.getSTS.call(self, {
          Bucket: Bucket,
          Region: Region
        }, function(data) {
          StsData = data || {};
          StsData.Scope = Scope;
          StsData.ScopeKey = ScopeKey;
          StsData.TmpSecretId || (StsData.TmpSecretId = StsData.SecretId);
          StsData.TmpSecretKey || (StsData.TmpSecretKey = StsData.SecretKey);
          var AuthError = checkAuthError(StsData);
          if (AuthError) return cb(AuthError);
          self._StsCache.push(StsData);
          calcAuthByTmpKey();
        });
      }
      return "";
    }
    function allowRetry(err) {
      var allowRetry = false;
      var isTimeError = false;
      var serverDate = err.headers && (err.headers.date || err.headers.Date) || err.error && err.error.ServerTime;
      try {
        var errorCode = err.error.Code;
        var errorMessage = err.error.Message;
        ("RequestTimeTooSkewed" === errorCode || "AccessDenied" === errorCode && "Request has expired" === errorMessage) && (isTimeError = true);
      } catch (e) {}
      if (err) if (isTimeError && serverDate) {
        var serverTime = Date.parse(serverDate);
        if (this.options.CorrectClockSkew && Math.abs(util.getSkewTime(this.options.SystemClockOffset) - serverTime) >= 3e4) {
          console.error("error: Local time is too skewed.");
          this.options.SystemClockOffset = serverTime - Date.now();
          allowRetry = true;
        }
      } else 5 === Math.floor(err.statusCode / 100) && (allowRetry = true);
      return allowRetry;
    }
    function submitRequest(params, callback) {
      var self = this;
      !params.headers && (params.headers = {});
      !params.qs && (params.qs = {});
      params.VersionId && (params.qs.versionId = params.VersionId);
      params.qs = util.clearKey(params.qs);
      params.headers && (params.headers = util.clearKey(params.headers));
      params.qs && (params.qs = util.clearKey(params.qs));
      var Query = util.clone(params.qs);
      params.action && (Query[params.action] = "");
      var paramsUrl = params.url || params.Url;
      var SignHost = params.SignHost || getSignHost.call(this, {
        Bucket: params.Bucket,
        Region: params.Region,
        Url: paramsUrl
      });
      var next = function(tryTimes) {
        var oldClockOffset = self.options.SystemClockOffset;
        getAuthorizationAsync.call(self, {
          Bucket: params.Bucket || "",
          Region: params.Region || "",
          Method: params.method,
          Key: params.Key,
          Query: Query,
          Headers: params.headers,
          SignHost: SignHost,
          Action: params.Action,
          ResourceKey: params.ResourceKey,
          Scope: params.Scope,
          ForceSignHost: self.options.ForceSignHost
        }, function(err, AuthData) {
          if (err) {
            callback(err);
            return;
          }
          params.AuthData = AuthData;
          _submitRequest.call(self, params, function(err, data) {
            if (err && tryTimes < 2 && (oldClockOffset !== self.options.SystemClockOffset || allowRetry.call(self, err))) {
              if (params.headers) {
                delete params.headers.Authorization;
                delete params.headers["token"];
                delete params.headers["clientIP"];
                delete params.headers["clientUA"];
                params.headers["x-cos-security-token"] && delete params.headers["x-cos-security-token"];
                params.headers["x-ci-security-token"] && delete params.headers["x-ci-security-token"];
              }
              next(tryTimes + 1);
            } else callback(err, data);
          });
        });
      };
      next(1);
    }
    function _submitRequest(params, callback) {
      var self = this;
      var TaskId = params.TaskId;
      if (TaskId && !self._isRunningTask(TaskId)) return;
      var bucket = params.Bucket;
      var region = params.Region;
      var object = params.Key;
      var method = params.method || "GET";
      var url = params.Url || params.url;
      var body = params.body;
      var rawBody = params.rawBody;
      self.options.UseAccelerate && (region = "accelerate");
      url = url || getUrl({
        ForcePathStyle: self.options.ForcePathStyle,
        protocol: self.options.Protocol,
        domain: self.options.Domain,
        bucket: bucket,
        region: region,
        object: object
      });
      params.action && (url = url + "?" + params.action);
      params.qsStr && (url = url.indexOf("?") > -1 ? url + "&" + params.qsStr : url + "?" + params.qsStr);
      var opt = {
        method: method,
        url: url,
        headers: params.headers,
        qs: params.qs,
        body: body
      };
      var token = "x-cos-security-token";
      util.isCIHost(url) && (token = "x-ci-security-token");
      opt.headers.Authorization = params.AuthData.Authorization;
      params.AuthData.Token && (opt.headers["token"] = params.AuthData.Token);
      params.AuthData.ClientIP && (opt.headers["clientIP"] = params.AuthData.ClientIP);
      params.AuthData.ClientUA && (opt.headers["clientUA"] = params.AuthData.ClientUA);
      params.AuthData.SecurityToken && (opt.headers[token] = params.AuthData.SecurityToken);
      opt.headers && (opt.headers = util.clearKey(opt.headers));
      opt = util.clearKey(opt);
      if (params.onProgress && "function" === typeof params.onProgress) {
        var contentLength = body && (body.size || body.length) || 0;
        opt.onProgress = function(e) {
          if (TaskId && !self._isRunningTask(TaskId)) return;
          var loaded = e ? e.loaded : 0;
          params.onProgress({
            loaded: loaded,
            total: contentLength
          });
        };
      }
      params.onDownloadProgress && (opt.onDownloadProgress = params.onDownloadProgress);
      params.DataType && (opt.dataType = params.DataType);
      this.options.Timeout && (opt.timeout = this.options.Timeout);
      self.options.ForcePathStyle && (opt.pathStyle = self.options.ForcePathStyle);
      self.emit("before-send", opt);
      var sender = (self.options.Request || REQUEST)(opt, function(r) {
        if ("abort" === r.error) return;
        var receive = {
          options: opt,
          error: err,
          statusCode: response && response.statusCode || 0,
          headers: response && response.headers || {},
          body: body
        };
        self.emit("after-receive", receive);
        err = receive.error;
        body = receive.body;
        response = {
          statusCode: receive.statusCode,
          headers: receive.headers
        };
        self.emit("after-receive", r);
        var response = {
          statusCode: r.statusCode,
          statusMessage: r.statusMessage,
          headers: r.headers
        };
        var err = r.error;
        var body = r.body;
        var hasReturned;
        var cb = function(err, data) {
          TaskId && self.off("inner-kill-task", killTask);
          if (hasReturned) return;
          hasReturned = true;
          var attrs = {};
          response && response.statusCode && (attrs.statusCode = response.statusCode);
          response && response.headers && (attrs.headers = response.headers);
          if (err) {
            err = util.extend(err || {}, attrs);
            callback(err, null);
          } else {
            data = util.extend(data || {}, attrs);
            callback(null, data);
          }
          sender = null;
        };
        if (err) return cb(util.error(err));
        var statusCode = response.statusCode;
        var statusSuccess = 2 === Math.floor(statusCode / 100);
        if (rawBody && statusSuccess) return cb(null, {
          body: body
        });
        var json;
        try {
          json = body && body.indexOf("<") > -1 && body.indexOf(">") > -1 && util.xml2json(body) || {};
        } catch (e) {
          json = {};
        }
        var xmlError = json && json.Error;
        statusSuccess ? cb(null, json) : xmlError ? cb(util.error(new Error(xmlError.Message), {
          code: xmlError.Code,
          error: xmlError
        })) : statusCode ? cb(util.error(new Error(response.statusMessage), {
          code: "" + statusCode
        })) : statusCode && cb(util.error(new Error("statusCode error")));
      });
      var killTask = function(data) {
        if (data.TaskId === TaskId) {
          sender && sender.abort && sender.abort();
          self.off("inner-kill-task", killTask);
        }
      };
      TaskId && self.on("inner-kill-task", killTask);
    }
    var API_MAP = {
      getService: getService,
      putBucket: putBucket,
      headBucket: headBucket,
      getBucket: getBucket,
      deleteBucket: deleteBucket,
      putBucketAcl: putBucketAcl,
      getBucketAcl: getBucketAcl,
      putBucketCors: putBucketCors,
      getBucketCors: getBucketCors,
      deleteBucketCors: deleteBucketCors,
      getBucketLocation: getBucketLocation,
      getBucketPolicy: getBucketPolicy,
      putBucketPolicy: putBucketPolicy,
      deleteBucketPolicy: deleteBucketPolicy,
      putBucketTagging: putBucketTagging,
      getBucketTagging: getBucketTagging,
      deleteBucketTagging: deleteBucketTagging,
      putBucketLifecycle: putBucketLifecycle,
      getBucketLifecycle: getBucketLifecycle,
      deleteBucketLifecycle: deleteBucketLifecycle,
      putBucketVersioning: putBucketVersioning,
      getBucketVersioning: getBucketVersioning,
      putBucketReplication: putBucketReplication,
      getBucketReplication: getBucketReplication,
      deleteBucketReplication: deleteBucketReplication,
      putBucketWebsite: putBucketWebsite,
      getBucketWebsite: getBucketWebsite,
      deleteBucketWebsite: deleteBucketWebsite,
      putBucketReferer: putBucketReferer,
      getBucketReferer: getBucketReferer,
      putBucketDomain: putBucketDomain,
      getBucketDomain: getBucketDomain,
      deleteBucketDomain: deleteBucketDomain,
      putBucketOrigin: putBucketOrigin,
      getBucketOrigin: getBucketOrigin,
      deleteBucketOrigin: deleteBucketOrigin,
      putBucketLogging: putBucketLogging,
      getBucketLogging: getBucketLogging,
      putBucketInventory: putBucketInventory,
      getBucketInventory: getBucketInventory,
      listBucketInventory: listBucketInventory,
      deleteBucketInventory: deleteBucketInventory,
      putBucketAccelerate: putBucketAccelerate,
      getBucketAccelerate: getBucketAccelerate,
      putBucketEncryption: putBucketEncryption,
      getBucketEncryption: getBucketEncryption,
      deleteBucketEncryption: deleteBucketEncryption,
      getObject: getObject,
      headObject: headObject,
      listObjectVersions: listObjectVersions,
      putObject: putObject,
      deleteObject: deleteObject,
      getObjectAcl: getObjectAcl,
      putObjectAcl: putObjectAcl,
      optionsObject: optionsObject,
      putObjectCopy: putObjectCopy,
      deleteMultipleObject: deleteMultipleObject,
      restoreObject: restoreObject,
      putObjectTagging: putObjectTagging,
      getObjectTagging: getObjectTagging,
      deleteObjectTagging: deleteObjectTagging,
      selectObjectContent: selectObjectContent,
      appendObject: appendObject,
      uploadPartCopy: uploadPartCopy,
      multipartInit: multipartInit,
      multipartUpload: multipartUpload,
      multipartComplete: multipartComplete,
      multipartList: multipartList,
      multipartListPart: multipartListPart,
      multipartAbort: multipartAbort,
      request: request,
      getObjectUrl: getObjectUrl,
      getAuth: getAuth
    };
    function warnOldApi(apiName, fn, proto) {
      util.each([ "Cors", "Acl" ], function(suffix) {
        if (apiName.slice(-suffix.length) === suffix) {
          var oldName = apiName.slice(0, -suffix.length) + suffix.toUpperCase();
          var apiFn = util.apiWrapper(apiName, fn);
          var warned = false;
          proto[oldName] = function() {
            !warned && console.warn("warning: cos." + oldName + " has been deprecated. Please Use cos." + apiName + " instead.");
            warned = true;
            apiFn.apply(this, arguments);
          };
        }
      });
    }
    module.exports.init = function(COS, task) {
      task.transferToTaskMethod(API_MAP, "putObject");
      util.each(API_MAP, function(fn, apiName) {
        COS.prototype[apiName] = util.apiWrapper(apiName, fn);
        warnOldApi(apiName, fn, COS.prototype);
      });
    };
  }, {
    "../lib/request": 57,
    "./util": 66
  } ],
  62: [ function(require, module, exports) {
    "use strict";
    var util = require("./util");
    var event = require("./event");
    var task = require("./task");
    var base = require("./base");
    var advance = require("./advance");
    var defaultOptions = {
      AppId: "",
      SecretId: "",
      SecretKey: "",
      SecurityToken: "",
      ChunkRetryTimes: 2,
      FileParallelLimit: 3,
      ChunkParallelLimit: 3,
      ChunkSize: 1048576,
      SliceSize: 1048576,
      CopyChunkParallelLimit: 20,
      CopyChunkSize: 10485760,
      CopySliceSize: 10485760,
      MaxPartNumber: 1e4,
      ProgressInterval: 1e3,
      Domain: "",
      ServiceDomain: "",
      Protocol: "",
      CompatibilityMode: false,
      ForcePathStyle: false,
      UseRawKey: false,
      Timeout: 0,
      CorrectClockSkew: true,
      SystemClockOffset: 0,
      UploadCheckContentMd5: false,
      UploadQueueSize: 1e4,
      UploadAddMetaMd5: false,
      UploadIdCacheLimit: 50,
      UseAccelerate: false,
      ForceSignHost: true
    };
    var COS = function(options) {
      this.options = util.extend(util.clone(defaultOptions), options || {});
      this.options.FileParallelLimit = Math.max(1, this.options.FileParallelLimit);
      this.options.ChunkParallelLimit = Math.max(1, this.options.ChunkParallelLimit);
      this.options.ChunkRetryTimes = Math.max(0, this.options.ChunkRetryTimes);
      this.options.ChunkSize = Math.max(1048576, this.options.ChunkSize);
      this.options.CopyChunkParallelLimit = Math.max(1, this.options.CopyChunkParallelLimit);
      this.options.CopyChunkSize = Math.max(1048576, this.options.CopyChunkSize);
      this.options.CopySliceSize = Math.max(0, this.options.CopySliceSize);
      this.options.MaxPartNumber = Math.max(1024, Math.min(1e4, this.options.MaxPartNumber));
      this.options.Timeout = Math.max(0, this.options.Timeout);
      this.options.AppId && console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: "test-1250000000").');
      if (this.options.SecretId && this.options.SecretId.indexOf(" ") > -1) {
        console.error("error: SecretId\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5");
        console.error("error: SecretId format is incorrect. Please check");
      }
      if (this.options.SecretKey && this.options.SecretKey.indexOf(" ") > -1) {
        console.error("error: SecretKey\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5");
        console.error("error: SecretKey format is incorrect. Please check");
      }
      if (util.isNode()) {
        console.warn("warning: cos-js-sdk-v5 \u4e0d\u652f\u6301 nodejs \u73af\u5883\u4f7f\u7528\uff0c\u8bf7\u6539\u7528 cos-nodejs-sdk-v5\uff0c\u53c2\u8003\u6587\u6863\uff1a https://cloud.tencent.com/document/product/436/8629");
        console.warn("warning: cos-js-sdk-v5 does not support nodejs environment. Please use cos-nodejs-sdk-v5 instead. See: https://cloud.tencent.com/document/product/436/8629");
      }
      event.init(this);
      task.init(this);
    };
    base.init(COS, task);
    advance.init(COS, task);
    COS.util = {
      md5: util.md5,
      xml2json: util.xml2json,
      json2xml: util.json2xml
    };
    COS.getAuthorization = util.getAuth;
    COS.version = "1.3.8";
    module.exports = COS;
  }, {
    "./advance": 59,
    "./base": 61,
    "./event": 63,
    "./task": 65,
    "./util": 66
  } ],
  63: [ function(require, module, exports) {
    var initEvent = function(cos) {
      var listeners = {};
      var getList = function(action) {
        !listeners[action] && (listeners[action] = []);
        return listeners[action];
      };
      cos.on = function(action, callback) {
        "task-list-update" === action && console.warn('warning: Event "' + action + '" has been deprecated. Please use "list-update" instead.');
        getList(action).push(callback);
      };
      cos.off = function(action, callback) {
        var list = getList(action);
        for (var i = list.length - 1; i >= 0; i--) callback === list[i] && list.splice(i, 1);
      };
      cos.emit = function(action, data) {
        var list = getList(action).map(function(cb) {
          return cb;
        });
        for (var i = 0; i < list.length; i++) list[i](data);
      };
    };
    var EventProxy = function() {
      initEvent(this);
    };
    module.exports.init = initEvent;
    module.exports.EventProxy = EventProxy;
  }, {} ],
  64: [ function(require, module, exports) {
    var util = require("./util");
    var cacheKey = "cos_sdk_upload_cache";
    var expires = 2592e3;
    var cache;
    var timer;
    var getCache = function() {
      try {
        var val = JSON.parse(localStorage.getItem(cacheKey));
      } catch (e) {}
      val || (val = []);
      cache = val;
    };
    var setCache = function() {
      try {
        localStorage.setItem(cacheKey, JSON.stringify(cache));
      } catch (e) {}
    };
    var init = function() {
      if (cache) return;
      getCache.call(this);
      var changed = false;
      var now = Math.round(Date.now() / 1e3);
      for (var i = cache.length - 1; i >= 0; i--) {
        var mtime = cache[i][2];
        if (!mtime || mtime + expires < now) {
          cache.splice(i, 1);
          changed = true;
        }
      }
      changed && setCache();
    };
    var save = function() {
      if (timer) return;
      timer = setTimeout(function() {
        setCache();
        timer = null;
      }, 400);
    };
    var mod = {
      using: {},
      setUsing: function(uuid) {
        mod.using[uuid] = true;
      },
      removeUsing: function(uuid) {
        delete mod.using[uuid];
      },
      getFileId: function(file, ChunkSize, Bucket, Key) {
        return file.name && file.size && file.lastModifiedDate && ChunkSize ? util.md5([ file.name, file.size, file.lastModifiedDate, ChunkSize, Bucket, Key ].join("::")) : null;
      },
      getUploadIdList: function(uuid) {
        if (!uuid) return null;
        init.call(this);
        var list = [];
        for (var i = 0; i < cache.length; i++) cache[i][0] === uuid && list.push(cache[i][1]);
        return list.length ? list : null;
      },
      saveUploadId: function(uuid, UploadId, limit) {
        init.call(this);
        if (!uuid) return;
        for (var i = cache.length - 1; i >= 0; i--) {
          var item = cache[i];
          item[0] === uuid && item[1] === UploadId && cache.splice(i, 1);
        }
        cache.unshift([ uuid, UploadId, Math.round(Date.now() / 1e3) ]);
        cache.length > limit && cache.splice(limit);
        save();
      },
      removeUploadId: function(UploadId) {
        init.call(this);
        delete mod.using[UploadId];
        for (var i = cache.length - 1; i >= 0; i--) cache[i][1] === UploadId && cache.splice(i, 1);
        save();
      }
    };
    module.exports = mod;
  }, {
    "./util": 66
  } ],
  65: [ function(require, module, exports) {
    var session = require("./session");
    var util = require("./util");
    var originApiMap = {};
    var transferToTaskMethod = function(apiMap, apiName) {
      originApiMap[apiName] = apiMap[apiName];
      apiMap[apiName] = function(params, callback) {
        params.SkipTask ? originApiMap[apiName].call(this, params, callback) : this._addTask(apiName, params, callback);
      };
    };
    var initTask = function(cos) {
      var queue = [];
      var tasks = {};
      var uploadingFileCount = 0;
      var nextUploadIndex = 0;
      var formatTask = function(task) {
        var t = {
          id: task.id,
          Bucket: task.Bucket,
          Region: task.Region,
          Key: task.Key,
          FilePath: task.FilePath,
          state: task.state,
          loaded: task.loaded,
          size: task.size,
          speed: task.speed,
          percent: task.percent,
          hashPercent: task.hashPercent,
          error: task.error
        };
        task.FilePath && (t.FilePath = task.FilePath);
        task._custom && (t._custom = task._custom);
        return t;
      };
      var emitListUpdate = function() {
        var timer;
        var emit = function() {
          timer = 0;
          cos.emit("task-list-update", {
            list: util.map(queue, formatTask)
          });
          cos.emit("list-update", {
            list: util.map(queue, formatTask)
          });
        };
        return function() {
          timer || (timer = setTimeout(emit));
        };
      }();
      var clearQueue = function() {
        if (queue.length <= cos.options.UploadQueueSize) return;
        for (var i = 0; i < nextUploadIndex && i < queue.length && queue.length > cos.options.UploadQueueSize; ) {
          var isActive = "waiting" === queue[i].state || "checking" === queue[i].state || "uploading" === queue[i].state;
          if (queue[i] && isActive) i++; else {
            tasks[queue[i].id] && delete tasks[queue[i].id];
            queue.splice(i, 1);
            nextUploadIndex--;
          }
        }
        emitListUpdate();
      };
      var startNextTask = function() {
        if (uploadingFileCount >= cos.options.FileParallelLimit) return;
        while (queue[nextUploadIndex] && "waiting" !== queue[nextUploadIndex].state) nextUploadIndex++;
        if (nextUploadIndex >= queue.length) return;
        var task = queue[nextUploadIndex];
        nextUploadIndex++;
        uploadingFileCount++;
        task.state = "checking";
        task.params.onTaskStart && task.params.onTaskStart(formatTask(task));
        !task.params.UploadData && (task.params.UploadData = {});
        var apiParams = util.formatParams(task.api, task.params);
        originApiMap[task.api].call(cos, apiParams, function(err, data) {
          if (!cos._isRunningTask(task.id)) return;
          if ("checking" === task.state || "uploading" === task.state) {
            task.state = err ? "error" : "success";
            err && (task.error = err);
            uploadingFileCount--;
            emitListUpdate();
            startNextTask();
            task.callback && task.callback(err, data);
            if ("success" === task.state) {
              if (task.params) {
                delete task.params.UploadData;
                delete task.params.Body;
                delete task.params;
              }
              delete task.callback;
            }
          }
          clearQueue();
        });
        emitListUpdate();
        setTimeout(startNextTask);
      };
      var killTask = function(id, switchToState) {
        var task = tasks[id];
        if (!task) return;
        var waiting = task && "waiting" === task.state;
        var running = task && ("checking" === task.state || "uploading" === task.state);
        if ("canceled" === switchToState && "canceled" !== task.state || "paused" === switchToState && waiting || "paused" === switchToState && running) {
          if ("paused" === switchToState && task.params.Body && "function" === typeof task.params.Body.pipe) {
            console.error("stream not support pause");
            return;
          }
          task.state = switchToState;
          cos.emit("inner-kill-task", {
            TaskId: id,
            toState: switchToState
          });
          try {
            var UploadId = task && task.params && task.params.UploadData.UploadId;
          } catch (e) {}
          "canceled" === switchToState && UploadId && session.removeUsing(UploadId);
          emitListUpdate();
          if (running) {
            uploadingFileCount--;
            startNextTask();
          }
          if ("canceled" === switchToState) {
            if (task.params) {
              delete task.params.UploadData;
              delete task.params.Body;
              delete task.params;
            }
            delete task.callback;
          }
        }
        clearQueue();
      };
      cos._addTasks = function(taskList) {
        util.each(taskList, function(task) {
          cos._addTask(task.api, task.params, task.callback, true);
        });
        emitListUpdate();
      };
      var isTaskReadyWarning = true;
      cos._addTask = function(api, params, callback, ignoreAddEvent) {
        params = util.formatParams(api, params);
        var id = util.uuid();
        params.TaskId = id;
        params.onTaskReady && params.onTaskReady(id);
        if (params.TaskReady) {
          params.TaskReady(id);
          isTaskReadyWarning && console.warn('warning: Param "TaskReady" has been deprecated. Please use "onTaskReady" instead.');
          isTaskReadyWarning = false;
        }
        var task = {
          params: params,
          callback: callback,
          api: api,
          index: queue.length,
          id: id,
          Bucket: params.Bucket,
          Region: params.Region,
          Key: params.Key,
          FilePath: params.FilePath || "",
          state: "waiting",
          loaded: 0,
          size: 0,
          speed: 0,
          percent: 0,
          hashPercent: 0,
          error: null,
          _custom: params._custom
        };
        var onHashProgress = params.onHashProgress;
        params.onHashProgress = function(info) {
          if (!cos._isRunningTask(task.id)) return;
          task.hashPercent = info.percent;
          onHashProgress && onHashProgress(info);
          emitListUpdate();
        };
        var onProgress = params.onProgress;
        params.onProgress = function(info) {
          if (!cos._isRunningTask(task.id)) return;
          "checking" === task.state && (task.state = "uploading");
          task.loaded = info.loaded;
          task.speed = info.speed;
          task.percent = info.percent;
          onProgress && onProgress(info);
          emitListUpdate();
        };
        util.getFileSize(api, params, function(err, size) {
          if (err) return callback(util.error(err));
          tasks[id] = task;
          queue.push(task);
          task.size = size;
          !ignoreAddEvent && emitListUpdate();
          startNextTask();
          clearQueue();
        });
        return id;
      };
      cos._isRunningTask = function(id) {
        var task = tasks[id];
        return !!(task && ("checking" === task.state || "uploading" === task.state));
      };
      cos.getTaskList = function() {
        return util.map(queue, formatTask);
      };
      cos.cancelTask = function(id) {
        killTask(id, "canceled");
      };
      cos.pauseTask = function(id) {
        killTask(id, "paused");
      };
      cos.restartTask = function(id) {
        var task = tasks[id];
        if (task && ("paused" === task.state || "error" === task.state)) {
          task.state = "waiting";
          emitListUpdate();
          nextUploadIndex = Math.min(nextUploadIndex, task.index);
          startNextTask();
        }
      };
      cos.isUploadRunning = function() {
        return uploadingFileCount || nextUploadIndex < queue.length;
      };
    };
    module.exports.transferToTaskMethod = transferToTaskMethod;
    module.exports.init = initTask;
  }, {
    "./session": 64,
    "./util": 66
  } ],
  66: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      var md5 = require("../lib/md5");
      var CryptoJS = require("../lib/crypto");
      var xml2json = require("../lib/xml2json");
      var json2xml = require("../lib/json2xml");
      function camSafeUrlEncode(str) {
        return encodeURIComponent(str).replace(/!/g, "%21").replace(/'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
      }
      function getObjectKeys(obj, forKey) {
        var list = [];
        for (var key in obj) obj.hasOwnProperty(key) && list.push(forKey ? camSafeUrlEncode(key).toLowerCase() : key);
        return list.sort(function(a, b) {
          a = a.toLowerCase();
          b = b.toLowerCase();
          return a === b ? 0 : a > b ? 1 : -1;
        });
      }
      var obj2str = function(obj, lowerCaseKey) {
        var i, key, val;
        var list = [];
        var keyList = getObjectKeys(obj);
        for (i = 0; i < keyList.length; i++) {
          key = keyList[i];
          val = void 0 === obj[key] || null === obj[key] ? "" : "" + obj[key];
          key = lowerCaseKey ? camSafeUrlEncode(key).toLowerCase() : camSafeUrlEncode(key);
          val = camSafeUrlEncode(val) || "";
          list.push(key + "=" + val);
        }
        return list.join("&");
      };
      var signHeaders = [ "content-disposition", "content-encoding", "content-length", "content-md5", "expect", "host", "if-match", "if-modified-since", "if-none-match", "if-unmodified-since", "origin", "range", "response-cache-control", "response-content-disposition", "response-content-encoding", "response-content-language", "response-content-type", "response-expires", "transfer-encoding", "versionid" ];
      var getSignHeaderObj = function(headers) {
        var signHeaderObj = {};
        for (var i in headers) {
          var key = i.toLowerCase();
          (key.indexOf("x-cos-") > -1 || signHeaders.indexOf(key) > -1) && (signHeaderObj[i] = headers[i]);
        }
        return signHeaderObj;
      };
      var getAuth = function(opt) {
        opt = opt || {};
        var SecretId = opt.SecretId;
        var SecretKey = opt.SecretKey;
        var KeyTime = opt.KeyTime;
        var method = (opt.method || opt.Method || "get").toLowerCase();
        var queryParams = clone(opt.Query || opt.params || {});
        var headers = getSignHeaderObj(clone(opt.Headers || opt.headers || {}));
        var Key = opt.Key || "";
        var pathname;
        if (opt.UseRawKey) pathname = opt.Pathname || opt.pathname || "/" + Key; else {
          pathname = opt.Pathname || opt.pathname || Key;
          0 !== pathname.indexOf("/") && (pathname = "/" + pathname);
        }
        var forceSignHost = false !== opt.ForceSignHost;
        !headers.Host && !headers.host && opt.Bucket && opt.Region && forceSignHost && (headers.Host = opt.Bucket + ".cos." + opt.Region + ".myqcloud.com");
        if (!SecretId) throw new Error("missing param SecretId");
        if (!SecretKey) throw new Error("missing param SecretKey");
        var now = Math.round(getSkewTime(opt.SystemClockOffset) / 1e3) - 1;
        var exp = now;
        var Expires = opt.Expires || opt.expires;
        exp += void 0 === Expires ? 900 : 1 * Expires || 0;
        var qSignAlgorithm = "sha1";
        var qAk = SecretId;
        var qSignTime = KeyTime || now + ";" + exp;
        var qKeyTime = KeyTime || now + ";" + exp;
        var qHeaderList = getObjectKeys(headers, true).join(";").toLowerCase();
        var qUrlParamList = getObjectKeys(queryParams, true).join(";").toLowerCase();
        var signKey = CryptoJS.HmacSHA1(qKeyTime, SecretKey).toString();
        var formatString = [ method, pathname, util.obj2str(queryParams, true), util.obj2str(headers, true), "" ].join("\n");
        var stringToSign = [ "sha1", qSignTime, CryptoJS.SHA1(formatString).toString(), "" ].join("\n");
        var qSignature = CryptoJS.HmacSHA1(stringToSign, signKey).toString();
        var authorization = [ "q-sign-algorithm=" + qSignAlgorithm, "q-ak=" + qAk, "q-sign-time=" + qSignTime, "q-key-time=" + qKeyTime, "q-header-list=" + qHeaderList, "q-url-param-list=" + qUrlParamList, "q-signature=" + qSignature ].join("&");
        return authorization;
      };
      var readIntBE = function(chunk, size, offset) {
        var bytes = size / 8;
        var buf = chunk.slice(offset, offset + bytes);
        new Uint8Array(buf).reverse();
        return new {
          8: Uint8Array,
          16: Uint16Array,
          32: Uint32Array
        }[size](buf)[0];
      };
      var buf2str = function(chunk, start, end, isUtf8) {
        var buf = chunk.slice(start, end);
        var str = "";
        new Uint8Array(buf).forEach(function(charCode) {
          str += String.fromCharCode(charCode);
        });
        isUtf8 && (str = decodeURIComponent(escape(str)));
        return str;
      };
      var parseSelectPayload = function(chunk) {
        var header = {};
        var body = buf2str(chunk);
        var result = {
          records: []
        };
        while (chunk.byteLength) {
          var totalLength = readIntBE(chunk, 32, 0);
          var headerLength = readIntBE(chunk, 32, 4);
          var payloadRestLength = totalLength - headerLength - 16;
          var offset = 0;
          var content;
          chunk = chunk.slice(12);
          while (offset < headerLength) {
            var headerNameLength = readIntBE(chunk, 8, offset);
            var headerName = buf2str(chunk, offset + 1, offset + 1 + headerNameLength);
            var headerValueLength = readIntBE(chunk, 16, offset + headerNameLength + 2);
            var headerValue = buf2str(chunk, offset + headerNameLength + 4, offset + headerNameLength + 4 + headerValueLength);
            header[headerName] = headerValue;
            offset += headerNameLength + 4 + headerValueLength;
          }
          if ("Records" === header[":event-type"]) {
            content = buf2str(chunk, offset, offset + payloadRestLength, true);
            result.records.push(content);
          } else if ("Stats" === header[":event-type"]) {
            content = buf2str(chunk, offset, offset + payloadRestLength, true);
            result.stats = util.xml2json(content).Stats;
          } else if ("error" === header[":event-type"]) {
            var errCode = header[":error-code"];
            var errMessage = header[":error-message"];
            var err = new Error(errMessage);
            err.message = errMessage;
            err.name = err.code = errCode;
            result.error = err;
          } else [ "Progress", "Continuation", "End" ].includes(header[":event-type"]);
          chunk = chunk.slice(offset + payloadRestLength + 4);
        }
        return {
          payload: result.records.join(""),
          body: body
        };
      };
      var getSourceParams = function(source) {
        var parser = this.options.CopySourceParser;
        if (parser) return parser(source);
        var m = source.match(/^([^.]+-\d+)\.cos(v6|-cdc)?\.([^.]+)\.myqcloud\.com\/(.+)$/);
        if (!m) return null;
        return {
          Bucket: m[1],
          Region: m[3],
          Key: m[4]
        };
      };
      var noop = function() {};
      var clearKey = function(obj) {
        var retObj = {};
        for (var key in obj) obj.hasOwnProperty(key) && void 0 !== obj[key] && null !== obj[key] && (retObj[key] = obj[key]);
        return retObj;
      };
      var readAsBinaryString = function(blob, callback) {
        var readFun;
        var fr = new FileReader();
        if (FileReader.prototype.readAsBinaryString) {
          readFun = FileReader.prototype.readAsBinaryString;
          fr.onload = function() {
            callback(this.result);
          };
        } else FileReader.prototype.readAsArrayBuffer ? readFun = function(fileData) {
          var binary = "";
          var pt = this;
          var reader = new FileReader();
          reader.onload = function(e) {
            var bytes = new Uint8Array(reader.result);
            var length = bytes.byteLength;
            for (var i = 0; i < length; i++) binary += String.fromCharCode(bytes[i]);
            callback(binary);
          };
          reader.readAsArrayBuffer(fileData);
        } : console.error("FileReader not support readAsBinaryString");
        readFun.call(fr, blob);
      };
      var fileSliceNeedCopy = function() {
        var compareVersion = function(a, b) {
          a = a.split(".");
          b = b.split(".");
          for (var i = 0; i < b.length; i++) if (a[i] !== b[i]) return parseInt(a[i]) > parseInt(b[i]) ? 1 : -1;
          return 0;
        };
        var check = function(ua) {
          if (!ua) return false;
          var ChromeVersion = (ua.match(/Chrome\/([.\d]+)/) || [])[1];
          var QBCoreVersion = (ua.match(/QBCore\/([.\d]+)/) || [])[1];
          var QQBrowserVersion = (ua.match(/QQBrowser\/([.\d]+)/) || [])[1];
          var need = ChromeVersion && compareVersion(ChromeVersion, "53.0.2785.116") < 0 && QBCoreVersion && compareVersion(QBCoreVersion, "3.53.991.400") < 0 && QQBrowserVersion && compareVersion(QQBrowserVersion, "9.0.2524.400") <= 0 || false;
          return need;
        };
        return check("undefined" !== typeof navigator && navigator.userAgent);
      }();
      var fileSlice = function(file, start, end, isUseToUpload, callback) {
        var blob;
        file.slice ? blob = file.slice(start, end) : file.mozSlice ? blob = file.mozSlice(start, end) : file.webkitSlice && (blob = file.webkitSlice(start, end));
        if (isUseToUpload && fileSliceNeedCopy) {
          var reader = new FileReader();
          reader.onload = function(e) {
            blob = null;
            callback(new Blob([ reader.result ]));
          };
          reader.readAsArrayBuffer(blob);
        } else callback(blob);
      };
      var getBodyMd5 = function(UploadCheckContentMd5, Body, callback, onProgress) {
        callback = callback || noop;
        UploadCheckContentMd5 ? "string" === typeof Body ? callback(util.md5(Body, true)) : Blob && Body instanceof Blob ? util.getFileMd5(Body, function(err, md5) {
          callback(md5);
        }, onProgress) : callback() : callback();
      };
      var md5ChunkSize = 1048576;
      var getFileMd5 = function(blob, callback, onProgress) {
        var size = blob.size;
        var loaded = 0;
        var md5ctx = md5.getCtx();
        var next = function(start) {
          if (start >= size) {
            var hash = md5ctx.digest("hex");
            callback(null, hash);
            return;
          }
          var end = Math.min(size, start + md5ChunkSize);
          util.fileSlice(blob, start, end, false, function(chunk) {
            readAsBinaryString(chunk, function(content) {
              chunk = null;
              md5ctx = md5ctx.update(content, true);
              loaded += content.length;
              content = null;
              onProgress && onProgress({
                loaded: loaded,
                total: size,
                percent: Math.round(loaded / size * 1e4) / 1e4
              });
              next(start + md5ChunkSize);
            });
          });
        };
        next(0);
      };
      function clone(obj) {
        return map(obj, function(v) {
          return "object" === typeof v && null !== v ? clone(v) : v;
        });
      }
      function attr(obj, name, defaultValue) {
        return obj && name in obj ? obj[name] : defaultValue;
      }
      function extend(target, source) {
        each(source, function(val, key) {
          target[key] = source[key];
        });
        return target;
      }
      function isArray(arr) {
        return arr instanceof Array;
      }
      function isInArray(arr, item) {
        var flag = false;
        for (var i = 0; i < arr.length; i++) if (item === arr[i]) {
          flag = true;
          break;
        }
        return flag;
      }
      function makeArray(arr) {
        return isArray(arr) ? arr : [ arr ];
      }
      function each(obj, fn) {
        for (var i in obj) obj.hasOwnProperty(i) && fn(obj[i], i);
      }
      function map(obj, fn) {
        var o = isArray(obj) ? [] : {};
        for (var i in obj) obj.hasOwnProperty(i) && (o[i] = fn(obj[i], i));
        return o;
      }
      function filter(obj, fn) {
        var iaArr = isArray(obj);
        var o = iaArr ? [] : {};
        for (var i in obj) obj.hasOwnProperty(i) && fn(obj[i], i) && (iaArr ? o.push(obj[i]) : o[i] = obj[i]);
        return o;
      }
      var binaryBase64 = function(str) {
        var i, len, char, res = "";
        for (i = 0, len = str.length / 2; i < len; i++) {
          char = parseInt(str[2 * i] + str[2 * i + 1], 16);
          res += String.fromCharCode(char);
        }
        return btoa(res);
      };
      var uuid = function() {
        var S4 = function() {
          return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
        };
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
      };
      var hasMissingParams = function(apiName, params) {
        var Bucket = params.Bucket;
        var Region = params.Region;
        var Key = params.Key;
        var Domain = this.options.Domain;
        var checkBucket = !Domain || "string" === typeof Domain && Domain.indexOf("{Bucket}") > -1;
        var checkRegion = !Domain || "string" === typeof Domain && Domain.indexOf("{Region}") > -1;
        if (apiName.indexOf("Bucket") > -1 || "deleteMultipleObject" === apiName || "multipartList" === apiName || "listObjectVersions" === apiName) {
          if (checkBucket && !Bucket) return "Bucket";
          if (checkRegion && !Region) return "Region";
        } else if (apiName.indexOf("Object") > -1 || apiName.indexOf("multipart") > -1 || "sliceUploadFile" === apiName || "abortUploadTask" === apiName) {
          if (checkBucket && !Bucket) return "Bucket";
          if (checkRegion && !Region) return "Region";
          if (!Key) return "Key";
        }
        return false;
      };
      var formatParams = function(apiName, params) {
        params = extend({}, params);
        if ("getAuth" !== apiName && "getV4Auth" !== apiName && "getObjectUrl" !== apiName) {
          var Headers = params.Headers || {};
          if (params && "object" === typeof params) {
            (function() {
              for (var key in params) params.hasOwnProperty(key) && key.indexOf("x-cos-") > -1 && (Headers[key] = params[key]);
            })();
            var headerMap = {
              "x-cos-mfa": "MFA",
              "Content-MD5": "ContentMD5",
              "Content-Length": "ContentLength",
              "Content-Type": "ContentType",
              Expect: "Expect",
              Expires: "Expires",
              "Cache-Control": "CacheControl",
              "Content-Disposition": "ContentDisposition",
              "Content-Encoding": "ContentEncoding",
              Range: "Range",
              "If-Modified-Since": "IfModifiedSince",
              "If-Unmodified-Since": "IfUnmodifiedSince",
              "If-Match": "IfMatch",
              "If-None-Match": "IfNoneMatch",
              "x-cos-copy-source": "CopySource",
              "x-cos-copy-source-Range": "CopySourceRange",
              "x-cos-metadata-directive": "MetadataDirective",
              "x-cos-copy-source-If-Modified-Since": "CopySourceIfModifiedSince",
              "x-cos-copy-source-If-Unmodified-Since": "CopySourceIfUnmodifiedSince",
              "x-cos-copy-source-If-Match": "CopySourceIfMatch",
              "x-cos-copy-source-If-None-Match": "CopySourceIfNoneMatch",
              "x-cos-acl": "ACL",
              "x-cos-grant-read": "GrantRead",
              "x-cos-grant-write": "GrantWrite",
              "x-cos-grant-full-control": "GrantFullControl",
              "x-cos-grant-read-acp": "GrantReadAcp",
              "x-cos-grant-write-acp": "GrantWriteAcp",
              "x-cos-storage-class": "StorageClass",
              "x-cos-traffic-limit": "TrafficLimit",
              "x-cos-mime-limit": "MimeLimit",
              "x-cos-server-side-encryption-customer-algorithm": "SSECustomerAlgorithm",
              "x-cos-server-side-encryption-customer-key": "SSECustomerKey",
              "x-cos-server-side-encryption-customer-key-MD5": "SSECustomerKeyMD5",
              "x-cos-server-side-encryption": "ServerSideEncryption",
              "x-cos-server-side-encryption-cos-kms-key-id": "SSEKMSKeyId",
              "x-cos-server-side-encryption-context": "SSEContext"
            };
            util.each(headerMap, function(paramKey, headerKey) {
              void 0 !== params[paramKey] && (Headers[headerKey] = params[paramKey]);
            });
            params.Headers = clearKey(Headers);
          }
        }
        return params;
      };
      var apiWrapper = function(apiName, apiFn) {
        return function(params, callback) {
          var self = this;
          if ("function" === typeof params) {
            callback = params;
            params = {};
          }
          params = formatParams(apiName, params);
          var formatResult = function(result) {
            if (result && result.headers) {
              result.headers["x-cos-request-id"] && (result.RequestId = result.headers["x-cos-request-id"]);
              result.headers["x-ci-request-id"] && (result.RequestId = result.headers["x-ci-request-id"]);
              result.headers["x-cos-version-id"] && (result.VersionId = result.headers["x-cos-version-id"]);
              result.headers["x-cos-delete-marker"] && (result.DeleteMarker = result.headers["x-cos-delete-marker"]);
            }
            return result;
          };
          var _callback = function(err, data) {
            callback && callback(formatResult(err), formatResult(data));
          };
          var checkParams = function() {
            if ("getService" !== apiName && "abortUploadTask" !== apiName) {
              var missingResult = hasMissingParams.call(self, apiName, params);
              if (missingResult) return "missing param " + missingResult;
              if (params.Region) {
                if (self.options.CompatibilityMode) {
                  if (!/^([a-z\d-.]+)$/.test(params.Region)) return "Region format error.";
                } else {
                  if (params.Region.indexOf("cos.") > -1) return 'param Region should not be start with "cos."';
                  if (!/^([a-z\d-]+)$/.test(params.Region)) return "Region format error.";
                }
                self.options.CompatibilityMode || -1 !== params.Region.indexOf("-") || "yfb" === params.Region || "default" === params.Region || "accelerate" === params.Region || console.warn("warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224");
              }
              if (params.Bucket) {
                if (!/^([a-z\d-]+)-(\d+)$/.test(params.Bucket)) if (params.AppId) params.Bucket = params.Bucket + "-" + params.AppId; else {
                  if (!self.options.AppId) return 'Bucket should format as "test-1250000000".';
                  params.Bucket = params.Bucket + "-" + self.options.AppId;
                }
                if (params.AppId) {
                  console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:"test-1250000000" ).');
                  delete params.AppId;
                }
              }
              !self.options.UseRawKey && params.Key && "/" === params.Key.substr(0, 1) && (params.Key = params.Key.substr(1));
            }
          };
          var errMsg = checkParams();
          var isSync = "getAuth" === apiName || "getObjectUrl" === apiName;
          if ("function" === typeof Promise && !isSync && !callback) return new Promise(function(resolve, reject) {
            callback = function(err, data) {
              err ? reject(err) : resolve(data);
            };
            if (errMsg) return _callback(util.error(new Error(errMsg)));
            apiFn.call(self, params, _callback);
          });
          if (errMsg) return _callback(util.error(new Error(errMsg)));
          var res = apiFn.call(self, params, _callback);
          if (isSync) return res;
        };
      };
      var throttleOnProgress = function(total, onProgress) {
        var self = this;
        var size0 = 0;
        var size1 = 0;
        var time0 = Date.now();
        var time1;
        var timer;
        function update() {
          timer = 0;
          if (onProgress && "function" === typeof onProgress) {
            time1 = Date.now();
            var speed = Math.max(0, Math.round((size1 - size0) / ((time1 - time0) / 1e3) * 100) / 100) || 0;
            var percent;
            percent = 0 === size1 && 0 === total ? 1 : Math.floor(size1 / total * 100) / 100 || 0;
            time0 = time1;
            size0 = size1;
            try {
              onProgress({
                loaded: size1,
                total: total,
                speed: speed,
                percent: percent
              });
            } catch (e) {}
          }
        }
        return function(info, immediately) {
          if (info) {
            size1 = info.loaded;
            total = info.total;
          }
          if (immediately) {
            clearTimeout(timer);
            update();
          } else {
            if (timer) return;
            timer = setTimeout(update, self.options.ProgressInterval);
          }
        };
      };
      var getFileSize = function(api, params, callback) {
        var size;
        "string" === typeof params.Body ? params.Body = new Blob([ params.Body ], {
          type: "text/plain"
        }) : params.Body instanceof ArrayBuffer && (params.Body = new Blob([ params.Body ]));
        if (!params.Body || !(params.Body instanceof Blob || "[object File]" === params.Body.toString() || "[object Blob]" === params.Body.toString())) {
          callback(util.error(new Error("params body format error, Only allow File|Blob|String.")));
          return;
        }
        size = params.Body.size;
        params.ContentLength = size;
        callback(null, size);
      };
      var getSkewTime = function(offset) {
        return Date.now() + (offset || 0);
      };
      var error = function(err, opt) {
        var sourceErr = err;
        err.message = err.message || null;
        if ("string" === typeof opt) {
          err.error = opt;
          err.message = opt;
        } else if ("object" === typeof opt && null !== opt) {
          extend(err, opt);
          (opt.code || opt.name) && (err.code = opt.code || opt.name);
          opt.message && (err.message = opt.message);
          opt.stack && (err.stack = opt.stack);
        }
        if ("function" === typeof Object.defineProperty) {
          Object.defineProperty(err, "name", {
            writable: true,
            enumerable: false
          });
          Object.defineProperty(err, "message", {
            enumerable: true
          });
        }
        err.name = opt && opt.name || err.name || err.code || "Error";
        err.code || (err.code = err.name);
        err.error || (err.error = clone(sourceErr));
        return err;
      };
      var isNode = function() {
        return "object" !== typeof window && "object" === typeof process && "function" === typeof require;
      };
      var isCIHost = function(url) {
        return /^https?:\/\/([^/]+\.)?ci\.[^/]+/.test(url);
      };
      var util = {
        noop: noop,
        formatParams: formatParams,
        apiWrapper: apiWrapper,
        xml2json: xml2json,
        json2xml: json2xml,
        md5: md5,
        clearKey: clearKey,
        fileSlice: fileSlice,
        getBodyMd5: getBodyMd5,
        getFileMd5: getFileMd5,
        binaryBase64: binaryBase64,
        extend: extend,
        isArray: isArray,
        isInArray: isInArray,
        makeArray: makeArray,
        each: each,
        map: map,
        filter: filter,
        clone: clone,
        attr: attr,
        uuid: uuid,
        camSafeUrlEncode: camSafeUrlEncode,
        throttleOnProgress: throttleOnProgress,
        getFileSize: getFileSize,
        getSkewTime: getSkewTime,
        error: error,
        obj2str: obj2str,
        getAuth: getAuth,
        parseSelectPayload: parseSelectPayload,
        getSourceParams: getSourceParams,
        isBrowser: true,
        isNode: isNode,
        isCIHost: isCIHost
      };
      module.exports = util;
    }).call(this, require("_process"));
  }, {
    "../lib/crypto": 54,
    "../lib/json2xml": 55,
    "../lib/md5": 56,
    "../lib/xml2json": 58,
    _process: 11
  } ],
  67: [ function(require, module, exports) {
    "use strict";
    var has = Object.prototype.hasOwnProperty, prefix = "~";
    function Events() {}
    if (Object.create) {
      Events.prototype = Object.create(null);
      new Events().__proto__ || (prefix = false);
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if ("function" !== typeof fn) throw new TypeError("The listener must be a function");
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      emitter._events[evt] ? emitter._events[evt].fn ? emitter._events[evt] = [ emitter._events[evt], listener ] : emitter._events[evt].push(listener) : (emitter._events[evt] = listener, 
      emitter._eventsCount++);
      return emitter;
    }
    function clearEvent(emitter, evt) {
      0 === --emitter._eventsCount ? emitter._events = new Events() : delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (0 === this._eventsCount) return names;
      for (name in events = this._events) has.call(events, name) && names.push(prefix ? name.slice(1) : name);
      if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [ handlers.fn ];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) ee[i] = handlers[i].fn;
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        listeners.once && this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
         case 1:
          return listeners.fn.call(listeners.context), true;

         case 2:
          return listeners.fn.call(listeners.context, a1), true;

         case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

         case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

         case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

         case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) args[i - 1] = arguments[i];
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          listeners[i].once && this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
           case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

           case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

           case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

           case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

           default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) args[j - 1] = arguments[j];
            listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) listeners.fn !== fn || once && !listeners.once || context && listeners.context !== context || clearEvent(this, evt); else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) && events.push(listeners[i]);
        events.length ? this._events[evt] = 1 === events.length ? events[0] : events : clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        this._events[evt] && clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    "undefined" !== typeof module && (module.exports = EventEmitter);
  }, {} ],
  68: [ function(require, module, exports) {
    (function(process, global) {
      (function() {
        "use strict";
        var root = "object" === typeof window ? window : {};
        var NODE_JS = !root.JS_SHA1_NO_NODE_JS && "object" === typeof process && process.versions && process.versions.node;
        NODE_JS && (root = global);
        var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && "object" === typeof module && module.exports;
        var AMD = "function" === typeof define && define.amd;
        var HEX_CHARS = "0123456789abcdef".split("");
        var EXTRA = [ -2147483648, 8388608, 32768, 128 ];
        var SHIFT = [ 24, 16, 8, 0 ];
        var OUTPUT_TYPES = [ "hex", "array", "digest", "arrayBuffer" ];
        var blocks = [];
        var createOutputMethod = function(outputType) {
          return function(message) {
            return new Sha1(true).update(message)[outputType]();
          };
        };
        var createMethod = function() {
          var method = createOutputMethod("hex");
          NODE_JS && (method = nodeWrap(method));
          method.create = function() {
            return new Sha1();
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createOutputMethod(type);
          }
          return method;
        };
        var nodeWrap = function(method) {
          var crypto = eval("require('crypto')");
          var Buffer = eval("require('buffer').Buffer");
          var nodeMethod = function(message) {
            if ("string" === typeof message) return crypto.createHash("sha1").update(message, "utf8").digest("hex");
            if (message.constructor === ArrayBuffer) message = new Uint8Array(message); else if (void 0 === message.length) return method(message);
            return crypto.createHash("sha1").update(new Buffer(message)).digest("hex");
          };
          return nodeMethod;
        };
        function Sha1(sharedMemory) {
          if (sharedMemory) {
            blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            this.blocks = blocks;
          } else this.blocks = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
          this.h0 = 1732584193;
          this.h1 = 4023233417;
          this.h2 = 2562383102;
          this.h3 = 271733878;
          this.h4 = 3285377520;
          this.block = this.start = this.bytes = this.hBytes = 0;
          this.finalized = this.hashed = false;
          this.first = true;
        }
        Sha1.prototype.update = function(message) {
          if (this.finalized) return;
          var notString = "string" !== typeof message;
          notString && message.constructor === root.ArrayBuffer && (message = new Uint8Array(message));
          var code, index = 0, i, length = message.length || 0, blocks = this.blocks;
          while (index < length) {
            if (this.hashed) {
              this.hashed = false;
              blocks[0] = this.block;
              blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
            }
            if (notString) for (i = this.start; index < length && i < 64; ++index) blocks[i >> 2] |= message[index] << SHIFT[3 & i++]; else for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) blocks[i >> 2] |= code << SHIFT[3 & i++]; else if (code < 2048) {
                blocks[i >> 2] |= (192 | code >> 6) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else if (code < 55296 || code >= 57344) {
                blocks[i >> 2] |= (224 | code >> 12) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              } else {
                code = 65536 + ((1023 & code) << 10 | 1023 & message.charCodeAt(++index));
                blocks[i >> 2] |= (240 | code >> 18) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[3 & i++];
                blocks[i >> 2] |= (128 | 63 & code) << SHIFT[3 & i++];
              }
            }
            this.lastByteIndex = i;
            this.bytes += i - this.start;
            if (i >= 64) {
              this.block = blocks[16];
              this.start = i - 64;
              this.hash();
              this.hashed = true;
            } else this.start = i;
          }
          if (this.bytes > 4294967295) {
            this.hBytes += this.bytes / 4294967296 << 0;
            this.bytes = this.bytes % 4294967296;
          }
          return this;
        };
        Sha1.prototype.finalize = function() {
          if (this.finalized) return;
          this.finalized = true;
          var blocks = this.blocks, i = this.lastByteIndex;
          blocks[16] = this.block;
          blocks[i >> 2] |= EXTRA[3 & i];
          this.block = blocks[16];
          if (i >= 56) {
            this.hashed || this.hash();
            blocks[0] = this.block;
            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          }
          blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
          blocks[15] = this.bytes << 3;
          this.hash();
        };
        Sha1.prototype.hash = function() {
          var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
          var f, j, t, blocks = this.blocks;
          for (j = 16; j < 80; ++j) {
            t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];
            blocks[j] = t << 1 | t >>> 31;
          }
          for (j = 0; j < 20; j += 5) {
            f = b & c | ~b & d;
            t = a << 5 | a >>> 27;
            e = t + f + e + 1518500249 + blocks[j] << 0;
            b = b << 30 | b >>> 2;
            f = a & b | ~a & c;
            t = e << 5 | e >>> 27;
            d = t + f + d + 1518500249 + blocks[j + 1] << 0;
            a = a << 30 | a >>> 2;
            f = e & a | ~e & b;
            t = d << 5 | d >>> 27;
            c = t + f + c + 1518500249 + blocks[j + 2] << 0;
            e = e << 30 | e >>> 2;
            f = d & e | ~d & a;
            t = c << 5 | c >>> 27;
            b = t + f + b + 1518500249 + blocks[j + 3] << 0;
            d = d << 30 | d >>> 2;
            f = c & d | ~c & e;
            t = b << 5 | b >>> 27;
            a = t + f + a + 1518500249 + blocks[j + 4] << 0;
            c = c << 30 | c >>> 2;
          }
          for (;j < 40; j += 5) {
            f = b ^ c ^ d;
            t = a << 5 | a >>> 27;
            e = t + f + e + 1859775393 + blocks[j] << 0;
            b = b << 30 | b >>> 2;
            f = a ^ b ^ c;
            t = e << 5 | e >>> 27;
            d = t + f + d + 1859775393 + blocks[j + 1] << 0;
            a = a << 30 | a >>> 2;
            f = e ^ a ^ b;
            t = d << 5 | d >>> 27;
            c = t + f + c + 1859775393 + blocks[j + 2] << 0;
            e = e << 30 | e >>> 2;
            f = d ^ e ^ a;
            t = c << 5 | c >>> 27;
            b = t + f + b + 1859775393 + blocks[j + 3] << 0;
            d = d << 30 | d >>> 2;
            f = c ^ d ^ e;
            t = b << 5 | b >>> 27;
            a = t + f + a + 1859775393 + blocks[j + 4] << 0;
            c = c << 30 | c >>> 2;
          }
          for (;j < 60; j += 5) {
            f = b & c | b & d | c & d;
            t = a << 5 | a >>> 27;
            e = t + f + e - 1894007588 + blocks[j] << 0;
            b = b << 30 | b >>> 2;
            f = a & b | a & c | b & c;
            t = e << 5 | e >>> 27;
            d = t + f + d - 1894007588 + blocks[j + 1] << 0;
            a = a << 30 | a >>> 2;
            f = e & a | e & b | a & b;
            t = d << 5 | d >>> 27;
            c = t + f + c - 1894007588 + blocks[j + 2] << 0;
            e = e << 30 | e >>> 2;
            f = d & e | d & a | e & a;
            t = c << 5 | c >>> 27;
            b = t + f + b - 1894007588 + blocks[j + 3] << 0;
            d = d << 30 | d >>> 2;
            f = c & d | c & e | d & e;
            t = b << 5 | b >>> 27;
            a = t + f + a - 1894007588 + blocks[j + 4] << 0;
            c = c << 30 | c >>> 2;
          }
          for (;j < 80; j += 5) {
            f = b ^ c ^ d;
            t = a << 5 | a >>> 27;
            e = t + f + e - 899497514 + blocks[j] << 0;
            b = b << 30 | b >>> 2;
            f = a ^ b ^ c;
            t = e << 5 | e >>> 27;
            d = t + f + d - 899497514 + blocks[j + 1] << 0;
            a = a << 30 | a >>> 2;
            f = e ^ a ^ b;
            t = d << 5 | d >>> 27;
            c = t + f + c - 899497514 + blocks[j + 2] << 0;
            e = e << 30 | e >>> 2;
            f = d ^ e ^ a;
            t = c << 5 | c >>> 27;
            b = t + f + b - 899497514 + blocks[j + 3] << 0;
            d = d << 30 | d >>> 2;
            f = c ^ d ^ e;
            t = b << 5 | b >>> 27;
            a = t + f + a - 899497514 + blocks[j + 4] << 0;
            c = c << 30 | c >>> 2;
          }
          this.h0 = this.h0 + a << 0;
          this.h1 = this.h1 + b << 0;
          this.h2 = this.h2 + c << 0;
          this.h3 = this.h3 + d << 0;
          this.h4 = this.h4 + e << 0;
        };
        Sha1.prototype.hex = function() {
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;
          return HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[15 & h0] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[15 & h1] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[15 & h2] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[15 & h3] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[15 & h4];
        };
        Sha1.prototype.toString = Sha1.prototype.hex;
        Sha1.prototype.digest = function() {
          this.finalize();
          var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;
          return [ h0 >> 24 & 255, h0 >> 16 & 255, h0 >> 8 & 255, 255 & h0, h1 >> 24 & 255, h1 >> 16 & 255, h1 >> 8 & 255, 255 & h1, h2 >> 24 & 255, h2 >> 16 & 255, h2 >> 8 & 255, 255 & h2, h3 >> 24 & 255, h3 >> 16 & 255, h3 >> 8 & 255, 255 & h3, h4 >> 24 & 255, h4 >> 16 & 255, h4 >> 8 & 255, 255 & h4 ];
        };
        Sha1.prototype.array = Sha1.prototype.digest;
        Sha1.prototype.arrayBuffer = function() {
          this.finalize();
          var buffer = new ArrayBuffer(20);
          var dataView = new DataView(buffer);
          dataView.setUint32(0, this.h0);
          dataView.setUint32(4, this.h1);
          dataView.setUint32(8, this.h2);
          dataView.setUint32(12, this.h3);
          dataView.setUint32(16, this.h4);
          return buffer;
        };
        var exports = createMethod();
        if (COMMON_JS) module.exports = exports; else {
          root.sha1 = exports;
          AMD && define(function() {
            return exports;
          });
        }
      })();
    }).call(this, require("_process"), "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {
    _process: 11
  } ],
  69: [ function(require, module, exports) {
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) byteToHex[i] = (i + 256).toString(16).substr(1);
    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      return [ bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]] ].join("");
    }
    module.exports = bytesToUuid;
  }, {} ],
  70: [ function(require, module, exports) {
    var getRandomValues = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
      var rnds8 = new Uint8Array(16);
      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      var rnds = new Array(16);
      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          0 === (3 & i) && (r = 4294967296 * Math.random());
          rnds[i] = r >>> ((3 & i) << 3) & 255;
        }
        return rnds;
      };
    }
  }, {} ],
  71: [ function(require, module, exports) {
    var rng = require("./lib/rng");
    var bytesToUuid = require("./lib/bytesToUuid");
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if ("string" == typeof options) {
        buf = "binary" === options ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = 15 & rnds[6] | 64;
      rnds[8] = 63 & rnds[8] | 128;
      if (buf) for (var ii = 0; ii < 16; ++ii) buf[i + ii] = rnds[ii];
      return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
  }, {
    "./lib/bytesToUuid": 69,
    "./lib/rng": 70
  } ],
  72: [ function(require, module, exports) {
    module.exports = {
      name: "vod-js-sdk-v6",
      version: "1.4.13",
      description: "tencent cloud vod js sdk v6",
      main: "lib/src/tc_vod.js",
      unpkg: "dist/vod-js-sdk-v6.js",
      typings: "lib/src/tc_vod.d.ts",
      scripts: {
        test: "cross-env NODE_ENV=test mocha -r espower-typescript/guess -r jsdom-global/register -r test/env test/**/*.test.ts",
        cover: "cross-env NODE_ENV=test nyc mocha -r espower-typescript/guess -r jsdom-global/register -r test/env test/**/*.test.ts",
        dev: "webpack --config webpack.dev.config.js --watch",
        dist: "webpack --config webpack.config.js",
        build: "npm run test && npm run dist && npm run compile",
        compile: "tsc -p tsconfig.json",
        prepublish: "npm run build",
        lint: "tsc --noEmit && eslint 'src/**/*.{js,ts,tsx}' --quiet --fix"
      },
      repository: {
        type: "git",
        url: "git+https://github.com/tencentyun/vod-js-sdk-v6.git"
      },
      keywords: [ "tencentcloud", "sdk", "vod" ],
      author: "alsotang <alsotang@gmail.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/tencentyun/vod-js-sdk-v6/issues"
      },
      homepage: "https://github.com/tencentyun/vod-js-sdk-v6#readme",
      dependencies: {
        axios: "^0.21.1",
        "cos-js-sdk-v5": "0.5.27",
        eventemitter3: "^4.0.7",
        "js-sha1": "^0.6.0",
        uuid: "^3.3.2"
      },
      devDependencies: {
        "@types/mocha": "^5.2.5",
        "@types/semver": "^6.0.0",
        "@types/sha1": "^1.1.1",
        "@types/uuid": "^3.4.4",
        "@typescript-eslint/eslint-plugin": "^1.9.0",
        "@typescript-eslint/parser": "^1.9.0",
        "cross-env": "^6.0.3",
        eslint: "^5.16.0",
        "eslint-config-prettier": "^4.3.0",
        "eslint-plugin-prettier": "^3.1.0",
        "espower-typescript": "^9.0.1",
        jsdom: "^13.1.0",
        "jsdom-global": "^3.0.2",
        mm: "^2.4.1",
        mocha: "^5.2.0",
        nyc: "^13.1.0",
        "power-assert": "^1.6.1",
        prettier: "^1.17.1",
        semver: "^6.1.1",
        "ts-loader": "^5.3.3",
        typescript: "^3.5.3",
        webpack: "^4.28.1",
        "webpack-cli": "^3.3.12"
      },
      nyc: {
        extension: [ ".ts", ".tsx" ],
        include: [ "src" ],
        reporter: [ "html" ],
        all: true
      }
    };
  }, {} ],
  73: [ function(require, module, exports) {
    "use strict";
    var __assign = this && this.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var uploader_1 = require("./uploader");
    var vod_reporter_1 = require("./vod_reporter");
    var TcVod = function() {
      function TcVod(params) {
        this.allowReport = true;
        this.enableResume = true;
        this.getSignature = params.getSignature;
        void 0 !== params.allowReport && (this.allowReport = params.allowReport);
        void 0 !== params.enableResume && (this.enableResume = params.enableResume);
        this.appId = params.appId;
        this.reportId = params.reportId;
      }
      TcVod.prototype.upload = function(params) {
        var uploaderParams = __assign({
          getSignature: this.getSignature,
          appId: this.appId,
          reportId: this.reportId,
          enableResume: this.enableResume
        }, params);
        var uploader = new uploader_1.default(uploaderParams);
        this.allowReport && this.initReporter(uploader);
        uploader.start();
        return uploader;
      };
      TcVod.prototype.initReporter = function(uploader) {
        new vod_reporter_1.VodReporter(uploader);
      };
      return TcVod;
    }();
    exports.default = TcVod;
  }, {
    "./uploader": 74,
    "./vod_reporter": 76
  } ],
  74: [ function(require, module, exports) {
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = this && this.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UploaderEvent = exports.vodAxios = void 0;
    var sha1 = require("js-sha1");
    var COS = require("cos-js-sdk-v5");
    var eventemitter3_1 = require("eventemitter3");
    var axios_1 = require("axios");
    var util_1 = require("./util");
    var vod_reporter_1 = require("./vod_reporter");
    var uuidv4 = require("uuid/v4");
    exports.vodAxios = axios_1.default.create();
    exports.vodAxios.interceptors.response.use(function(response) {
      return response;
    }, function(error) {
      isNaN(error.code) && (error.code = 500);
      return Promise.reject(error);
    });
    var UploaderEvent;
    (function(UploaderEvent) {
      UploaderEvent["video_progress"] = "video_progress";
      UploaderEvent["media_progress"] = "media_progress";
      UploaderEvent["video_upload"] = "video_upload";
      UploaderEvent["media_upload"] = "media_upload";
      UploaderEvent["cover_progress"] = "cover_progress";
      UploaderEvent["cover_upload"] = "cover_upload";
    })(UploaderEvent = exports.UploaderEvent || (exports.UploaderEvent = {}));
    var Uploader = function(_super) {
      __extends(Uploader, _super);
      function Uploader(params) {
        var _this = _super.call(this) || this;
        _this.sessionName = "";
        _this.vodSessionKey = "";
        _this.appId = 0;
        _this.reqKey = uuidv4();
        _this.reportId = "";
        _this.enableResume = true;
        _this.applyRequestTimeout = 5e3;
        _this.applyRequestRetryCount = 3;
        _this.commitRequestTimeout = 5e3;
        _this.commitRequestRetryCount = 3;
        _this.retryDelay = 1e3;
        _this.validateInitParams(params);
        _this.videoFile = params.mediaFile || params.videoFile;
        _this.getSignature = params.getSignature;
        _this.cosStrategy = _this.getCosStrategy(params);
        _this.enableResume = params.enableResume;
        _this.videoName = params.mediaName || params.videoName;
        _this.coverFile = params.coverFile;
        _this.fileId = params.fileId;
        _this.applyRequestTimeout = params.applyRequestTimeout || _this.applyRequestTimeout;
        _this.commitRequestTimeout = params.commitRequestTimeout || _this.commitRequestTimeout;
        _this.retryDelay = params.retryDelay || _this.retryDelay;
        _this.appId = params.appId || _this.appId;
        _this.reportId = params.reportId || _this.reportId;
        _this.cosAuthTime = 0;
        _this.genFileInfo();
        return _this;
      }
      Uploader.prototype.getCosStrategy = function(params) {
        var sourceData = {
          FileParallelLimit: params.fileParallelLimit,
          ChunkParallelLimit: params.chunkParallelLimit || 6,
          ChunkRetryTimes: params.chunkRetryTimes,
          ChunkSize: params.chunkSize || 8388608,
          SliceSize: params.sliceSize,
          CopyChunkParallelLimit: params.copyChunkParallelLimit,
          CopyChunkSize: params.copyChunkSize,
          CopySliceSize: params.copySliceSize,
          ProgressInterval: params.progressInterval
        };
        var cosStrategy = Object.keys(sourceData).filter(function(key) {
          return void 0 !== sourceData[key];
        }).reduce(function(acc, key) {
          var _a;
          return __assign(__assign({}, acc), (_a = {}, _a[key] = sourceData[key], _a));
        }, {});
        return cosStrategy;
      };
      Uploader.prototype.setStorage = function(name, value) {
        if (!name) return;
        var cname = "webugc_" + sha1(name);
        try {
          localStorage.setItem(cname, value);
        } catch (e) {}
      };
      Uploader.prototype.getStorage = function(name) {
        if (!name) return;
        var cname = "webugc_" + sha1(name);
        var result = null;
        try {
          result = localStorage.getItem(cname);
        } catch (e) {}
        return result;
      };
      Uploader.prototype.delStorage = function(name) {
        if (!name) return;
        var cname = "webugc_" + sha1(name);
        try {
          localStorage.removeItem(cname);
        } catch (e) {}
      };
      Uploader.prototype.validateInitParams = function(params) {
        if (!util_1.default.isFunction(params.getSignature)) throw new Error("getSignature must be a function");
        if (params.videoFile && !util_1.default.isFile(params.videoFile)) throw new Error("videoFile must be a File");
      };
      Uploader.prototype.genFileInfo = function() {
        var videoFile = this.videoFile;
        if (videoFile) {
          var lastDotIndex = videoFile.name.lastIndexOf(".");
          var videoName = "";
          if (this.videoName) {
            if (!util_1.default.isString(this.videoName)) throw new Error("mediaName must be a string");
            if (/[:*?<>\"\\/|]/g.test(this.videoName)) throw new Error('Cant use these chars in filename: \\ / : * ? " < > |');
            videoName = this.videoName;
          } else videoName = videoFile.name.substring(0, lastDotIndex);
          this.videoInfo = {
            name: videoName,
            type: videoFile.name.substring(lastDotIndex + 1).toLowerCase(),
            size: videoFile.size
          };
          this.sessionName += videoFile.name + "_" + videoFile.size + ";";
        }
        var coverFile = this.coverFile;
        if (coverFile) {
          var coverName = coverFile.name;
          var coverLastDotIndex = coverName.lastIndexOf(".");
          this.coverInfo = {
            name: coverName.substring(0, coverLastDotIndex),
            type: coverName.substring(coverLastDotIndex + 1).toLowerCase(),
            size: coverFile.size
          };
          this.sessionName += coverFile.name + "_" + coverFile.size + ";";
        }
      };
      Uploader.prototype.applyUploadUGC = function(retryCount) {
        void 0 === retryCount && (retryCount = 0);
        return __awaiter(this, void 0, void 0, function() {
          function whenError(err) {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                 case 0:
                  500 === err.code && (Uploader.host = Uploader.host === util_1.HOST.MAIN ? util_1.HOST.BACKUP : util_1.HOST.MAIN);
                  self.emit(vod_reporter_1.VodReportEvent.report_apply, {
                    err: err,
                    requestStartTime: requestStartTime
                  });
                  self.delStorage(self.sessionName);
                  if (self.applyRequestRetryCount == retryCount) {
                    if (err) throw err;
                    throw new Error("apply upload failed");
                  }
                  return [ 4, util_1.default.delay(self.retryDelay) ];

                 case 1:
                  _a.sent();
                  return [ 2, self.applyUploadUGC(retryCount + 1) ];
                }
              });
            });
          }
          var self, signature, sendParams, videoInfo, coverInfo, vodSessionKey, requestStartTime, response, e_1, applyResult, applyData, vodSessionKey_1, err;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              self = this;
              return [ 4, this.getSignature() ];

             case 1:
              signature = _a.sent();
              videoInfo = this.videoInfo;
              coverInfo = this.coverInfo;
              vodSessionKey = this.vodSessionKey || this.enableResume && this.getStorage(this.sessionName);
              if (vodSessionKey) sendParams = {
                signature: signature,
                vodSessionKey: vodSessionKey
              }; else if (videoInfo) {
                sendParams = {
                  signature: signature,
                  videoName: videoInfo.name,
                  videoType: videoInfo.type,
                  videoSize: videoInfo.size
                };
                if (coverInfo) {
                  sendParams.coverName = coverInfo.name;
                  sendParams.coverType = coverInfo.type;
                  sendParams.coverSize = coverInfo.size;
                }
              } else {
                if (!this.fileId || !coverInfo) throw "Wrong params, please check and try again";
                sendParams = {
                  signature: signature,
                  fileId: this.fileId,
                  coverName: coverInfo.name,
                  coverType: coverInfo.type,
                  coverSize: coverInfo.size
                };
              }
              requestStartTime = new Date();
              _a.label = 2;

             case 2:
              _a.trys.push([ 2, 4, , 5 ]);
              return [ 4, exports.vodAxios.post("https://" + Uploader.host + "/v3/index.php?Action=ApplyUploadUGC", sendParams, {
                timeout: this.applyRequestTimeout,
                withCredentials: false
              }) ];

             case 3:
              response = _a.sent();
              return [ 3, 5 ];

             case 4:
              e_1 = _a.sent();
              return [ 2, whenError(e_1) ];

             case 5:
              applyResult = response.data;
              if (0 == applyResult.code) {
                applyData = applyResult.data;
                vodSessionKey_1 = applyData.vodSessionKey;
                this.setStorage(this.sessionName, vodSessionKey_1);
                this.vodSessionKey = vodSessionKey_1;
                this.appId = applyData.appId;
                this.emit(vod_reporter_1.VodReportEvent.report_apply, {
                  data: applyData,
                  requestStartTime: requestStartTime
                });
                return [ 2, applyData ];
              }
              err = new Error(applyResult.message);
              err.code = applyResult.code;
              return [ 2, whenError(err) ];
            }
          });
        });
      };
      Uploader.prototype.uploadToCos = function(applyData) {
        return __awaiter(this, void 0, void 0, function() {
          var self, cosParam, cos, uploadCosParams, cosVideoParam, cosCoverParam, requestStartTime, uploadPromises;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              self = this;
              cosParam = {
                bucket: applyData.storageBucket + "-" + applyData.storageAppId,
                region: applyData.storageRegionV5
              };
              cos = new COS(Object.assign({
                getAuthorization: function(options, callback) {
                  return __awaiter(this, void 0, void 0, function() {
                    var currentTimeStamp, safeExpireTime;
                    return __generator(this, function(_a) {
                      switch (_a.label) {
                       case 0:
                        currentTimeStamp = util_1.default.getUnix();
                        safeExpireTime = .9 * (applyData.tempCertificate.expiredTime - applyData.timestamp);
                        if (!(0 === self.cosAuthTime)) return [ 3, 1 ];
                        self.cosAuthTime = currentTimeStamp;
                        return [ 3, 3 ];

                       case 1:
                        if (!(self.cosAuthTime && currentTimeStamp - self.cosAuthTime >= safeExpireTime)) return [ 3, 3 ];
                        return [ 4, self.applyUploadUGC() ];

                       case 2:
                        applyData = _a.sent();
                        self.cosAuthTime = util_1.default.getUnix();
                        _a.label = 3;

                       case 3:
                        callback({
                          TmpSecretId: applyData.tempCertificate.secretId,
                          TmpSecretKey: applyData.tempCertificate.secretKey,
                          XCosSecurityToken: applyData.tempCertificate.token,
                          StartTime: applyData.timestamp,
                          ExpiredTime: applyData.tempCertificate.expiredTime
                        });
                        return [ 2 ];
                      }
                    });
                  });
                }
              }, this.cosStrategy));
              this.cos = cos;
              uploadCosParams = [];
              if (this.videoFile) {
                cosVideoParam = __assign(__assign({}, cosParam), {
                  file: this.videoFile,
                  key: applyData.video.storagePath,
                  onProgress: function(data) {
                    self.emit(UploaderEvent.video_progress, data);
                    self.emit(UploaderEvent.media_progress, data);
                  },
                  onUpload: function(data) {
                    self.emit(UploaderEvent.video_upload, data);
                    self.emit(UploaderEvent.media_upload, data);
                  },
                  onTaskReady: function(taskId) {
                    self.taskId = taskId;
                  }
                });
                uploadCosParams.push(cosVideoParam);
              }
              if (this.coverFile) {
                cosCoverParam = __assign(__assign({}, cosParam), {
                  file: this.coverFile,
                  key: applyData.cover.storagePath,
                  onProgress: function(data) {
                    self.emit(UploaderEvent.cover_progress, data);
                  },
                  onUpload: function(data) {
                    self.emit(UploaderEvent.cover_upload, data);
                  },
                  onTaskReady: util_1.default.noop
                });
                uploadCosParams.push(cosCoverParam);
              }
              requestStartTime = new Date();
              uploadPromises = uploadCosParams.map(function(uploadCosParam) {
                return new Promise(function(resolve, reject) {
                  cos.sliceUploadFile({
                    Bucket: uploadCosParam.bucket,
                    Region: uploadCosParam.region,
                    Key: uploadCosParam.key,
                    Body: uploadCosParam.file,
                    onTaskReady: uploadCosParam.onTaskReady,
                    onProgress: uploadCosParam.onProgress
                  }, function(err, data) {
                    uploadCosParam.file === self.videoFile && self.emit(vod_reporter_1.VodReportEvent.report_cos_upload, {
                      err: err,
                      requestStartTime: requestStartTime
                    });
                    if (!err) {
                      uploadCosParam.onUpload(data);
                      return resolve();
                    }
                    self.delStorage(self.sessionName);
                    if ('{"error":"error","headers":{}}' === JSON.stringify(err)) return reject(new Error("cors error"));
                    reject(err);
                  });
                });
              });
              return [ 4, Promise.all(uploadPromises) ];

             case 1:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      Uploader.prototype.commitUploadUGC = function(retryCount) {
        void 0 === retryCount && (retryCount = 0);
        return __awaiter(this, void 0, void 0, function() {
          function whenError(err) {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                 case 0:
                  500 === err.code && (Uploader.host = Uploader.host === util_1.HOST.MAIN ? util_1.HOST.BACKUP : util_1.HOST.MAIN);
                  self.emit(vod_reporter_1.VodReportEvent.report_commit, {
                    err: err,
                    requestStartTime: requestStartTime
                  });
                  if (self.commitRequestRetryCount == retryCount) {
                    if (err) throw err;
                    throw new Error("commit upload failed");
                  }
                  return [ 4, util_1.default.delay(self.retryDelay) ];

                 case 1:
                  _a.sent();
                  return [ 2, self.commitUploadUGC(retryCount + 1) ];
                }
              });
            });
          }
          var self, signature, vodSessionKey, requestStartTime, response, e_2, commitResult, err;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              self = this;
              return [ 4, this.getSignature() ];

             case 1:
              signature = _a.sent();
              this.delStorage(this.sessionName);
              vodSessionKey = this.vodSessionKey;
              requestStartTime = new Date();
              _a.label = 2;

             case 2:
              _a.trys.push([ 2, 4, , 5 ]);
              return [ 4, exports.vodAxios.post("https://" + Uploader.host + "/v3/index.php?Action=CommitUploadUGC", {
                signature: signature,
                vodSessionKey: vodSessionKey
              }, {
                timeout: this.commitRequestTimeout,
                withCredentials: false
              }) ];

             case 3:
              response = _a.sent();
              return [ 3, 5 ];

             case 4:
              e_2 = _a.sent();
              return [ 2, whenError(e_2) ];

             case 5:
              commitResult = response.data;
              if (0 == commitResult.code) {
                this.emit(vod_reporter_1.VodReportEvent.report_commit, {
                  data: commitResult.data,
                  requestStartTime: requestStartTime
                });
                return [ 2, commitResult.data ];
              }
              err = new Error(commitResult.message);
              err.code = commitResult.code;
              return [ 2, whenError(err) ];
            }
          });
        });
      };
      Uploader.prototype.start = function() {
        var _this = this;
        var requestStartTime = new Date();
        this.donePromise = this._start().then(function(doneResult) {
          _this.emit(vod_reporter_1.VodReportEvent.report_done, {
            err: {
              code: 0
            },
            requestStartTime: requestStartTime
          });
          return doneResult;
        }).catch(function(err) {
          _this.emit(vod_reporter_1.VodReportEvent.report_done, {
            err: {
              code: err && err.code || util_1.default.CLIENT_ERROR_CODE.UPLOAD_FAIL
            },
            requestStartTime: requestStartTime
          });
          throw err;
        });
      };
      Uploader.prototype._start = function() {
        return __awaiter(this, void 0, void 0, function() {
          var applyData;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, this.applyUploadUGC() ];

             case 1:
              applyData = _a.sent();
              return [ 4, this.uploadToCos(applyData) ];

             case 2:
              _a.sent();
              return [ 4, this.commitUploadUGC() ];

             case 3:
              return [ 2, _a.sent() ];
            }
          });
        });
      };
      Uploader.prototype.done = function() {
        return this.donePromise;
      };
      Uploader.prototype.cancel = function() {
        this.cos.cancelTask(this.taskId);
      };
      Uploader.host = util_1.HOST.MAIN;
      return Uploader;
    }(eventemitter3_1.EventEmitter);
    exports.default = Uploader;
  }, {
    "./util": 75,
    "./vod_reporter": 76,
    axios: 77,
    "cos-js-sdk-v5": 53,
    eventemitter3: 67,
    "js-sha1": 68,
    "uuid/v4": 71
  } ],
  75: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.HOST = void 0;
      function isFile(v) {
        return "[object File]" == Object.prototype.toString.call(v);
      }
      function isFunction(v) {
        return "function" === typeof v;
      }
      function isString(v) {
        return "string" === typeof v;
      }
      function noop() {}
      function delay(ms) {
        return new Promise(function(resolve) {
          setTimeout(function() {
            resolve();
          }, ms);
        });
      }
      function getUnix() {
        return Math.floor(Date.now() / 1e3);
      }
      var CLIENT_ERROR_CODE;
      (function(CLIENT_ERROR_CODE) {
        CLIENT_ERROR_CODE[CLIENT_ERROR_CODE["UPLOAD_FAIL"] = 1] = "UPLOAD_FAIL";
      })(CLIENT_ERROR_CODE || (CLIENT_ERROR_CODE = {}));
      var HOST;
      (function(HOST) {
        HOST["MAIN"] = "vod2.qcloud.com";
        HOST["BACKUP"] = "vod2.dnsv1.com";
      })(HOST = exports.HOST || (exports.HOST = {}));
      exports.default = {
        isFile: isFile,
        isFunction: isFunction,
        isString: isString,
        noop: noop,
        delay: delay,
        getUnix: getUnix,
        isTest: "test" === process.env.NODE_ENV,
        isDev: "development" === process.env.NODE_ENV,
        CLIENT_ERROR_CODE: CLIENT_ERROR_CODE
      };
    }).call(this, require("_process"));
  }, {
    _process: 11
  } ],
  76: [ function(require, module, exports) {
    "use strict";
    var __assign = this && this.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VodReporter = exports.VodReportEvent = void 0;
    var uploader_1 = require("./uploader");
    var pkg = require("../package.json");
    var util_1 = require("./util");
    var VodReportEvent;
    (function(VodReportEvent) {
      VodReportEvent["report_apply"] = "report_apply";
      VodReportEvent["report_cos_upload"] = "report_cos_upload";
      VodReportEvent["report_commit"] = "report_commit";
      VodReportEvent["report_done"] = "report_done";
    })(VodReportEvent = exports.VodReportEvent || (exports.VodReportEvent = {}));
    var ReqType;
    (function(ReqType) {
      ReqType[ReqType["apply"] = 10001] = "apply";
      ReqType[ReqType["cos_upload"] = 20001] = "cos_upload";
      ReqType[ReqType["commit"] = 10002] = "commit";
      ReqType[ReqType["done"] = 40001] = "done";
    })(ReqType || (ReqType = {}));
    var VodReporter = function() {
      function VodReporter(uploader, options) {
        this.baseReportData = {
          version: pkg.version,
          platform: 3e3,
          device: navigator.userAgent
        };
        this.reportUrl = "https://vodreport.qcloud.com/ugcupload_new";
        this.uploader = uploader;
        this.options = options;
        this.init();
      }
      VodReporter.prototype.init = function() {
        this.uploader.on(VodReportEvent.report_apply, this.onApply.bind(this));
        this.uploader.on(VodReportEvent.report_cos_upload, this.onCosUpload.bind(this));
        this.uploader.on(VodReportEvent.report_commit, this.onCommit.bind(this));
        this.uploader.on(VodReportEvent.report_done, this.onDone.bind(this));
      };
      VodReporter.prototype.onApply = function(reportObj) {
        try {
          var uploader = this.uploader;
          if (!uploader.videoFile) return;
          Object.assign(this.baseReportData, {
            appId: uploader.appId,
            fileSize: uploader.videoFile.size,
            fileName: uploader.videoFile.name,
            fileType: uploader.videoFile.type,
            vodSessionKey: uploader.vodSessionKey,
            reqKey: uploader.reqKey,
            reportId: uploader.reportId
          });
          var customReportData = {
            reqType: ReqType.apply,
            errCode: 0,
            vodErrCode: 0,
            errMsg: "",
            reqTimeCost: Number(new Date()) - Number(reportObj.requestStartTime),
            reqTime: Number(reportObj.requestStartTime)
          };
          if (reportObj.err) {
            customReportData.errCode = 1;
            customReportData.vodErrCode = reportObj.err.code;
            customReportData.errMsg = reportObj.err.message;
          }
          reportObj.data && (this.baseReportData.cosRegion = reportObj.data.storageRegionV5);
          this.report(customReportData);
        } catch (e) {
          console.error("onApply", e);
          if (util_1.default.isTest) throw e;
        }
      };
      VodReporter.prototype.onCosUpload = function(reportObj) {
        try {
          var customReportData = {
            reqType: ReqType.cos_upload,
            errCode: 0,
            cosErrCode: "",
            errMsg: "",
            reqTimeCost: Number(new Date()) - Number(reportObj.requestStartTime),
            reqTime: Number(reportObj.requestStartTime)
          };
          if (reportObj.err) {
            customReportData.errCode = 1;
            customReportData.cosErrCode = reportObj.err.error ? reportObj.err.error.Code : reportObj.err;
            reportObj.err && "error" === reportObj.err.error && (customReportData.cosErrCode = "cors error");
            customReportData.errMsg = JSON.stringify(reportObj.err);
          }
          this.report(customReportData);
        } catch (e) {
          console.error("onCosUpload", e);
          if (util_1.default.isTest) throw e;
        }
      };
      VodReporter.prototype.onCommit = function(reportObj) {
        try {
          var customReportData = {
            reqType: ReqType.commit,
            errCode: 0,
            vodErrCode: 0,
            errMsg: "",
            reqTimeCost: Number(new Date()) - Number(reportObj.requestStartTime),
            reqTime: Number(reportObj.requestStartTime)
          };
          if (reportObj.err) {
            customReportData.errCode = 1;
            customReportData.vodErrCode = reportObj.err.code;
            customReportData.errMsg = reportObj.err.message;
          }
          reportObj.data && (this.baseReportData.fileId = reportObj.data.fileId);
          this.report(customReportData);
        } catch (e) {
          console.error("onCommit", e);
          if (util_1.default.isTest) throw e;
        }
      };
      VodReporter.prototype.onDone = function(reportObj) {
        try {
          var customReportData = {
            reqType: ReqType.done,
            errCode: reportObj.err && reportObj.err.code,
            reqTimeCost: Number(new Date()) - Number(reportObj.requestStartTime),
            reqTime: Number(reportObj.requestStartTime)
          };
          this.report(customReportData);
        } catch (e) {
          console.error("onDone", e);
          if (util_1.default.isTest) throw e;
        }
      };
      VodReporter.prototype.report = function(reportData) {
        reportData = __assign(__assign({}, this.baseReportData), reportData);
        this.send(reportData);
      };
      VodReporter.prototype.send = function(reportData) {
        if (util_1.default.isDev || util_1.default.isTest) {
          console.log("send reportData", reportData);
          return;
        }
        uploader_1.vodAxios.post(this.reportUrl, reportData);
      };
      return VodReporter;
    }();
    exports.VodReporter = VodReporter;
  }, {
    "../package.json": 72,
    "./uploader": 74,
    "./util": 75
  } ],
  77: [ function(require, module, exports) {
    arguments[4][21][0].apply(exports, arguments);
  }, {
    "./lib/axios": 79,
    dup: 21
  } ],
  78: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var settle = require("./../core/settle");
    var cookies = require("./../helpers/cookies");
    var buildURL = require("./../helpers/buildURL");
    var buildFullPath = require("../core/buildFullPath");
    var parseHeaders = require("./../helpers/parseHeaders");
    var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
    var createError = require("../core/createError");
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        utils.isFormData(requestData) && delete requestHeaders["Content-Type"];
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) return;
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = responseType && "text" !== responseType && "json" !== responseType ? request.response : request.responseText;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };
          settle(resolve, reject, response);
          request = null;
        }
        "onloadend" in request ? request.onloadend = onloadend : request.onreadystatechange = function handleLoad() {
          if (!request || 4 !== request.readyState) return;
          if (0 === request.status && !(request.responseURL && 0 === request.responseURL.indexOf("file:"))) return;
          setTimeout(onloadend);
        };
        request.onabort = function handleAbort() {
          if (!request) return;
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          config.timeoutErrorMessage && (timeoutErrorMessage = config.timeoutErrorMessage);
          reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          xsrfValue && (requestHeaders[config.xsrfHeaderName] = xsrfValue);
        }
        "setRequestHeader" in request && utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          "undefined" === typeof requestData && "content-type" === key.toLowerCase() ? delete requestHeaders[key] : request.setRequestHeader(key, val);
        });
        utils.isUndefined(config.withCredentials) || (request.withCredentials = !!config.withCredentials);
        responseType && "json" !== responseType && (request.responseType = config.responseType);
        "function" === typeof config.onDownloadProgress && request.addEventListener("progress", config.onDownloadProgress);
        "function" === typeof config.onUploadProgress && request.upload && request.upload.addEventListener("progress", config.onUploadProgress);
        config.cancelToken && config.cancelToken.promise.then(function onCanceled(cancel) {
          if (!request) return;
          request.abort();
          reject(cancel);
          request = null;
        });
        requestData || (requestData = null);
        request.send(requestData);
      });
    };
  }, {
    "../core/buildFullPath": 85,
    "../core/createError": 86,
    "./../core/settle": 90,
    "./../helpers/buildURL": 94,
    "./../helpers/cookies": 96,
    "./../helpers/isURLSameOrigin": 99,
    "./../helpers/parseHeaders": 101,
    "./../utils": 104
  } ],
  79: [ function(require, module, exports) {
    "use strict";
    var utils = require("./utils");
    var bind = require("./helpers/bind");
    var Axios = require("./core/Axios");
    var mergeConfig = require("./core/mergeConfig");
    var defaults = require("./defaults");
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };
    axios.Cancel = require("./cancel/Cancel");
    axios.CancelToken = require("./cancel/CancelToken");
    axios.isCancel = require("./cancel/isCancel");
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require("./helpers/spread");
    axios.isAxiosError = require("./helpers/isAxiosError");
    module.exports = axios;
    module.exports.default = axios;
  }, {
    "./cancel/Cancel": 80,
    "./cancel/CancelToken": 81,
    "./cancel/isCancel": 82,
    "./core/Axios": 83,
    "./core/mergeConfig": 89,
    "./defaults": 92,
    "./helpers/bind": 93,
    "./helpers/isAxiosError": 98,
    "./helpers/spread": 102,
    "./utils": 104
  } ],
  80: [ function(require, module, exports) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }, {} ],
  81: [ function(require, module, exports) {
    "use strict";
    var Cancel = require("./Cancel");
    function CancelToken(executor) {
      if ("function" !== typeof executor) throw new TypeError("executor must be a function.");
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) throw this.reason;
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };
    module.exports = CancelToken;
  }, {
    "./Cancel": 80
  } ],
  82: [ function(require, module, exports) {
    arguments[4][26][0].apply(exports, arguments);
  }, {
    dup: 26
  } ],
  83: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var buildURL = require("../helpers/buildURL");
    var InterceptorManager = require("./InterceptorManager");
    var dispatchRequest = require("./dispatchRequest");
    var mergeConfig = require("./mergeConfig");
    var validator = require("../helpers/validator");
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if ("string" === typeof config) {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else config = config || {};
      config = mergeConfig(this.defaults, config);
      config.method ? config.method = config.method.toLowerCase() : this.defaults.method ? config.method = this.defaults.method.toLowerCase() : config.method = "get";
      var transitional = config.transitional;
      void 0 !== transitional && validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
        forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
        clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
      }, false);
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if ("function" === typeof interceptor.runWhen && false === interceptor.runWhen(config)) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [ dispatchRequest, void 0 ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) promise = promise.then(chain.shift(), chain.shift());
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach([ "delete", "get", "head", "options" ], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach([ "post", "put", "patch" ], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });
    module.exports = Axios;
  }, {
    "../helpers/buildURL": 94,
    "../helpers/validator": 103,
    "./../utils": 104,
    "./InterceptorManager": 84,
    "./dispatchRequest": 87,
    "./mergeConfig": 89
  } ],
  84: [ function(require, module, exports) {
    arguments[4][29][0].apply(exports, arguments);
  }, {
    "./../utils": 104,
    dup: 29
  } ],
  85: [ function(require, module, exports) {
    arguments[4][30][0].apply(exports, arguments);
  }, {
    "../helpers/combineURLs": 95,
    "../helpers/isAbsoluteURL": 97,
    dup: 30
  } ],
  86: [ function(require, module, exports) {
    "use strict";
    var enhanceError = require("./enhanceError");
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }, {
    "./enhanceError": 88
  } ],
  87: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var transformData = require("./transformData");
    var isCancel = require("../cancel/isCancel");
    var defaults = require("../defaults");
    function throwIfCancellationRequested(config) {
      config.cancelToken && config.cancelToken.throwIfRequested();
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach([ "delete", "get", "head", "post", "put", "patch", "common" ], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          reason && reason.response && (reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse));
        }
        return Promise.reject(reason);
      });
    };
  }, {
    "../cancel/isCancel": 82,
    "../defaults": 92,
    "./../utils": 104,
    "./transformData": 91
  } ],
  88: [ function(require, module, exports) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      code && (error.code = code);
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }, {} ],
  89: [ function(require, module, exports) {
    "use strict";
    var utils = require("../utils");
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = [ "url", "method", "data" ];
      var mergeDeepPropertiesKeys = [ "headers", "auth", "proxy", "params" ];
      var defaultToConfig2Keys = [ "baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding" ];
      var directMergeKeys = [ "validateStatus" ];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        if (utils.isPlainObject(source)) return utils.merge({}, source);
        if (utils.isArray(source)) return source.slice();
        return source;
      }
      function mergeDeepProperties(prop) {
        utils.isUndefined(config2[prop]) ? utils.isUndefined(config1[prop]) || (config[prop] = getMergedValue(void 0, config1[prop])) : config[prop] = getMergedValue(config1[prop], config2[prop]);
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        utils.isUndefined(config2[prop]) || (config[prop] = getMergedValue(void 0, config2[prop]));
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        utils.isUndefined(config2[prop]) ? utils.isUndefined(config1[prop]) || (config[prop] = getMergedValue(void 0, config1[prop])) : config[prop] = getMergedValue(void 0, config2[prop]);
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        prop in config2 ? config[prop] = getMergedValue(config1[prop], config2[prop]) : prop in config1 && (config[prop] = getMergedValue(void 0, config1[prop]));
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return -1 === axiosKeys.indexOf(key);
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }, {
    "../utils": 104
  } ],
  90: [ function(require, module, exports) {
    "use strict";
    var createError = require("./createError");
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      response.status && validateStatus && !validateStatus(response.status) ? reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response)) : resolve(response);
    };
  }, {
    "./createError": 86
  } ],
  91: [ function(require, module, exports) {
    "use strict";
    var utils = require("./../utils");
    var defaults = require("./../defaults");
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }, {
    "./../defaults": 92,
    "./../utils": 104
  } ],
  92: [ function(require, module, exports) {
    (function(process) {
      "use strict";
      var utils = require("./utils");
      var normalizeHeaderName = require("./helpers/normalizeHeaderName");
      var enhanceError = require("./core/enhanceError");
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        !utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"]) && (headers["Content-Type"] = value);
      }
      function getDefaultAdapter() {
        var adapter;
        "undefined" !== typeof XMLHttpRequest ? adapter = require("./adapters/xhr") : "undefined" !== typeof process && "[object process]" === Object.prototype.toString.call(process) && (adapter = require("./adapters/http"));
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if ("SyntaxError" !== e.name) throw e;
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        },
        adapter: getDefaultAdapter(),
        transformRequest: [ function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
          if (utils.isArrayBufferView(data)) return data.buffer;
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && "application/json" === headers["Content-Type"]) {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        } ],
        transformResponse: [ function transformResponse(data) {
          var transitional = this.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && "json" === this.responseType;
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if ("SyntaxError" === e.name) throw enhanceError(e, this, "E_JSON_PARSE");
              throw e;
            }
          }
          return data;
        } ],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        }
      };
      defaults.headers = {
        common: {
          Accept: "application/json, text/plain, */*"
        }
      };
      utils.forEach([ "delete", "get", "head" ], function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      });
      utils.forEach([ "post", "put", "patch" ], function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
      });
      module.exports = defaults;
    }).call(this, require("_process"));
  }, {
    "./adapters/http": 78,
    "./adapters/xhr": 78,
    "./core/enhanceError": 88,
    "./helpers/normalizeHeaderName": 100,
    "./utils": 104,
    _process: 11
  } ],
  93: [ function(require, module, exports) {
    arguments[4][38][0].apply(exports, arguments);
  }, {
    dup: 38
  } ],
  94: [ function(require, module, exports) {
    arguments[4][39][0].apply(exports, arguments);
  }, {
    "./../utils": 104,
    dup: 39
  } ],
  95: [ function(require, module, exports) {
    arguments[4][40][0].apply(exports, arguments);
  }, {
    dup: 40
  } ],
  96: [ function(require, module, exports) {
    arguments[4][41][0].apply(exports, arguments);
  }, {
    "./../utils": 104,
    dup: 41
  } ],
  97: [ function(require, module, exports) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }, {} ],
  98: [ function(require, module, exports) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return "object" === typeof payload && true === payload.isAxiosError;
    };
  }, {} ],
  99: [ function(require, module, exports) {
    arguments[4][44][0].apply(exports, arguments);
  }, {
    "./../utils": 104,
    dup: 44
  } ],
  100: [ function(require, module, exports) {
    arguments[4][45][0].apply(exports, arguments);
  }, {
    "../utils": 104,
    dup: 45
  } ],
  101: [ function(require, module, exports) {
    arguments[4][47][0].apply(exports, arguments);
  }, {
    "./../utils": 104,
    dup: 47
  } ],
  102: [ function(require, module, exports) {
    arguments[4][49][0].apply(exports, arguments);
  }, {
    dup: 49
  } ],
  103: [ function(require, module, exports) {
    "use strict";
    var pkg = require("./../../package.json");
    var validators = {};
    [ "object", "boolean", "number", "function", "string", "symbol" ].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    var currentVerArr = pkg.version.split(".");
    function isOlderVersion(version, thanVersion) {
      var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
      var destVer = version.split(".");
      for (var i = 0; i < 3; i++) {
        if (pkgVersionArr[i] > destVer[i]) return true;
        if (pkgVersionArr[i] < destVer[i]) return false;
      }
      return false;
    }
    validators.transitional = function transitional(validator, version, message) {
      var isDeprecated = version && isOlderVersion(version);
      function formatMessage(opt, desc) {
        return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (false === validator) throw new Error(formatMessage(opt, " has been removed in " + version));
        if (isDeprecated && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return !validator || validator(value, opt, opts);
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if ("object" !== typeof options) throw new TypeError("options must be an object");
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = void 0 === value || validator(value, opt, options);
          if (true !== result) throw new TypeError("option " + opt + " must be " + result);
          continue;
        }
        if (true !== allowUnknown) throw Error("Unknown option " + opt);
      }
    }
    module.exports = {
      isOlderVersion: isOlderVersion,
      assertOptions: assertOptions,
      validators: validators
    };
  }, {
    "./../../package.json": 105
  } ],
  104: [ function(require, module, exports) {
    "use strict";
    var bind = require("./helpers/bind");
    var toString = Object.prototype.toString;
    function isArray(val) {
      return "[object Array]" === toString.call(val);
    }
    function isUndefined(val) {
      return "undefined" === typeof val;
    }
    function isBuffer(val) {
      return null !== val && !isUndefined(val) && null !== val.constructor && !isUndefined(val.constructor) && "function" === typeof val.constructor.isBuffer && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return "[object ArrayBuffer]" === toString.call(val);
    }
    function isFormData(val) {
      return "undefined" !== typeof FormData && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      result = "undefined" !== typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(val) : val && val.buffer && val.buffer instanceof ArrayBuffer;
      return result;
    }
    function isString(val) {
      return "string" === typeof val;
    }
    function isNumber(val) {
      return "number" === typeof val;
    }
    function isObject(val) {
      return null !== val && "object" === typeof val;
    }
    function isPlainObject(val) {
      if ("[object Object]" !== toString.call(val)) return false;
      var prototype = Object.getPrototypeOf(val);
      return null === prototype || prototype === Object.prototype;
    }
    function isDate(val) {
      return "[object Date]" === toString.call(val);
    }
    function isFile(val) {
      return "[object File]" === toString.call(val);
    }
    function isBlob(val) {
      return "[object Blob]" === toString.call(val);
    }
    function isFunction(val) {
      return "[object Function]" === toString.call(val);
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return "undefined" !== typeof URLSearchParams && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if ("undefined" !== typeof navigator && ("ReactNative" === navigator.product || "NativeScript" === navigator.product || "NS" === navigator.product)) return false;
      return "undefined" !== typeof window && "undefined" !== typeof document;
    }
    function forEach(obj, fn) {
      if (null === obj || "undefined" === typeof obj) return;
      "object" !== typeof obj && (obj = [ obj ]);
      if (isArray(obj)) for (var i = 0, l = obj.length; i < l; i++) fn.call(null, obj[i], i, obj); else for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && fn.call(null, obj[key], key, obj);
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        isPlainObject(result[key]) && isPlainObject(val) ? result[key] = merge(result[key], val) : isPlainObject(val) ? result[key] = merge({}, val) : isArray(val) ? result[key] = val.slice() : result[key] = val;
      }
      for (var i = 0, l = arguments.length; i < l; i++) forEach(arguments[i], assignValue);
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        a[key] = thisArg && "function" === typeof val ? bind(val, thisArg) : val;
      });
      return a;
    }
    function stripBOM(content) {
      65279 === content.charCodeAt(0) && (content = content.slice(1));
      return content;
    }
    module.exports = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM
    };
  }, {
    "./helpers/bind": 93
  } ],
  105: [ function(require, module, exports) {
    module.exports = {
      _from: "axios@^0.21.1",
      _id: "axios@0.21.4",
      _inBundle: false,
      _integrity: "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
      _location: "/vod-js-sdk-v6/axios",
      _phantomChildren: {},
      _requested: {
        type: "range",
        registry: true,
        raw: "axios@^0.21.1",
        name: "axios",
        escapedName: "axios",
        rawSpec: "^0.21.1",
        saveSpec: null,
        fetchSpec: "^0.21.1"
      },
      _requiredBy: [ "/vod-js-sdk-v6" ],
      _resolved: "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
      _shasum: "c67b90dc0568e5c1cf2b0b858c43ba28e2eda575",
      _spec: "axios@^0.21.1",
      _where: "G:\\work\\ouwan\\ouwan\\node_modules\\vod-js-sdk-v6",
      author: {
        name: "Matt Zabriskie"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      bundleDependencies: false,
      bundlesize: [ {
        path: "./dist/axios.min.js",
        threshold: "5kB"
      } ],
      dependencies: {
        "follow-redirects": "^1.14.0"
      },
      deprecated: false,
      description: "Promise based HTTP client for the browser and node.js",
      devDependencies: {
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.3.0",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^23.0.0",
        "grunt-karma": "^4.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^4.0.2",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^6.3.2",
        "karma-chrome-launcher": "^3.1.0",
        "karma-firefox-launcher": "^2.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^4.3.6",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.8",
        "karma-webpack": "^4.0.2",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^8.2.1",
        sinon: "^4.5.0",
        "terser-webpack-plugin": "^4.2.3",
        typescript: "^4.0.5",
        "url-search-params": "^0.10.0",
        webpack: "^4.44.2",
        "webpack-dev-server": "^3.11.0"
      },
      homepage: "https://axios-http.com",
      jsdelivr: "dist/axios.min.js",
      keywords: [ "xhr", "http", "ajax", "promise", "node" ],
      license: "MIT",
      main: "index.js",
      name: "axios",
      repository: {
        type: "git",
        url: "git+https://github.com/axios/axios.git"
      },
      scripts: {
        build: "NODE_ENV=production grunt build",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        examples: "node ./examples/server.js",
        fix: "eslint --fix lib/**/*.js",
        postversion: "git push && git push --tags",
        preversion: "npm test",
        start: "node ./sandbox/server.js",
        test: "grunt test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"
      },
      typings: "./index.d.ts",
      unpkg: "dist/axios.min.js",
      version: "0.21.4"
    };
  }, {} ],
  GameBuyConfigManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ba04UGb/VPnJF875ziw0Y1", "GameBuyConfigManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    module.exports = cc.Class({
      ctor: function ctor() {
        this.gameBuyConfigList = {};
      },
      push: function push(gameID, data) {
        this.gameBuyConfigList[gameID] = data;
      },
      getGameBuyConfigByGameID: function getGameBuyConfigByGameID(gameID, roomType) {
        roomType = roomType || E_ROOM_TYPE.CARD;
        var tempList = [];
        if (!(0 === tools.getLength(this.gameBuyConfigList[gameID]))) for (var _iterator = _createForOfIteratorHelperLoose(this.gameBuyConfigList[gameID]), _step; !(_step = _iterator()).done; ) {
          var config = _step.value;
          config.roomType === roomType && tempList.push(config);
        }
        return tempList;
      }
    });
    cc._RF.pop();
  }, {} ],
  GameCommonBet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b59447RhpN3ZWt/vsfFDey", "GameCommonBet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        valueText: cc.Label,
        valueTextTextColorOutLine: cc.LabelOutline,
        chouMaBg: cc.Sprite,
        chouMaType: [ cc.SpriteFrame ]
      },
      setData: function setData(goldIndex, valueText, isNeedTextView, widthHeigthValue) {
        void 0 === isNeedTextView && (isNeedTextView = true);
        void 0 === widthHeigthValue && (widthHeigthValue = 50);
        this.chouMaBg.spriteFrame = this.chouMaType[goldIndex];
        if (isNeedTextView) {
          this.valueText.getComponent("mlabel").setString(valueText, true);
          switch (goldIndex + "") {
           case "0":
            this.valueTextTextColorOutLine.color = cc.color(41, 128, 15);
            break;

           case "1":
            this.valueTextTextColorOutLine.color = cc.color(180, 72, 34);
            break;

           case "2":
            this.valueTextTextColorOutLine.color = cc.color(134, 17, 123);
            break;

           case "3":
            this.valueTextTextColorOutLine.color = cc.color(24, 119, 154);
            break;

           case "4":
            this.valueTextTextColorOutLine.color = cc.color(172, 98, 3);
            break;

           case "5":
            this.valueTextTextColorOutLine.color = cc.color(222, 59, 32);
          }
        }
        this.node.width = widthHeigthValue;
        this.node.height = widthHeigthValue;
      }
    });
    cc._RF.pop();
  }, {} ],
  GameCreaterImage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa06fDKZXhJlIJ+4z3h7uHH", "GameCreaterImage");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        LayoutNode: cc.Node
      },
      onLoad: function onLoad() {
        cc.log("*********************\u751f\u6210\u56fe\u7247\uff08\u6e38\u620f\uff09*********************");
        var gameDiv = document.getElementById("GAMEQRCode");
        gameDiv && gameDiv.remove();
        true == cc.sys.isMobile ? this.node.rotation = 270 : this.node.rotation = -90;
        cc.log("*********************\u751f\u6210\u56fe\u7247\uff08\u6e38\u620f\uff09*********************");
        this.LobbyLogic = new (require("LobbyLogic"))();
        var myInfo = this.LobbyLogic.getMyInfo();
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        var scaleW = frameSize.width / designSize.width;
        var scaleH = frameSize.height / designSize.height;
        var _width = 596 * scaleW;
        var _height = 683 * scaleH;
        var url = "https://ouwan.hmzb.top/image/share/play?";
        var gameIDName = "\u5076ONE\u6700\u7f8e\u57ce\uff0c\u4e3a\u5bb6\u4e61\u4ee3\u8a00";
        var gameName = "gameName=" + gameIDName;
        url += gameName;
        var headUrl = "&headUrl=" + myInfo.headURL;
        url += headUrl;
        var userID = "&userID=" + myInfo.userID;
        url += userID;
        var userName = "&userName=" + myInfo.name;
        url += userName;
        console.log("GameDesk share image url", url);
        var gameDiv = document.getElementById("Cocos2dGameContainer");
        var background = document.createElement("img");
        background.id = "GAMEQRCode";
        background.src = url;
        background.style.transform = "rotate(-90deg)";
        background.alt = "bigImg";
        background.width = _width;
        background.height = _height;
        background.style.position = "absolute";
        background.style.top = parseInt(gameDiv.style.height.replace(/px/, "")) / 2 - background.height / 2 + "px";
        background.style.left = parseInt(gameDiv.style.width.replace(/px/, "")) / 2 - background.width / 2 + "px";
        gameDiv.appendChild(background);
      },
      init: function init() {},
      doButton_Close: function doButton_Close() {
        var _this = this;
        var gameDiv = document.getElementById("GAMEQRCode");
        gameDiv && gameDiv.remove();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  GameInfor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05babXiviVFMpR+SJb1NDd0", "GameInfor");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        PlayInforItemPrefab: cc.Prefab,
        PlayScroview: cc.ScrollView,
        ItemPrefab: cc.Prefab,
        Scroview: cc.ScrollView
      },
      onLoad: function onLoad() {},
      init: function init(playerInfo, gameInforArry) {
        var _this = this;
        this.PlayScroview.content.removeAllChildren();
        playerInfo.forEach(function(info, index) {
          var item = cc.instantiate(_this.PlayInforItemPrefab);
          _this.PlayScroview.content.addChild(item);
          for (var i = 0; i < 4; i++) {
            var name = "set_up_" + (i + 1);
            var playerNode = item.getChildByName(name);
            playerNode.active = false;
          }
          for (var j = 0; j < info.length; j++) {
            var name = "set_up_" + (j + 1);
            var playerData = item.getChildByName(name);
            var user = info[j];
            playerData.active = true;
            playerData && function() {
              var playInfor = playerData;
              var Text_Name = playInfor.getChildByName("Name").getComponent(cc.Label);
              var Image_Avata = playInfor.getChildByName("Avata_Node").getChildByName("Image_Avata");
              Image_Avata.active = true;
              Text_Name.string = tools.getCutStringByCount(user.name, 5);
              var onGetHeadRes = function(headRes) {
                Image_Avata && cc.isValid(Image_Avata) && (Image_Avata.getComponent(cc.Sprite).spriteFrame = headRes);
              }.bind(_this);
              AvatarManager.requestHeadRes(user.headURL, user.userID, onGetHeadRes, Image_Avata);
            }();
          }
        });
        this.Scroview.content.removeAllChildren();
        var inforDEX = gameInforArry.length;
        gameInforArry.forEach(function(vaule, index) {
          var item = cc.instantiate(_this.ItemPrefab);
          item.getChildByName("ZhaiYaoNode").getChildByName("timeLabel").getComponent(cc.Label).string = gameInforArry[inforDEX - 1 - index];
          _this.Scroview.content.addChild(item);
        });
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameListManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "561abLFwIdLGL++5kJiqF6u", "GameListManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var API = "lobby";
    var GameListManager = cc.Class({
      ctor: function ctor() {
        this.gameList = [];
      },
      requestGameList: function requestGameList(callback) {
        if (0 != this.gameList.length) {
          callback(this.gameList);
          return;
        }
        var actionName = "gameList";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var info = jsonData.data;
            this.push(info);
            callback && callback(info);
          } else createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      push: function push(gameInfo) {
        for (var k in gameInfo) var length = this.gameList.push(gameInfo[k]);
      },
      getGameList: function getGameList() {
        return this.gameList;
      },
      clear: function clear() {
        this.gameList = [];
      },
      getGameByGameID: function getGameByGameID(gameID) {
        var gameList = this.gameList;
        for (var _iterator = _createForOfIteratorHelperLoose(gameList), _step; !(_step = _iterator()).done; ) {
          var game = _step.value;
          if (game.gameID === gameID) return game;
        }
      },
      isBiSaiGame: function isBiSaiGame(gameID) {
        return tools.tableContainValue(G_BISAI_GAME_LIST, gameID);
      },
      isSpecialGame: function isSpecialGame(gameID) {
        return tools.tableContainValue(G_SPECIAL_GAME_LIST, gameID);
      },
      isDeskGame: function isDeskGame(gameID) {
        return tools.tableContainValue(G_DESK_GAME_LIST, gameID);
      },
      isEnterGame: function isEnterGame(gameID) {
        return tools.tableContainValue(G_ENTER_GAME_LIST, gameID);
      },
      isBRGame: function isBRGame(gameID) {
        return tools.tableContainValue(G_BR_GAME_LIST, gameID);
      },
      isTipsGame: function isTipsGame(gameID) {
        return tools.tableContainValue(G_TIPS_GAME_LIST, gameID);
      },
      isRoomGame: function isRoomGame(gameID) {
        return tools.tableContainValue(G_ROOM_GAME_LIST, gameID);
      }
    });
    module.exports = GameListManager;
    cc._RF.pop();
  }, {} ],
  GameLocationLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7466a65CMlB/p1qAjlmEq4G", "GameLocationLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Node_GameLocation: [ cc.Node ]
      },
      onLoad: function onLoad() {
        this.Node_GameLocation.forEach(function(i) {
          return i.active = false;
        });
        cc.log("*********************\u5b9a\u4f4d*********************");
        2 == this.count ? this.Node_GameLocation[0].active = true : 3 == this.count ? this.Node_GameLocation[1].active = true : 4 == this.count && (this.Node_GameLocation[2].active = true);
        this.initUIData();
      },
      init: function init(rs, userInfoList) {
        this.count = rs;
        this.userInfoList = userInfoList;
      },
      initUIData: function initUIData() {
        2 == this.count ? this.updateUserInfo2() : 3 == this.count ? this.updateUserInfo3() : 4 == this.count && this.updateUserInfo4();
      },
      updateUserInfo2: function updateUserInfo2() {
        var _this = this;
        cc.log("*********************\u7528\u6237\u5b9a\u4f4d*********************");
        var play_0 = this.Node_GameLocation[0].getChildByName("play_0");
        var play_1 = this.Node_GameLocation[0].getChildByName("play_1");
        var InfoList = [];
        InfoList.push(this.userInfoList[0]);
        InfoList.push(this.userInfoList[2]);
        var play = [];
        play.push(play_0);
        play.push(play_1);
        play.forEach(function(Node, i) {
          var userInfo = InfoList[i];
          if ("undefined" == typeof userInfo) return;
          if (userInfo) {
            var Text_name = Node.getChildByName("name");
            var Text_IP = Node.getChildByName("IP");
            var Image_Avata = Node.getChildByName("Image_Avata").getComponent(cc.Sprite);
            Text_name.getComponent(cc.Label).string = userInfo.name + "";
            Text_IP.getComponent(cc.Label).string = userInfo.logonIP + "";
            var onGetHeadRes = function(avataRes) {
              Image_Avata && cc.isValid(Image_Avata) && (Image_Avata.spriteFrame = avataRes);
            }.bind(_this);
            AvatarManager.requestHeadRes(userInfo.headURL, null, onGetHeadRes, null);
          }
        });
        if (this.userInfoList[0] && this.userInfoList[2]) {
          var text = this.Node_GameLocation[0].getChildByName("image_1").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[2]) + "";
        }
      },
      updateUserInfo3: function updateUserInfo3() {
        var _this2 = this;
        cc.log("*********************\u7528\u6237\u5b9a\u4f4d*********************");
        var play_0 = this.Node_GameLocation[1].getChildByName("play_0");
        var play_1 = this.Node_GameLocation[1].getChildByName("play_1");
        var play_2 = this.Node_GameLocation[1].getChildByName("play_2");
        var InfoList = [];
        InfoList.push(this.userInfoList[0]);
        InfoList.push(this.userInfoList[1]);
        InfoList.push(this.userInfoList[2]);
        var play = [];
        play.push(play_0);
        play.push(play_1);
        play.push(play_2);
        play.forEach(function(Node, i) {
          var userInfo = InfoList[i];
          if ("undefined" == typeof userInfo) return;
          if (userInfo) {
            var Text_name = Node.getChildByName("name");
            var Text_IP = Node.getChildByName("IP");
            var Image_Avata = Node.getChildByName("Image_Avata").getComponent(cc.Sprite);
            Text_name.getComponent(cc.Label).string = userInfo.name + "";
            Text_IP.getComponent(cc.Label).string = userInfo.logonIP + "";
            var onGetHeadRes = function(avataRes) {
              Image_Avata && cc.isValid(Image_Avata) && (Image_Avata.spriteFrame = avataRes);
            }.bind(_this2);
            AvatarManager.requestHeadRes(userInfo.headURL, null, onGetHeadRes, null);
          }
        });
        if (this.userInfoList[0] && this.userInfoList[1]) {
          var text = this.Node_GameLocation[1].getChildByName("image_1").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[1]) + "";
        }
        if (this.userInfoList[1] && this.userInfoList[2]) {
          var text = this.Node_GameLocation[1].getChildByName("image_2").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[1], this.userInfoList[2]) + "";
        }
        if (this.userInfoList[0] && this.userInfoList[2]) {
          var text = this.Node_GameLocation[1].getChildByName("image_3").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[2]) + "";
        }
      },
      updateUserInfo4: function updateUserInfo4() {
        var _this3 = this;
        cc.log("*********************\u7528\u6237\u5b9a\u4f4d*********************");
        var play_0 = this.Node_GameLocation[2].getChildByName("play_0");
        var play_1 = this.Node_GameLocation[2].getChildByName("play_1");
        var play_2 = this.Node_GameLocation[2].getChildByName("play_2");
        var play_3 = this.Node_GameLocation[2].getChildByName("play_3");
        var InfoList = [];
        InfoList.push(this.userInfoList[0]);
        InfoList.push(this.userInfoList[1]);
        InfoList.push(this.userInfoList[2]);
        InfoList.push(this.userInfoList[3]);
        var play = [];
        play.push(play_0);
        play.push(play_1);
        play.push(play_2);
        play.push(play_3);
        play.forEach(function(Node, i) {
          var userInfo = InfoList[i];
          if ("undefined" == typeof userInfo) return;
          if (userInfo) {
            var Text_name = Node.getChildByName("name");
            var Text_IP = Node.getChildByName("IP");
            var Image_Avata = Node.getChildByName("Image_Avata").getComponent(cc.Sprite);
            Text_name.getComponent(cc.Label).string = userInfo.name + "";
            Text_IP.getComponent(cc.Label).string = userInfo.logonIP + "";
            var onGetHeadRes = function(avataRes) {
              Image_Avata && cc.isValid(Image_Avata) && (Image_Avata.spriteFrame = avataRes);
            }.bind(_this3);
            AvatarManager.requestHeadRes(userInfo.headURL, null, onGetHeadRes, null);
          }
        });
        if (this.userInfoList[0] && this.userInfoList[1]) {
          var text = this.Node_GameLocation[2].getChildByName("image_1").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[1]) + "";
        }
        if (this.userInfoList[1] && this.userInfoList[2]) {
          var text = this.Node_GameLocation[2].getChildByName("image_2").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[1], this.userInfoList[2]) + "";
        }
        if (this.userInfoList[2] && this.userInfoList[3]) {
          var text = this.Node_GameLocation[2].getChildByName("image_3").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[2], this.userInfoList[3]) + "";
        }
        if (this.userInfoList[0] && this.userInfoList[3]) {
          var text = this.Node_GameLocation[2].getChildByName("image_4").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[3]) + "";
        }
        if (this.userInfoList[1] && this.userInfoList[3]) {
          var text = this.Node_GameLocation[2].getChildByName("image_5").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[1], this.userInfoList[3]) + "";
        }
        if (this.userInfoList[0] && this.userInfoList[2]) {
          var text = this.Node_GameLocation[2].getChildByName("image_6").getChildByName("text");
          text.getComponent(cc.Label).string = this.getUserDistance(this.userInfoList[0], this.userInfoList[2]) + "";
        }
      },
      getUserDistance: function getUserDistance(userInfo, toUserInfo) {
        if (userInfo && toUserInfo) {
          var longitude = userInfo.longitude;
          var latitude = userInfo.latitude;
          var toLongitude = toUserInfo.longitude;
          var toLatitude = toUserInfo.latitude;
          if (tools.checkLongitudeOrLatitude(longitude) && tools.checkLongitudeOrLatitude(latitude) && tools.checkLongitudeOrLatitude(toLongitude) && tools.checkLongitudeOrLatitude(toLatitude)) {
            var dist = tools.getDistance(toLatitude, toLongitude, latitude, longitude);
            if (dist >= 1) {
              var longstr = tools.getPreciseDecimal(dist, 1) + "km";
              return longstr;
            }
            var longstr = 1e3 * dist + "m";
            return longstr;
          }
          return "\u672a\u77e5";
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameLogicBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8afbyfo3lNUZM1lLg0Q36M", "GameLogicBase");
    "use strict";
    var _cc$Class;
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    module.exports = cc.Class((_cc$Class = {
      extends: cc.Component,
      ctor: function ctor() {
        this.initLogicBaseData();
      },
      initLogicBaseData: function initLogicBaseData() {},
      setPlayInfo: function setPlayInfo(tableUI, logicInfo) {
        this.changeTableTime = null;
        this.gameStatus = -1;
        this.isGameStationReceived = false;
        this.isChangeTable = false;
        this.m_game_wait = true;
        this.tableUI = tableUI;
        this._logicInfo = logicInfo;
        if (this._logicInfo.playInfo) {
          this.seatOffset = 0;
          return;
        }
        var seatOffset = this._logicInfo.seatOffset;
        this.seatOffset = seatOffset || 0;
        this.curBankerSeatNO = G_INVALID_BYTE_VALUE;
        this.changeTableTime = null;
        this.gameStatus = -1;
        this.isGameStationReceived = false;
        this.isChangeTable = false;
        this.dissmissUserIDList = {};
        for (var i = 0; i < G_WAR_RECORD_PLAYER_NUM; i++) this.dissmissUserIDList[i] = 0;
      },
      setMyMatchDeskInfo: function setMyMatchDeskInfo(MatchDeskInfo) {
        printInfo(" setMyMatchDeskInfo( MatchDeskInfo )");
        this.myMatchDeskInfo = MatchDeskInfo;
        MatchManager.setMyMatchGameInfo(MatchDeskInfo);
        this.tableUI.showMatchWaitStatus(MatchDeskInfo);
      },
      setMyMatchDeskFinishInfo: function setMyMatchDeskFinishInfo(MatchDeskInfo) {
        MatchManager.setCurMatchGameInfo(MatchDeskInfo);
        this.tableUI.showMatchDeskFinish();
      },
      getMyMatchDeskInfo: function getMyMatchDeskInfo() {
        return this.myMatchDeskInfo;
      },
      setMatchDeskRankInfo: function setMatchDeskRankInfo(MatchDeskRankInfo) {
        2 == MatchDeskRankInfo.type && GameSocket.setIsSendLogoutRoom(true);
        this.MatchDeskRankInfo = MatchDeskRankInfo;
        MatchManager.setMatchDeskRankInfo(MatchDeskRankInfo);
        this.tableUI.showMatchDeskStatus(MatchDeskRankInfo);
      },
      setMyMatchGradeInfo: function setMyMatchGradeInfo(matchGradeInfo) {
        var info = {};
        info.userID = {};
        info.userName = {};
        info.userID = matchGradeInfo.userid;
        info.userName = matchGradeInfo.name;
        info.llAllPoint = matchGradeInfo.changeGrade;
        info.llAllPoint_ALL = matchGradeInfo.grade;
        this.tableUI.showMatchGameResult(info);
      },
      setMyRankMatchGradeInfo: function setMyRankMatchGradeInfo(rankMatchGradeInfo) {
        var info = {};
        info.userID = rankMatchGradeInfo.userID;
        info.gameExp = rankMatchGradeInfo.gameExp;
        info.UserLevel = rankMatchGradeInfo.UserLevel;
        info.remark = rankMatchGradeInfo.remark;
        this.tableUI.showRankMatchGameResult(info);
      },
      setMyRankMatchUserExp: function setMyRankMatchUserExp(rankMatchUserExp) {
        var info = {};
        info.userID = rankMatchUserExp.userID;
        info.gameExp = rankMatchUserExp.gameExp;
        info.UserLevel = rankMatchUserExp.UserLevel;
        this.tableUI.setRankMatchUserExp(info);
      },
      setCheckPointInfo: function setCheckPointInfo(checkPointInfo) {
        this.tableUI.setCheckPointInfo(checkPointInfo);
      },
      setCheckPointEnd: function setCheckPointEnd() {
        this.tableUI.setCheckPointEnd();
      },
      getMatchDeskRankInfo: function getMatchDeskRankInfo() {
        return this.MatchDeskRankInfo;
      },
      initGameFrameData: function initGameFrameData() {
        this.isGameStationReceived = false;
      },
      clearGame: function clearGame() {
        this.initGameFrameData();
        try {
          this.unscheduleAllCallbacks();
        } catch (e) {}
        this.tableUI && this.tableUI.clearCommonUI();
        this.clearUI();
      },
      makeAllUserDirty: function makeAllUserDirty() {
        return GameSocket.makeAllUserDirty();
      },
      getMyHeadURL: function getMyHeadURL() {
        return GameSocket.getMyInfo().headURL;
      },
      getMyID: function getMyID() {
        return GameSocket.getMyInfo().userID;
      },
      getMyDeskNO: function getMyDeskNO() {
        if (this.getMyInfo()) return this.getMyInfo().deskIdx;
        return -1;
      },
      getMyInfo: function getMyInfo() {
        return this.getUserByID(this.getMyID());
      },
      getMySeatNO: function getMySeatNO() {
        if (this.getMyInfo()) return this.getMyInfo().deskStation ? this.getMyInfo().deskStation : 0;
        return 0;
      },
      getMyName: function getMyName() {
        return this.getMyInfo() && this.getMyInfo().name || "";
      },
      getMyMoney: function getMyMoney() {
        return this.getMyInfo() && this.getMyInfo().money || 0;
      },
      getMyGameMoney: function getMyGameMoney() {
        return this.getMyMoney();
      },
      getDeskInfo: function getDeskInfo() {
        return GameSocket.getDeskInfo();
      },
      getCardRoomNum: function getCardRoomNum() {
        var deskPasswd = 0;
        this.getDeskInfo() && (deskPasswd = this.getDeskInfo().deskPasswd);
        return deskPasswd;
      },
      getGameCountInfo: function getGameCountInfo() {
        var curCount = 0;
        var totalCount = 0;
        if (this.getDeskInfo()) {
          curCount = this.getDeskInfo().runGameCount;
          totalCount = this.getDeskInfo().totalGameCount;
        }
        var rValue = [ curCount, totalCount ];
        return rValue;
      },
      getGameCurCount: function getGameCurCount() {
        var curCount = 0;
        this.getDeskInfo() && (curCount = this.getDeskInfo().runGameCount);
        return curCount;
      },
      getGameCurCountData: function getGameCurCountData() {
        var curCount = null;
        this.getDeskInfo() && (curCount = this.getDeskInfo().runGameCount);
        return curCount;
      },
      getGameTotalCount: function getGameTotalCount() {
        var totalCount = 0;
        this.getDeskInfo() && (totalCount = this.getDeskInfo().totalGameCount);
        return totalCount;
      },
      getRoomMasterId: function getRoomMasterId() {
        var masterID = 0;
        this.getDeskInfo() && (masterID = this.getDeskInfo().masterID);
        return masterID;
      },
      getGameStatus: function getGameStatus() {
        return this.gameStatus;
      },
      setGameStatus: function setGameStatus(gameStatus) {
        this.gameStatus = gameStatus;
      },
      getCurBankerSeatNO: function getCurBankerSeatNO() {
        return this.curBankerSeatNO;
      },
      setCurBankerSeatNO: function setCurBankerSeatNO(deskStation) {
        this.curBankerSeatNO = deskStation;
      },
      getUserByDeskStation: function getUserByDeskStation(deskStation) {
        return GameSocket.getUserByDeskStation(deskStation);
      },
      getUserByID: function getUserByID(userID) {
        return GameSocket.getUserByID(userID);
      },
      getUserInfoListOfLogicSeat: function getUserInfoListOfLogicSeat() {
        var userInfoList = {};
        for (var i = 0; i < this._logicInfo.seatCount; i++) userInfoList[i] = this.getUserBySeat(i);
        return userInfoList;
      },
      getUserInfoListOfViewSeat: function getUserInfoListOfViewSeat() {
        var userInfoList = {};
        for (var i = 0; i < this._logicInfo.seatCount; i++) {
          var viewSeat = this.logicToViewSeatNo(i);
          userInfoList[viewSeat] = this.getUserBySeat(i);
        }
        return userInfoList;
      },
      getUserMoneyByID: function getUserMoneyByID(userID) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.userID == userID) return v.money;
        }
        return 0;
      },
      getSeatByID: function getSeatByID(userID) {
        var user = this.getUserByID(userID);
        if (user) return user.deskStation;
        return 0;
      },
      getViewSeatByID: function getViewSeatByID(userID) {
        var user = this.getUserByID(userID);
        if (user) return this.logicToViewSeatNo(user.deskStation);
        return null;
      },
      getUserNameByID: function getUserNameByID(userID) {
        var user = this.getUserByID(userID);
        if (user) return user.name;
        return "";
      },
      getUserSexByID: function getUserSexByID(userID) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.userID == userID) return v.sex == E_UserSex.MALE;
        }
        return false;
      },
      setUserSexByID: function setUserSexByID(userID, sex) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          v.userID == userID && v.sex == sex;
        }
      },
      getUserNameBySeat: function getUserNameBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v.name;
        }
        return "";
      },
      getUserBySeat: function getUserBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v;
        }
        return null;
      },
      getUserSexBySeat: function getUserSexBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v.sex == E_UserSex.MALE;
        }
        return false;
      },
      getUserIdBySeat: function getUserIdBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v.userID;
        }
        return 0;
      },
      getUserMoneyBySeat: function getUserMoneyBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v.money;
        }
        return 0;
      },
      getUserHeadURLBySeat: function getUserHeadURLBySeat(deskStation) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.deskStation == deskStation) return v.headURL;
        }
        return "";
      },
      getUserHeadURLByUserID: function getUserHeadURLByUserID(userID) {
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var v = GameSocket.getDeskUserList()[i];
          if (v.userID == userID) return v.headURL;
        }
        return "";
      },
      getNameList: function getNameList() {
        var nameList = [];
        for (var i = 0; i < this._logicInfo.seatCount; i++) nameList.push(this.getUserNameBySeat(i));
        return nameList;
      },
      getUserIDList: function getUserIDList() {
        var userIdList = [];
        for (var i = 0; i < this._logicInfo.seatCount; i++) userIdList.push(this.getUserIdBySeat(i));
        return userIdList;
      },
      getHeadURLList: function getHeadURLList() {
        var headURLList = [];
        for (var i = 0; i < this._logicInfo.seatCount; i++) headURLList.push(this.getUserHeadURLBySeat(i));
        return headURLList;
      },
      getRealPokeValue: function getRealPokeValue(pokeValue) {
        createTips("getRealPokeValue todooooooooo");
      },
      updateUserMoney: function updateUserMoney(userID, curMoney, lastMoney, resourceType, isMagice, reason) {
        var user = this.getUserByID(userID);
        if (user) {
          console.log(tools.getCurTime() + " updateUserMoney uid:" + userID + " seat:" + user.deskStation + " viewSeat:" + this.logicToViewSeatNo(user.deskStation) + " value:" + curMoney + " lastValue:" + lastMoney + " resType:" + resourceType + " isMagice:" + isMagice + " reason:" + reason);
          this.tableUI.updateUserMoney(this.logicToViewSeatNo(user.deskStation), curMoney, lastMoney, resourceType, isMagice, reason);
        }
      },
      updateUserJewels: function updateUserJewels(userID, Jewels) {
        var user = this.getUserByID(userID);
        user && this.tableUI.updateUserJewels(this.logicToViewSeatNo(user.deskStation), Jewels);
      },
      isUserPlaying: function isUserPlaying(deskStation) {
        if (this.isBuyRoom() || this.isPrivateRoom() || this.isVIPRoom()) {
          var gameCountValue = this.getGameCountInfo();
          var curGameCount = gameCountValue[0];
          if (curGameCount > 0) return true;
        }
        var user = this.getUserBySeat(deskStation);
        if (user && E_UserStatus.USER_STATUS_PLAYING == user.userStatus) return true;
        return false;
      },
      isUserTuoGuan: function isUserTuoGuan(deskStation) {
        var user = this.getUserBySeat(deskStation);
        if (user && user) return user.isAuto;
        return false;
      },
      isMePlaying: function isMePlaying() {
        return this.isUserPlaying(this.getMySeatNO());
      },
      isDeskPlaying: function isDeskPlaying() {
        var userList = GameSocket.getDeskUserList();
        for (var _iterator = _createForOfIteratorHelperLoose(userList), _step; !(_step = _iterator()).done; ) {
          var user = _step.value;
          if (E_UserStatus.USER_STATUS_PLAYING == user.userStatus) return true;
        }
        return false;
      },
      isMeWatching: function isMeWatching() {
        return GameSocket.getMyInfo().userStatus == E_UserStatus.USER_STATUS_WATCH;
      },
      isMeReady: function isMeReady() {
        var user = this.getUserByID(this.getMyID());
        if (user && E_UserStatus.USER_STATUS_AGREE == user.userStatus) return true;
        return false;
      },
      isMeTuoGuan: function isMeTuoGuan() {
        var user = this.getUserByID(this.getMyID());
        if (user) return user.isAuto;
        return false;
      },
      isBuyRoom: function isBuyRoom() {
        if (GameSocket) return GameSocket.isBuyRoom();
        return false;
      },
      isTableRoom: function isTableRoom() {
        if (this.GameSocket) return this.GameSocket.isTableRoom();
        return false;
      },
      isGoldRoom: function isGoldRoom() {
        if (GameSocket) return GameSocket.isGoldRoom() || GameSocket.isRankMatchRoom() || GameSocket.isCheckPointRoom();
        return false;
      },
      isPrivateRoom: function isPrivateRoom() {
        if (GameSocket) return GameSocket.isPrivateRoom();
        return false;
      },
      isCostGold: function isCostGold() {
        if (this.isPrivateRoom() || this.isGoldRoom()) return true;
        return false;
      },
      isMatchRoom: function isMatchRoom() {
        if (GameSocket) return GameSocket.isMatchRoom();
        return false;
      },
      isBarrierMatchRoom: function isBarrierMatchRoom() {
        if (GameSocket) return GameSocket.isBarrierMatchRoom();
        return false;
      },
      isRankMatchRoom: function isRankMatchRoom() {
        if (GameSocket) return GameSocket.isRankMatchRoom();
        return false;
      },
      isCheckPointRoom: function isCheckPointRoom() {
        if (GameSocket) return GameSocket.isCheckPointRoom();
        return false;
      },
      isVIPRoom: function isVIPRoom() {
        if (GameSocket) return GameSocket.isVIPRoom();
        return false;
      },
      isRoom: function isRoom() {
        if (GameSocket) return GameSocket.isRoom();
        return false;
      },
      viewToLogicSeatNo: function viewToLogicSeatNo(viewSeatNO) {
        if (GameSocket.isBRGame()) return viewSeatNO;
        if (viewSeatNO < 0 || viewSeatNO >= this._logicInfo.seatCount) return G_INVALID_BYTE_VALUE;
        return (viewSeatNO - this.seatOffset + this._logicInfo.seatCount) % this._logicInfo.seatCount;
      },
      logicToViewSeatNo: function logicToViewSeatNo(deskStation) {
        if (GameSocket.isBRGame()) return deskStation;
        if (deskStation < 0 || deskStation >= this._logicInfo.seatCount) return G_INVALID_BYTE_VALUE;
        return (deskStation + this.seatOffset + this._logicInfo.seatCount) % this._logicInfo.seatCount;
      },
      removeAllDeskUser: function removeAllDeskUser() {
        for (var i = 0; i < this._logicInfo.seatCount; i++) this.tableUI.removeUser(i);
      },
      loadDeskUser: function loadDeskUser(userID) {
        this.seatOffset = this._logicInfo.seatOffset ? this._logicInfo.seatOffset : -this.getMySeatNO();
        for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
          var user = GameSocket.getDeskUserList()[i];
          if (userID) {
            if (userID == user.userID) {
              this.tableUI.addUser(user, this.logicToViewSeatNo(user.deskStation));
              break;
            }
          } else {
            var deskStation = this.logicToViewSeatNo(user.deskStation);
            this.tableUI.addUser(user, this.logicToViewSeatNo(user.deskStation));
          }
        }
      },
      updateDeskUser: function updateDeskUser(user) {
        cc.log("GameLogicBase:updateDeskUser(user) {0}", user.deskStation);
        this.tableUI.addUser(user, this.logicToViewSeatNo(user.deskStation));
        this.onUpdateDeskUser(user);
      },
      setDeskExpUserLevelInfo: function setDeskExpUserLevelInfo(info) {
        this.tableUI.setDeskExpUserLevelInfo(info);
      },
      setDeskCheckPointInfo: function setDeskCheckPointInfo(info) {
        this.tableUI.setDeskCheckPointInfo(info);
      },
      sendDeskCheckPointInfo: function sendDeskCheckPointInfo() {
        GameSocket.requestDeskCheckPointInfo();
      },
      dealNotifyDeskUserLogonORoutRoom: function dealNotifyDeskUserLogonORoutRoom(gameMsg) {
        this.tableUI.dealNotifyDeskUserLogonORoutRoom(gameMsg);
      },
      dealNotifyDeskUserIsTourist: function dealNotifyDeskUserIsTourist(info) {
        this.tableUI.dealNotifyDeskUserIsTourist(info);
      },
      sendDeskInfo: function sendDeskInfo() {
        (this.isBuyRoom() || this.isPrivateRoom() || this.isVIPRoom()) && GameSocket.requestDeskInfo();
      },
      sendGameInfo: function sendGameInfo() {
        GameSocket.requestGameInfo();
      },
      sendDeskUserInfo: function sendDeskUserInfo() {
        GameSocket.requestDeskUserInfo();
      },
      sendDeskOneUserInfo: function sendDeskOneUserInfo(deskStation, callback) {
        GameSocket.requestDeskOneUserInfo(deskStation, callback);
      },
      sendAgreeGame: function sendAgreeGame() {
        GameSocket.requestAgreeGame();
      },
      requestGameNotPrompt: function requestGameNotPrompt(UserID) {
        GameSocket.requestGameNotPrompt(UserID);
      },
      sendChatMessage: function sendChatMessage(chatMsg) {
        GameSocket.requestTalk(chatMsg);
      },
      sendStand: function sendStand() {
        GameSocket.requestStand();
      },
      sendStandandWatch: function sendStandandWatch() {
        GameSocket.requestStandandWatch();
      },
      sendLogoutRoom: function sendLogoutRoom(callfunc) {
        GameSocket.requestLogoutRoom(callfunc);
        GameSocket.setIsSendLogoutRoom(true);
      },
      onDissRoomFun: function onDissRoomFun(roomMasterId) {
        if (this.getMyID() == roomMasterId) {
          var btnName1 = "\u786e  \u5b9a";
          var msgCallback = function(btnName) {
            btnName == btnName1 && this.sendDismissRoom();
          }.bind(this);
          var msgObj = {};
          msgObj.msg = "\u786e\u5b9a\u8981\u63d0\u524d\u89e3\u6563\u623f\u95f4\u5417\uff1f";
          msgObj.btn1 = btnName1;
          msgObj.callbackFun = msgCallback;
          createMsgBox(msgObj);
        } else createTips("\u623f\u4e3b\u624d\u80fd\u89e3\u6563\u623f\u95f4");
      },
      doDismissRoom: function doDismissRoom() {
        var _this = this;
        if (!LobbySocket.isConnected()) {
          LobbySocket.clear();
          this.backLobby();
          return;
        }
        if (this.isGoldRoom()) {
          createTips("\u91d1\u5e01\u573a\u6ca1\u6709\u89e3\u6563\u623f\u95f4\u529f\u80fd\uff01");
          return;
        }
        if (this.isMeWatching()) {
          createTips("\u65c1\u89c2\u72b6\u6001\u4e0d\u53ef\u4ee5\u7533\u8bf7\u89e3\u6563\u623f\u95f4\uff01");
          return;
        }
        if (this.isMatchRoom()) {
          createTips("\u6bd4\u8d5b\u573a\u4e0d\u53ef\u4ee5\u7533\u8bf7\u89e3\u6563\u623f\u95f4\uff01");
          return;
        }
        if (this.isBuyRoom() || this.isPrivateRoom() || this.isVIPRoom()) {
          var gameCountValue = this.getGameCountInfo();
          var curGameCount = gameCountValue[0];
          if (curGameCount > 0) {
            var btnName1 = "\u786e  \u5b9a";
            var _btnName = "\u53d6  \u6d88";
            var msgCallback = function(btnName) {
              btnName == btnName1 && this.sendDismissRoom();
            }.bind(this);
            var msgObj = {};
            msgObj.msg = "\u786e\u5b9a\u8981\u7533\u8bf7\u89e3\u6563\u623f\u95f4\u5417\uff1f";
            msgObj.btn1 = btnName1;
            msgObj.btn2 = _btnName;
            msgObj.callbackFun = msgCallback;
            createMsgBox(msgObj);
          } else {
            var roomMasterId = this.getRoomMasterId();
            if (0 == roomMasterId) {
              this.callbackGetMasterId = function() {
                var roomMasterId = _this.getRoomMasterId();
                if (0 != roomMasterId) {
                  _this.onDissRoomFun(roomMasterId);
                  _this.unschedule(_this.callbackGetMasterId);
                }
              };
              this.schedule(this.callbackGetMasterId, .1);
            } else this.onDissRoomFun(roomMasterId);
          }
          return;
        }
      },
      doLeftRoom: function doLeftRoom() {
        if (!LobbySocket.isConnected()) {
          this.backLobby();
          return;
        }
        this.sendStand();
        if (this.isMeWatching()) {
          this.backLobby();
          return;
        }
      },
      sendAnswerDismiss: function sendAnswerDismiss(isAgree) {
        GameSocket.requestAnswerDismiss(isAgree);
      },
      sendDismissRoom: function sendDismissRoom() {
        GameSocket.requestDismissRoom();
      },
      sendChangeDesk: function sendChangeDesk() {
        if (this.changeTableTime) {
          var time = Math.ceil(Date.parse(new Date()) - this.changeTableTime);
          if (5 - time > 0) {
            createTips(string.format("\u6362\u684c\u592a\u9891\u7e41\u4e86\uff0c\u8bf7%s\u79d2\u540e\u91cd\u8bd5", 5 - time));
            return;
          }
        }
        this.changeTableTime = Date.parse(new Date());
        this.isChangeTable = true;
        var deskIdx = this.getMyDeskNO();
        GameSocket.requestChangeDesk(deskIdx);
      },
      requestCreaterDesk: function requestCreaterDesk(Callback) {
        GameSocket.requestCreaterDesk(Callback);
      },
      sendAuto: function sendAuto(isAuto) {
        isAuto ? GameSocket.requestAuto() : GameSocket.requestCancelAuto();
      },
      sendMagicExpress: function sendMagicExpress(targetUserID, magicType) {
        if (this.isMeWatching()) return createTips("\u65c1\u89c2\u72b6\u6001\u4e0d\u53ef\u4ee5\u53d1\u9001\u9b54\u6cd5\u8868\u60c5");
        GameSocket.requestMagicExpress(targetUserID, magicType);
      },
      sendStart: function sendStart() {
        GameSocket.requestStart();
      },
      sendSit: function sendSit(deskStation) {
        GameSocket.requestRoomSit(deskStation);
      },
      sendActionChange: function sendActionChange(deskStation) {
        GameSocket.requestActionChange(deskStation);
      },
      onSystemMessage: function onSystemMessage(sysMsg) {
        this.tableUI.showSystemMsg(sysMsg);
      },
      dealNotifyDeskUserOffline: function dealNotifyDeskUserOffline(user) {
        this.tableUI.showUserCut(this.getViewSeatByID(user.userID));
      },
      dealNotifyDeskUserSit: function dealNotifyDeskUserSit(user) {
        if (this.getMyID() == user.userID && this.isChangeTable) {
          createTips("\u6362\u684c\u6210\u529f");
          removeLoading();
          this.isChangeTable = false;
          this.changeTableClearUI();
        }
        this.tableUI.removeAllPlayerUI();
        this.loadDeskUser();
        this.tableUI.onDeskUserSit(user);
      },
      dealNotifyDeskUserAgree: function dealNotifyDeskUserAgree(deskStation) {
        this.tableUI.onDeskUserAgree(deskStation);
      },
      dealNotifyDeskGameBegin: function dealNotifyDeskGameBegin() {
        cc.log("GameLogicBase:dealNotifyDeskGameBegin \u6536\u5230\u672c\u684c\u6e38\u620f\u5f00\u59cb\u6d88\u606f");
        this.gameBeginClearUI();
        this.tableUI.dealNotifyDeskGameBegin();
        this.sendDeskInfo();
        if (this.isMatchRoom()) {
          this.tableUI.removeAllMatchLayer();
          if (MatchManager.getCurRoundIsEnd()) {
            MatchManager.setCurRoundIsEnd(false);
            this.tableUI.playMatchBeginEffect();
          }
        }
        if (this.isCheckPointRoom()) {
          this.tableUI.removeMatchCheckPointResultLayer();
          this.sendDeskCheckPointInfo();
        }
        this.isRankMatchRoom() && this.setDeskExpUserLevelInfo();
      },
      dealNotifyDeskGameFinish: function dealNotifyDeskGameFinish(info) {
        cc.log("GameLogicBase:dealNotifyDeskGameFinish \u6536\u5230\u672c\u684c\u6e38\u620f\u7ed3\u675f\u6d88\u606f");
        this.tableUI.dealNotifyDeskGameFinish(info);
      },
      onGameInfoResp: function onGameInfoResp(netMsg) {
        this.gameStatus = netMsg.popBYTE();
        this.gameRules = netMsg.popNCHAR(256);
        this.tableUI.updateRulesView(this.gameRules);
        if (this.isCheckPointRoom() && (!this.curRequestCheckPointTime || new Date().getTime() - this.curRequestCheckPointTime > 3e3)) {
          this.sendDeskCheckPointInfo();
          this.curRequestCheckPointTime = new Date().getTime();
        }
        if (this.isRankMatchRoom() && (!this.curRequestRankMatchTime || new Date().getTime() - this.curRequestRankMatchTime > 3e3)) {
          this.setDeskExpUserLevelInfo();
          this.curRequestRankMatchTime = new Date().getTime();
        }
      },
      loginRoom: function loginRoom(roomID, checkPointsNum, costType) {
        console.log("GameLogicBase:loginRoom ", roomID, checkPointsNum, costType);
        var LoginRoomLogic = new (require("LoginRoomLogic"))();
        var roomInfo = RoomListManager.getRoomByRoomID(roomID);
        var myInfo = LobbySocket.getMyInfo();
        var info = globalThis.MatchManager.getCurCheckPointInfo();
        var cfg = info.config[checkPointsNum - 1];
        if (null == cfg) return;
        if (myInfo.money < cfg.cost) {
          globalThis.createTips("\u91d1\u5e01\u4e0d\u8db3");
          return;
        }
        LoginRoomLogic.enterRoom(roomInfo, myInfo.userID, myInfo.userToken, checkPointsNum, costType);
      },
      onGameStationResp: function onGameStationResp(netMsg) {
        cc.log("in GameLogicBase:onGameStationResp \u6536\u5230GameStation\u6e38\u620f\u72b6\u6001\u6d88\u606f");
        this.isGameStationReceived = true;
        var gameID = RoomListManager.getRoomInfo().gameID;
        if (20161010 != gameID && 23510004 != gameID && 20161004 != gameID && 20173124 != gameID) {
          if (!this.curDealGameStationRespTime || new Date().getTime() - this.curDealGameStationRespTime > 2e3) {
            this.dealGameStationResp(netMsg);
            this.curDealGameStationRespTime = new Date().getTime();
          }
        } else this.dealGameStationResp(netMsg);
      },
      onGameMessage: function onGameMessage(netMsg) {
        cc.log(netMsg);
        this.isGameStationReceived ? this.dealGameMessage(netMsg) : cc.log("\u6ca1\u6709\u6536\u5230gamestation\u4e4b\u524d\u4e0d\u80fd\u63a5\u6536\u6e38\u620f\u6d88\u606f \u6d88\u606f\u5b50id = %d", netMsg.bAssistantID);
      },
      dealNotifyDeskBaseInfo: function dealNotifyDeskBaseInfo(info) {
        this.tableUI.showVipRoomInfo(info);
      },
      dealNotifyDeskDismissInfo: function dealNotifyDeskDismissInfo(data) {
        cc.log("+++++++++++++++++++++++++++++++++++++");
        if (this.isMeWatching()) return;
        var callback = function(isAgree) {
          this.sendAnswerDismiss(isAgree);
        }.bind(this);
        this.tableUI.createDismissRoomLayer(data, callback);
      },
      dealNotifyDeskDismissOK: function dealNotifyDeskDismissOK(info) {
        if (info.bReqDismiss) if (info.isDismissMidway) {
          var btnName1 = "\u786e  \u5b9a";
          var _btnName2 = "\u53d6  \u6d88";
          var msgCallback = function(btnName) {
            if (btnName == btnName1 || btnName == _btnName2) {
              var gameCountValue = this.getGameCountInfo();
              cc.log(gameCountValue);
              var curCount = gameCountValue[0];
              cc.log(curCount);
              this.tableUI.showBuyRoomInfo(false);
              this.tableUI.removeDismissRoomLayer();
              this.tableUI.removeTuoGuanLayer();
              this.sendLogoutRoom();
              this.backLobby();
            }
          }.bind(this);
          var msgObj = {};
          msgObj.msg = "\u73a9\u5bb6 " + info.name + " \u53d1\u8d77\u89e3\u6563\u6295\u7968\uff0c\u623f\u95f4\u5df2\u89e3\u6563";
          msgObj.btn1 = btnName1;
          msgObj.callbackFun = msgCallback;
          createMsgBox(msgObj);
        } else {
          this.tableUI.showBuyRoomInfo(false);
          this.tableUI.removeDismissRoomLayer();
          this.tableUI.removeTuoGuanLayer();
          this.sendLogoutRoom();
          this.backLobby();
        }
      },
      dealNotifyRandomChangeSeat: function dealNotifyRandomChangeSeat(info, Callback) {
        this.tableUI.dealNotifyRandomChangeSeat(info, Callback);
      },
      dealNotifyTimeoutCannotOut: function dealNotifyTimeoutCannotOut(msg) {
        var btnName1 = "\u786e  \u5b9a";
        var msgCallback = function(btnName) {
          if (btnName == btnName1 || btnName == btnName2) {
            var gameCountValue = this.getGameCountInfo();
            cc.log(gameCountValue);
            var curCount = gameCountValue[0];
            cc.log(curCount);
            curCount <= 0 ? this.backLobby() : this.showAllResultUI();
            this.tableUI.showBuyRoomInfo(false);
            this.tableUI.removeDismissRoomLayer();
            this.tableUI.removeTuoGuanLayer();
            this.sendLogoutRoom();
            this.backLobby();
          }
        }.bind(this);
        var msgObj = {};
        msgObj.msg = msg;
        msgObj.btn1 = btnName1;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      dealNotifyDeskDismissFailed: function dealNotifyDeskDismissFailed() {
        this.tableUI.removeDismissRoomLayer();
        createTips("\u7533\u8bf7\u89e3\u6563\u623f\u95f4\u5931\u8d25");
      },
      dealNotifyDeskTalk: function dealNotifyDeskTalk(info) {
        console.log("GameLogicBase dealNotifyDeskTalk ", info.userID);
        if (this.getUserByID(info.userID)) {
          console.log("GameLogicBase dealNotifyDeskTalk \u6709\u8fd9\u4e2a\u4eba\u54e6", info.userID);
          this.tableUI.showUserWords(this.getViewSeatByID(info.userID), info.words);
        }
      },
      dealNotifyDeskVoice: function dealNotifyDeskVoice(info) {
        this.tableUI.playVoiceH5(info.voiceID);
      },
      dealNotifyDeskGrade: function dealNotifyDeskGrade(userID, cur, last) {
        this.updateUserMoney(userID, cur, last, null, false, 0);
      },
      dealNotifyDeskMoney: function dealNotifyDeskMoney(userID, cur, last, isMagice, resourceType, reason) {
        resourceType || (resourceType = E_ResourceType.GOLD);
        this.updateUserMoney(userID, cur, last, resourceType, isMagice, reason);
      },
      dealNotifyDeskJewels: function dealNotifyDeskJewels(userID, Jewels) {
        this.updateUserJewels(userID, Jewels);
      },
      dealNotifyDeskUserLeft: function dealNotifyDeskUserLeft(user, deskStation, reasonCode) {
        if (this.getMyID() == user.userID) {
          if (this.isChangeTable) {
            cc.log("this.isChangeTable = true");
            this.removeAllDeskUser();
            GameSocket.__removeAllDeskUser();
            this.sendDeskUserInfo();
          }
          var callback = function() {
            this.backLobby();
          }.bind(this);
          if (E_ReasonKickout.REASON_KICKOUT_DEFAULT == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u60a8\u5df2\u88ab\u8bf7\u79bb\u6e38\u620f", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_STAND == reasonCode) {
            cc.log("REASON_KICKOUT_STAND");
            if (!this.isChangeTable) {
              this.sendLogoutRoom();
              this.backLobby();
            }
          } else if (E_ReasonKickout.REASON_KICKOUT_NOTAGREE == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u7531\u4e8e\u60a8\u957f\u65f6\u95f4\u672a\u51c6\u5907\u88ab\u8bf7\u79bb\u6e38\u620f", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_STAND_MINLIMIT == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u60a8\u7684\u91d1\u5e01\u5df2\u4f4e\u4e8e\u623f\u95f4\u4e0b\u9650", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_STAND_MAXLIMIT == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u60a8\u7684\u91d1\u5e01\u5df2\u8d85\u51fa\u623f\u95f4\u4e0a\u9650", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_STAND_FIRECOIN_MINLIMIT == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u60a8\u7684\u4ff1\u4e50\u90e8\u706b\u5e01\u5df2\u4f4e\u4e8e\u623f\u95f4\u6700\u4f4e\u9650\u5236", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_STAND_FIRECOIN_MAXLIMIT == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u60a8\u7684\u4ff1\u4e50\u90e8\u706b\u5e01\u5df2\u9ad8\u4e8e\u623f\u95f4\u6700\u4f4e\u9650\u5236", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_LONG_TIME_NOOPERATION == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u7531\u4e8e\u60a8\u957f\u65f6\u95f4\u672a\u64cd\u4f5c\u88ab\u8bf7\u79bb\u6e38\u620f", callback);
          } else if (E_ReasonKickout.REASON_KICKOUT_BARRIERMATCH_FAIL == reasonCode) {
            this.sendLogoutRoom();
            createClickTips("\u7531\u4e8e\u60a8\u95ef\u5173\u5931\u8d25\u88ab\u8bf7\u79bb\u6e38\u620f", callback);
          } else {
            this.sendLogoutRoom();
            createClickTips("\u672a\u5b9a\u4e49\u7684reasonCode = " + reasonCode, callback);
          }
        } else {
          GameSocket.isBRGame() || this.tableUI.removeUser(this.logicToViewSeatNo(deskStation));
          this.tableUI.onDeskUserCountChange();
        }
      },
      dealNotifyDeskUserChangedeskstation: function dealNotifyDeskUserChangedeskstation(deskStation) {
        this.tableUI.removeUser(this.logicToViewSeatNo(deskStation));
        var user = this.getUserByDeskStation(deskStation);
        user && user.userID == GameSocket.getMyInfo().userID && (GameSocket.getMyInfo().userStatus = E_UserStatus.USER_STATUS_WATCH);
      },
      getLeftReadyTime: function getLeftReadyTime() {
        return GameSocket.getLeftReadyTime();
      },
      setLeftReadyTime: function setLeftReadyTime(time) {
        GameSocket.setLeftReadyTime(time);
      },
      getCfgReadyTime: function getCfgReadyTime() {
        return GameSocket.getCfgReadyTime();
      },
      dealNotifyDeskIsAuto: function dealNotifyDeskIsAuto(user) {
        this.tableUI.updateUserTuoGuan(user);
      },
      dealNotifyDeskMagicExpress: function dealNotifyDeskMagicExpress(srcUser, targetUser, magicType) {
        var toUserID = targetUser.userID;
        var srcUserID = srcUser.userID;
        this.tableUI.playMagicExpress(srcUserID, toUserID, magicType);
        var MagicGold = USER_MAGICEXPRESSCOSTDIAMON;
        var MAGIC_GOLD = MagicGold[magicType - 1];
        MAGIC_GOLD = parseInt(MAGIC_GOLD + "");
        if (0 != MAGIC_GOLD) {
          var srcUserIndex = null;
          for (var k in this.tableUI.private_PlayerUiList) {
            var v = this.tableUI.private_PlayerUiList[k];
            v && v.user.userID == srcUserID && (srcUserIndex = k);
          }
          if (null != srcUserIndex) {
            var seatPlayerUI = this.tableUI.private_PlayerUiList[srcUserIndex];
            if (seatPlayerUI) {
              getFloatScore(seatPlayerUI.node, -MAGIC_GOLD);
              var curMoney = this.getUserByID(srcUserID).money - MAGIC_GOLD;
              this.getUserByID(srcUserID).money = curMoney;
            }
          } else {
            var othersPlayerNode = this.tableUI.getGameViewOhtersNode();
            if (othersPlayerNode) {
              getFloatScore(othersPlayerNode, -MAGIC_GOLD);
              this.getUserByID(srcUserID).money = this.getUserByID(srcUserID).money - MAGIC_GOLD;
            }
          }
        }
      },
      dealNotifyDeskSitFull: function dealNotifyDeskSitFull() {
        createTips("\u684c\u5b50\u5df2\u7ecf\u5750\u6ee1\u4e86");
      },
      dealNotifyDeskCanBegin: function dealNotifyDeskCanBegin() {
        this.tableUI.dealNotifyDeskCanBegin();
      },
      dealNotifyDeskCannotbegin: function dealNotifyDeskCannotbegin() {
        this.tableUI.dealNotifyDeskCannotbegin();
      },
      dealNotifyRecharge: function dealNotifyRecharge(info) {
        if (this.isVIPRoom()) {
          var btnName1 = "\u79bb\u5f00\u6e38\u620f";
          var _btnName3 = "\u7ee7\u7eed\u6e38\u620f";
          var msgCallback = function(btnName) {
            btnName1 == btnName && this.sendStand();
          }.bind(this);
          var msgObj = {};
          msgObj.msg = string.format("\n\u60a8\u7684\u706b\u5e01\u6570\u4e0d\u8db3\uff0c\u8bf7\u8054\u7cfb\u4ff1\u4e50\u90e8\u7fa4\u4e3b\u5145\u503c\u706b\u5e01\uff0c\u81f3\u5c11\u5145\u503c" + info.needGold + "\u706b\u5e01\u540e\u624d\u53ef\u4ee5\u7ee7\u7eed\u6e38\u620f");
          msgObj.btn1 = btnName1;
          msgObj.btn2 = _btnName3;
          msgObj.callbackFun = msgCallback;
          createMsgBox(msgObj);
        } else {
          var leftCallback = function() {
            this.sendStand();
          }.bind(this);
          this.tableUI.createBuyGoldLayer(info, leftCallback);
        }
      },
      dealNotifyDeskDissmissUserID: function dealNotifyDeskDissmissUserID(userIDList) {
        this.dissmissUserIDList = userIDList;
      }
    }, _cc$Class["dealNotifyDeskDissmissUserID"] = function dealNotifyDeskDissmissUserID(userIDList) {
      this.dissmissUserIDList = userIDList;
    }, _cc$Class.dealNotifyERRMsg = function dealNotifyERRMsg(msgType, notify) {
      if (tableIsEmpty(E_NOTIFY_MSG_TYPE)) return;
      for (var eMsgType in E_NOTIFY_MSG_TYPE) (msgType & E_NOTIFY_MSG_TYPE[eMsgType]) == E_NOTIFY_MSG_TYPE[eMsgType] && this.tableUI.dealNotifyERRMsg(E_NOTIFY_MSG_TYPE[eMsgType], notify);
    }, _cc$Class.getDissmissUserIDList = function getDissmissUserIDList(playerNum) {
      playerNum = playerNum || G_WAR_RECORD_PLAYER_NUM;
      var userIDList = {};
      for (var i = 0; i < playerNum; i++) {
        var data = this.dissmissUserIDList[i];
        userIDList[i] = data || 0;
      }
      return userIDList;
    }, _cc$Class.getGameRules = function getGameRules() {
      return this.gameRules ? this.gameRules : "";
    }, _cc$Class.getDeskUserCount = function getDeskUserCount() {
      return GameSocket.getDeskUserCount();
    }, _cc$Class.onDeskUserCountChange = function onDeskUserCountChange() {
      this.tableUI && this.tableUI.onDeskUserCountChange();
    }, _cc$Class.getDeskUserCountByUserList = function getDeskUserCountByUserList() {
      return null != GameSocket.getDeskUserList() ? GameSocket.getDeskUserList().length : 0;
    }, _cc$Class.getUserByIndex = function getUserByIndex(index) {
      for (var i = 0; i < GameSocket.getDeskUserList().length; i++) {
        var v = GameSocket.getDeskUserList()[i];
        if (i == index) return v;
      }
      return null;
    }, _cc$Class.makeChouMaDeskStation = function makeChouMaDeskStation() {
      var count = this.getDeskUserCount();
      var index = Math.random() * count + 1;
      var user = this.getUserByIndex(index);
      if (user) return user.deskStation;
      return 0;
    }, _cc$Class.backLobby = function backLobby() {
      var roomType = E_ROOM_TYPE.GOLD;
      this.isBuyRoom() || this.isPrivateRoom() || this.isVIPRoom() ? roomType = E_ROOM_TYPE.CARD : this.isGoldRoom() && (roomType = E_ROOM_TYPE.GOLD);
      LOOBBY_STATIC = false;
      cc.director.loadScene("lobby");
      LobbySocket.setTCPHeartCheckInterval(15);
    }, _cc$Class.dealGameStationResp = function dealGameStationResp(netMsg) {}, _cc$Class.dealGameMessage = function dealGameMessage(netMsg) {}, 
    _cc$Class.dealNotifyDeskGameYanCode = function dealNotifyDeskGameYanCode(netMsg) {}, 
    _cc$Class.clearUI = function clearUI() {}, _cc$Class.changeTableClearUI = function changeTableClearUI() {}, 
    _cc$Class.gameBeginClearUI = function gameBeginClearUI() {}, _cc$Class.showAllResultUI = function showAllResultUI() {
      this.backLobby();
    }, _cc$Class.onUpdateDeskUser = function onUpdateDeskUser(user) {}, _cc$Class.updateUserCount = function updateUserCount() {}, 
    _cc$Class.StandUserinfor = function StandUserinfor() {}, _cc$Class.setGameRuleInfo = function setGameRuleInfo() {}, 
    _cc$Class.isSitDown = function isSitDown(deskStation) {
      return false;
    }, _cc$Class.isPlayStatic = function isPlayStatic() {
      if (this.getGameStatus() == HZMJ_GameStation.GS_STATUS_PLAYING) return true;
      return !this.isMeReady();
    }, _cc$Class.onDestroy = function onDestroy() {
      this.unscheduleAllCallbacks();
    }, _cc$Class));
    cc._RF.pop();
  }, {
    LoginRoomLogic: "LoginRoomLogic"
  } ],
  GameManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6e2boucfZDlbhZSJdGdrlM", "GameManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var SG_BET_RANGE = [ "1-50", "5-100", "10-200", "20-500" ];
    var GamaManager = cc.Class({
      ctor: function ctor() {
        this.gameID = -1;
        this.ui = null;
        this.logic = null;
      },
      getRegistGameNameByGameID: function getRegistGameNameByGameID(gameID) {
        for (var _iterator = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step; !(_step = _iterator()).done; ) {
          var game = _step.value;
          if (game.id === gameID) return game.name;
        }
      },
      getGamePicPathByGameID: function getGamePicPathByGameID(gameID) {
        for (var item in G_REGIST_GAME_LIST) {
          var game = G_REGIST_GAME_LIST[item];
          if (game.id == gameID) return game.picName;
        }
        return "";
      },
      getGameSceneByGameID: function getGameSceneByGameID(gameID) {
        for (var _iterator2 = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step2; !(_step2 = _iterator2()).done; ) {
          var game = _step2.value;
          if (game.id === gameID) return game.sceneName;
        }
      },
      getGameIDByGameSceneName: function getGameIDByGameSceneName(sceneName) {
        for (var _iterator3 = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step3; !(_step3 = _iterator3()).done; ) {
          var game = _step3.value;
          if (game.sceneName === sceneName) return game.id;
        }
      },
      getGameIDByGameName: function getGameIDByGameName(gameName) {
        for (var _iterator4 = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step4; !(_step4 = _iterator4()).done; ) {
          var game = _step4.value;
          if (game.name === gameName) return game.id;
        }
      },
      init: function init() {
        this.gameID = -1;
        this.ui = null;
        this.logic = null;
      },
      setGameInfo: function setGameInfo(gameID, playInfo) {
        this.init();
        this.gameID = gameID;
        this.playInfo = playInfo;
      },
      setGame: function setGame() {
        console.log(">>>>>>setGamesetGamesetGame");
        if (this.ui && this.logic) {
          this.ui.initTableLogic(this.logic);
          if (this.playInfo) ; else {
            var roomID = RoomListManager.getRoomInfo().roomID;
            var checkPointsNum = UserInfoManager.getMyInfo().checkPointsNum || 0;
            var userID = UserInfoManager.getMyInfo().userID;
            var userToken = UserInfoManager.getMyInfo().userToken;
            var costType = UserInfoManager.getMyInfo().costType || 0;
            GameSocket.requestLoginRoom(roomID, userID, userToken, checkPointsNum, costType);
          }
          this.setUICallback(this.playInfo);
          this.setLogicCallback(this.playInfo);
        }
      },
      setUI: function setUI(ui, callback) {
        this.ui = ui;
        this.setUICallback = callback;
        this.setGame();
      },
      setLogic: function setLogic(logic, callback) {
        this.logic = logic;
        this.setLogicCallback = callback;
        this.setGame();
      },
      runGame: function runGame() {
        var sceneName = this.getGameSceneByGameID(this.gameID);
        createLoading("\u6e38\u620f\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e..", 80, true);
        cc.director.loadScene(sceneName);
      },
      getGameID: function getGameID() {
        return this.gameID;
      },
      getGameTypeByGameID: function getGameTypeByGameID(gameID) {
        for (var _iterator5 = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step5; !(_step5 = _iterator5()).done; ) {
          var game = _step5.value;
          if (game.id === gameID) return game.gameType;
        }
        return null;
      },
      getGamePathByGameID: function getGamePathByGameID(gameID) {
        for (var _iterator6 = _createForOfIteratorHelperLoose(G_REGIST_GAME_LIST), _step6; !(_step6 = _iterator6()).done; ) {
          var game = _step6.value;
          if (game.id === gameID) return game.path;
        }
        return null;
      },
      checkGameHotUpdate: function checkGameHotUpdate() {
        cc.log("\u68c0\u67e5\u6e38\u620f\u66f4\u65b0");
      },
      onGameUpdateSucceed: function onGameUpdateSucceed() {
        GameSocket.__enterGame();
      },
      setBetButtonImage: function setBetButtonImage(betButton, pos) {
        var img_touch = "gameCommonRes/chip/%s%simg_touch%s.png";
        var img_touch_gray = "gameCommonRes/chip/%s%simg_touch_gray%s.png";
        var typeName = "";
        var levelName = "";
        var roomInfo = GameSocket.getRoomInfo();
        if (roomInfo) {
          var gameType = this.getGameTypeByGameID(roomInfo.gameID);
          gameType == E_GameType.DW ? typeName = "dw" + G_MULTI_NUM + "/" : gameType == E_GameType.BR && (typeName = "br" + G_MULTI_NUM + "/");
          levelName = roomInfo.level + "/";
        }
        console.log(typeName + ">>>>>>>>roomInfo.level" + roomInfo.level);
        console.log(levelName + ">>>>>>>>roomInfo.level" + roomInfo.level);
      },
      setBetImage: function setBetImage(betImage, pos) {
        var img_touch = "gameCommonRes/chip/%s%simg_touch%s.png";
        var typeName = "";
        var levelName = "";
        var roomInfo = GameSocket.getRoomInfo();
        if (roomInfo) {
          var gameType = this.getGameTypeByGameID(roomInfo.gameID);
          gameType == E_GameType.DW ? typeName = string.format("dw%d/", G_MULTI_NUM) : gameType == E_GameType.BR && (typeName = string.format("br%d/", G_MULTI_NUM));
          console.log("levelNamelevelNamelevelName" + roomInfo.level);
        }
      },
      getGameLogic: function getGameLogic() {
        return this.logic;
      },
      getGameUI: function getGameUI() {
        return this.ui;
      },
      getGameTypeByJsonRule: function getGameTypeByJsonRule(gameID, jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        return this.getGameTypeByPlayMode(gameID, ruleTab.gameIdx);
      },
      getGameTypeByPlayMode: function getGameTypeByPlayMode(gameID, playMode) {
        return "\u7ecf\u5178\u73a9\u6cd5";
      },
      getDifenByPlayType: function getDifenByPlayType(value) {
        var textDescList = [ "10/20/30\n(5/10/15)", "30/40/50\n(10/20/30)", "30/50/70\n(10/20/30)", "50/80/100\n(20/30/40)" ];
        return textDescList[Number(value) - 1];
      },
      getJiaoFenByPlayType: function getJiaoFenByPlayType(value) {
        var textDescList = [ "(\u70e7\u5206)", "(\u7f34\u5206)" ];
        return textDescList[Number(value)];
      },
      getMPointByJsonRule: function getMPointByJsonRule(jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        return ruleTab.mPoint || 0;
      },
      getBPointByJsonRule: function getBPointByJsonRule(gameID, jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        if (30100108 == gameID) return SG_BET_RANGE[ruleTab.betv];
        return ruleTab.bPoint || 1;
      },
      getLPointByJsonRule: function getLPointByJsonRule(jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        return ruleTab.lPoint || 0;
      },
      getCCSLByJsonRule: function getCCSLByJsonRule(jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        return ruleTab.cCSL || 0;
      },
      getRoomTypeByJsonRule: function getRoomTypeByJsonRule(gameID, jsonRule) {
        var ruleTab = JSON.parse(jsonRule);
        return ruleTab.roomType || 1;
      },
      getRoomListRsJsonRule: function getRoomListRsJsonRule(jsonRule) {
        var rsStr = "";
        if (jsonRule) {
          var jsonStr = JSON.parse(jsonRule);
          2 == jsonStr.rs ? rsStr = "\u4e8c\u4eba" : 3 == jsonStr.rs ? rsStr = "\u4e09\u4eba" : 4 == jsonStr.rs && (rsStr = "\u56db\u4eba");
        }
        return rsStr;
      },
      getRoomListTimeJsonRule: function getRoomListTimeJsonRule(jsonRule) {
        var timeStr = "";
        if (jsonRule) {
          var jsonStr = JSON.parse(jsonRule);
          15 == jsonStr.count || 24 == jsonStr.count || 30 == jsonStr.count || 60 == jsonStr.count ? timeStr = jsonStr.count + "\u5206\u949f" : 8 != jsonStr.count && 16 != jsonStr.count || (timeStr = jsonStr.count + "\u5c40");
        }
        return timeStr;
      },
      getGameNameByGameID: function getGameNameByGameID(gameID) {
        var name = "";
        20161004 == gameID ? name = "\u8c61\u5c71" : 20211004 == gameID && (name = "\u897f\u5468");
        return name;
      },
      getRoomListTypeJsonRule: function getRoomListTypeJsonRule(jsonRule) {
        var TypeStr = "";
        if (jsonRule) {
          var jsonStr = JSON.parse(jsonRule);
          1 == jsonStr.model || 7 == jsonStr.model ? TypeStr = "\u6e0510\u6df78" : 2 == jsonStr.model || 8 == jsonStr.model ? TypeStr = "\u6e0512\u6df78" : 3 == jsonStr.model || 9 == jsonStr.model ? TypeStr = "\u6e0512\u6df710" : 4 == jsonStr.model || 10 == jsonStr.model ? TypeStr = "\u6e0514\u6df712" : 5 == jsonStr.model || 11 == jsonStr.model ? TypeStr = "\u6e0516\u6df714" : 6 != jsonStr.model && 12 != jsonStr.model || (TypeStr = "\u6e0518\u6df716");
        }
        return TypeStr;
      }
    });
    module.exports = GamaManager;
    cc._RF.pop();
  }, {} ],
  GameProtocolId: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "464c0BRJ4NH5riHcrw4rG62", "GameProtocolId");
    "use strict";
    window.MSG_MAIN_LOADER_LOGON = 500;
    window.MSG_ASS_LOADER_LOGON = 1;
    window.MSG_ASS_LOADER_LOGOUT = 2;
    window.MSG_ADD_LOADER_CHECK_LOGON = 3;
    window.MSG_MAIN_LOADER_ACTION = 501;
    window.MSG_ASS_LOADER_ACTION_SIT = 1;
    window.MSG_ASS_LOADER_ACTION_STAND = 2;
    window.MSG_ASS_LOADER_ACTION_MATCH_SIT = 3;
    window.MSG_ASS_LOADER_GAME_BEGIN = 5;
    window.MSG_ASS_LOADER_ACTION_CHANGE_DESKSTATION = 8;
    window.MSG_ASS_LOADER_ACTION_STAND_AND_WATCH = 9;
    window.MSG_MAIN_LOADER_FRAME = 502;
    window.MSG_ASS_LOADER_DESK_INFO = 1;
    window.MSG_ASS_LOADER_GAME_INFO = 2;
    window.MSG_ASS_LOADER_GAME_STATION = 3;
    window.MSG_ASS_LOADER_DESK_USERINFO = 4;
    window.MSG_ASS_LOADER_DESK_ONE_USERINFO = 5;
    window.MSG_ASS_LOADER_DESK_CHECKPOINT_INFO = 6;
    window.MSG_MAIN_LOADER_GAME = 503;
    window.MSG_ASS_LOADER_GAME_AGREE = 1;
    window.MSG_ASS_LOADER_GAME_AUTO = 2;
    window.MSG_ASS_LOADER_GAME_CANCEL_AUTO = 3;
    window.MSG_ASS_LOADER_GAME_MAGICEXPRESS = 4;
    window.MSG_ASS_LOADER_GAME_NOT_PROMPT = 5;
    window.MSG_MAIN_LOADER_DESKDISSMISS = 504;
    window.MSG_ASS_LOADER_REQ_DESKDISSMISS = 1;
    window.MSG_ASS_LOADER_ANSWER_DESKDISMISS = 2;
    window.MSG_MAIN_LOADER_NOTIFY = 505;
    window.MSG_NTF_LOADER_DESK_GAMEBEGIN = 1;
    window.MSG_NTF_LOADER_DESK_BASEINFO = 2;
    window.MSG_NTF_LOADER_DESK_DISMISS_OK = 3;
    window.MSG_NTF_LOADER_DESK_DISMISS_FAILED = 4;
    window.MSG_NTF_LOADER_DESK_ALL_USERINFO = 5;
    window.MSG_NTF_LOADER_DESK_DISSMISS_INFO = 6;
    window.MSG_NTF_LOADER_DESK_TALK = 7;
    window.MSG_NTF_LOADER_DESK_VOICE = 8;
    window.MSG_NTF_LOADER_DESK_GAMEFINISH = 9;
    window.MSG_NTF_LOADER_DESK_GRADE = 10;
    window.MSG_NTF_LOADER_DESK_MONEY = 11;
    window.MSG_NTF_LOADER_DESK_LEFT_WAITAGREE_TIME = 12;
    window.MSG_NTF_LOADER_DESK_ISAUTO = 13;
    window.MSG_NTF_LOADER_DESK_MAGICEXPRESS = 14;
    window.MSG_NTF_LOADER_DESK_SITFULL = 15;
    window.MSG_NTF_LOADER_DESK_CANBEGIN = 16;
    window.MSG_NTF_LOADER_DESK_STOP_JOIN = 17;
    window.MSG_NTF_LOADER_RECHARGE = 18;
    window.MSG_NTF_LOADER_DESK_HUNDRED_ALL_USER = 19;
    window.MSG_NTF_LOADER_DESK_DISMISS_USERID = 20;
    window.MSG_NTF_LOADER_ERR_MSG = 21;
    window.MSG_NTF_LOADER_DESK_JEWELS = 22;
    window.MSG_NTF_LOADER_DESK_NO_USER = 23;
    window.MSG_NTF_LOADER_DESK_MATCH_STATUS = 24;
    window.MSG_NTF_LOADER_DESK_FINISH_MATCH = 25;
    window.MSG_NTF_LOADER_MATCH_RANK = 26;
    window.MSG_NTF_LOADER_DESK_MATCH_GRADE = 27;
    window.MSG_NTF_LOADER_DESK_RANKMATCH_LEVEL = 28;
    window.MSG_NTF_LOADER_DESK_USEREXP = 29;
    window.MSG_NTF_LOADER_DESK_USER_CHECKPOINT = 30;
    window.MSG_NTF_LOADER_DESK_USER_CHECKPOINT_END = 31;
    window.MSG_NTF_LOADER_RANDOM_CHANGE_SEAT = 36;
    window.MSG_NTF_LOADER_TIMEOUT_CANNOT_OUT = 33;
    window.MSG_NTF_LOADER_DISCONNECT_TIMEOUT = 34;
    window.MSG_NTF_LOADER_WILL_DISSOLVE_DESK = 35;
    window.MSG_NTF_LOADER_DESK_CANNOTBEGIN = 32;
    window.MSG_MAIN_LOADER_NOTIFY_USER = 506;
    window.MSG_NTF_LOADER_DESK_USER_INFO = 1;
    window.MSG_NTF_LOADER_DESK_USER_SIT = 2;
    window.MSG_NTF_LOADER_DESK_USER_AGREE = 3;
    window.MSG_NTF_LOADER_DESK_USER_LEFT = 4;
    window.MSG_NTF_LOADER_DESK_USER_OFFLINE = 5;
    window.MSG_NTF_LOADER_DESK_USER_CHANGEDESKSTATION = 8;
    window.MSG_NTF_LOADER_DESK_USER_STANDANDWATCH = 9;
    window.MSG_NTF_LOADER_DESK_USER_LOGONOROUTROOM = 10;
    window.MSG_NTF_LOADER_DESK_USER_IS_TOURIST = 11;
    window.MSG_MAIN_LOADER_VOICEANDTALK = 507;
    window.MSG_ASS_LOADER_TALK = 1;
    window.MSG_ASS_LOADER_VOICE = 2;
    window.MSG_MAIN_LOADER_RESOURCE_CHANGE = 508;
    window.MSG_MAIN_LOADER_MATCH = 509;
    window.MSG_ASS_LOADER_MATCH_ALL_DESK_DATA = 1;
    window.MSG_ASS_LOADER_MATCH_ENTER_WATCH_DESK = 2;
    window.MSG_ASS_LOADER_MATCH_QUIT_WATCH_DESK = 3;
    window.MSG_ASS_LOADER_MATCH_RANK = 4;
    window.MGS_ASS_LOADER_GET_RANK = 5;
    window.MSG_ASS_LOADER_REVIVE_USER = 6;
    window.MSG_MAIN_LOADER_VCODE = 1e3;
    window.MSG_ASS_LOADER_DESK_VCODE_RET = 1;
    window.MSG_ASS_LOADER_DESK_GET_VCODE_REC = 2;
    window.MSG_ASS_LOADER_DESK_GET_VCODE_REC_USER = 3;
    window.MSG_NTF_LOADER_DESK_VCODE = 4;
    cc._RF.pop();
  }, {} ],
  GameRecordLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6f54b3YnNPgJlcmyr8oUxH", "GameRecordLogic");
    "use strict";
    var API = "record";
    cc.Class({
      extends: require("LogicBasis"),
      _Resolve_OneGradeSimpleInfo: function _Resolve_OneGradeSimpleInfo(netMsg) {
        var struct = {};
        struct.id = netMsg.popINT();
        struct.deskPasswd = netMsg.popINT();
        struct.time = netMsg.popINT();
        struct.gameCount = netMsg.popINT();
        struct.maxGameCount = netMsg.popINT();
        struct.score = netMsg.popINT();
        struct.gameRules = netMsg.readString(256);
        return struct;
      },
      requestSimpleGradeList: function requestSimpleGradeList(gameID, callback, time) {
        time = time || 0;
        var cacheData = GameRecordManager.getSimpleGradeList(gameID);
        cacheData.length > 0 && 0 == time && GameRecordManager.clearSimpleGradeList(gameID);
        var actionName = "simpleGradeList";
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          gameID: gameID
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var listData = jsonData.data;
            listData.sort(function(a, b) {
              return a.time - b.time;
            });
            GameRecordManager.pushSimpleGradeList(gameID, listData);
            callback && callback(GameRecordManager.getSimpleGradeList(gameID));
          } else createTips(jsonData.msg);
        };
        MyHttpRequest.doRequest(args);
      },
      requestGradeList: function requestGradeList(gameID, id, callback) {
        var cacheData = GameRecordManager.getGradeList(gameID, id);
        if (!tableIsEmpty(cacheData)) {
          cc.log("\u5b58\u5728\u7f13\u5b58\u6570\u636e", GameRecordManager.getGradeList(gameID, id));
          callback(cacheData);
          return;
        }
        var actionName = "gradeList";
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          gradeID: id,
          userID: this.getUserID()
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var listData = jsonData.data;
            listData.sort(function(a, b) {
              return a.time - b.time;
            });
            GameRecordManager.pushGradeList(gameID, id, listData);
            callback(GameRecordManager.getGradeList(gameID, id));
          } else createTips(jsonData.msg);
        };
        args.requestDesc = "\u6839\u636e\u6218\u7ee9ID\u83b7\u53d6\u5355\u5c40\u6218\u7ee9\u5217\u8868...";
        MyHttpRequest.doRequest(args);
      },
      requestSimpleGradeInfo: function requestSimpleGradeInfo(gameID, id, callback) {
        var cacheData = GameRecordManager.getSimpleGradeInfo(gameID);
        if (null != cacheData) return callback(cacheData);
        var actionName = "simpleGradeInfo";
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          gradeID: id
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var keyList = [ "userID", "score" ];
            var info = tools.getSplitData(jsonData.data.userInfoList, keyList);
            GameRecordManager.pushSimpleGradeInfo(gameID, id, info);
            callback(info);
          } else createTips(jsonData.msg);
        };
        args.requestDesc = "\u83b7\u53d6\u5927\u7ed3\u7b97\u6218\u7ee9\u8be6\u60c5...";
        MyHttpRequest.doRequest(args);
      },
      requestGradeInfo: function requestGradeInfo(gameID, id, gradeID, callback) {
        var cacheData = GameRecordManager.getGradeInfo(gameID, id, gradeID);
        if (!tableIsEmpty(cacheData)) {
          cc.log("\u5b58\u5728\u7f13\u5b58\u6570\u636e");
          callback(cacheData);
          return;
        }
        var actionName = "gradeInfo";
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          gradeID: gradeID
        };
        args.fCallback = function() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var keyList = [ "userID", "score" ];
            var info = tools.getSplitData(jsonData.data.userInfoList, keyList);
            GameRecordManager.pushGradeInfo(gameID, id, gradeID, jsonData.data);
            if (callback) {
              info = GameRecordManager.getGradeInfo(gameID, id, gradeID);
              callback(info);
            }
          } else createTips(jsonData.msg);
        };
        args.requestDesc = "\u83b7\u53d6\u5c0f\u7ed3\u7b97\u6218\u7ee9\u8be6\u60c5...";
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  GameRecordManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "04edf5qv6VFJI45cGgCjers", "GameRecordManager");
    "use strict";
    module.exports = cc.Class({
      ctor: function ctor() {
        this.simpleGradeList = {};
        this.maxSimpleGradeCount = 30;
      },
      pushSimpleGradeList: function pushSimpleGradeList(gameID, simpleGradeList) {
        var _this = this;
        simpleGradeList.forEach(function(simpleGrade) {
          _this.addSimpleGrade(gameID, simpleGrade);
        });
      },
      addSimpleGrade: function addSimpleGrade(gameID, simpleGrade) {
        this.simpleGradeList[gameID] || (this.simpleGradeList[gameID] = []);
        this.simpleGradeList[gameID].forEach(function(ele) {
          if (ele.id == simpleGrade.id) return;
        });
        this.simpleGradeList[gameID].push(simpleGrade);
      },
      getSimpleGradeList: function getSimpleGradeList(gameID) {
        var simpleGradeList = this.simpleGradeList[gameID];
        if (!simpleGradeList) return [];
        simpleGradeList.sort(function(dataA, dataB) {
          return dataA.time > dataB.time ? -1 : 1;
        });
        return simpleGradeList;
      },
      getSimpleGradeListTime: function getSimpleGradeListTime(gameID) {
        var simpleGradeList = this.simpleGradeList[gameID];
        if (0 == simpleGradeList.length) return 0;
        if (simpleGradeList.length >= this.maxSimpleGradeCount) return 0;
        simpleGradeList.sort(function(dataA, dataB) {
          return dataA > dataB ? -1 : 1;
        });
        return simpleGradeList[simpleGradeList.length].time;
      },
      getSimpleGradeInfo: function getSimpleGradeInfo(gameID, id) {
        var self = this;
        for (var i in self.simpleGradeList[gameID]) if (self.simpleGradeList[gameID][i].id == id) return self.simpleGradeList[gameID][i];
      },
      pushSimpleGradeInfo: function pushSimpleGradeInfo(gameID, id, simpleGradeInfo) {
        this.simpleGradeList[gameID].forEach(function(ele) {
          ele.id == id && (ele.simpleGradeInfo = simpleGradeInfo);
        });
      },
      getGradeList: function getGradeList(gameID, id) {
        var self = this;
        for (var i in self.simpleGradeList[gameID]) {
          cc.log("---------getGradeList:", self.simpleGradeList[gameID][i]);
          if (self.simpleGradeList[gameID][i].id == id) {
            var gradeList = self.simpleGradeList[gameID][i].gradeList;
            var sortFunction = function sortFunction(gradeA, gradeB) {
              return gradeA.time < gradeB.time;
            };
            tableIsEmpty(gradeList) || gradeList.sort(sortFunction);
            return gradeList;
          }
        }
        return null;
      },
      pushGradeList: function pushGradeList(gameID, id, gradeList) {
        var self = this;
        for (var i in self.simpleGradeList[gameID]) if (self.simpleGradeList[gameID][i].id == id) {
          self.simpleGradeList[gameID][i].gradeList = gradeList;
          break;
        }
      },
      getGradeInfo: function getGradeInfo(gameID, id, gradeID) {
        var self = this;
        for (var i in self.simpleGradeList[gameID]) if (self.simpleGradeList[gameID][i].id == id) {
          for (var j in self.simpleGradeList[gameID][i].gradeList) if (self.simpleGradeList[gameID][i].gradeList[j].gradeID == gradeID) return self.simpleGradeList[gameID][i].gradeList[j].gradeInfo;
          break;
        }
        return null;
      },
      pushGradeInfo: function pushGradeInfo(gameID, id, gradeID, gradeInfo) {
        var self = this;
        for (var i in self.simpleGradeList[gameID]) if (self.simpleGradeList[gameID][i].id == id) {
          for (var j in self.simpleGradeList[gameID][i].gradeList) if (self.simpleGradeList[gameID][i].gradeList[j].gradeID == gradeID) {
            self.simpleGradeList[gameID][i].gradeList[j].gradeInfo = gradeInfo;
            if ("string" == typeof gradeInfo.userInfoList) {
              var keyList = [ "userID", "score" ];
              self.simpleGradeList[gameID][i].gradeList[j].gradeInfo.userInfoList = tools.getSplitData(gradeInfo.userInfoList, keyList);
            }
            break;
          }
          break;
        }
      },
      clearSimpleGradeList: function clearSimpleGradeList(gameID) {
        var self = this;
        self.simpleGradeList[gameID] = [];
      },
      requestReplayPlayInfo: function requestReplayPlayInfo(gameID, fileName, callback) {
        var fCallback = function fCallback() {
          callback(null);
        };
        var sCallback = function sCallback(response) {
          var playInfo = response;
          callback && callback(playInfo);
        };
        var args = {};
        args.url = "http://cdn.tutenggame.com/back/" + gameID + "/" + fileName + ".json";
        args.params = {};
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = E_REQUEST_TYPE.GET;
        MyHttpRequest.doRequest(args);
      },
      requestReplayPlayInfoByGameList: function requestReplayPlayInfoByGameList(gameList, fileName, callback) {
        var self = this;
        var index = 1;
        var gameID = gameList[index];
        var myCallback = function myCallback(playInfo) {
          if (playInfo) callback(playInfo); else if (gameList.length == index) callback(playInfo); else {
            index += 1;
            gameID = gameList[index];
            self.requestReplayPlayInfo(gameID, fileName, myCallback);
          }
        };
        self.requestReplayPlayInfo(gameID, fileName, myCallback);
      }
    });
    cc._RF.pop();
  }, {} ],
  GameRuletLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4554bTqUVZCT4kPwJfTFCmV", "GameRuletLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        btn_gameCensus: cc.Button,
        btn_gameRules: cc.Button,
        LayoutgameCensus: cc.Node,
        LayoutgameRules: cc.Node,
        Text_GameRules: cc.Label,
        Node_GameRules: [ cc.Node ]
      },
      onLoad: function onLoad() {
        this.init(2);
        if (1 == this.m_type) {
          this.btn_gameCensus.interactable = false;
          this.btn_gameRules.interactable = true;
          this.LayoutgameCensus.active = true;
          this.LayoutgameRules.active = false;
        } else {
          this.btn_gameCensus.interactable = true;
          this.btn_gameRules.interactable = false;
          this.LayoutgameCensus.active = false;
          this.LayoutgameRules.active = true;
        }
      },
      init: function init(type) {
        this.m_type = type;
        var Infor = "";
        var szGameRulesRs = RoomListManager.getCurRuleInfo();
        if ("" == szGameRulesRs) return;
        var jsonStr = JSON.parse(szGameRulesRs);
        this.Text_GameRules.getComponent(cc.Label).string = Infor + "\u73a9\u6cd5\u89c4\u5219\uff01";
      },
      doButton_Event: function doButton_Event(event, param) {
        var layerName;
        switch (param) {
         case "btn_gameCensus":
          this.btn_gameCensus.interactable = false;
          this.btn_gameRules.interactable = true;
          this.LayoutgameCensus.active = true;
          this.LayoutgameRules.active = false;
          break;

         case "btn_GameRules":
          this.btn_gameCensus.interactable = true;
          this.btn_gameRules.interactable = false;
          this.LayoutgameCensus.active = false;
          this.LayoutgameRules.active = true;
        }
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameScenceRulesLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b55f1tfLZxFfauM+Wb1+CJW", "GameScenceRulesLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        gameRuleSprite: cc.Sprite
      },
      init: function init(gamePicPath) {
        var _this = this;
        cc.loader.loadRes("lobby/ui/GameRule/Rule/" + gamePicPath, cc.SpriteFrame, function(err, sf) {
          err ? cc.log("\u6ca1\u6709\u627e\u5230\u5f53\u524d\u7684\u5b50\u6e38\u620f\u89c4\u5219\u56fe", gamePicPath) : _this.gameRuleSprite.spriteFrame = sf;
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameSetLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b3ecMRTm1OeJ/d2IeSvgtr", "GameSetLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        outCard_Node: [ cc.Node ],
        soundType_Node: [ cc.Node ],
        tingcard_Node: [ cc.Node ],
        cardcolor_Node: [ cc.Node ],
        gameback_Node: [ cc.Node ]
      },
      onEnable: function onEnable() {
        var outCard_sound = Number(cc.sys.localStorage.getItem(G_OUTCARD_SOUND) || 2);
        var sound_type = Number(cc.sys.localStorage.getItem(G_SOUND_TYPE) || 3);
        if (3 == sound_type) {
          var LobbyLogic = new (require("LobbyLogic"))();
          var myInfo = LobbyLogic.getMyInfo();
          sound_type = 1 == myInfo.sex ? 0 : 1;
        }
        var ting_card = Number(cc.sys.localStorage.getItem(G_TING_CARD) || 0);
        var card_color = Number(cc.sys.localStorage.getItem(G_CARD_COLOR) || 0);
        var game_back = Number(cc.sys.localStorage.getItem(G_GAME_BACK) || 0);
        this.outCard_Node[outCard_sound] && (this.outCard_Node[outCard_sound].getComponent(cc.Toggle).isChecked = true);
        this.soundType_Node[sound_type] && (this.soundType_Node[sound_type].getComponent(cc.Toggle).isChecked = true);
        this.tingcard_Node[ting_card] && (this.tingcard_Node[ting_card].getComponent(cc.Toggle).isChecked = true);
        this.cardcolor_Node[card_color] && (this.cardcolor_Node[card_color].getComponent(cc.Toggle).isChecked = true);
        this.gameback_Node[game_back] && (this.gameback_Node[game_back].getComponent(cc.Toggle).isChecked = true);
      },
      init: function init(callback, node) {
        this._callback = callback;
        this._GameViewBase = node;
      },
      doButtonClick: function doButtonClick(target, data) {
        if (target.isChecked) switch (data) {
         case "outCard_1":
          cc.sys.localStorage.setItem(G_OUTCARD_SOUND, 2);
          break;

         case "outCard_2":
          cc.sys.localStorage.setItem(G_OUTCARD_SOUND, 1);
          break;

         case "Sound_1":
          cc.sys.localStorage.setItem(G_SOUND_TYPE, 0);
          break;

         case "Sound_2":
          cc.sys.localStorage.setItem(G_SOUND_TYPE, 1);
          break;

         case "tingCard_1":
          cc.sys.localStorage.setItem(G_TING_CARD, 0);
          break;

         case "tingCard_2":
          cc.sys.localStorage.setItem(G_TING_CARD, 1);
          break;

         case "Card_1":
          cc.sys.localStorage.setItem(G_CARD_COLOR, 0);
          break;

         case "Card_2":
          cc.sys.localStorage.setItem(G_CARD_COLOR, 1);
          break;

         case "bg_1":
          this._callback && this._callback(0);
          cc.sys.localStorage.setItem(G_GAME_BACK, 0);
          break;

         case "bg_2":
          this._callback && this._callback(1);
          cc.sys.localStorage.setItem(G_GAME_BACK, 1);
          break;

         case "bg_3":
          this._callback && this._callback(2);
          cc.sys.localStorage.setItem(G_GAME_BACK, 2);
          break;

         case "bg_4":
          this._callback && this._callback(3);
          cc.sys.localStorage.setItem(G_GAME_BACK, 3);
        }
      },
      doButtonCloseClick: function doButtonCloseClick() {
        this.removeLayer();
      },
      removeLayer: function removeLayer() {
        this.node.parent = null;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  GameSettingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75f510XzjFGKo60lff/kh3c", "GameSettingLayer");
    "use strict";
    var _BUTTON_TAG_BIGEN = 100;
    var _BUTTON_KEY = [ "Button_Show" ];
    var _BUTTON_TAG = {};
    for (var i in _BUTTON_KEY) {
      var v = _BUTTON_KEY[i];
      _BUTTON_TAG[v] = i + _BUTTON_TAG_BIGEN;
    }
    var FUN_EXIT = 1;
    var FUN_SETUP = 2;
    var FUN_RULE = 3;
    var FUN_ERROR = 4;
    var FUN_SET = 5;
    var FUN_DISMISS = 6;
    var FUN_TUO = 7;
    var FUN_WANFA = 8;
    var goldRoomSetTab = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u6e38\u620f\u6258\u7ba1",
      picName: "btn_tuo",
      funKey: FUN_TUO
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    var goldRoomSetTab2 = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    var goldRoomSetTab3 = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    var goldRoomSetTab4 = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u6e38\u620f\u6258\u7ba1",
      picName: "btn_tuo",
      funKey: FUN_TUO
    } ];
    var cardRoomSetTab2 = [ {
      name: "\u8fd4\u56de\u5927\u5385",
      picName: "btn_exit",
      funKey: FUN_EXIT
    }, {
      name: "\u7ad9\u8d77\u56f4\u89c2",
      picName: "btn_setup",
      funKey: FUN_SETUP
    }, {
      name: "\u6e38\u620f\u89c4\u5219",
      picName: "btn_rule",
      funKey: FUN_RULE
    }, {
      name: "\u4e0a\u62a5\u9519\u8bef",
      picName: "btn_error",
      funKey: FUN_ERROR
    }, {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u89e3\u6563\u623f\u95f4",
      picName: "btn_dismiss",
      funKey: FUN_DISMISS
    } ];
    var cardRoomSetTab = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u6e38\u620f\u6258\u7ba1",
      picName: "btn_tuo",
      funKey: FUN_TUO
    }, {
      name: "\u89e3\u6563\u623f\u95f4",
      picName: "btn_dismiss",
      funKey: FUN_DISMISS
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    var privateRoomSetTab = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u6e38\u620f\u73a9\u6cd5",
      picName: "btn_wanfa",
      funKey: FUN_WANFA
    }, {
      name: "\u6e38\u620f\u6258\u7ba1",
      picName: "btn_tuo",
      funKey: FUN_TUO
    }, {
      name: "\u89e3\u6563\u623f\u95f4",
      picName: "btn_dismiss",
      funKey: FUN_DISMISS
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    var matchRoomSetTab = [ {
      name: "\u6e38\u620f\u8bbe\u7f6e",
      picName: "btn_set",
      funKey: FUN_SET
    }, {
      name: "\u6e38\u620f\u6258\u7ba1",
      picName: "btn_tuo",
      funKey: FUN_TUO
    }, {
      name: "\u89e3\u6563\u623f\u95f4",
      picName: "btn_dismiss",
      funKey: FUN_DISMISS
    }, {
      name: "\u79bb\u5f00\u623f\u95f4",
      picName: "btn_exit",
      funKey: FUN_EXIT
    } ];
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        gameSettingTab: cc.Prefab,
        btn_exit: cc.SpriteFrame,
        btn_tuo: cc.SpriteFrame,
        btn_setup: cc.SpriteFrame,
        btn_rule: cc.SpriteFrame,
        btn_error: cc.SpriteFrame,
        btn_set: cc.SpriteFrame,
        btn_dismiss: cc.SpriteFrame
      },
      onLoad: function onLoad() {},
      init: function init(delegete, roomType, isCanTuoGuan, showBtnRes) {
        this._delegete = delegete;
        this._roomType = roomType;
        this._isCanTuoGuan = isCanTuoGuan;
        this._showBtnRes = showBtnRes;
        this.isShow = null;
        this.studio = {
          Layer: null,
          Image_Bg_Main: null,
          ListView_Set: null,
          Panel_Set: null,
          Button_Show: null,
          btn_close: null
        };
        this.initUI();
      },
      initUI: function initUI() {
        this.initStudioUI();
        this.initUIEventListener();
        this.initUIData();
      },
      initStudioUI: function initStudioUI() {
        var rotate = this.node.getChildByName("rotate");
        if (rotate) {
          this.studio.Image_Bg_Main = rotate.getChildByName("Image_Bg_Main");
          this.studio.Button_Show = rotate.getChildByName("Button_Show");
          this.studio.btn_close = rotate.getChildByName("btn_close");
          this.studio.ListView_Set = this.studio.Image_Bg_Main.getChildByName("ListView_Set");
          return;
        }
        this.studio.Image_Bg_Main = this.node.getChildByName("Image_Bg_Main");
        this.studio.Button_Show = this.node.getChildByName("Button_Show");
        this.studio.btn_close = this.node.getChildByName("btn_close");
        this.studio.bg = this.studio.Image_Bg_Main.getChildByName("bg");
        this.studio.ListView_Set = this.studio.Image_Bg_Main.getChildByName("ListView_Set");
      },
      initUIEventListener: function initUIEventListener() {
        var onTouchCallback = function(eventTouch) {
          var tag = eventTouch.target.name;
          this.playClickEffect();
          "Button_Show" == tag ? this.doButtonShowClick(eventTouch) : cc.log(tools.stringFormat("\u672a\u5b9a\u4e49\u7684TAG = {0}", tag));
        }.bind(this);
        for (var k in _BUTTON_TAG) this.studio[k].on("touchend", onTouchCallback);
      },
      initUIData: function initUIData() {
        this.setShowUI(false);
        this.initSetListView();
      },
      setShowUI: function setShowUI(isShow, event) {
        this.isShow = isShow;
        if (this.isShow) {
          this.studio.btn_close.active = true;
          this.studio.Button_Show.getComponent(cc.Button).interactable = false;
          this.studio.Image_Bg_Main.active = true;
          if (this.Button_Setup && this.Imge_Item) if (this._delegete.isPlayStatic()) {
            this.Button_Setup.active = false;
            this.Imge_Item.active = true;
          } else {
            this.Button_Setup.active = true;
            this.Imge_Item.active = false;
          }
        } else {
          this.studio.Button_Show.getComponent(cc.Button).interactable = true;
          this.studio.Image_Bg_Main.active = false;
          this.studio.btn_close.active = false;
        }
        event && event.stopPropagation();
        this._showBtnRes && this.studio.Button_Show.getComponent(cc.Button).loadTextures(this._showBtnRes.down, "", this._showBtnRes.up);
      },
      initSetListView: function initSetListView(isShowLeaveRoom) {
        void 0 === isShowLeaveRoom && (isShowLeaveRoom = true);
        var onSetTouchCallback = function(eventType, listView, item, data, pos) {
          this.setShowUI(false);
          data.funKey == FUN_SET ? this._delegete.setBtnTouchEnded() : data.funKey == FUN_DISMISS ? this._delegete.dismissBtnTouchEnded() : data.funKey == FUN_EXIT ? this._delegete.exitBtnTouchEnded() : data.funKey == FUN_SETUP ? this._delegete.StandandWatchtBtnTouchEnded() : data.funKey == FUN_TUO ? this._delegete.tuoBtnTouchEnded() : data.funKey == FUN_WANFA ? this._delegete.wanfaBtnTouchEnded() : data.funKey == FUN_RULE ? this._delegete.RulesBtnTouchEnded() : data.funKey == FUN_ERROR ? this._delegete.setBtnTouchFeedLayer() : cc.log("\u672a\u5b9a\u4e49\u7684\u65b9\u6cd5 funKey = {0} ", data.funKey);
        }.bind(this);
        var onAddSetCallback = function(listView, item, data, pos) {
          var buttonSpriteFrame = this[data.picName];
          var onSetTouchEvent = function(eventType) {
            this.playClickEffect();
            onSetTouchCallback(eventType, listView, item, data, pos);
          }.bind(this);
          var Button_Item = item.getChildByName("Button_Item");
          buttonSpriteFrame && (Button_Item.getComponent(cc.Sprite).spriteFrame = buttonSpriteFrame);
          Button_Item.on("touchend", onSetTouchEvent);
          if (data.funKey == FUN_SETUP) {
            this.Button_Setup = Button_Item;
            this.Imge_Item = item.getChildByName("img");
          }
        }.bind(this);
        var setTab = goldRoomSetTab;
        var canTuoGuan = true;
        if (!this._isCanTuoGuan) return;
        if (this._roomType == E_ROOM_TYPE.GOLD) {
          setTab = goldRoomSetTab2;
          canTuoGuan = this._isCanTuoGuan.gold;
        } else if (this._roomType == E_ROOM_TYPE.BARRIERMATCH) {
          setTab = goldRoomSetTab3;
          canTuoGuan = this._isCanTuoGuan.barriermatch;
        } else if (this._roomType == E_ROOM_TYPE.REALMATCH) {
          setTab = goldRoomSetTab4;
          canTuoGuan = this._isCanTuoGuan.match;
        } else if (this._roomType == E_ROOM_TYPE.CARD) {
          setTab = cardRoomSetTab2;
          canTuoGuan = this._isCanTuoGuan.card;
        } else if (this._roomType == E_ROOM_TYPE.PRIVATE) {
          setTab = privateRoomSetTab;
          canTuoGuan = this._isCanTuoGuan["private"];
        } else if (this._roomType == E_ROOM_TYPE.MATCH) {
          setTab = matchRoomSetTab;
          canTuoGuan = this._isCanTuoGuan.match;
        }
        var tempSetTab = [];
        F_InitListView(0 == tempSetTab.length ? setTab : tempSetTab, onAddSetCallback, this.studio.ListView_Set, this.gameSettingTab, 1);
      },
      doButtonShowClick: function doButtonShowClick(event) {
        this.setShowUI(!this.isShow, event);
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      },
      IsonTouchEnded: function IsonTouchEnded(event) {
        this.isShow && this.setShowUI(false);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameSettingTab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6963JO1aBKHbWbwmI8WYPm", "GameSettingTab");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      init: function init() {},
      onLoad: function onLoad() {
        this.button = this.node.getComponet(cc.Button);
        this.sprite = this.node.getComponet(cc.Sprite);
      }
    });
    cc._RF.pop();
  }, {} ],
  GameSocket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37ad7fdRctBQ5F041Vz65yq", "GameSocket");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var GameSocket = cc.Class({
      extends: require("TcpClient"),
      ctor: function ctor() {
        this.name = "GameSocket";
        this._connectResult = null;
        this._deskUserList = [];
        this.deskInfo = null;
      },
      clear: function clear() {
        this._super();
        this._connectResult = null;
        this._deskUserList = [];
        this.deskInfo = null;
        this.removeAllNetCallback();
      },
      connectService: function connectService(connectResult) {
        this._connectResult = connectResult;
        var ip = G_IS_LOADER_STATIC_DATA ? NetConfig.getAgentServer() : this.getRoomInfo().ip;
        var port = NetConfig.getServerPort();
        var sendport = this.getRoomInfo().port;
        ip = NetConfig.getAgentServer();
        this._super(ip, port, sendport, this.CGameSocket_onSocketMsg.bind(this));
      },
      onConnectSuccess: function onConnectSuccess() {
        this._super();
      },
      onConnectFailed: function onConnectFailed() {
        this["super"]();
        if (this._connectResult) {
          removeLoading();
          createTips(GlobalError.getErrorStr(GlobalError.ERROR_GAME_CONNECT_FAILED));
          this._connectResult(false);
          this._connectResult = null;
        }
      },
      onDisconnect: function onDisconnect() {
        var runningScene = cc.director.getScene();
        createRepeatConnectLayer(runningScene);
      },
      onConnectMessage: function onConnectMessage(netMsg) {
        this._super(netMsg);
        if (this._connectResult) {
          this._connectResult(true);
          this._connectResult = null;
        }
      },
      __updateDeskUser: function __updateDeskUser(user) {
        console.log("_updateDeskUser ");
        var size = this._deskUserList.length;
        "undefined" == typeof size ? console.log("\u65e0 ") : console.log("\u6709 ");
        console.log("__updateDeskUser " + size);
        for (var i = 0; i < this._deskUserList.length; i++) {
          var deskUser = this._deskUserList[i];
          if (deskUser.userID == user.userID) {
            this._deskUserList[i] = user;
            return;
          }
        }
        this._deskUserList.push(user);
        this.getGameLogic() && this.getGameLogic().updateUserCount();
      },
      __removeDeskUser: function __removeDeskUser(userID) {
        for (var i = this._deskUserList.length - 1; i >= 0; i--) if (this._deskUserList[i].userID == userID) {
          this.__setDeskUserList[i] = null;
          console.log(JSON.stringify(this._deskUserList[i]) + ">>>\u7528\u6237\u6570\u636e\u8fdb\u884c\u79fb\u9664" + this._deskUserList[i].userID + ">>>" + i);
          this._deskUserList.splice(i, 1);
          break;
        }
        this.getGameLogic() && this.getGameLogic().updateUserCount();
      },
      __removeAllDeskUser: function __removeAllDeskUser() {
        this._deskUserList = [];
      },
      getUserByID: function getUserByID(userID) {
        for (var i = 0; i < this._deskUserList.length; i++) {
          var deskUser = this._deskUserList[i];
          if (userID == deskUser.userID) return deskUser;
        }
        return null;
      },
      makeAllUserDirty: function makeAllUserDirty() {
        for (var i = 0; i < this._deskUserList.length; i++) {
          var deskUser = this._deskUserList[i];
          this.makeUserDirty(deskUser.userID);
        }
      },
      makeUserDirty: function makeUserDirty(userID) {
        for (var i = 0; i < this._deskUserList.length; i++) {
          var deskUser = this._deskUserList[i];
          if (userID === deskUser.userID) {
            this._deskUserList[i].isNotAll = true;
            break;
          }
        }
      },
      isBuyRoom: function isBuyRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.CARD;
      },
      isGoldRoom: function isGoldRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.GOLD;
      },
      isTableRoom: function isTableRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.TABLE;
      },
      isPrivateRoom: function isPrivateRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.PRIVATE;
      },
      isMatchRoom: function isMatchRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.REALMATCH;
      },
      isBarrierMatchRoom: function isBarrierMatchRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.BARRIERMATCH;
      },
      isRankMatchRoom: function isRankMatchRoom() {
        return this.getRoomInfo().sort == E_ROOM_SORT.RANKMATCH;
      },
      isCheckPointRoom: function isCheckPointRoom() {
        return this.getRoomInfo().sort == E_ROOM_SORT.CHECKPOINTMATCH;
      },
      isVIPRoom: function isVIPRoom() {
        return this.getRoomInfo().type == E_ROOM_TYPE.MATCH;
      },
      isBRGame: function isBRGame() {
        return GameListManager.isBRGame(this.getRoomInfo().gameID);
      },
      isRoom: function isRoom() {
        return this.isBuyRoom() || this.isPrivateRoom() || this.isVIPRoom();
      },
      getGameLogic: function getGameLogic() {
        return GameManager.getGameLogic();
      },
      getMyInfo: function getMyInfo() {
        return UserInfoManager.getMyInfo();
      },
      getRoomInfo: function getRoomInfo() {
        return RoomListManager.getRoomInfo();
      },
      getDeskUserCount: function getDeskUserCount() {
        if (this._deskUserList) return this._deskUserList.length;
        return 0;
      },
      getDeskUserList: function getDeskUserList() {
        return this._deskUserList;
      },
      getDeskInfo: function getDeskInfo() {
        return this.deskInfo;
      },
      __setDeskUserList: function __setDeskUserList(deskUserList) {
        this._deskUserList = [].concat(deskUserList);
      },
      __enterGame: function __enterGame() {
        cc.log(RoomListManager.getRoomInfo());
        GameManager.setGameInfo(RoomListManager.getRoomInfo().gameID);
        GameManager.runGame();
      },
      requestLoginRoom: function requestLoginRoom(roomID, userID, userToken, checkPointsNum, byType) {
        cc.log(tools.getCurTime() + " requestLoginRoom roomID:" + roomID + " checkPointsNum:" + checkPointsNum + " costType:" + byType);
        var cNetMsg = this.createNetMsg(9, MSG_MAIN_LOADER_LOGON, MSG_ASS_LOADER_LOGON);
        cNetMsg.pushINT(roomID);
        cNetMsg.pushINT(checkPointsNum);
        cNetMsg.pushBYTE(byType || 0);
        this.sendData(cNetMsg);
      },
      sendData: function sendData(p, rCallbackFun, sendDes) {
        LobbySocket.send(p, rCallbackFun, sendDes);
      },
      requestLogoutRoom: function requestLogoutRoom(callfunc) {
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_LOGON, MSG_ASS_LOADER_LOGOUT);
        this.sendData(cNetMsg, callfunc);
      },
      requestLogoutRoom1: function requestLogoutRoom1(callfunc) {
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_LOGON, MSG_ADD_LOADER_LOGOUT);
        this.sendData(cNetMsg, callfunc);
      },
      requestRoomSit: function requestRoomSit(deskStation) {
        deskStation = deskStation;
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_SIT);
        cNetMsg.pushBYTE(deskStation);
        console.log("\u5750\u4e0b\u547d\u4ee4\u4e86MSG_MAIN_LOADER_ACTION = " + MSG_MAIN_LOADER_ACTION + "   MSG_ASS_LOADER_ACTION_SIT =" + MSG_ASS_LOADER_ACTION_SIT);
        this.sendData(cNetMsg);
      },
      requestCreaterDesk: function requestCreaterDesk(callback) {
        var netCallback = function netCallback(netMsg) {
          G_HANDLE_CODE_OK == netMsg.bHandleCode && callback && callback();
        };
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOADER_ACTION, 10);
        cNetMsg.pushBYTE(1);
        this.sendData(cNetMsg, netCallback);
      },
      requestActionChange: function requestActionChange(deskStation) {
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_CHANGE_DESKSTATION);
        cNetMsg.pushBYTE(deskStation);
        this.sendData(cNetMsg);
      },
      requestQuickSit: function requestQuickSit() {
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_MATCH_SIT);
        cNetMsg.pushINT(-1);
        this.sendData(cNetMsg);
      },
      requestChangeDesk: function requestChangeDesk(deskIdx) {
        " struct LoaderMatchRequestSit\n        {\n            int\t\tdeskIdx\t\t\t\n        }";
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_MATCH_SIT);
        cNetMsg.pushINT(deskIdx);
        this.sendData(cNetMsg);
      },
      requestStand: function requestStand() {
        cc.log("GameSocket:requestStand()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_STAND);
        this.sendData(cNetMsg);
      },
      requestStandandWatch: function requestStandandWatch() {
        cc.log("GameSocket:requestStandandWatch()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_ACTION_STAND_AND_WATCH);
        this.sendData(cNetMsg);
      },
      requestDeskInfo: function requestDeskInfo() {
        console.log(tools.getCurTime() + " GameSocket requestDeskInfo");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_FRAME, MSG_ASS_LOADER_DESK_INFO);
        this.sendData(cNetMsg);
      },
      requestGameInfo: function requestGameInfo() {
        console.log(tools.getCurTime() + " GameSocket requestGameInfo");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_FRAME, MSG_ASS_LOADER_GAME_INFO);
        this.sendData(cNetMsg);
      },
      requestDeskUserInfo: function requestDeskUserInfo() {
        console.log(tools.getCurTime() + " GameSocket requestDeskUserInfo");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_FRAME, MSG_ASS_LOADER_DESK_USERINFO);
        this.sendData(cNetMsg);
      },
      requestDeskOneUserInfo: function requestDeskOneUserInfo(deskStation, callback) {
        var _this = this;
        cc.log("GameSocket:requestDeskOneUserInfo()");
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOADER_FRAME, MSG_ASS_LOADER_DESK_ONE_USERINFO);
        cNetMsg.pushBYTE(deskStation);
        var netCallback = function netCallback(netMsg) {
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var userInfo = _this._Resolve_UserSimpleInfo(netMsg);
            _this.__updateDeskUser(userInfo);
            callback ? callback(userInfo) : _this.getGameLogic() && _this.getGameLogic().updateDeskUser(userInfo);
          }
        };
        this.sendData(cNetMsg, netCallback);
      },
      requestDeskCheckPointInfo: function requestDeskCheckPointInfo() {
        cc.log("GameSocket:requestCheckPointInfo()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_FRAME, MSG_ASS_LOADER_DESK_CHECKPOINT_INFO);
        this.sendData(cNetMsg);
      },
      requestAgreeGame: function requestAgreeGame() {
        cc.log("GameSocket:requestAgreeGame()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_GAME, MSG_ASS_LOADER_GAME_AGREE);
        this.sendData(cNetMsg);
      },
      requestGameNotPrompt: function requestGameNotPrompt(UserID) {
        cc.log("GameSocket:requestGameNotPrompt()");
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOADER_GAME, 5);
        cNetMsg.pushINT(UserID);
        this.sendData(cNetMsg);
      },
      requestAuto: function requestAuto() {
        cc.log("GameSocket:requestAuto()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_GAME, MSG_ASS_LOADER_GAME_AUTO);
        this.sendData(cNetMsg);
      },
      requestCancelAuto: function requestCancelAuto() {
        cc.log("GameSocket:requestCancelAuto()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_GAME, MSG_ASS_LOADER_GAME_CANCEL_AUTO);
        this.sendData(cNetMsg);
      },
      requestMagicExpress: function requestMagicExpress(targetUserID, magicType) {
        cc.log("requestMagicExpress");
        var cNetMsg = this.createNetMsg(8, MSG_MAIN_LOADER_GAME, MSG_ASS_LOADER_GAME_MAGICEXPRESS);
        cNetMsg.pushINT(targetUserID);
        cNetMsg.pushINT(magicType);
        this.sendData(cNetMsg);
      },
      requestDismissRoom: function requestDismissRoom() {
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_DESKDISSMISS, MSG_ASS_LOADER_REQ_DESKDISSMISS);
        this.sendData(cNetMsg);
      },
      requestAnswerDismiss: function requestAnswerDismiss(isAgree) {
        "\u662f\u5426\u540c\u610f\u89e3\u6563\u684c\u5b50\n        struct LoaderRequestAnswerDismiss\n        {\n            bool isAgree//\u662f\u5426\u540c\u610f\n        ";
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOADER_DESKDISSMISS, MSG_ASS_LOADER_ANSWER_DESKDISMISS);
        cNetMsg.pushBOOL(isAgree);
        this.sendData(cNetMsg);
      },
      requestVoive: function requestVoive(voiceID) {
        cc.log("GameSocket:requestVoive()");
        var cNetMsg = this.createNetMsg(64, MSG_MAIN_LOADER_VOICEANDTALK, MSG_ASS_LOADER_VOICE);
        cNetMsg.pushNCHAR(voiceID, 64);
        this.sendData(cNetMsg);
      },
      requestTalk: function requestTalk(words) {
        cc.log("requestTalk");
        var sizeCount = 3 * words.length;
        if (0 == sizeCount) return;
        var cNetMsg = this.createNetMsg(sizeCount + 4, MSG_MAIN_LOADER_VOICEANDTALK, MSG_ASS_LOADER_TALK);
        cNetMsg.pushINT(sizeCount);
        cNetMsg.pushNCHAR(words, sizeCount);
        this.sendData(cNetMsg);
      },
      requestTalkImg: function requestTalkImg(words) {
        cc.log("requestTalkImg");
        var sizeCount = words.length;
        if (0 == sizeCount) return;
        var cNetMsg = this.createNetMsg(sizeCount + 4, MSG_MAIN_LOADER_VOICEANDTALK, MSG_ASS_LOADER_TALK);
        cNetMsg.pushINT(sizeCount);
        cNetMsg.pushNCHAR(words, sizeCount);
        this.sendData(cNetMsg);
      },
      requestStart: function requestStart() {
        cc.log("GameSocket:requestStart");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOADER_ACTION, MSG_ASS_LOADER_GAME_BEGIN);
        this.sendData(cNetMsg);
      },
      onLoginMessage: function onLoginMessage(netMsg) {
        if (netMsg.bAssistantID === MSG_ASS_LOADER_LOGON) {
          var _Resolve_LoaderResponseLogon = function(netMsg) {
            var struct = {};
            struct.deskIdx = netMsg.readInt();
            struct.deskPasswdLen = netMsg.readInt();
            struct.deskPasswd = netMsg.readString(20);
            struct.isInDesk = netMsg.readBoolean();
            struct.roomID = netMsg.readInt();
            struct.userStatus = netMsg.readInt();
            struct.gameRules = netMsg.readString(256);
            return struct;
          }.bind(this);
          if (netMsg.bHandleCode === G_HANDLE_CODE_OK) {
            var info = _Resolve_LoaderResponseLogon(netMsg);
            RoomListManager.setCurRuleInfo(info.gameRules);
            this.getMyInfo().userStatus = info.userStatus;
            info.isInDesk || (this.isGoldRoom() || this.isBarrierMatchRoom()) && this.requestQuickSit();
            this.getGameLogic().setGameRuleInfo();
            GameManager.ui.onConnectSuccess();
          } else if (netMsg.bHandleCode === GlobalError.ERROR_ROOM_EXISTING) {
            this.requestLogoutRoom();
            this.clear();
          } else if (GlobalError.ERROR_MATCH_OVER == netMsg.bHandleCode || GlobalError.ERROR_RANKMATCH_OVER == netMsg.bHandleCode) LobbySocket.onDisconnect(); else {
            this.requestLogoutRoom();
            this.clear();
          }
        }
      },
      _Resolve_UserSimpleInfo: function _Resolve_UserSimpleInfo(data) {
        var struct = {};
        struct.userID = data.readInt();
        struct.name = data.readString(MAX_USER_NAME_LEN);
        struct.headURL = data.readString(256);
        struct.isOnline = data.readBoolean();
        struct.deskStation = data.readByte();
        struct.userStatus = data.readInt();
        struct.score = data.readInt();
        struct.deskIdx = data.readInt();
        struct.money = data.readInt64();
        struct.longitude = data.readString(12);
        struct.latitude = data.readString(12);
        struct.address = data.readString(64);
        struct.logonIP = data.readString(24);
        struct.sex = data.readByte();
        struct.isAuto = data.readBoolean();
        struct.jewels = data.popINT();
        struct.motto = data.readString(128);
        struct.giftCard = data.readInt64();
        return struct;
      },
      _Resolve_HundredGameUserSimpleInfo: function _Resolve_HundredGameUserSimpleInfo(netMsg) {
        " \u73a9\u5bb6\u7b80\u5355\u4fe1\u606f\n        struct HundredGameUserSimpleInfo\n        {\n            int  userID\n            bool isOnline\n            BYTE deskStation\n            int  userStatus\n            long long money\n            bool isAuto\n        }";
        var struct = {};
        struct.userID = netMsg.popINT();
        struct.isOnline = netMsg.popBOOL();
        struct.deskStation = netMsg.popBYTE();
        struct.userStatus = netMsg.popINT();
        struct.money = netMsg.popLONGLONG();
        struct.isAuto = netMsg.popBOOL();
        struct.name = "";
        struct.headURL = "aa";
        struct.score = 0;
        struct.deskIdx = 0;
        struct.longitude = G_longitude;
        struct.latitude = G_latitude;
        struct.address = G_address;
        struct.logonIP = "0.0.0.0";
        struct.sex = 0;
        struct.jewels = 0;
        struct.motto = "";
        struct.isNotAll = true;
        return struct;
      },
      onGameNotifyUserMessage: function onGameNotifyUserMessage(netMsg) {
        if (MSG_NTF_LOADER_DESK_USER_INFO == netMsg.bAssistantID) this.dealNotifyDeskUserInfo(netMsg); else if (MSG_NTF_LOADER_DESK_USER_SIT == netMsg.bAssistantID) {
          console.log("\u5750\u4e0b\u6d88\u606f");
          this.dealNotifyDeskUserSit(netMsg);
        } else if (MSG_NTF_LOADER_DESK_USER_AGREE == netMsg.bAssistantID) {
          console.log("\u51c6\u5907\u6d88\u606f");
          this.dealNotifyDeskUserAgree(netMsg);
        } else MSG_NTF_LOADER_DESK_USER_LEFT == netMsg.bAssistantID ? this.dealNotifyDeskUserLeft(netMsg) : MSG_NTF_LOADER_DESK_USER_OFFLINE == netMsg.bAssistantID ? this.dealNotifyDeskUserOffline(netMsg) : MSG_NTF_LOADER_DESK_USER_CHANGEDESKSTATION == netMsg.bAssistantID ? this.dealNotifyDeskUserChangedeskstation(netMsg) : MSG_NTF_LOADER_DESK_USER_STANDANDWATCH == netMsg.bAssistantID ? this.dealNotifyDeskUserStandAndWatch(netMsg) : MSG_NTF_LOADER_DESK_USER_LOGONOROUTROOM == netMsg.bAssistantID ? this.dealNotifyDeskUserLogonORoutRoom(netMsg) : MSG_NTF_LOADER_DESK_USER_IS_TOURIST == netMsg.bAssistantID && this.dealNotifyDeskUserIsTourist(netMsg);
      },
      dealNotifyDeskUserInfo: function dealNotifyDeskUserInfo(netMsg) {
        cc.log("dealNotifyDeskUserInfo");
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          this.__updateDeskUser(user);
        }
      },
      dealNotifyDeskUserSit: function dealNotifyDeskUserSit(netMsg) {
        cc.log("dealNotifyDeskUserSit");
        if (netMsg.bHandleCode === G_HANDLE_CODE_OK) {
          removeLoading();
          var user = this._Resolve_UserSimpleInfo(netMsg);
          this.__updateDeskUser(user);
          if (this.getMyInfo().userID == user.userID) {
            if (this.getGameLogic() && this.getGameLogic().isMeWatching()) {
              this.getGameLogic().removeAllDeskUser();
              this.getGameLogic().loadDeskUser();
            }
            this.getMyInfo().userStatus = user.userStatus;
          }
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserSit(user);
        }
      },
      dealNotifyDeskUserAgree: function dealNotifyDeskUserAgree(netMsg) {
        cc.log("dealNotifyDeskUserAgree");
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          this.__updateDeskUser(user);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserAgree(user.deskStation);
        }
      },
      dealNotifyDeskUserLeft: function dealNotifyDeskUserLeft(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyUserLeft = function(netMsg) {
            "struct Loade rNotifyUserLeft\n                {\n                    int reasonCode;\n                    UserSimpleInfo userInfo;\n                }\n                ";
            var struct = {};
            struct.reasonCode = netMsg.popINT();
            struct.user = this._Resolve_UserSimpleInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LoaderNotifyUserLeft(netMsg);
          cc.log("dealNotifyDeskUserLeft");
          if (this.getGameLogic()) {
            this.__removeDeskUser(info.user.userID);
            this.getGameLogic().dealNotifyDeskUserLeft(info.user, info.user.deskStation, info.reasonCode);
          }
          this.getGameLogic() && this.getGameLogic().onDeskUserCountChange();
        }
      },
      dealNotifyDeskUserOffline: function dealNotifyDeskUserOffline(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          cc.log("dealNotifyDeskUserOffline");
          this.__updateDeskUser(user);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserOffline(user);
        }
      },
      dealNotifyDeskUserChangedeskstation: function dealNotifyDeskUserChangedeskstation(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var byDeskStation = netMsg.popBYTE();
          var user = this._Resolve_UserSimpleInfo(netMsg);
          cc.log("dealNotifyDeskUserChangedeskstation");
          if (this.getGameLogic()) {
            this.__removeDeskUser(user.userID);
            this.getGameLogic().dealNotifyDeskUserChangedeskstation(byDeskStation);
          }
          this.__updateDeskUser(user);
          if (this.getMyInfo().userID == user.userID) {
            if (this.getGameLogic() && this.getGameLogic().isMeWatching()) {
              this.getGameLogic().removeAllDeskUser();
              this.getGameLogic().loadDeskUser();
            }
            this.getMyInfo().userStatus = user.userStatus;
          }
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserSit(user);
        }
      },
      dealNotifyDeskUserStandAndWatch: function dealNotifyDeskUserStandAndWatch(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var reason = netMsg.popINT();
          var user = this._Resolve_UserSimpleInfo(netMsg);
          cc.log("dealNotifyDeskUserStandAndWatch");
          if (this.getGameLogic()) {
            this.__removeDeskUser(user.userID);
            this.getGameLogic().dealNotifyDeskUserChangedeskstation(user.deskStation);
          }
        }
      },
      dealNotifyDeskUserLogonORoutRoom: function dealNotifyDeskUserLogonORoutRoom(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var userID = netMsg.popINT();
          var gameMsg = netMsg.readString(120);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserLogonORoutRoom(gameMsg);
        }
      },
      dealNotifyDeskUserIsTourist: function dealNotifyDeskUserIsTourist(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyUserIsTourist = function(netMsg) {
            "struct Loade rNotifyUserLeft\n                {\n                    bool    bTourist;  //\u73a9\u5bb6\u5728\u6e38\u620f\u4e2d\u662f\u5426\u662f\u6e38\u5ba2\n                    UserSimpleInfo userInfo;               \n                }\n                ";
            var struct = {};
            struct.bTourist = netMsg.popBOOL();
            struct.user = this._Resolve_UserSimpleInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LoaderNotifyUserIsTourist(netMsg);
          cc.log("dealNotifyDeskUserIsTourist");
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskUserIsTourist(info);
        }
      },
      onGameNotifyMessage: function onGameNotifyMessage(netMsg) {
        MSG_NTF_LOADER_DESK_GAMEBEGIN == netMsg.bAssistantID ? this.dealNotifyDeskGameBegin(netMsg) : MSG_NTF_LOADER_DESK_BASEINFO == netMsg.bAssistantID ? this.dealNotifyDeskBaseInfo(netMsg) : MSG_NTF_LOADER_DESK_DISMISS_OK == netMsg.bAssistantID ? this.dealNotifyDeskDismissOK(netMsg) : MSG_NTF_LOADER_DESK_DISMISS_FAILED == netMsg.bAssistantID ? this.dealNotifyDeskDismissFailed(netMsg) : MSG_NTF_LOADER_DESK_ALL_USERINFO == netMsg.bAssistantID ? this.dealNotifyDeskAllUserInfo(netMsg) : MSG_NTF_LOADER_DESK_DISSMISS_INFO == netMsg.bAssistantID ? this.dealNotifyDeskDismissInfo(netMsg) : MSG_NTF_LOADER_DESK_TALK == netMsg.bAssistantID ? this.dealNotifyDeskTalk(netMsg) : MSG_NTF_LOADER_DESK_VOICE == netMsg.bAssistantID ? this.dealNotifyDeskVoice(netMsg) : MSG_NTF_LOADER_DESK_GAMEFINISH == netMsg.bAssistantID ? this.dealNotifyDeskGameFinish(netMsg) : MSG_NTF_LOADER_DESK_GRADE == netMsg.bAssistantID ? this.dealNotifyDeskGrade(netMsg) : MSG_NTF_LOADER_DESK_MONEY == netMsg.bAssistantID ? this.dealNotifyDeskMoney(netMsg) : MSG_NTF_LOADER_DESK_LEFT_WAITAGREE_TIME == netMsg.bAssistantID ? this.dealNotifyDeskLeftWaitagreeTime(netMsg) : MSG_NTF_LOADER_DESK_ISAUTO == netMsg.bAssistantID ? this.dealNotifyDeskIsAuto(netMsg) : MSG_NTF_LOADER_DESK_MAGICEXPRESS == netMsg.bAssistantID ? this.dealNotifyDeskMagicExpress(netMsg) : MSG_NTF_LOADER_DESK_SITFULL == netMsg.bAssistantID ? this.dealNotifyDeskSitFull(netMsg) : MSG_NTF_LOADER_DESK_CANBEGIN == netMsg.bAssistantID ? this.dealNotifyDeskCanBegin(netMsg) : MSG_NTF_LOADER_DESK_CANBEGIN == netMsg.bAssistantID ? this.dealNotifyDeskGameAleardyBegin(netMsg) : MSG_NTF_LOADER_RECHARGE == netMsg.bAssistantID ? this.dealNotifyRecharge(netMsg) : MSG_NTF_LOADER_DESK_HUNDRED_ALL_USER == netMsg.bAssistantID ? this.dealNotifyDeskHunderAllUserInfo(netMsg) : MSG_NTF_LOADER_DESK_DISMISS_USERID == netMsg.bAssistantID ? this.dealNotifyDeskDissmissUserID(netMsg) : MSG_NTF_LOADER_ERR_MSG == netMsg.bAssistantID ? this.dealNotifyERRMsg(netMsg) : MSG_NTF_LOADER_DESK_JEWELS == netMsg.bAssistantID ? this.dealNotifyDeskJewels(netMsg) : MSG_NTF_LOADER_DESK_MATCH_STATUS == netMsg.bAssistantID ? this.dealNotifyDeskMatchStatus(netMsg) : MSG_NTF_LOADER_DESK_FINISH_MATCH == netMsg.bAssistantID ? this.dealNotifyDeskFinishMatch(netMsg) : MSG_NTF_LOADER_MATCH_RANK == netMsg.bAssistantID ? this.dealNotifyMatchRank(netMsg) : MSG_NTF_LOADER_DESK_MATCH_GRADE == netMsg.bAssistantID ? this.dealNotifyMatchGrade(netMsg) : MSG_NTF_LOADER_DESK_RANKMATCH_LEVEL == netMsg.bAssistantID ? this.dealNotifyRankMatchGrade(netMsg) : MSG_NTF_LOADER_DESK_USEREXP == netMsg.bAssistantID ? this.dealNotifyRankMatchUserExp(netMsg) : MSG_NTF_LOADER_DESK_USER_CHECKPOINT == netMsg.bAssistantID ? this.dealNotifyUserCheckPoint(netMsg) : MSG_NTF_LOADER_DESK_USER_CHECKPOINT_END == netMsg.bAssistantID ? this.dealNotifyUserCheckPointEnd(netMsg) : MSG_NTF_LOADER_RANDOM_CHANGE_SEAT == netMsg.bAssistantID ? this.dealNotifyRandomChangeSeat(netMsg) : MSG_NTF_LOADER_TIMEOUT_CANNOT_OUT == netMsg.bAssistantID ? this.dealNotifyTimeoutCannotOut(netMsg) : MSG_NTF_LOADER_DISCONNECT_TIMEOUT == netMsg.bAssistantID ? this.dealNotifyDisconnectTimeout(netMsg) : MSG_NTF_LOADER_DESK_CANNOTBEGIN == netMsg.bAssistantID && this.dealNotifyDeskCannotbegin(netMsg);
      },
      dealNotifyMatchGrade: function dealNotifyMatchGrade(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_matchGradeInfo = function _Resolve_matchGradeInfo(netMsg) {
            var struct = {};
            struct.changeGrade = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            struct.grade = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            struct.userid = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            struct.name = {};
            for (var i = 0; i < G_WAR_RECORD_PLAYER_NUM; i++) struct.name[i] = netMsg.popNCHAR(MAX_USER_NAME_LEN);
            return struct;
          };
          var info = _Resolve_matchGradeInfo(netMsg);
          cc.log("dealNotifyMatchGrade++++");
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u684c\u5b50\u5347\u7ea7\u901a\u77e5", info);
          this.getGameLogic() && this.isMatchRoom() && this.getGameLogic().setMyMatchGradeInfo(info);
          for (var i = 0; i < G_WAR_RECORD_PLAYER_NUM; i++) for (var j in this._deskUserList) {
            var user = this._deskUserList[j];
            if (user.deskStation == i) {
              var lastScore = info.grade[i] - info.changeGrade[i];
              this._deskUserList[j].score = info.grade[i];
              this.getGameLogic() && (this.isMatchRoom() ? this.getGameLogic().dealNotifyDeskGrade(user.userID, info.grade[i], lastScore) : this.isBarrierMatchRoom() && this.getGameLogic().dealNotifyDeskGrade(user.userID, info.grade[i], lastScore));
              break;
            }
          }
        }
      },
      dealNotifyRankMatchGrade: function dealNotifyRankMatchGrade(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_RankMatch_GradeInfo = function _Resolve_RankMatch_GradeInfo(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.gameExp = netMsg.popLONGLONG();
            struct.UserLevel = netMsg.popINT();
            struct.remark = netMsg.popNCHAR(24);
            return struct;
          };
          var info = _Resolve_RankMatch_GradeInfo(netMsg);
          cc.log("dealNotifyRankMatchGrade++++");
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bb5\u4f4d\u5347\u7ea7\u901a\u77e5", info);
          this.getGameLogic() && this.getGameLogic().setMyRankMatchGradeInfo(info);
        }
      },
      dealNotifyRankMatchUserExp: function dealNotifyRankMatchUserExp(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_RankMatch_UserExp = function _Resolve_RankMatch_UserExp(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.gameExp = netMsg.popLONGLONG();
            struct.UserLevel = netMsg.popBYTE();
            return struct;
          };
          var info = _Resolve_RankMatch_UserExp(netMsg);
          cc.log("dealNotifyRankMatchUserExp++++");
          this.getGameLogic() && this.getGameLogic().setMyRankMatchUserExp(info);
        }
      },
      dealNotifyUserCheckPointEnd: function dealNotifyUserCheckPointEnd(netMsg) {
        G_HANDLE_CODE_OK == netMsg.bHandleCode && this.getGameLogic() && this.getGameLogic().setCheckPointEnd();
      },
      dealNotifyUserCheckPoint: function dealNotifyUserCheckPoint(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_CheckPoint = function _Resolve_CheckPoint(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.checkPointNum = netMsg.popINT();
            struct.bAgain = netMsg.popBYTE();
            struct.score = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_CheckPoint(netMsg);
          console.log(tools.getCurTime() + " \u901a\u77e5\u5f53\u5c40\u95ef\u5173\u7ed3\u679c++++", info);
          this.getGameLogic() && this.getGameLogic().setCheckPointInfo(info);
        }
      },
      dealNotifyDeskMatchStatus: function dealNotifyDeskMatchStatus(netMsg) {
        cc.log("dealNotifyDeskMatchStatus");
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_matchStatusInfo = function _Resolve_matchStatusInfo(netMsg) {
            var struct = {};
            struct.llPartOfMatchID = netMsg.popLONGLONG();
            struct.iCurMatchRound = netMsg.popINT();
            struct.iMaxMatchRound = netMsg.popINT();
            struct.status = netMsg.popBYTE();
            struct.remainTime = netMsg.popINT();
            struct.iCurCount = netMsg.popINT();
            struct.iMaxCount = netMsg.popINT();
            struct.resultType = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_matchStatusInfo(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u684c\u5b50\u72b6\u6001\u4fe1\u606f\u901a\u77e5", info);
          this.getGameLogic() && this.getGameLogic().setMyMatchDeskInfo(info);
        }
      },
      dealNotifyDeskFinishMatch: function dealNotifyDeskFinishMatch(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_matchFinishInfo = function _Resolve_matchFinishInfo(netMsg) {
            var struct = {};
            struct.deskIdx = netMsg.popINT();
            struct.deskCount = netMsg.popINT();
            struct.deskRank = netMsg.popINT();
            struct.rank = netMsg.popINT();
            struct.matchScore = netMsg.popINT();
            struct.allPeopleCount = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_matchFinishInfo(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u684c\u5b50\u5b8c\u6210\u901a\u77e5", info);
          this.getGameLogic() && this.getGameLogic().setMyMatchDeskFinishInfo(info);
          dump(info, "dealNotifyDeskFinishMatch++++");
        }
      },
      dealNotifyMatchRank: function dealNotifyMatchRank(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_matchRankInfo = function _Resolve_matchRankInfo(netMsg) {
            var struct = {};
            struct.gameID = netMsg.popINT();
            struct.gameMatchID = netMsg.popINT();
            struct.iCurMatchRound = netMsg.popINT();
            struct.iMaxMatchRound = netMsg.popINT();
            struct.type = netMsg.popBYTE();
            struct.rankMatch = netMsg.popINT();
            struct.giftCard = netMsg.popINT();
            struct.costResType = netMsg.popINT();
            struct.reviveRemainTime = netMsg.popINT();
            struct.llPartOfMatchID = netMsg.popINT();
            struct.peopleCount = netMsg.popINT();
            struct.matchLevel = netMsg.popINT();
            struct.allPeopleCount = netMsg.popINT();
            struct.deskCount = netMsg.popINT();
            struct.matchScore = netMsg.popINT();
            struct.userID = {};
            struct.rank = {};
            struct.jiangJin = {};
            struct.integral = {};
            for (var i = 1; i <= struct.peopleCount; i++) {
              struct.userID[i] = netMsg.popINT();
              struct.rank[i] = netMsg.popINT();
              struct.jiangJin[i] = netMsg.popINT();
              struct.integral[i] = netMsg.popINT();
            }
            return struct;
          };
          var info = _Resolve_matchRankInfo(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u684c\u5b50\u4e00\u8f6e\u6253\u5b8c\u6392\u540d\u901a\u77e5", info);
          MatchManager.setCurMatchID(info.gameMatchID);
          MatchManager.setCurRoundIsEnd(true);
          this.getGameLogic() && this.getGameLogic().setMatchDeskRankInfo(info);
          DataNotify.onCurMatchResult(info);
        }
      },
      dealNotifyDeskGameAleardyBegin: function dealNotifyDeskGameAleardyBegin(netMsg) {
        createTips("\u6e38\u620f\u5df2\u7ecf\u5f00\u59cb\uff0c\u7981\u6b62\u52a0\u5165");
      },
      dealNotifyDeskGameBegin: function dealNotifyDeskGameBegin(netMsg) {
        cc.log("dealNotifyDeskGameBegin");
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var info = {};
          for (var _iterator = _createForOfIteratorHelperLoose(this.getDeskUserList()), _step; !(_step = _iterator()).done; ) {
            var user = _step.value;
            user.userStatus = E_UserStatus.USER_STATUS_PLAYING;
          }
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskGameBegin();
        }
      },
      dealNotifyDeskBaseInfo: function dealNotifyDeskBaseInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyDeskInfo = function _Resolve_LoaderNotifyDeskInfo(netMsg) {
            "struct LoaderNotifyDeskInfo\n                {\n                    int\t\tdeskIdx\n                    int\t\tdeskPasswdLen\n                    char\tdeskPasswd[20]\n                    int\t\tmasterID\n                    char\tmasterName[MAX_USER_NAME_LEN]\n                    int\t\trunGameCount\n                    int\t\ttotalGameCount\n                    bool\tisDismissStatus\n                }";
            var struct = {};
            struct.deskIdx = netMsg.popINT();
            struct.deskPasswdLen = netMsg.popINT();
            struct.deskPasswd = netMsg.readString(20);
            struct.masterID = netMsg.popINT();
            struct.masterName = netMsg.readString(MAX_USER_NAME_LEN);
            struct.runGameCount = netMsg.popINT();
            struct.totalGameCount = netMsg.popINT();
            struct.isDismissStatus = netMsg.popBOOL();
            return struct;
          };
          var info = _Resolve_LoaderNotifyDeskInfo(netMsg);
          this.deskInfo = info;
          cc.log("GameSocket:dealNotifyDeskBaseInfo", info);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskBaseInfo(info);
        }
      },
      dealNotifyDeskDismissOK: function dealNotifyDeskDismissOK(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyDismissSuccess = function _Resolve_LoaderNotifyDismissSuccess(netMsg) {
            var struct = {};
            struct.isDismissMidway = netMsg.popBOOL();
            struct.name = netMsg.popNCHAR(MAX_USER_NAME_LEN);
            struct.bReqDismiss = netMsg.popBOOL();
            return struct;
          };
          var info = _Resolve_LoaderNotifyDismissSuccess(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskDismissOK(info);
        }
      },
      dealNotifyRandomChangeSeat: function dealNotifyRandomChangeSeat(netMsg) {
        var _this2 = this;
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_RandomChangeSeatSuccess = function _Resolve_RandomChangeSeatSuccess(netMsg) {
            var UserInfor = [];
            for (var i = 0; i < 4; i++) UserInfor[i] = _this2._Resolve_UserSimpleInfo(netMsg);
            return UserInfor;
          };
          var UserInfor = _Resolve_RandomChangeSeatSuccess(netMsg);
          var Callback = function(info) {
            this.__setDeskUserList(info);
            if (this.getGameLogic()) {
              this.getGameLogic().removeAllDeskUser();
              this.getGameLogic().loadDeskUser();
            }
          }.bind(this);
          this.getGameLogic() && this.getGameLogic().dealNotifyRandomChangeSeat(UserInfor, Callback);
        }
      },
      dealNotifyTimeoutCannotOut: function dealNotifyTimeoutCannotOut(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var name = netMsg.popNCHAR(64);
          var Msg = "\u73a9\u5bb6 " + name + " \u51fa\u724c\u8d85\u65f6\uff0c\u623f\u95f4\u5df2\u89e3\u6563";
          this.getGameLogic() && this.getGameLogic().dealNotifyTimeoutCannotOut(Msg);
        }
      },
      dealNotifyDisconnectTimeout: function dealNotifyDisconnectTimeout(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var name = netMsg.popNCHAR(64);
          var Msg = "\u73a9\u5bb6 " + name + " \u65ad\u7ebf\u8d85\u65f6\uff0c\u623f\u95f4\u5df2\u89e3\u6563";
          this.getGameLogic() && this.getGameLogic().dealNotifyTimeoutCannotOut(Msg);
        }
      },
      dealNotifyDeskDismissFailed: function dealNotifyDeskDismissFailed(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var info = {};
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskDismissFailed();
        }
      },
      dealNotifyDeskAllUserInfo: function dealNotifyDeskAllUserInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyDeskUserInfo = function(netMsg) {
            " \u901a\u77e5\u684c\u5b50\u73a9\u5bb6\u4fe1\u606f\n                struct LoaderNotifyDeskUserInfo\n                {\n                    int count\n                    UserSimpleInfo allUserInfo[count]\n                }";
            var struct = {};
            struct.count = netMsg.popINT();
            struct.allUserInfo = [];
            for (var i = 0; i < struct.count; i++) struct.allUserInfo[i] = this._Resolve_UserSimpleInfo(netMsg);
            return struct;
          }.bind(this);
          var info = _Resolve_LoaderNotifyDeskUserInfo(netMsg);
          cc.log("GameSocket:dealNotifyDeskAllUserInfo", info);
          this.__setDeskUserList(info.allUserInfo);
          if (this.getGameLogic()) {
            this.getGameLogic().removeAllDeskUser();
            this.getGameLogic().loadDeskUser();
          }
        }
      },
      dealNotifyDeskOneUserInfo: function dealNotifyDeskOneUserInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          this.__updateDeskUser(user);
          this.getGameLogic() && this.getGameLogic().updateDeskUser(user);
        }
      },
      dealNotifyDeskCheckPointInfo: function dealNotifyDeskCheckPointInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var checkPoint = {};
          checkPoint.count = netMsg.popINT();
          checkPoint.checkPointNum = netMsg.popINT();
          this.getGameLogic() && this.getGameLogic().setDeskCheckPointInfo(checkPoint);
        }
      },
      dealNotifyDeskDismissInfo: function dealNotifyDeskDismissInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_DeskDissmissType = function _Resolve_DeskDissmissType(netMsg) {
            "struct DeskDissmissType\n                {\n                    BYTE deskStation\n                    int dismissType\n                }";
            var struct = {};
            struct.deskStation = netMsg.popBYTE();
            struct.dismissType = netMsg.popINT();
            return struct;
          };
          var _Resolve_LoaderNotifyDismiss = function _Resolve_LoaderNotifyDismiss(netMsg) {
            "struct LoaderNotifyDismiss\n                {\n                    BYTE deskStation\n                    int lefWaitDismissTime\n                    int cfgDismissTime\n                    int deskUserCount\n                    DeskDissmissType userList[1]\n                }";
            var struct = {};
            struct.deskStation = netMsg.popBYTE();
            struct.lefWaitDismissTime = netMsg.popINT();
            struct.cfgDismissTime = netMsg.popINT();
            struct.deskUserCount = netMsg.popINT();
            struct.userList = {};
            for (var i = 1; i <= struct.deskUserCount; i++) struct.userList[i] = _Resolve_DeskDissmissType(netMsg);
            return struct;
          };
          var info = _Resolve_LoaderNotifyDismiss(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskDismissInfo(info);
        }
      },
      dealNotifyDeskTalk: function dealNotifyDeskTalk(netMsg) {
        console.log("GameSocket dealNotifyDeskTalk ");
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyTalk = function _Resolve_LoaderNotifyTalk(netMsg) {
            "struct LoaderNotifyTalk\n                {\n                    int userID\n                    char words[1024]\n                }";
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.sizeCount = netMsg.popINT();
            struct.words = netMsg.readString(struct.sizeCount);
            return struct;
          };
          var info = _Resolve_LoaderNotifyTalk(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskTalk(info);
        }
      },
      dealNotifyDeskVoice: function dealNotifyDeskVoice(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyVoice = function _Resolve_LoaderNotifyVoice(netMsg) {
            "struct LoaderNotifyVoice\n                {\n                    int userID\n                    int voiceID\n                }";
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.voiceID = netMsg.popNCHAR(64);
            return struct;
          };
          var info = _Resolve_LoaderNotifyVoice(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskVoice(info);
        }
      },
      dealNotifyDeskGameFinish: function dealNotifyDeskGameFinish(netMsg) {
        for (var _iterator2 = _createForOfIteratorHelperLoose(this.getDeskUserList()), _step2; !(_step2 = _iterator2()).done; ) {
          var user = _step2.value;
          user.userStatus = E_UserStatus.USER_STATUS_SITING;
          user.isAuto = false;
        }
        if (this.isMatchRoom() || this.isBarrierMatchRoom()) return;
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var info = {};
          if (this.isRankMatchRoom()) info.needMoneyuserID = [ 0 ]; else {
            var _Resolve_LoaderNotifyGameFinish = function _Resolve_LoaderNotifyGameFinish(netMsg) {
              netMsg._readBuffer.offset -= 20;
              var struct = {};
              struct.needMoneyuserID = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
              return struct;
            };
            info = _Resolve_LoaderNotifyGameFinish(netMsg);
          }
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskGameFinish(info);
        }
      },
      dealNotifyDeskGrade: function dealNotifyDeskGrade(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyUserGrade = function _Resolve_LoaderNotifyUserGrade(netMsg) {
            "struct LoaderNotifyUserGrade\n                {\n                    int grade[9]\n                }";
            var struct = {};
            struct.grade = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            return struct;
          };
          var info = _Resolve_LoaderNotifyUserGrade(netMsg);
          cc.log("GameSocket:dealNotifyDeskGrade", info);
          for (var i = 0; i < G_WAR_RECORD_PLAYER_NUM; i++) for (var j = 0; j < this._deskUserList.length; j++) {
            var user = this._deskUserList[j];
            if (user.deskStation == i) {
              var lastScore = user.score ? user.score : 0;
              this._deskUserList[j].score = info.grade[i];
              this.getGameLogic() && this.getGameLogic().dealNotifyDeskGrade(user.userID, info.grade[i], lastScore);
              break;
            }
          }
        }
      },
      dealNotifyDeskMoney: function dealNotifyDeskMoney(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          var oldUser = this.getUserByID(user.userID);
          if (oldUser) {
            var oldMoney = oldUser.money ? oldUser.money : 0;
            var newMoney = user.money;
            this.__updateDeskUser(user);
            this.getGameLogic() && this.getGameLogic().dealNotifyDeskMoney(user.userID, newMoney, oldMoney);
          }
        }
      },
      getUserByDeskStation: function getUserByDeskStation(deskStation) {
        var list = this._deskUserList;
        for (var i = 0; i < list.length; i++) if (list[i].deskStation == deskStation) return list[i];
        return null;
      },
      dealNotifyDeskLeftWaitagreeTime: function dealNotifyDeskLeftWaitagreeTime(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyWaitAgree = function _Resolve_LoaderNotifyWaitAgree(netMsg) {
            var struct = {};
            struct.leftWaitAgreeSecs = netMsg.popINT();
            struct.cfgWaitAgreeSecs = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LoaderNotifyWaitAgree(netMsg);
          this.setReadyTimeData(info.leftWaitAgreeSecs, info.cfgWaitAgreeSecs);
        }
      },
      dealNotifyDeskIsAuto: function dealNotifyDeskIsAuto(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyIsAuto = function _Resolve_LoaderNotifyIsAuto(netMsg) {
            "// \u901a\u77e5\u662f\u5426\u6258\u7ba1\n                    struct LoaderNotifyIsAuto\n                    {\n                        int userID;\n                        bool isAuto;\n                    };";
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.isAuto = netMsg.popBOOL();
            return struct;
          };
          var info = _Resolve_LoaderNotifyIsAuto(netMsg);
          var user = this.getUserByID(info.userID);
          if (user) {
            user.isAuto = info.isAuto;
            this.getGameLogic() && this.getGameLogic().dealNotifyDeskIsAuto(user);
          }
        }
      },
      dealNotifyDeskMagicExpress: function dealNotifyDeskMagicExpress(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyMagicExpress = function _Resolve_LoaderNotifyMagicExpress(netMsg) {
            "\u901a\u77e5\u9b54\u6cd5\u8868\u60c5\n                    struct LoaderNotifyMagicExpress\n                    {\n                        int srcUserID;\n                        int targetUserID;\n                        int magicType;\n                    };";
            var struct = [];
            struct.srcUserID = netMsg.popINT();
            struct.targetUserID = netMsg.popINT();
            struct.magicType = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LoaderNotifyMagicExpress(netMsg);
          var srcUser = this.getUserByID(info.srcUserID);
          var targetUser = this.getUserByID(info.targetUserID);
          srcUser && targetUser && this.getGameLogic() && this.getGameLogic().dealNotifyDeskMagicExpress(srcUser, targetUser, info.magicType);
        }
      },
      dealNotifyDeskSitFull: function dealNotifyDeskSitFull(netMsg) {
        G_HANDLE_CODE_OK == netMsg.bHandleCode && this.getGameLogic() && this.getGameLogic().dealNotifyDeskSitFull();
      },
      dealNotifyDeskCanBegin: function dealNotifyDeskCanBegin(netMsg) {
        G_HANDLE_CODE_OK == netMsg.bHandleCode && this.getGameLogic() && this.getGameLogic().dealNotifyDeskCanBegin();
      },
      dealNotifyDeskCannotbegin: function dealNotifyDeskCannotbegin(netMsg) {
        G_HANDLE_CODE_OK == netMsg.bHandleCode && this.getGameLogic() && this.getGameLogic().dealNotifyDeskCannotbegin();
      },
      dealNotifyRecharge: function dealNotifyRecharge(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyRecharge = function _Resolve_LoaderNotifyRecharge(netMsg) {
            "\u901a\u77e5\u5145\u503c\n                    struct LoaderNotifyRecharge\n                    {\n                        int time;\t\t\t// \u5269\u4f59\u65f6\u95f4\n                        long long needGold;\t// \u9700\u8981\u51b2\u7684\u94b1\n                    };";
            var struct = {};
            struct.time = netMsg.popINT();
            struct.needGold = netMsg.popLONGLONG();
            return struct;
          };
          var info = _Resolve_LoaderNotifyRecharge(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyRecharge(info);
        }
      },
      sendSyncDeskUserData: function sendSyncDeskUserData() {
        if (this.getGameLogic()) {
          cc.isSyncDeskUserData = true;
          this.getGameLogic().sendDeskUserInfo();
          this.getGameLogic().sendDeskInfo();
        }
      },
      dealNotifyDeskHunderAllUserInfo: function dealNotifyDeskHunderAllUserInfo(netMsg) {
        var _this3 = this;
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyDeskUserInfo = function _Resolve_LoaderNotifyDeskUserInfo(netMsg) {
            " \u901a\u77e5\u684c\u5b50\u73a9\u5bb6\u4fe1\u606f\n                struct LoaderNotifyDeskUserInfo\n                {\n                    int count\n                    UserSimpleInfo allUserInfo[count]\n                }";
            var struct = {};
            struct.count = netMsg.popINT();
            struct.allUserInfo = [];
            for (var i = 0; i < struct.count; i++) struct.allUserInfo[i] = _this3._Resolve_HundredGameUserSimpleInfo(netMsg);
            return struct;
          };
          var info = _Resolve_LoaderNotifyDeskUserInfo(netMsg);
          this.__setDeskUserList(info.allUserInfo);
          if (this.getGameLogic()) {
            this.getGameLogic().updateUserCount();
            this.getGameLogic().removeAllDeskUser();
            this.getGameLogic().loadDeskUser();
          }
        }
      },
      dealNotifyDeskDissmissUserID: function dealNotifyDeskDissmissUserID(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyDismissSuccessData = function _Resolve_LoaderNotifyDismissSuccessData(netMsg) {
            " \u901a\u77e5\u684c\u5b50\u73a9\u5bb6\u4fe1\u606f\n                struct LoaderNotifyDismissSuccessData\n                {\n                    int userID[G_WAR_RECORD_PLAYER_NUM]\n\n                    int\tuserID[MAX_PLAYER_GRADE];   // \u6bcf\u4e2a\u5ea7\u4f4d\u53f7\u73a9\u5bb6id\n                    char name[MAX_PLAYER_GRADE][256];\n                    char headURL[MAX_PLAYER_GRADE][256];\n\n                }";
            var struct = {};
            struct.userIDList = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            return struct;
          };
          var info = _Resolve_LoaderNotifyDismissSuccessData(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyDeskDissmissUserID(info.userIDList);
        }
      },
      dealNotifyERRMsg: function dealNotifyERRMsg(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyERRMsg = function _Resolve_LoaderNotifyERRMsg(netMsg) {
            " \u901a\u77e5\u684c\u5b50\u73a9\u5bb6\u4fe1\u606f\n                struct LoaderNotifyERRMsg\n\t\t\t    {\n                    int msgType;\n                    int sizeCount;\n                    char notify[sizeCount];\n\t\t\t    }";
            var struct = {};
            struct.msgType = netMsg.popINT();
            struct.sizeCount = netMsg.popINT();
            struct.notify = netMsg.readString(struct.sizeCount);
            return struct;
          };
          var info = _Resolve_LoaderNotifyERRMsg(netMsg);
          this.getGameLogic() && this.getGameLogic().dealNotifyERRMsg(info.msgType, info.notify);
        }
      },
      dealNotifyDeskJewels: function dealNotifyDeskJewels(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var user = this._Resolve_UserSimpleInfo(netMsg);
          var oldUser = this.getUserByID(user.userID);
          if (oldUser) {
            var oldJewels = oldUser.jewels || 0;
            var newJewels = user.jewels;
            this.__updateDeskUser(user);
            this.getGameLogic() && this.getGameLogic().dealNotifyDeskJewels(user.userID, newJewels);
          }
        }
      },
      onFrameMessage: function onFrameMessage(netMsg) {
        netMsg.bAssistantID == MSG_ASS_LOADER_GAME_INFO ? this.getGameLogic() && this.getGameLogic().onGameInfoResp(netMsg) : netMsg.bAssistantID == MSG_ASS_LOADER_GAME_STATION ? this.getGameLogic() && this.getGameLogic().onGameStationResp(netMsg) : MSG_ASS_LOADER_DESK_USERINFO == netMsg.bAssistantID ? this.onDeskUserInfoResp(netMsg) : MSG_ASS_LOADER_DESK_CHECKPOINT_INFO == netMsg.bAssistantID && this.onDeskCheckPointInfoResp(netMsg);
      },
      requireAllDeskData: function requireAllDeskData(onlyMatchid) {
        var cNetMsg = this.createNetMsg(8, MSG_MAIN_LOADER_MATCH, MSG_ASS_LOADER_MATCH_ALL_DESK_DATA);
        cNetMsg.pushLONGLONG(onlyMatchid);
        this.sendData(cNetMsg);
      },
      requestMatchRankInfo: function requestMatchRankInfo(llPartOfMatchID, callback) {
        printInfo("requestMatchRankInfo( llPartOfMatchID ,callback) llPartOfMatchID =%s", llPartOfMatchID);
        var cNetMsg = this.createNetMsg(8, MSG_MAIN_LOADER_MATCH, MSG_ASS_LOADER_MATCH_RANK);
        cNetMsg.pushLONGLONG(llPartOfMatchID);
        var netCallback = function netCallback(netMsg) {
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var _Resolve_MatchRankInfo = function _Resolve_MatchRankInfo(netMsg) {
              var struct = {};
              struct.rank = netMsg.popINT();
              struct.score = netMsg.popINT();
              struct.userCount = netMsg.popINT();
              struct.rankInfo = {};
              for (var i = 1; i <= struct.userCount; i++) {
                struct.rankInfo[i] = {};
                struct.rankInfo[i].userID = netMsg.popINT();
                struct.rankInfo[i].rank = netMsg.popINT();
                struct.rankInfo[i].score = netMsg.popINT();
                struct.rankInfo[i].name = netMsg.popNCHAR(MAX_USER_NAME_LEN);
                struct.rankInfo[i].headURL = netMsg.popNCHAR(256);
              }
              return struct;
            };
            var info = _Resolve_MatchRankInfo(netMsg);
            callback ? callback(info) : this.onMatchDeskChange(netMsg);
          }
        };
        this.sendData(cNetMsg, netCallback);
      },
      requestReviveUser: function requestReviveUser(llPartOfMatchID, iCurMatchRound, iMaxMatchRound, type, callback) {
        var cNetMsg = this.createNetMsg(17, MSG_MAIN_LOADER_MATCH, MSG_ASS_LOADER_REVIVE_USER);
        var netCallback = function netCallback(netMsg) {
          G_HANDLE_CODE_OK == netMsg.bHandleCode && callback && callback();
        };
        cNetMsg.pushLONGLONG(llPartOfMatchID);
        cNetMsg.pushINT(iCurMatchRound);
        cNetMsg.pushINT(iMaxMatchRound);
        cNetMsg.pushBYTE(type);
        this.sendData(cNetMsg, netCallback);
      },
      onMatchDeskChange: function onMatchDeskChange(netMsg) {
        MSG_ASS_LOADER_MATCH_ALL_DESK_DATA == netMsg.bAssistantID ? MatchManager.onMatchDeskInfo(netMsg) : MSG_ASS_LOADER_MATCH_ENTER_WATCH_DESK == netMsg.bAssistantID || MSG_ASS_LOADER_MATCH_QUIT_WATCH_DESK == netMsg.bAssistantID || MSG_ASS_LOADER_MATCH_RANK == netMsg.bAssistantID;
      },
      backLobby: function backLobby() {
        this.getGameLogic() && this.getGameLogic().backLobby();
      },
      onDeskOneUserInfoResp: function onDeskOneUserInfoResp(netMsg) {
        this.dealNotifyDeskOneUserInfo(netMsg);
      },
      onDeskUserInfoResp: function onDeskUserInfoResp(netMsg) {
        this.dealNotifyDeskAllUserInfo(netMsg);
      },
      onDeskCheckPointInfoResp: function onDeskCheckPointInfoResp(netMsg) {
        this.dealNotifyDeskCheckPointInfo(netMsg);
      },
      onGameMessage: function onGameMessage(netMsg) {
        this.getGameLogic() && this.getGameLogic().onGameMessage(netMsg);
      },
      onResourceChange: function onResourceChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LoaderNotifyResourceChange = function _Resolve_LoaderNotifyResourceChange(netMsg) {
            "\u901a\u77e5\u8d44\u6e90\u53d8\u5316\n                    struct LoaderNotifyResourceChange\n                    {\n                        int userID;\n                        int resourceType;\n                        long long value;\t\t\t// \u603b\u91cf\n                    };";
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.resourceType = netMsg.popINT();
            struct.value = netMsg.popLONGLONG();
            struct.resourceType == E_ResourceType.GOLD && (struct.value = struct.value);
            return struct;
          };
          var info = _Resolve_LoaderNotifyResourceChange(netMsg);
          var user = this.getUserByID(info.userID);
          if (user) if (E_ResourceType.GOLD == info.resourceType) {
            var oldMoney = user.money ? user.money : 0;
            var newMoney = info.value;
            user.money = info.value;
            (this.isGoldRoom() || this.isPrivateRoom() || this.isTableRoom()) && this.getGameLogic() && this.getGameLogic().dealNotifyDeskMoney(user.userID, newMoney, oldMoney, true, E_ResourceType.GOLD, info.reason);
          } else if (E_ResourceType.CARD == info.resourceType) ; else if (E_ResourceType.FIRECOIN == info.resourceType) {
            var _oldMoney = info.value - info.change;
            var _newMoney = info.value;
            user.score = info.value;
            this.isVIPRoom() && this.getGameLogic() && this.getGameLogic().dealNotifyDeskMoney(user.userID, _newMoney, _oldMoney, true, E_ResourceType.FIRECOIN);
          }
        }
      },
      onGameYanCode: function onGameYanCode(netMsg) {
        G_HANDLE_CODE_OK == netMsg.bHandleCode && this.getGameLogic() && this.getGameLogic().dealNotifyDeskGameYanCode(netMsg);
      },
      setReadyTimeData: function setReadyTimeData(leftReadyTime, cfgReadyTime) {
        this.leftReadyTime = leftReadyTime || 30;
        this.cfgReadyTime = cfgReadyTime || 60;
      },
      setLeftReadyTime: function setLeftReadyTime(leftReadyTime) {
        this.leftReadyTime = leftReadyTime;
      },
      getLeftReadyTime: function getLeftReadyTime() {
        return this.leftReadyTime;
      },
      getCfgReadyTime: function getCfgReadyTime() {
        return this.cfgReadyTime;
      },
      getIsSendLogoutRoom: function getIsSendLogoutRoom() {
        return this.isSendLogoutRoom;
      },
      setIsSendLogoutRoom: function setIsSendLogoutRoom(isSendLogoutRoom) {
        this.isSendLogoutRoom = isSendLogoutRoom;
      },
      onEnterBackground: function onEnterBackground() {
        this.isConnected() && this.throwGameMsgTrue();
      },
      createNetMsg: function createNetMsg(uMessageSize, bMainID, bAssistantID, bHandleCode, roomID) {
        roomID = roomID || this.getRoomInfo().roomID;
        var p = Package.buildWritePack(uMessageSize);
        p.writeBegin(bMainID, bAssistantID, roomID);
        return p;
      },
      throwGameMsgTrue: function throwGameMsgTrue() {},
      onEnterForeground: function onEnterForeground() {
        var _this4 = this;
        if (LobbySocket.isConnected()) {
          this.tmpDelay = function() {
            _this4.sendHelloMessage();
            if (_this4.getGameLogic()) try {
              _this4.getGameLogic().clearGame();
              _this4.getGameLogic().sendDeskInfo();
              _this4.getGameLogic().sendDeskUserInfo();
              _this4.getGameLogic().sendGameInfo();
            } catch (e) {}
          };
          this.scheduleOnce(this.tmpDelay, .01);
        } else {
          this.tmpDelay = function() {
            createRepeatConnectLayer(cc.director.getScene());
          };
          this.scheduleOnce(this.tmpDelay, .01);
        }
      },
      CGameSocket_onSocketMsg: function CGameSocket_onSocketMsg(netMsg) {
        this.resolveNetMsgHead(netMsg);
        netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectSuccess || netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectFailed || netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_DisConnect || E_NET_CONNECT_MAINID.mainid_net_connect == netMsg.bMainID || removeLoading();
        if (netMsg.bHandleCode !== G_HANDLE_CODE_OK) {
          var errorString = GlobalError.getErrorStr(netMsg.bHandleCode);
          if ("" !== errorString) return createTips(errorString);
        }
        var callbackFunOfNet = this.getCallbackFun(netMsg.getCmd());
        if (callbackFunOfNet) {
          this.removeNetCallback(netMsg.getCmd());
          callbackFunOfNet(netMsg);
        } else MSG_MAIN_LOADER_LOGON == netMsg.bMainID ? this.onLoginMessage(netMsg) : MSG_MAIN_LOADER_NOTIFY_USER == netMsg.bMainID ? this.onGameNotifyUserMessage(netMsg) : MSG_MAIN_LOADER_NOTIFY == netMsg.bMainID ? this.onGameNotifyMessage(netMsg) : MSG_MAIN_LOADER_FRAME == netMsg.bMainID ? this.onFrameMessage(netMsg) : MSG_MAIN_LOADER_GAME == netMsg.bMainID ? this.onGameMessage(netMsg) : MSG_MAIN_LOADER_RESOURCE_CHANGE == netMsg.bMainID ? this.onResourceChange(netMsg) : MSG_MAIN_LOADER_VCODE == netMsg.bMainID ? this.onGameYanCode(netMsg) : netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectSuccess || netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectFailed || netMsg.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_DisConnect || E_NET_CONNECT_MAINID.mainid_net_connect == netMsg.bMainID || cc.log("GameSocket \u8fd8\u6536\u5230\u4e86 bMainID=" + netMsg.bMainID + ", bAssistantID=" + netMsg.bAssistantID + " \u7684\u6d88\u606f\u6ca1\u6709\u89e3\u6790 \u8fde\u63a5\u6d88\u606f(1, 1)\u548c\u5fc3\u8df3\u6d88\u606f(1, 2)\u9664\u5916\uff0c\u5f80\u4e0b\u67e5\u770b\u662f\u5426\u662f\u6e38\u620f\u5f00\u53d1\u8005\u81ea\u5df1\u7ed1\u5b9a\u7684\u6d88\u606f");
      }
    });
    module.exports = GameSocket;
    cc._RF.pop();
  }, {
    TcpClient: "TcpClient"
  } ],
  GameViewBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7907bXlJspFC4Ec08KDst8V", "GameViewBase");
    "use strict";
    var _require = require("os"), type = _require.type;
    var GameViewBase = cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        chouMaNodePoolNum: 28,
        GameCommonBetPrefab: cc.Prefab
      },
      ctor: function ctor() {
        var _this = this;
        this.tuoGuanLayer = null;
        this.hasTuoGuanLayer = false;
        if (!cc.checkIsFrontBack) {
          cc.checkIsFrontBack = true;
          this.checkIsFrontStage();
        }
        this.loadingFlag = false;
        this.isLoadedScene = false;
        cc.director.once(cc.Director.EVENT_AFTER_SCENE_LAUNCH, function() {
          _this.isLoadedScene = true;
        });
      },
      setUiInfo: function setUiInfo(uiInfo) {
        cc.game.setFrameRate(45);
        this.uiInfo = uiInfo;
        this.name = "GameScene";
        this.uiInfo.gameBg = this.uiInfo.gameBg ? this.uiInfo.gameBg : this.node;
        this.private_DismissRoomLayer = null;
        this.private_PlayerUiList = {};
        this.private_VoiceQueue = {};
        this.private_IsPlayingVoice = false;
        this.private_VoiceLayer = null;
        this.private_RecordInterval = 3;
        this.private_readyfun = null;
        this.private_RecordTimeMin = 2;
        this.private_RecordTimeMax = 15;
        this.private_moveToCancel = 50;
        this.private_recordTime = 1;
        this.private_min_dist = 100;
        this.private_check_dist = true;
        this.private_AreaChouMaList = {};
        if (this.uiInfo.betAreaInfo && this.uiInfo.betAreaInfo.areaCount) for (var i = 0; i < this.uiInfo.betAreaInfo.areaCount; i++) this.private_AreaChouMaList[i] = {};
        var _BUTTON_TAG_BIGEN = 100;
        var _BUTTON_KEY = [ "voiceBtn", "chatBtn", "playMoth", "exitBtn", "setBtn", "dismissBtn", "startBtn", "inviteBtn", "changeBtn", "sitBtn", "beginBtn", "locatBtn" ];
        this._BUTTON_TAG = {};
        for (var _i = 0; _i <= _BUTTON_KEY.length; _i++) {
          var v = _BUTTON_KEY[_i];
          this._BUTTON_TAG[v] = _i + _BUTTON_TAG_BIGEN;
        }
        this.initGameUIVisible();
        this.initGameUIEventListener();
        this.uiInfo.playInfo && this.simpleAddLayer("prefab/lobby/WarRecordSetLayer");
        this.isCanTuoGuan = {};
        this.isCanTuoGuan.gold = false;
        this.isCanTuoGuan.card = false;
        this.isCanTuoGuan["private"] = false;
        this.isCanTuoGuan.barriermatch = false;
        this.isCanTuoGuan.match = false;
        this.showResultDelayTime = 2;
        this.matchPlayerFans = [];
        this.matchPlayerInfos = [];
      },
      showPersonMsgDialog: function showPersonMsgDialog(userData, headerNode, playerUINode, target) {
        var layerName = "prefab/personMsgDialog";
        this.simpleAddLayer(layerName, userData, true, headerNode, playerUINode, target);
      },
      initTableLogic: function initTableLogic(tableLogic) {
        this.tableLogic = tableLogic;
        this.getLogicCallBack();
      },
      onLoad: function onLoad() {
        var _this2 = this;
        this._super();
        if (this.GameCommonBetPrefab) if (cc._chouMaNodePool) {
          if (cc._chouMaNodePool.size() < this.chouMaNodePoolNum) {
            var leftPoolSize = this.chouMaNodePoolNum - cc._chouMaNodePool.size();
            for (var _i2 = 0; _i2 < leftPoolSize; ++_i2) {
              var _GameCommonBetPrefab = cc.instantiate(this.GameCommonBetPrefab);
              cc._chouMaNodePool.put(_GameCommonBetPrefab);
            }
          }
        } else {
          cc._chouMaNodePool = new cc.NodePool();
          for (var i = 0; i < this.chouMaNodePoolNum; ++i) {
            var GameCommonBetPrefab = cc.instantiate(this.GameCommonBetPrefab);
            cc._chouMaNodePool.put(GameCommonBetPrefab);
          }
        }
        this.checkGameSuccess = setTimeout(function() {
          _this2.scheduleOnce(function() {
            if (_this2.node && cc.isValid(_this2.node) && !_this2.node.getChildByName("GameSettingMenu")) if (_this2.uiInfo.playInfo) _this2.checkGameSuccess && clearTimeout(_this2.checkGameSuccess); else {
              _this2.exitBtnTouchEnded();
              _this2.scheduleOnce(function() {
                _this2.node && cc.isValid(_this2.node) && _this2.tableLogic.backLobby();
              }, 3.5);
            }
          }, 2);
        }, 500);
      },
      onDestroy: function onDestroy() {
        this.checkGameSuccess && clearTimeout(this.checkGameSuccess);
        LobbySocket.clearPackageQueue();
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();
      },
      createChouMa: function createChouMa() {
        if (this.GameCommonBetPrefab) {
          var chouMaNode = null;
          chouMaNode = cc._chouMaNodePool.size() > 0 ? cc._chouMaNodePool.get(this) : cc.instantiate(this.GameCommonBetPrefab);
          chouMaNode.active || (chouMaNode.active = true);
          return chouMaNode;
        }
      },
      despawnChouMa: function despawnChouMa(chouMaNode) {
        this.GameCommonBetPrefab && cc._chouMaNodePool.put(chouMaNode);
      },
      onConnectSuccess: function onConnectSuccess() {
        var _this3 = this;
        this.releaseCaches();
        var roomInfo = {};
        cc.log("onConnectSuccess beg");
        if (!this.uiInfo || !this.uiInfo.playInfo) {
          this.tableLogic.sendDeskInfo();
          this.tableLogic.sendDeskUserInfo();
          this.tableLogic.sendGameInfo();
          roomInfo = RoomListManager.getRoomInfo() ? RoomListManager.getRoomInfo() : {};
        }
        cc.log("onConnectSuccess 5555");
        var isShowTuoGuan = {};
        var roomType = E_ROOM_TYPE.CARD;
        if (!this.uiInfo || !this.uiInfo.playInfo) {
          isShowTuoGuan = this.getIsCanTuoGuan();
          roomType = roomInfo.type;
        }
        cc.log("onConnectSuccess 666");
        var gameSetting = "GameSetting";
        var showBtnRes = null;
        if (this.uiInfo && this.uiInfo.playInfo) {
          gameSetting = this.uiInfo.gameSetting;
          showBtnRes = this.uiInfo.showBtnRes;
        }
        this.gameSettingLayer = null;
        this.addLayer(this.node, gameSetting, function(settingLayer) {
          settingLayer.zIndex = G_GAME_SET_ZORDER_TAG;
          settingLayer.name = "GameSettingMenu";
          _this3.gameSettingLayer = settingLayer;
        }, this, roomType, isShowTuoGuan, showBtnRes);
        cc.log("onConnectSuccess 777");
        if (1 == UserInfoManager.getMyInfo().matchStatus) {
          UserInfoManager.getMyInfo().matchStatus = 0;
          var checkMatchStatus = function checkMatchStatus() {};
          this.scheduleOnce(this.checkMatchStatus, 1);
        }
      },
      enterTransitionFinish: function enterTransitionFinish() {},
      initGameUIVisible: function initGameUIVisible() {
        this.uiInfo.roomPswText && (this.uiInfo.roomPswText.active = false);
        this.uiInfo.roomMasterText && (this.uiInfo.roomMasterText.active = false);
        this.uiInfo.gameCountText && (this.uiInfo.gameCountText.active = false);
        this.uiInfo.gameBasePoint && (this.uiInfo.gameBasePoint.active = false);
        this.uiInfo.dismissBtn && (this.uiInfo.dismissBtn.active = false);
        this.uiInfo.exitBtn && (this.uiInfo.exitBtn.active = false);
        this.uiInfo.setBtn && (this.uiInfo.setBtn.active = false);
        this.uiInfo.locatBtn && (this.uiInfo.locatBtn.active = false);
        this.uiInfo.btn_img && (this.uiInfo.btn_img.active = false);
        this.uiInfo.img_createrCard && (this.uiInfo.img_createrCard.active = false);
        this.uiInfo.btn_room && (this.uiInfo.btn_room.active = false);
        this.showGoldRoomInfo(false);
        this.showBuyRoomInfo(false);
        this.showMatchRoomInfo(false);
      },
      initGameUIEventListener: function initGameUIEventListener() {
        var onTouchStartCallback = function(eventTouch) {
          var button = eventTouch.target;
          var tag = button.buttonTag;
          if ("touchend" == eventTouch.type) {
            this.playClickEffect();
            "voiceBtn" == tag ? this.voiceBtnTouchEnded() : "chatBtn" == tag ? this.chatBtnTouchEnded() : "playMoth" == tag ? this.doPlayMothonClick() : "startBtn" == tag ? this.doStartBtnTouchEnded() : "inviteBtn" == tag ? this.doInviteBtnTouchEnded() : "changeBtn" == tag ? this.doChangeBtnTouchEnded() : "sitBtn" == tag ? this.doSitBtnTouchEnded() : "beginBtn" == tag ? this.doBeginBtnTouchEnded() : "locatBtn" == tag ? this.doLocatBtnTouchEnded() : cc.log(tools.stringFormat("\u672a\u5b9a\u4e49\u7684TAG = {0}", tag));
          } else "touchstart" == eventTouch.type || "touchcancel" == eventTouch.type;
        }.bind(this);
        for (var k in this._BUTTON_TAG) if (this.uiInfo[k]) {
          this.uiInfo[k].buttonTag = k;
          this.uiInfo[k].on(cc.Node.EventType.TOUCH_START, onTouchStartCallback);
          this.uiInfo[k].on(cc.Node.EventType.TOUCH_CANCEL, onTouchStartCallback);
          this.uiInfo[k].on(cc.Node.EventType.TOUCH_END, onTouchStartCallback);
        }
      },
      getMoneyDisplay: function getMoneyDisplay(money) {
        this.roomInfo_ = this.roomInfo_ || RoomListManager.getRoomInfo();
        if (this.roomInfo_ && (this.roomInfo_.type == E_ROOM_TYPE.PRIVATE || this.roomInfo_.type == E_ROOM_TYPE.TABLE || this.roomInfo_.type == E_ROOM_TYPE.GOLD)) return F_GetMoneyDisplay(money);
        return money;
      },
      doStartBtnTouchEnded: function doStartBtnTouchEnded() {
        this.uiInfo.startBtn.active = false;
        this.tableLogic.sendAgreeGame();
      },
      doInviteBtnTouchEnded: function doInviteBtnTouchEnded() {
        var layerName = "prefab/LayerLeadShare";
        this.simpleAddLayer(layerName);
      },
      doChangeBtnTouchEnded: function doChangeBtnTouchEnded() {
        this.tableLogic.sendChangeDesk();
      },
      doSitBtnTouchEnded: function doSitBtnTouchEnded() {
        this.tableLogic.sendSit();
      },
      doBeginBtnTouchEnded: function doBeginBtnTouchEnded() {
        this.tableLogic.sendStart();
      },
      doLocatBtnTouchEnded: function doLocatBtnTouchEnded() {
        this.createLocatInfoLayer();
      },
      doPlayMothonClick: function doPlayMothonClick() {},
      dismissBtnTouchEnded: function dismissBtnTouchEnded() {
        if (this.uiInfo.playInfo) {
          LOOBBY_STATIC = false;
          cc.director.loadScene("lobby");
          return;
        }
        this.tableLogic.doDismissRoom();
      },
      isPlayStatic: function isPlayStatic() {
        return this.tableLogic.isPlayStatic();
      },
      exitBtnTouchEnded: function exitBtnTouchEnded() {
        this.tableLogic.doLeftRoom();
      },
      StandandWatchtBtnTouchEnded: function StandandWatchtBtnTouchEnded() {
        this.tableLogic.sendStandandWatch();
      },
      standBtnTouchEnded: function standBtnTouchEnded() {
        this.tableLogic.sendStand();
      },
      tuoBtnTouchEnded: function tuoBtnTouchEnded() {
        this.tableLogic.isMePlaying() && !this.tableLogic.isMeTuoGuan() ? this.tableLogic.sendAuto(true) : createTips("\u6e38\u620f\u4e2d\u624d\u53ef\u4ee5\u6258\u7ba1");
      },
      wanfaBtnTouchEnded: function wanfaBtnTouchEnded() {
        this.doPlayMothonClick();
      },
      quKuanBtnTouchEnded: function quKuanBtnTouchEnded() {
        console.log(">>>>>\u53d6\u6b3e>>>>>\u53d6\u6b3e");
      },
      showGameYanCode: function showGameYanCode(textData) {
        var _this4 = this;
        this.gameYanCode = textData;
        var layerName = "prefab/GameCommon/GameYanCode";
        var controllPrefabNode = function controllPrefabNode(loadedResource, gameID, textData) {
          var layerNode = cc.instantiate(loadedResource);
          if (_this4.node.getChildByName("GameYanCode")) {
            layerNode = _this4.node.getChildByName("GameYanCode");
            layerNode.active = true;
            layerNode.getComponent("GameYanCode").init(gameID, textData, _this4);
          } else {
            _this4.node.addChild(layerNode);
            layerNode.getComponent("GameYanCode").init(gameID, textData, _this4);
          }
        };
        var loadedResource = window.prefabMap.get(layerName);
        loadedResource ? controllPrefabNode(loadedResource, GameManager.getGameID(), textData) : cc.loader.loadRes(layerName, function(err, loadedResource) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          window.prefabMap.set(layerName, loadedResource);
          controllPrefabNode(loadedResource, GameManager.getGameID(), textData);
        }.bind(this));
      },
      yanBtnTouchEnded: function yanBtnTouchEnded() {
        this.simpleAddLayer("prefab/ChaYan/ChaYanZhuShouLayer", GameManager.getGameID());
      },
      removeVoiceLayer: function removeVoiceLayer() {
        if (this.private_VoiceLayer) {
          this.private_VoiceLayer.stopVoiceAction();
          this.private_VoiceLayer = null;
          this.private_startRecord = null;
          this.private_touchBeganY = null;
          this.private_showVoiceCancel = null;
          this.private_recordTime = 1;
        }
      },
      showVoiceCancel: function showVoiceCancel() {
        if (this.private_VoiceLayer && !this.private_showVoiceCancel) {
          this.private_VoiceLayer.showVoiceCancel();
          this.private_showVoiceCancel = true;
        }
      },
      showVoiceLayer: function showVoiceLayer() {
        if (this.private_VoiceLayer && this.private_showVoiceCancel) {
          this.private_VoiceLayer.showVoiceLayer();
          this.private_showVoiceCancel = null;
        }
      },
      voiceBtnTouchBegan: function voiceBtnTouchBegan() {
        this.private_startRecord = true;
        this.startScheduleRecordTime();
        this.removeVoiceLayer();
        var voiceNodeName = "ui.VoiceLayer";
        this.private_VoiceLayer = this.simpleAddLayer(this.uiInfo.gameBg, voiceNodeName);
        this.private_VoiceLayer.setLocalZOrder(G_VOICE_ZORDER_TAG);
        MYAudioEngine.startRecord();
      },
      startScheduleRecordTime: function startScheduleRecordTime() {
        this.stopScheduleRecordTime();
        var recordCallback = function recordCallback() {
          this.private_recordTime = this.private_recordTime + 1;
          cc.log("this.private_recordTime = {0}", this.private_recordTime);
          if (this.private_recordTime > this.private_RecordTimeMax) {
            this.voiceBtnTouchCanceled();
            this.stopScheduleRecordTime();
            this.private_isRecordTimeOver = true;
          }
        };
        this.schedule(recordCallback, 1, false);
        this.private_recordCallback = recordCallback;
      },
      stopScheduleRecordTime: function stopScheduleRecordTime() {
        if (this.private_recordCallback) {
          this.unschedule(this.private_recordCallback);
          this.private_recordCallback = null;
        }
      },
      voiceBtnTouchEnded: function voiceBtnTouchEnded() {
        var voiceNodeName = "prefab/VoiceLayer";
        this.simpleAddLayer(voiceNodeName);
      },
      clearRecordIntervalText: function clearRecordIntervalText() {
        if (!this.uiInfo.voiceBtn) return;
        var RecordIntervalText = this.uiInfo.voiceBtn.getChildByName("RecordIntervalText");
        RecordIntervalText && RecordIntervalText.removeFromParent();
      },
      setRecordInterval: function setRecordInterval() {},
      voiceBtnTouchCanceled: function voiceBtnTouchCanceled() {
        if (this.private_showVoiceCancel) {
          MYAudioEngine.cancelRecord();
          this.stopScheduleRecordTime();
          this.removeVoiceLayer();
        } else this.voiceBtnTouchEnded();
      },
      onTouchBegan: function onTouchBegan(touch, event) {
        cc.log("GameViewBase:onTouchBegan");
        if (this.private_startRecord && !this.private_touchBeganY) {
          this.private_touchBeganY = touch.getLocation().y;
          return true;
        }
      },
      onTouchMoved: function onTouchMoved(touch, event) {
        cc.log("GameViewBase:onTouchMoved");
        if (this.private_touchBeganY) {
          var move = touch.getLocation().y - this.private_touchBeganY;
          move >= this.private_moveToCancel ? this.showVoiceCancel() : this.showVoiceLayer();
        }
      },
      setBtnTouchEnded: function setBtnTouchEnded() {
        var playBackgroundMusic = function(index) {
          this.showGameBackColor(index);
        }.bind(this);
        var setName = "GameSetLayer";
        this.addLayer(this.node, setName, function(prefab) {
          prefab.zIndex = G_GAME_SET_ZORDER_TAG;
        }.bind(this), playBackgroundMusic, this);
      },
      RulesBtnTouchEnded: function RulesBtnTouchEnded() {
        var playBackgroundMusic = function() {}.bind(this);
        var setName = "RoomruletLayer";
        this.addLayer(this.node, setName, function(prefab) {
          prefab.zIndex = G_GAME_SET_ZORDER_TAG;
        }.bind(this), playBackgroundMusic);
      },
      setBtnTouchFeedLayer: function setBtnTouchFeedLayer() {
        var playBackgroundMusic = function() {}.bind(this);
        var setName = "Feed/FeedLayer_width";
        this.addLayer(this.node, setName, function(prefab) {
          prefab.zIndex = G_GAME_SET_ZORDER_TAG;
        }.bind(this), playBackgroundMusic);
      },
      showWaitTip: function showWaitTip(isShow, time, stopCallBack) {
        var _this5 = this;
        var layerName = "prefab/GameCommon/WaitTipLayer";
        if (isShow) {
          if (time > 0) {
            var controllPrefabNode = function controllPrefabNode(loadedResource, time) {
              var layerNode = cc.instantiate(loadedResource);
              layerNode.name = "WaitTipLayer";
              var node = _this5.node.getChildByName("WaitTipLayer");
              if (!node) {
                _this5.node.addChild(layerNode);
                layerNode.getComponent("WaitTipLayer").startTime(time, stopCallBack);
              }
            };
            var loadedResource = window.prefabMap.get(layerName);
            loadedResource ? controllPrefabNode(loadedResource, time) : cc.loader.loadRes(layerName, function(err, loadedResource) {
              if (err) {
                cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
                return;
              }
              window.prefabMap.set(layerName, loadedResource);
              controllPrefabNode(loadedResource, time);
            }.bind(this));
          }
        } else {
          var node = this.node.getChildByName("WaitTipLayer");
          node && node.destroy();
        }
      },
      chatBtnTouchEnded: function chatBtnTouchEnded() {
        var layerName = "prefab/ChatLayer";
        this.simpleAddLayer(layerName);
      },
      getUserByPos: function getUserByPos(worldPos) {
        if (!this.uiInfo.seatCount) return null;
        for (var i = 0; i < this.uiInfo.seatCount; i++) if (this.private_PlayerUiList[i] && this.private_PlayerUiList[i].isInUser(worldPos)) {
          var logicSeatNO = this.tableLogic.viewToLogicSeatNo(i);
          return this.tableLogic.getUserBySeat(logicSeatNO);
        }
        return null;
      },
      addUser: function addUser(user, viewSeatNO) {
        if (!this.uiInfo) return;
        if (null == user) {
          cc.log("Error in GameViewBase:addUser \u73a9\u5bb6\u4fe1\u606f\u4e3a\u7a7a");
          return;
        }
        if (null == viewSeatNO) {
          cc.log("Error in GameViewBase:addUser \u73a9\u5bb6\u89c6\u56fe\u5ea7\u4f4d\u53f7\u4e3a\u7a7a");
          return;
        }
        if (!this.uiInfo.seatCount || !(0 <= viewSeatNO && viewSeatNO < this.uiInfo.seatCount)) {
          cc.log("Error in GameViewBase:addUser \u89c6\u56fe\u5ea7\u4f4d\u53f7\u8d85\u51fa\u8303\u56f4");
          return;
        }
        cc.log("GameViewBase:addUser uid:" + user.userID + " name:" + user.name + " seat:" + user.deskStation + " viewSeat:" + viewSeatNO);
        this.removeUser(viewSeatNO);
        var isBuyRoom = true;
        this.uiInfo.playInfo || (isBuyRoom = this.tableLogic.isBuyRoom());
        var playerUI;
        if (this.uiInfo.playerUIs) {
          playerUI = this.uiInfo.playerUIs[viewSeatNO];
          if (!playerUI) return;
          playerUI.active = true;
        } else {
          playerUI = cc.instantiate(this.uiInfo.playerPrefab);
          var playerPosNode = this.uiInfo.sitPosArr && this.uiInfo.sitPosArr[viewSeatNO];
          playerUI.zIndex = G_PLAYERUI_ZORDER_TAG;
          playerPosNode.addChild(playerUI);
        }
        this.uiInfo.playerScale && 0 != viewSeatNO && playerUI.setScale(.75);
        this.tableLogic.getUserByID(user.userID) && (user.money = this.tableLogic.getUserByID(user.userID).money);
        var ScriptName = "PlayerUI";
        this.uiInfo.playerUIScriptName && (ScriptName = this.uiInfo.playerUIScriptName);
        var playerUIScript = playerUI.getComponent(ScriptName);
        playerUIScript.setData(user, this);
        this.private_PlayerUiList[viewSeatNO] = playerUIScript;
        if (this.uiInfo.sitInforArr && !this.uiInfo.playInfo && this.uiInfo.sitInforArr[viewSeatNO]) {
          user.userStatus != E_UserStatus.USER_STATUS_WATCH && this.tableLogic.getGameStatus() == HZMJ_GameStation.GS_STATUS_FREE && 0 == viewSeatNO && this.uiInfo.btn_loading_Startimg && (this.uiInfo.btn_loading_Startimg.active = false);
          0 == viewSeatNO && this.uiInfo.btn_room && (this.uiInfo.btn_room.active = false);
          var playInfor = this.uiInfo.sitInforArr[viewSeatNO];
          var Text_Name = playInfor.getChildByName("Name").getComponent(cc.Label);
          var Image_Avata = playInfor.getChildByName("Avata_Node").getChildByName("Image_Avata");
          Image_Avata.active = true;
          Text_Name.string = tools.getCutStringByCount(user.name, 5);
          var onGetHeadRes = function(headRes) {
            Image_Avata && cc.isValid(Image_Avata) && (Image_Avata.getComponent(cc.Sprite).spriteFrame = headRes);
          }.bind(this);
          AvatarManager.requestHeadRes(user.headURL, user.userID, onGetHeadRes, Image_Avata);
        }
        this.uiInfo.playInfo || this.tableLogic.viewToLogicSeatNo(viewSeatNO) == this.tableLogic.getCurBankerSeatNO() && 255 != this.tableLogic.getCurBankerSeatNO() && this.showUserBankerFlag(viewSeatNO, true);
        null != this.uiInfo.playInfo || null != user.isOnline || isNotNeedCutMsg || this.showUserCut(viewSeatNO);
        if (!this.uiInfo.playInfo) {
          this.showRoomMaster(viewSeatNO, this.tableLogic.getRoomMasterId());
          this.showUserAuto(viewSeatNO, user.isAuto);
          this.showUserReady(viewSeatNO, E_UserStatus.USER_STATUS_AGREE == user.userStatus);
          user.userID == this.tableLogic.getMyID() && this.refreshMyUI(user);
          this.addUserOtherInfo(viewSeatNO, user);
        }
      },
      refreshMyUI: function refreshMyUI(user) {
        if (this.tableLogic.isGoldRoom()) {
          this.showGoldRoomInfo(true);
          user.userStatus == E_UserStatus.USER_STATUS_SITING ? this.scheduleReadyFun(this.tableLogic.getLeftReadyTime()) : E_UserStatus.USER_STATUS_AGREE == user.userStatus ? this.uiInfo.startBtn && (this.uiInfo.startBtn.active = false) : user.userStatus == E_UserStatus.USER_STATUS_PLAYING && this.showGoldRoomInfo(false);
        }
        if (this.tableLogic.isRoom()) {
          if (this.uiInfo.startBtn) {
            var curCount = this.tableLogic.getGameCurCountData();
            this.uiInfo.startBtn.active = user.userStatus == E_UserStatus.USER_STATUS_SITING;
          }
          this.uiInfo.watchImg && (this.uiInfo.watchImg.active = false);
          this.uiInfo.sitBtn && (this.uiInfo.sitBtn.active = false);
          this.uiInfo.voiceBtn;
          this.uiInfo.chatBtn && (this.uiInfo.chatBtn.active = true);
          this.uiInfo.locatBtn && (this.uiInfo.locatBtn.active = true);
        }
        user.userStatus == E_UserStatus.USER_STATUS_PLAYING ? this.setCheckPointGameShowLeaveMenu(false) : this.setCheckPointGameShowLeaveMenu(true);
      },
      getPlayerUiByViewSeatNO: function getPlayerUiByViewSeatNO(viewSeatNO) {
        return this.private_PlayerUiList[viewSeatNO];
      },
      removeUser: function removeUser(viewSeatNO) {
        if (this.private_PlayerUiList && this.private_PlayerUiList[viewSeatNO]) {
          this.private_PlayerUiList[viewSeatNO].node.active = false;
          this.private_PlayerUiList[viewSeatNO] = null;
          this.removeUserOtherInfo(viewSeatNO);
        }
        if (this.uiInfo && this.uiInfo.sitInforArr && this.uiInfo.sitInforArr[viewSeatNO]) {
          if (0 == viewSeatNO) {
            this.uiInfo.btn_loading_Startimg && (this.uiInfo.btn_loading_Startimg.active = false);
            this.uiInfo.btn_room && (this.uiInfo.btn_room.active = false);
            this.uiInfo.beginBtn && (this.uiInfo.beginBtn.active = false);
          }
          var playInfor = this.uiInfo.sitInforArr[viewSeatNO];
          var Text_Name = playInfor.getChildByName("Name").getComponent(cc.Label);
          var Image_Avata = playInfor.getChildByName("Avata_Node").getChildByName("Image_Avata");
          var showReady = playInfor.getChildByName("showReady");
          showReady.active = false;
          Image_Avata.active = false;
          Text_Name.string = "";
        }
      },
      removeAllPlayerUI: function removeAllPlayerUI() {
        cc.log(" removeAllPlayerUI()");
        for (var viewSeatNO in this.private_PlayerUiList) {
          "string" == typeof viewSeatNO && (viewSeatNO = Number(viewSeatNO));
          cc.log(" removeUser viewSeatNO = {0} " + viewSeatNO);
          this.removeUser(viewSeatNO);
        }
      },
      dealNotifyDeskGameBegin: function dealNotifyDeskGameBegin() {
        if (this.uiInfo && this.uiInfo.seatCount) for (var i = 0; i < this.uiInfo.seatCount; i++) this.private_PlayerUiList[i] && this.showUserReady(i, false);
        if (this.tableLogic.isGoldRoom()) {
          this.unscheduleReadyFun();
          this.showGoldRoomInfo(false);
        }
        (this.tableLogic.isBuyRoom() || this.tableLogic.isPrivateRoom() || this.tableLogic.isVIPRoom()) && this.showBuyRoomInfo(false);
        this.setCheckPointGameShowLeaveMenu(false);
      },
      dealNotifyDeskGameFinish: function dealNotifyDeskGameFinish(info) {
        if (this.uiInfo && this.uiInfo.seatCount) for (var i = 0; i < this.uiInfo.seatCount; i++) this.private_PlayerUiList[i] && this.private_PlayerUiList[i].showBet(false);
        if (this.tableLogic.isGoldRoom() || this.tableLogic.isRankMatchRoom()) {
          this.scheduleReadyFun(this.tableLogic.getCfgReadyTime());
          var tmpDelay = function tmpDelay() {
            this.showGoldRoomInfo(true);
            var user = this.tableLogic.getUserByID(this.tableLogic.getMyID());
            user && this.uiInfo.startBtn && (this.uiInfo.startBtn.active = user.userStatus == E_UserStatus.USER_STATUS_SITING);
          };
          this.scheduleOnce(tmpDelay, this.showResultDelayTime, "\u5ef6\u8fdf3\u79d2\u663e\u793a\u51c6\u5907\u6309\u94ae");
        }
        if (this.tableLogic.isBuyRoom() || this.tableLogic.isPrivateRoom() || this.tableLogic.isVIPRoom()) {
          var gameCountValue = this.tableLogic.getGameCountInfo();
          var curCount = gameCountValue[0];
          var totalCount = gameCountValue[1];
          if (curCount != totalCount) {
            if (this.uiInfo.startBtn && !this.tableLogic.isMeWatching()) {
              var _tmpDelay = function _tmpDelay() {
                var user = this.tableLogic.getUserByID(this.tableLogic.getMyID());
                if (user) {
                  user.userStatus == E_UserStatus.USER_STATUS_SITING && (this.uiInfo.startBtn.x = 0);
                  this.uiInfo.startBtn.active = user.userStatus == E_UserStatus.USER_STATUS_SITING;
                }
              };
              this.scheduleOnce(_tmpDelay, this.showResultDelayTime);
            }
            this.tableLogic.isMeWatching() && this.uiInfo.sitBtn && (this.uiInfo.sitBtn.active = !this.tableLogic.isDeskPlaying());
          }
        }
        if (this.tableLogic.isPrivateRoom()) {
          var strinname = "";
          var userCount = 0;
          var _gameCountValue = this.tableLogic.getGameCountInfo();
          var _curCount = _gameCountValue[0];
          var _totalCount = _gameCountValue[1];
          if (_curCount != _totalCount) for (var k in info.needMoneyuserID) {
            var v = info.needMoneyuserID[k];
            if (0 != v) {
              var username = this.tableLogic.getUserNameByID(v);
              strinname = strinname + username + " ";
              userCount += 1;
            }
          }
          var checkStringName = strinname.replace(/\s+/g, "");
          "" != checkStringName && 0 != userCount && createTips("\u7528\u6237: " + strinname + "\u91d1\u5e01\u4e0d\u8db3\u4ee5\u7ee7\u7eed\u6e38\u620f,\u6b63\u5728\u5145\u503c\u4e2d,\u8bf7\u7a0d\u7b49", 10);
        }
        if (this.tableLogic.isVIPRoom()) {
          var _strinname = "";
          var _userCount = 0;
          var _gameCountValue2 = this.tableLogic.getGameCountInfo();
          var _curCount2 = _gameCountValue2[0];
          var _totalCount2 = _gameCountValue2[1];
          if (_curCount2 != _totalCount2) for (var _k in info.needMoneyuserID) {
            var _v = info.needMoneyuserID[_k];
            if (0 != _v) {
              var _username = this.tableLogic.getUserNameByID(_v);
              _strinname = _strinname + _username + " ";
              _userCount += 1;
            }
          }
          var _checkStringName = _strinname.replace(/\s+/g, "");
          "" != _checkStringName && 0 != _userCount && createTips("\u7528\u6237: " + _strinname + "\u706b\u5e01\u4e0d\u8db3\u4ee5\u7ee7\u7eed\u6e38\u620f,\u6b63\u5728\u5145\u503c\u4e2d,\u8bf7\u7a0d\u7b49", 10);
        }
      },
      dealNotifyDeskCanBegin: function dealNotifyDeskCanBegin() {
        this.showBeginBtn(true);
        this.uiInfo.btn_img && (this.uiInfo.btn_img.active = false);
      },
      dealNotifyDeskCannotbegin: function dealNotifyDeskCannotbegin() {
        this.showBeginBtn(false);
        this.uiInfo.btn_img && (this.uiInfo.btn_img.active = false);
      },
      updateUserMoney: function updateUserMoney(viewSeatNO, money, lastMoney, resourceType, isMagice, reason) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].updateMoney(money, lastMoney, resourceType, reason);
      },
      updateUserJewels: function updateUserJewels(viewSeatNO, Jewels) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].updateJewels(Jewels);
      },
      playMagicExpress: function playMagicExpress(srcUserID, toUserID, magicType) {
        var _this6 = this;
        if (toUserID && srcUserID) for (var i in this.private_PlayerUiList) {
          var k = this.private_PlayerUiList[i];
          if (k) {
            k.user.userID == srcUserID && (srcUserID = i);
            k.user.userID == toUserID && (toUserID = i);
          }
        }
        var srcPlayerUI = null;
        var toPlayerUI = null;
        var startPos;
        var endPos;
        if (srcUserID > 10) {
          srcUserID > 10 && (srcPlayerUI = srcUserID == this.tableLogic.getMyID() ? this.getGameViewWanJiaNode() : this.getGameViewOhtersNode());
          toUserID > 10 ? toPlayerUI = this.getGameViewOhtersNode() : this.private_PlayerUiList && this.private_PlayerUiList[toUserID] && (toPlayerUI = this.private_PlayerUiList[toUserID].node);
        } else {
          this.private_PlayerUiList && this.private_PlayerUiList[srcUserID] && (srcPlayerUI = this.private_PlayerUiList[srcUserID].node);
          this.private_PlayerUiList && this.private_PlayerUiList[toUserID] && (toPlayerUI = this.private_PlayerUiList[toUserID].node);
        }
        if (!srcPlayerUI) {
          cc.log("srcPlayerUI \u4e3a\u7a7a");
          return;
        }
        if (!toPlayerUI) {
          cc.log("toPlayerUI \u4e3a\u7a7a");
          return;
        }
        if (this.uiInfo.playerUIs) {
          startPos = this.node.convertToWorldSpace(srcPlayerUI);
          if (!toPlayerUI) {
            createTips("\u8be5\u5ea7\u4f4d\u5df2\u65e0\u73a9\u5bb6");
            return;
          }
          endPos = this.node.convertToWorldSpace(toPlayerUI);
        } else {
          var srcHeaderPosX = srcPlayerUI.getComponent("PlayerUI").getImageAvatar().x;
          var toHeaderPosX = srcPlayerUI.getComponent("PlayerUI").getImageAvatar().x;
          startPos = this.node.convertToWorldSpace(cc.v2(srcPlayerUI.parent.x, srcPlayerUI.parent.y));
          startPos.x = 0 == srcHeaderPosX ? startPos.x + srcHeaderPosX : startPos.x + srcHeaderPosX + 20;
          if (!toPlayerUI) {
            createTips("\u8be5\u5ea7\u4f4d\u5df2\u65e0\u73a9\u5bb6");
            return;
          }
          endPos = this.node.convertToWorldSpace(cc.v2(toPlayerUI.parent.x, toPlayerUI.parent.y));
          endPos.x = 0 == toHeaderPosX ? endPos.x + toHeaderPosX : endPos.x + toHeaderPosX + 20;
        }
        var tag = "";
        switch (magicType + "") {
         case "1":
          tag = "1";
          break;

         case "2":
          tag = "2";
          break;

         case "3":
          tag = "3";
          break;

         case "4":
          tag = "4";
          break;

         case "5":
          tag = "5_1";
          break;

         case "6":
          tag = "5_2";
          break;

         case "7":
          tag = "7";
          break;

         case "8":
          tag = "8";
          break;

         case "9":
          tag = "9";
          break;

         case "10":
          tag = "6";
        }
        var res = "Magic/skeleton";
        var animation = "animation";
        "" != tag && (animation = tag);
        var skeletonNode = skeletonAnimationCreate(res, animation);
        skeletonNode.zIndex = 1e4;
        skeletonNode.setScale(1.3);
        skeletonNode.setAnchorPoint(cc.v2(.5, .5));
        var sound = "";
        sound = "" == tag ? "1" : tag;
        MYAudioEngine.playEffect("Magic/sound/magic_" + magicType);
        skeletonNode.setPosition(cc.v2(startPos.x, startPos.y));
        this.node.addChild(skeletonNode);
        skeletonNode.runAction(cc.sequence(cc.moveTo(.45, cc.v2(endPos.x, endPos.y)), cc.callFunc(function() {
          var skeletonComponent = skeletonNode.getComponent(sp.Skeleton);
          skeletonComponent.loop = false;
          skeletonComponent.setCompleteListener(function() {
            var tmpDelay = function(dt) {
              skeletonNode && (skeletonNode.parent = null);
            }.bind(this);
            this.scheduleOnce(tmpDelay, .1);
          }.bind(_this6));
        })));
      },
      showSystemMsg: function showSystemMsg(sysMsg) {
        var sysLayer = cc.director.getNotificationNode();
        sysLayer.pushMsg(sysMsg);
      },
      showPropGiving: function showPropGiving(viewSeatNO, targetViewSeatNO, propId) {
        if (E_PROP_ID_DEF.prop_anti_id == propId || E_PROP_ID_DEF.prop_changecard_id == propId || E_PROP_ID_DEF.prop_recordcrad_id == propId) return;
        var startPos = this.uiInfo.sitPosArr[viewSeatNO];
        var targetPos = this.uiInfo.sitPosArr[targetViewSeatNO];
        var bMeRecv = this.tableLogic.viewToLogicSeatNo(targetViewSeatNO) == this.tableLogic.getMySeatNO();
        bMeRecv && (targetPos = cc.p(this.uiInfo.gameBg.getContentSize().width / 2, this.uiInfo.gameBg.getContentSize().height / 2));
      },
      showUserGrabMakers: function showUserGrabMakers(viewSeatNO) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showGrabMakersEffect();
      },
      showUserBankerFlag: function showUserBankerFlag(viewSeatNO, bShow) {
        for (var i = 0; i < this.uiInfo.seatCount; i++) this.private_PlayerUiList[i] && this.private_PlayerUiList[i].showBanker(false);
      },
      showUserBet: function showUserBet(viewSeatNO, bet) {
        cc.log("in GameViewBase:showUserBet viewSeatNO = {0}, bet = {1}", viewSeatNO, bet);
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showBet(true, bet);
      },
      showUserCut: function showUserCut(viewSeatNO) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showCut();
      },
      showUserReady: function showUserReady(viewSeatNO, bShow) {
        null == bShow && (bShow = true);
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showReady && this.private_PlayerUiList[viewSeatNO].showReady(bShow);
        if (this.uiInfo.sitInforArr[viewSeatNO]) {
          var playInfor = this.uiInfo.sitInforArr[viewSeatNO];
          var showReady = playInfor.getChildByName("showReady");
          showReady.active = bShow;
        }
      },
      showResultImg: function showResultImg(bShow, viewSeatNO, imgPath) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showResultImg(bShow, imgPath);
      },
      showRoomMaster: function showRoomMaster(viewSeatNO, masterID) {
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showPlayRoomMaster(masterID);
      },
      showQiangZhuang: function showQiangZhuang(viewSeatNO, bShow) {
        null == bShow && (bShow = true);
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showQiangZhuang && this.private_PlayerUiList[viewSeatNO].showQiangZhuang(bShow);
      },
      clearQiangZhuang: function clearQiangZhuang() {
        var playerUIList = this.private_PlayerUiList;
        Object.keys(playerUIList).forEach(function(key) {
          var playerUI = playerUIList[key];
          playerUI.showQiangZhuang(false);
        });
      },
      showUserAuto: function showUserAuto(viewSeatNO, bShow) {
        if (0 == viewSeatNO && !this.tableLogic.isMeWatching()) if (bShow) {
          if (false == this.hasTuoGuanLayer) {
            var cancelCallback = function() {
              if (!LobbySocket.isConnected()) {
                this.removeTuoGuanLayer();
                return;
              }
              this.tableLogic.sendAuto(false);
            }.bind(this);
            this.hasTuoGuanLayer = true;
            this.addLayer(this.node, "TuoGuanLayer", function(prefab) {
              prefab.zIndex = G_TUOGUAN_LAYER_TAG;
              this.tuoGuanLayer = prefab;
            }.bind(this), cancelCallback);
          }
        } else this.removeTuoGuanLayer();
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showAuto(bShow);
      },
      removeTuoGuanLayer: function removeTuoGuanLayer() {
        if (this.tuoGuanLayer) {
          this.tuoGuanLayer.getComponent(cc.Component).removeLayer();
          this.hasTuoGuanLayer = false;
        }
      },
      showUserWords: function showUserWords(viewSeatNO, words) {
        console.log("GameViewBase showUserWords", viewSeatNO);
        this.private_PlayerUiList[viewSeatNO] && this.private_PlayerUiList[viewSeatNO].showWords(words, this.tableLogic.getUserSexBySeat(this.tableLogic.viewToLogicSeatNo(viewSeatNO)), this);
      },
      playVoiceH5: function playVoiceH5(voiceID) {},
      dealNotifyRandomChangeSeat: function dealNotifyRandomChangeSeat(info, Callback) {},
      playUserVoice: function playUserVoice(viewSeatNO, voiceID) {
        var voiceManager = {};
        voiceManager.viewSeatNO = viewSeatNO;
        voiceManager.voiceID = voiceID;
        table.insert(this.private_VoiceQueue, voiceManager);
        this.checkVoiceQueue();
      },
      checkVoiceQueue: function checkVoiceQueue() {
        if (this.private_IsPlayingVoice) return;
        if (tableIsEmpty(this.private_VoiceQueue)) return;
        var voiceManager = table.remove(this.private_VoiceQueue, 1);
        if (!this.private_PlayerUiList[voiceManager.viewSeatNO]) {
          this.checkVoiceQueue();
          return;
        }
        var overVoicePlay = function overVoicePlay() {
          this.overVoicePlay();
        };
        this.private_IsPlayingVoice = true;
        this.private_PlayerUiList[voiceManager.viewSeatNO].playVoice(voiceManager.voiceID, overVoicePlay);
      },
      overVoicePlay: function overVoicePlay() {
        this.private_IsPlayingVoice = false;
        this.checkVoiceQueue();
      },
      showChouMa: function showChouMa(viewSeatNO, iChouMaType, betArea) {
        var tChouMa = {};
        viewSeatNO >= this.uiInfo.seatCount ? tChouMa.startPos = this.uiInfo.noSeatPos : tChouMa.startPos = this.uiInfo.sitPosArr[viewSeatNO];
        tChouMa.res = this.uiInfo.betAreaInfo.ChouMaResArr1[iChouMaType];
        tChouMa.offsetX = this.uiInfo.betAreaInfo.offsetX;
        tChouMa.offsetY = this.uiInfo.betAreaInfo.offsetY;
        tChouMa.targetPos = this.uiInfo.betAreaInfo.areaPosArr[betArea];
        tChouMa.parent = this.uiInfo.gameBg;
        tChouMa.scale = this.uiInfo.betAreaInfo.scale;
        var chouma = require("ui.ChouMaObj").create(tChouMa);
        this.private_AreaChouMaList[betArea][this.private_AreaChouMaList[betArea].length + 1] = chouma;
      },
      backChouMa: function backChouMa(betArea, targetPos) {
        betArea = betArea || 0;
        var scheduleBack = function scheduleBack(dt) {
          for (var i = 1; i < this.private_AreaChouMaList[betArea].length; i++) {
            var chouma = this.private_AreaChouMaList[betArea][i];
            table.remove(this.private_AreaChouMaList[betArea], i);
            chouma.goBack(targetPos);
            return;
          }
          this.unscheduleOnce(scheduleBack);
        };
        this.scheduleOnce(scheduleBack, .01);
      },
      quicklyBackChouMa: function quicklyBackChouMa() {
        for (var i = 0; i < this.uiInfo.betAreaInfo.areaCount; i++) {
          for (var j = 1; j < this.private_AreaChouMaList[i].length; j++) this.private_AreaChouMaList[i][j] && this.private_AreaChouMaList[i][j].removeFromParent();
          this.private_AreaChouMaList[i] = {};
        }
      },
      showVipRoomInfo: function showVipRoomInfo(info) {
        if (!info) return;
        window.deskPasswd = info.deskPasswd;
        if (this.uiInfo.roomPswText) {
          this.uiInfo.roomPswText.active = true;
          this.uiInfo.roomPswText.getComponent(cc.Label).string = tools.stringFormat("\u623f\u53f7: {0}", info.deskPasswd);
        }
        if (this.uiInfo.roomMasterText) {
          this.uiInfo.roomMasterText.active = true;
          this.uiInfo.roomMasterText.getComponent(cc.Label).string = tools.stringFormat("\u623f\u4e3b: {0}", info.masterName);
        }
        if (this.uiInfo.gameCountText) {
          this.uiInfo.gameCountText.active = true;
          this.uiInfo.gameCountText.getComponent(cc.Label).string = tools.stringFormat("\u5c40\u6570: {0}/{1}", 0 | info.runGameCount, info.totalGameCount);
        }
        for (var k in this.private_PlayerUiList) {
          var v = this.private_PlayerUiList[k];
          v && v.showPlayRoomMaster(info.masterID);
        }
        if (this.tableLogic.isMeWatching()) {
          this.uiInfo.watchImg && (this.uiInfo.watchImg.active = true);
          this.uiInfo.sitBtn && (this.uiInfo.sitBtn.active = !this.tableLogic.isDeskPlaying());
          this.uiInfo.voiceBtn;
          this.uiInfo.chatBtn && (this.uiInfo.chatBtn.active = false);
        } else {
          this.uiInfo.watchImg && (this.uiInfo.watchImg.active = false);
          this.uiInfo.sitBtn && (this.uiInfo.sitBtn.active = false);
          this.uiInfo.voiceBtn;
          this.uiInfo.chatBtn && (this.uiInfo.chatBtn.active = true);
        }
        this.doOtherThings(info);
        this.onDeskUserCountChange();
      },
      setShareInfo: function setShareInfo() {
        var name = LobbySocket.getMyInfo().name;
        var userID = LobbySocket.getMyInfo().userID;
        var gameID = GameManager.getGameID();
        var _title = GameManager.getGameNameByGameID(gameID);
        var gameRules = this.tableLogic.getGameRules();
        var TypeStr = GameManager.getRoomListTypeJsonRule(gameRules);
        var _desc = GameManager.getRoomListRsJsonRule(gameRules);
        var TimeStr = GameManager.getRoomListTimeJsonRule(gameRules);
        _desc = _desc + "-" + TimeStr + "-" + TypeStr + "--" + name + "(" + userID + ")";
        var Titles = window.sharedWords.length;
        var descTitle = "";
        Titles > 0 && (descTitle = window.sharedWords[Math.floor(Math.random() * (Titles - 1))]);
        _title = "\u5076ONE\u9189\u7f8e\u57ce";
        _desc = descTitle;
        if (wx) {
          wx.updateAppMessageShareData({
            title: _title,
            desc: _desc,
            link: wxShareURL,
            imgUrl: wxShareAdvIMG,
            success: function success() {}
          });
          wx.updateTimelineShareData({
            title: "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\u3002\u65e0\u9700\u4e0b\u8f7d\uff0c\u968f\u65f6\u968f\u5730\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01\uff01",
            desc: "",
            link: wxShareURL,
            imgUrl: wxShareAdvIMG,
            success: function success() {}
          });
        }
      },
      showGoldRoomInfo: function showGoldRoomInfo(isVisible) {
        if (!this.uiInfo) return;
        this.uiInfo.startBtn && (this.uiInfo.startBtn.active = isVisible);
        this.uiInfo.changeBtn && (this.uiInfo.changeBtn.active = isVisible);
      },
      showMatchRoomInfo: function showMatchRoomInfo(isVisible) {
        if (!this.uiInfo) return;
        if (!this.uiInfo.playInfo && !this.tableLogic.isMatchRoom()) return;
        this.uiInfo.startBtn && (this.uiInfo.startBtn.active = isVisible);
        this.uiInfo.exitBtn && (this.uiInfo.exitBtn.active = isVisible);
      },
      showBuyRoomInfo: function showBuyRoomInfo(isVisible) {
        this.uiInfo.startBtn && (this.uiInfo.startBtn.active = isVisible);
        this.uiInfo.inviteBtn && (this.uiInfo.inviteBtn.active = isVisible);
        this.uiInfo.sitBtn && (this.uiInfo.sitBtn.active = isVisible);
        if (this.uiInfo.beginBtn) {
          isVisible && cc.log("erroe");
          this.uiInfo.beginBtn.active = isVisible;
        }
        this.uiInfo.btn_loading_Startimg && (this.uiInfo.btn_loading_Startimg.active = false);
      },
      showBeginBtn: function showBeginBtn(isVisible) {
        if (this.uiInfo.beginBtn) {
          this.uiInfo.beginBtn.active = isVisible;
          isVisible && cc.log("erroe");
        }
        this.uiInfo.btn_loading_Startimg && (this.uiInfo.btn_loading_Startimg.active = false);
      },
      createDismissRoomLayer: function createDismissRoomLayer(data, callback) {
        var _this7 = this;
        var info = {};
        info.callback = callback;
        info.time = data.lefWaitDismissTime;
        info.cfgTime = data.cfgDismissTime;
        info.deskStation = data.deskStation;
        info.name = this.tableLogic.getUserNameBySeat(info.deskStation);
        info.myDeskStation = this.tableLogic.getMySeatNO();
        for (var i in data.userList) {
          var user = data.userList[i];
          user.name = this.tableLogic.getUserNameBySeat(user.deskStation);
          user.headURL = this.tableLogic.getUserHeadURLBySeat(user.deskStation);
          user.userID = this.tableLogic.getUserIdBySeat(user.deskStation);
        }
        info.userList = data.userList;
        var setUpdateView = function setUpdateView(info) {
          if (_this7.goBtnHavetAdd) return;
          if (_this7.private_DismissRoomLayer && null != _this7.private_DismissRoomLayer) _this7.private_DismissRoomLayer.updateLayer(info); else {
            _this7.goBtnHavetAdd = true;
            var removeCallback = function() {
              this.private_DismissRoomLayer = null;
            }.bind(_this7);
            var dismissLayer = _this7.uiInfo.dismissRoomLayer || "DismissRoomLayer";
            _this7.addLayer(_this7.node, dismissLayer, function(prefab) {
              prefab.newSetTag(G_DISMISS_ROOM_LAYER_TAG);
              prefab.zIndex = G_DISMISS_ROOM_LAYER_TAG;
              _this7.private_DismissRoomLayer = prefab.getComponent(cc.Component);
              _this7.goBtnHavetAdd = false;
            }, info, removeCallback);
          }
        };
        "" == info.userList["1"].name && this.scheduleOnce(function() {
          info.name = _this7.tableLogic.getUserNameBySeat(info.deskStation);
          info.myDeskStation = _this7.tableLogic.getMySeatNO();
          for (var _i3 in data.userList) {
            var _user = data.userList[_i3];
            _user.name = _this7.tableLogic.getUserNameBySeat(_user.deskStation);
            _user.headURL = _this7.tableLogic.getUserHeadURLBySeat(_user.deskStation);
            _user.userID = _this7.tableLogic.getUserIdBySeat(_user.deskStation);
          }
          info.userList = data.userList;
          setUpdateView(info);
        }, 1);
        setUpdateView(info);
      },
      removeDismissRoomLayer: function removeDismissRoomLayer() {
        if (this.private_DismissRoomLayer) {
          this.private_DismissRoomLayer.removeLayer();
          this.private_DismissRoomLayer = null;
        }
      },
      removeDismissRoomLayerEx: function removeDismissRoomLayerEx() {
        if (this.private_DismissRoomLayer) {
          this.private_DismissRoomLayer.removeLayerEx();
          this.private_DismissRoomLayer = null;
        }
      },
      createBuyGoldLayer: function createBuyGoldLayer(info, callback) {
        cc.log("GameViewBase:createBuyGoldLayer");
        if (this.private_BuyGoldLayer) this.private_BuyGoldLayer.updateLayer(info); else {
          var removeCallback = function removeCallback() {
            this.private_BuyGoldLayer = null;
          };
          var scene = cc.director.getScene();
          this.private_BuyGoldLayer = this.simpleAddLayer(scene, "ui.BuyGoldLayer", info, removeCallback, callback);
          this.private_BuyGoldLayer.newSetTag(G_BUYGOLD_ZORDER_TAG);
          this.private_BuyGoldLayer.setLocalZOrder(G_BUYGOLD_ZORDER_TAG);
        }
      },
      removeBuyGoldLayer: function removeBuyGoldLayer() {
        if (this.private_BuyGoldLayer) {
          this.private_BuyGoldLayer.removeLayer();
          this.private_BuyGoldLayer = null;
        }
      },
      scheduleReadyFun: function scheduleReadyFun(time) {
        cc.log(" scheduleReadyFun(time)");
        this.unscheduleReadyFun();
        var readyFun = function readyFun(dt) {
          this.private_readytime = this.private_readytime - 1;
          this.onReadyFun(this.private_readytime);
          if (this.private_readytime <= 0) {
            this.unschedule(this.private_readyfun);
            this.private_readyfun = null;
          }
        };
        this.schedule(readyFun, 1, false);
        this.private_readytime = time || 30;
        this.private_readyfun = readyFun;
        this.onReadyFun(this.private_readytime);
      },
      unscheduleReadyFun: function unscheduleReadyFun() {
        if (this.private_readyfun) {
          this.unschedule(this.private_readyfun);
          this.private_readyfun = null;
          this.onReadyFun(0);
        }
      },
      updateUserTuoGuan: function updateUserTuoGuan(user) {
        cc.log(user, " updateUserTuoGuan(user)");
        this.showUserAuto(this.tableLogic.logicToViewSeatNo(user.deskStation), user.isAuto);
      },
      setGoldIsCanTuoGuan: function setGoldIsCanTuoGuan(isCanTuoGuan) {
        this.isCanTuoGuan.gold = isCanTuoGuan;
      },
      setBarrierMatchIsCanTuoGuan: function setBarrierMatchIsCanTuoGuan(isCanTuoGuan) {
        this.isCanTuoGuan.barriermatch = isCanTuoGuan;
      },
      setCardIsCanTuoGuan: function setCardIsCanTuoGuan(isCanTuoGuan) {
        this.isCanTuoGuan.card = isCanTuoGuan;
      },
      setPrivateIsCanTuoGuan: function setPrivateIsCanTuoGuan(isCanTuoGuan) {
        this.isCanTuoGuan["private"] = isCanTuoGuan;
      },
      setMatchIsCanTuoGuan: function setMatchIsCanTuoGuan(isCanTuoGuan) {
        this.isCanTuoGuan.match = isCanTuoGuan;
      },
      setIsCanTuoGuan: function setIsCanTuoGuan(isCanTuoGuan) {
        for (var i in this.isCanTuoGuan) {
          var can = this.isCanTuoGuan[i];
          this.isCanTuoGuan[i] = isCanTuoGuan;
        }
      },
      getIsCanTuoGuan: function getIsCanTuoGuan() {
        return this.isCanTuoGuan;
      },
      onDeskUserAgree: function onDeskUserAgree(deskStation) {
        if (deskStation == this.tableLogic.getMySeatNO()) {
          this.uiInfo.startBtn && (this.uiInfo.startBtn.active = false);
          this.unscheduleReadyFun();
        }
        this.showUserReady(this.tableLogic.logicToViewSeatNo(deskStation));
      },
      onDeskUserSit: function onDeskUserSit(user) {
        if ("object" != typeof user) return;
        this.tableLogic.getMyID() == user.userID ? (this.tableLogic.isMatchRoom() || this.tableLogic.isBarrierMatchRoom()) && this.tableLogic.sendAgreeGame() : this.onDeskUserCountChange();
        this.private_check_dist && this.tableLogic.isRoom() && this.checkUserDist(user);
      },
      onDeskUserCountChange: function onDeskUserCountChange() {
        if ((this.tableLogic.isBuyRoom() || this.tableLogic.isPrivateRoom() || this.tableLogic.isVIPRoom()) && this.uiInfo.inviteBtn) if (this.tableLogic.isMePlaying()) {
          this.uiInfo.inviteBtn.active = false;
          this.uiInfo.startBtn.x = 0;
        } else {
          var seatCount = this.uiInfo.seatCount ? this.uiInfo.seatCount : 0;
          if (0 == seatCount) {
            this.uiInfo.inviteBtn.active = false;
            return;
          }
          var curUserCount = this.tableLogic.getDeskUserCount();
          if (curUserCount == seatCount) {
            this.uiInfo.inviteBtn.active = false;
            this.uiInfo.startBtn.x = 0;
          } else {
            var hasDeskInfo = false;
            this.tableLogic.getDeskInfo() && (hasDeskInfo = true);
            this.uiInfo.inviteBtn.active = hasDeskInfo;
          }
        }
      },
      setShowResultDelayTime: function setShowResultDelayTime(delayTime) {
        this.showResultDelayTime = delayTime;
      },
      getShowResultDelayTime: function getShowResultDelayTime() {
        return this.showResultDelayTime;
      },
      updateRulesView: function updateRulesView(rules) {
        if (this.tableLogic.isPrivateRoom()) {
          var rulesTable = JSON.parse(rules || "");
          if (this.uiInfo.gameBasePoint && rulesTable && rulesTable.bPoint) {
            this.uiInfo.gameBasePoint.getComponent(cc.Label).string = tools.stringFormat("\u5e95\u6ce8\uff1a{0}", rulesTable.bPoint);
            this.uiInfo.gameBasePoint.active = true;
          }
        }
      },
      createLocatInfoLayer: function createLocatInfoLayer() {},
      removeLocatInfoLayer: function removeLocatInfoLayer() {},
      checkUserDist: function checkUserDist(userInfo) {
        var _this8 = this;
        if (userInfo.userStatus == E_UserStatus.USER_STATUS_WATCH) return;
        if (this.tableLogic.getGameStatus() == HZMJ_GameStation.GS_STATUS_PLAYING) return;
        var longitude = userInfo.longitude;
        var latitude = userInfo.latitude;
        var m_userID = this.tableLogic.getMyID();
        var G_LATITUDE_ITEM = "G_LATITUDE_ITEM" + userInfo.userID + "_" + window.deskPasswd;
        var LatitudeTYPE = Number(cc.sys.localStorage.getItem(G_LATITUDE_ITEM) || 0);
        if (tools.checkLongitudeOrLatitude(longitude) && tools.checkLongitudeOrLatitude(latitude)) {
          var userInfoList = this.tableLogic.getUserInfoListOfLogicSeat();
          for (var k in userInfoList) {
            var toUserInfo = userInfoList[k];
            if (toUserInfo && toUserInfo.userID == m_userID && toUserInfo.userID != userInfo.userID) {
              var toLongitude = toUserInfo.longitude;
              var toLatitude = toUserInfo.latitude;
              if (tools.checkLongitudeOrLatitude(toLongitude) && tools.checkLongitudeOrLatitude(toLatitude)) {
                var dist = Number(tools.getDistance(toLatitude, toLongitude, latitude, longitude));
                var number = 1e3 * dist;
                var node = this;
                number < node.private_min_dist && 0 == LatitudeTYPE && function() {
                  cc.sys.localStorage.setItem(G_LATITUDE_ITEM, 1);
                  var btnName1 = "\u786e  \u5b9a";
                  btnName1 = node.tableLogic.isMePlaying() ? "\u7533\u8bf7\u89e3\u6563" : "\u79bb\u5f00\u623f\u95f4";
                  var btnName2 = "\u7ee7\u7eed\u6e38\u620f";
                  var msgCallback = function msgCallback(btnName) {
                    btnName == btnName1 && (node.tableLogic.isMePlaying() ? node.tableLogic.sendDismissRoom() : node.tableLogic.doLeftRoom());
                  };
                  var msgObj = {};
                  msgObj.msg = tools.stringFormat("\n\u73a9\u5bb6\uff1a{0}\u4e0e\u73a9\u5bb6\uff1a{1}\u7684\u8ddd\u79bb\u4e0d\u8db3{2}\u7c73\uff0c\u662f\u5426\u7ee7\u7eed\u6e38\u620f\uff1f", userInfo.name, toUserInfo.name, _this8.private_min_dist);
                  msgObj.btn1 = btnName1;
                  msgObj.btn2 = btnName2;
                  msgObj.callbackFun = msgCallback;
                  createMsgBox(msgObj);
                }();
              }
            }
          }
        }
      },
      dealNotifyERRMsg: function dealNotifyERRMsg(eMsgType, notify) {
        cc.log("------------dealNotifyERRMsg:\u63d0\u793a\u6d88\u606f\uff1a", eMsgType, notify);
        if (eMsgType == E_NOTIFY_MSG_TYPE.SMT_CHAT) ; else if (eMsgType == E_NOTIFY_MSG_TYPE.SMT_EJECT) {
          removeLoading();
          createTips(notify);
        } else if (eMsgType == E_NOTIFY_MSG_TYPE.SMT_GLOBAL) ; else if (eMsgType == E_NOTIFY_MSG_TYPE.SMT_PROMPT) {
          var btnName1 = "\u786e  \u5b9a";
          var msgCallback = function msgCallback(btnName) {
            btnName == btnName1;
          };
          var msgObj = {};
          msgObj.msg = notify;
          msgObj.btn1 = btnName1;
          msgObj.callbackFun = msgCallback;
          createMsgBox(msgObj);
        } else if (eMsgType == E_NOTIFY_MSG_TYPE.SMT_TABLE_ROLL) {
          var noticeLayer = C_Director.NoticeLayer;
          noticeLayer || cc.loader.loadRes("prefab/NoticeLayer", function(err, prefab) {
            var NoticeLayer = cc.instantiate(prefab);
            var noticeLayerJS = NoticeLayer.getComponent("NoticeLayer");
            NoticeLayer.x = cc.winSize.width / 2;
            NoticeLayer.y = cc.winSize.height / 2;
            noticeLayerJS.init(notify);
            runningScene.addChild(NoticeLayer);
          });
        }
      },
      onExit: function onExit() {},
      runWithScene: function runWithScene() {
        cc.log(" runWithScene()");
        this.stopEffectAndMusic();
      },
      clearCommonUI: function clearCommonUI() {
        try {
          this.unscheduleAllCallbacks();
        } catch (e) {}
        this.node.stopAllActions();
        this.private_IsPlayingVoice = false;
        this.private_VoiceQueue = {};
        this.removeTuoGuanLayer();
        this.removeBuyGoldLayer();
        this.removeDismissRoomLayerEx();
        this.removeAllPlayerUI();
        this.showBeginBtn(false);
        this.showGoldRoomInfo(false);
        this.unscheduleReadyFun();
        this.clearRecordIntervalText();
        this.removeLocatInfoLayer();
        this.removeAllMatchLayer();
      },
      onReadyFun: function onReadyFun(time) {
        cc.log(" onReadyFun(time = {0})", time);
        time > 0 && this.tableLogic.setLeftReadyTime(time);
      },
      showMatchDeskStatus: function showMatchDeskStatus(info) {
        this.needShowMatchResultLayer = true;
        var callBack = function(arg) {
          this.needShowMatchResultLayer = false;
          var MatchResultLayer = this.uiInfo.gameBg.getComponent("MatchResult");
          if (MatchResultLayer) MatchResultLayer.setShowMatchLevelUp(); else {
            this.removeAllMatchLayer();
            1 != info.type && this.showMatchLevelUp();
          }
        }.bind(this);
        this.showMatchResultLayerCallback = callBack;
        this.scheduleOnce(callBack, .1);
      },
      setMatchResultPlayerDatas: function setMatchResultPlayerDatas(matchPlayerFans) {
        this.matchPlayerFans = cloneObject(matchPlayerFans);
        window.matchPlayerFans = matchPlayerFans;
      },
      showMatchGameResult: function showMatchGameResult(resultInfo) {},
      showRankMatchGameResult: function showRankMatchGameResult(resultInfo) {
        var layerName = "Match/MatchRankResultLayer";
        if (this.uiInfo.gameBg.getChildByName("MatchRankResultLayer")) return;
        var callback = function callback(layer) {
          layer.zIndex = G_MATCH_LAYER_TAG;
          layer.name = "MatchRankResultLayer";
        };
        this.setUserInfoExpUserLevel(resultInfo);
        this.addLayer(this.node, layerName, callback, this, resultInfo);
      },
      setRankMatchUserExp: function setRankMatchUserExp(resultInfo) {
        this.setUserInfoExpUserLevel(resultInfo);
      },
      removeMatchCheckPointResultLayer: function removeMatchCheckPointResultLayer() {
        this.node.getChildByName("MatchCheckPointResultLayer") && this.node.getChildByName("MatchCheckPointResultLayer").destroy();
      },
      setCheckPointInfo: function setCheckPointInfo(resultInfo) {
        var _this9 = this;
        var that = this;
        var showResultUICb = function showResultUICb() {
          that.removeMatchCheckPointResultLayer();
          var callBack = function(arg) {
            that.addLayer(that.node, "Match/MatchCheckPointResultLayer", function(MatchCheckPointResultLayer) {
              MatchCheckPointResultLayer.zIndex = G_CHECKPOINT_NOTIFY_LAYER_TAG;
              MatchCheckPointResultLayer.name = "MatchCheckPointResultLayer";
            }, that.tableLogic, resultInfo);
          }.bind(_this9);
          _this9.scheduleOnce(callBack, 1.5);
        };
        if (0 == resultInfo.bAgain) {
          showResultUICb();
          this.tableLogic.sendDeskCheckPointInfo();
        } else if (1 == resultInfo.bAgain) {
          showResultUICb();
          this.tableLogic.sendDeskCheckPointInfo();
        } else 2 == resultInfo.bAgain && showResultUICb();
      },
      setDeskCheckPointInfo: function setDeskCheckPointInfo(info) {
        this.addLayer(this.node, "Match/MatchCheckPointInfo", function(MatchCheckPointInfo) {
          MatchCheckPointInfo.zIndex = G_CHECKPOINT_NOTIFY_LAYER_TAG;
          MatchCheckPointInfo.name = "MatchCheckPointInfo";
        }, info);
        this.curCheckPointNum = info.checkPointNum;
      },
      setCheckPointEnd: function setCheckPointEnd() {
        this.removeMatchCheckPointResultLayer();
        this.addLayer(this.node, "Match/MatchCheckPointResultLayer", function(MatchCheckPointResultLayer) {
          MatchCheckPointResultLayer.zIndex = G_CHECKPOINT_NOTIFY_LAYER_TAG;
          MatchCheckPointResultLayer.name = "MatchCheckPointResultLayer";
        }, this.tableLogic, null);
      },
      setDeskExpUserLevelInfo: function setDeskExpUserLevelInfo(info) {
        if (!info) {
          var userInfo = UserInfoManager.getMyInfo();
          info = {};
          info.gameExp = userInfo.gameExp;
          info.UserLevel = userInfo.UserLevel;
        }
        this.node.getChildByName("MatchExpUserLevelInfo") && this.node.getChildByName("MatchExpUserLevelInfo").destroy();
        this.addLayer(this.node, "Match/MatchExpUserLevelInfo", function(MatchExpUserLevelInfo) {
          MatchExpUserLevelInfo.zIndex = G_CHECKPOINT_NOTIFY_LAYER_TAG;
          MatchExpUserLevelInfo.name = "MatchExpUserLevelInfo";
        }, info);
      },
      setUserInfoExpUserLevel: function setUserInfoExpUserLevel(resultInfo) {
        var userInfo = UserInfoManager.getMyInfo();
        userInfo.gameExp = parseInt(F_GetMoneyDisplay(resultInfo.gameExp));
        userInfo.UserLevel = resultInfo.UserLevel;
        UserInfoManager.setMyInfo(cloneObject(userInfo));
        this.setDeskExpUserLevelInfo(userInfo);
      },
      showMatchLevelUp: function showMatchLevelUp() {
        var layerName = "Match/MatchLevelUpLayer";
        this.uiInfo.gameBg.getChildByName("MatchLevelUpLayer") && this.uiInfo.gameBg.getChildByName("MatchLevelUpLayer").removeFromParent();
        var matchRankInfo = MatchManager.getMatchDeskRankInfo();
        var callback = function callback(layer) {
          layer.zIndex = G_MATCH_LAYER_TAG;
          layer.name = "MatchLevelUpLayer";
        };
        this.addLayer(this.node, layerName, callback, this, matchRankInfo);
      },
      showMatchWaitStatus: function showMatchWaitStatus(info) {
        this.showMatchRoomInfo(false);
        this.dealMatchDeskGameInfo(info);
        1 == info.iCurPeopleCount && info.iCurMatchRound > 1 && createTips("\u606d\u559c\u664b\u7ea7");
        if (1 == info.status) info.iCurPeopleCount == info.iMaxPeopleCount && this.showMatchWait(info.resultType); else if (2 == info.status && info.iCurMatchRound <= info.iMaxMatchRound) {
          if (!this.tableLogic.isMatchRoom()) return;
          this.uiInfo.gameBg.getChildByName("MatchWaitLayer") && this.uiInfo.gameBg.getChildByName("MatchWaitLayer").removeFromParent();
          this.uiInfo.gameBg.getChildByName("MatchDeskInfoLayer") && this.uiInfo.gameBg.getChildByName("MatchDeskInfoLayer").removeFromParent();
          this.hidehideOverLayout();
          this.removeAllMatchLayer();
        }
      },
      showMatchDeskFinish: function showMatchDeskFinish() {},
      showMatchWait: function showMatchWait(resultType) {
        var layerName = "Match/MatchWaitLayer";
        if (this.uiInfo.gameBg.getChildByName("MatchWaitLayer")) return;
        var callback = function callback(layer) {
          layer.zIndex = G_MATCH_LAYER_TAG;
          layer.name = "MatchWaitLayer";
        };
        this.addLayer(this.node, layerName, callback, this, resultType);
      },
      removeAllMatchLayer: function removeAllMatchLayer() {
        if (!this.tableLogic.isMatchRoom()) return;
        this.uiInfo.gameBg.getChildByName("MatchWaitLayer") && this.uiInfo.gameBg.getChildByName("MatchWaitLayer").removeFromParent();
        this.uiInfo.gameBg.getChildByName("MatchDeskInfoLayer") && this.uiInfo.gameBg.getChildByName("MatchDeskInfoLayer").removeFromParent();
        if (this.uiInfo.gameBg.getChildByName("MatchResultLayer")) {
          if (GameSocket.getIsSendLogoutRoom()) return;
          this.uiInfo.gameBg.getChildByName("MatchResultLayer").removeFromParent();
        } else if (GameSocket.getIsSendLogoutRoom() && this.needShowMatchResultLayer && this.showMatchResultLayerCallback) {
          this.showMatchResultLayerCallback();
          this.needShowMatchResultLayer = false;
        }
        if (this.uiInfo.gameBg.getChildByName("MatchLevelUpLayer")) {
          if (GameSocket.getIsSendLogoutRoom()) return;
          this.uiInfo.gameBg.getChildByName("MatchLevelUpLayer").removeFromParent();
        }
        GameSocket.setIsSendLogoutRoom(false);
      },
      removeMatchNotifyLayer: function removeMatchNotifyLayer() {
        if (!this.tableLogic.isMatchRoom()) return;
        this.uiInfo.gameBg.getChildByName("MatchNotifyLayer") && this.uiInfo.gameBg.getChildByName("MatchNotifyLayer").removeFromParent();
      },
      playMatchBeginEffect: function playMatchBeginEffect() {},
      setCheckPointGameShowLeaveMenu: function setCheckPointGameShowLeaveMenu(isShowLeaveRoom) {
        void 0 === isShowLeaveRoom && (isShowLeaveRoom = true);
        if (GameSocket.isCheckPointRoom() && this.gameSettingLayer) {
          isShowLeaveRoom && "undefined" != typeof this.curCheckPointNum && this.curCheckPointNum > 0 && (isShowLeaveRoom = false);
          this.gameSettingLayer.getComponent("GameSettingLayer").initSetListView(isShowLeaveRoom);
        }
      },
      addUserOtherInfo: function addUserOtherInfo(viewSeatNO) {},
      removeUserOtherInfo: function removeUserOtherInfo(viewSeatNO) {},
      dealNotifyDeskUserLogonORoutRoom: function dealNotifyDeskUserLogonORoutRoom(gameMsg) {},
      dealNotifyDeskUserIsTourist: function dealNotifyDeskUserIsTourist(info) {},
      showGameBackColor: function showGameBackColor(index) {},
      doOtherThings: function doOtherThings(info) {},
      hidehideOverLayout: function hidehideOverLayout() {},
      getLogicCallBack: function getLogicCallBack() {},
      getGameViewZhuangNode: function getGameViewZhuangNode() {},
      getGameViewWanJiaNode: function getGameViewWanJiaNode() {},
      getGameViewOhtersNode: function getGameViewOhtersNode() {},
      dealMatchDeskGameInfo: function dealMatchDeskGameInfo() {},
      onEnable: function onEnable() {
        this._super();
      },
      onDisable: function onDisable() {
        this._super();
      },
      loadResult: function loadResult(err, result, preResourceKey) {
        if (err || !result) cc.error("\u672a\u5b9a\u4e49\u7684\u9884\u5236\u4f53\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u8d44\u6e90" + preResourceKey); else {
          "object" == typeof result && window.prefabMap.set(preResourceKey + "", result);
          var preData = cc.loadData.loadGamePreData[cc.loadData.loadGamePreDataIndex];
          var d = new Date();
          ++cc.loadData.loadGamePreDataIndex;
          this.loadingFlag = false;
          if (cc.loadData.loadGamePreDataIndex >= cc.loadData.loadGamePreData.length) {
            var date = new Date();
            this.checkPreLoadScence();
          }
        }
      },
      loadPre: function loadPre() {
        var _this10 = this;
        if (this.loadingFlag) return;
        this.loadingFlag = true;
        if (cc.loadData.loadGamePreDataIndex >= cc.loadData.loadGamePreData.length) return;
        var preData = cc.loadData.loadGamePreData[cc.loadData.loadGamePreDataIndex];
        var d = new Date();
        "Texture" == preData.preName ? cc.loader.loadResDir(preData.url, cc.SpriteFrame, function(completedCount, totalCount, item) {}, function() {
          _this10.loadResult(null, "Texture", preData.url);
        }) : "TextureAtlas" == preData.preName ? cc.loader.loadResDir(preData.url, cc.SpriteAtlas, function(completedCount, totalCount, item) {}, function() {
          _this10.loadResult(null, "TextureAtlas", preData.url);
        }) : "bitmapFont" == preData.preName ? cc.loader.loadRes(preData.url, cc.BitmapFont, function(err, font) {
          _this10.loadResult(null, font, "bitmapFont" + preData.url);
        }) : "json" == preData.preName ? cc.loader.loadRes(preData.url, cc.JsonAsset, function(err, json) {
          _this10.loadResult(null, json, "json" + preData.url);
        }) : cc.loader.loadRes(preData.url + preData.preName, function(err, result) {
          _this10.loadResult(err, result, preData.url + preData.preName);
        });
      },
      update: function update() {
        cc.sys.isNative || cc.loadData.loadGamePreDataIndex < cc.loadData.loadGamePreData.length && this.loadPre();
      }
    });
    module.exports = GameViewBase;
    cc._RF.pop();
  }, {
    LobbyBaseLayer: "LobbyBaseLayer",
    os: 10,
    "ui.ChouMaObj": void 0
  } ],
  GameYanCode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed898M3EN5G74Ji0iYnzOTK", "GameYanCode");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        textLabel: cc.Label
      },
      init: function init(gameID, textData, targetComponent) {
        var _this = this;
        this.textLabel.string = textData + "";
        this.gameYanCode = textData + "";
        this.scheduleOnce(function() {
          _this.node.active = false;
        }, 3);
        this.targetComponent = targetComponent;
      },
      onDisable: function onDisable() {
        this.unscheduleAllCallbacks();
      },
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
      },
      onClickToCopyGameYanCode: function onClickToCopyGameYanCode() {
        var _this2 = this;
        var showYanCodeView = function showYanCodeView() {
          _this2.targetComponent && _this2.targetComponent.yanBtnTouchEnded();
        };
        if (cc.sys.isNative) {
          cc.jsbMgr.copyToClipboard(this.gameYanCode);
          showYanCodeView();
        } else if (this.gameYanCode && tools.copyTextFun(this.gameYanCode)) {
          createTips("\u590d\u5236\u6210\u529f");
          showYanCodeView();
        } else createTips("\u590d\u5236\u5931\u8d25\uff01");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  GameZhanjiCreaterImage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "702093iLg5OzKpQiyk9QhYx", "GameZhanjiCreaterImage");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {
        var GameZhanji = document.getElementById("GameZhanjiQRCode");
        GameZhanji && GameZhanji.remove();
        true == cc.sys.isMobile ? this.node.rotation = 90 : this.node.rotation = -90;
        cc.log("*********************\u751f\u6210\u56fe\u7247\uff08\u5927\u7ed3\u7b97\u6218\u7ee9\uff09*********************");
        this.LobbyLogic = new (require("LobbyLogic"))();
        var myInfo = this.LobbyLogic.getMyInfo();
        var gameID = this.gameID;
        var gameIDName = GameManager.getRegistGameNameByGameID(gameID);
        var gameRules = this.gameRules;
        var TypeStr = GameManager.getRoomListTypeJsonRule(gameRules);
        var _desc = gameIDName;
        _desc += TypeStr;
        var TimeStr = tools.getCurTime();
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        var scaleW = frameSize.width / designSize.width;
        var scaleH = frameSize.height / designSize.height;
        var _width = 618 * scaleW;
        var _height = 996 * scaleH;
        var url = "https://ouwan.hmzb.top/image/share/rank?";
        var ruleName = "ruleName=" + _desc;
        url += ruleName;
        var roomNumber = "&roomNumber=" + this.deskPasswd;
        url += roomNumber;
        var headUrl = "&headUrl=" + myInfo.headURL;
        url += headUrl;
        var userID = "&userID=" + myInfo.userID;
        url += userID;
        var userName = "&userName=" + myInfo.name;
        url += userName;
        var shareUrl = "&shareUrl=" + wxShareURL;
        url += shareUrl;
        var dateTime = "&dateTime=" + TimeStr;
        url += dateTime;
        var playInfoList = [];
        for (var i = 0; i < this.userInfoList.length; i++) {
          var playInfo = {
            name: "",
            face: "",
            score: 0,
            List_p: 0,
            List_i: 0
          };
          var userInfo = this.userInfoList[i];
          playInfo.name = userInfo.name;
          playInfo.face = userInfo.face;
          playInfo.score = userInfo.score;
          if (Number(userInfo.score) > 0) {
            playInfo.List_p = 1;
            playInfo.List_i = 1;
          } else if (Number(userInfo.score) < 0) {
            playInfo.List_p = 2;
            playInfo.List_i = 0;
          }
          playInfoList.push(playInfo);
        }
        for (var j = 0; j < playInfoList.length; j++) {
          var _playInfo = playInfoList[j];
          var rankList_name = "&rankList[" + j + "][name]=" + _playInfo.name;
          url += rankList_name;
          var rankList_face = "&rankList[" + j + "][face]=" + _playInfo.face;
          url += rankList_face;
          var rankList_n = "&rankList[" + j + "][n]=" + _playInfo.score;
          url += rankList_n;
          var rankList_p = "&rankList[" + j + "][p]=" + _playInfo.List_p;
          url += rankList_p;
          var rankList_i = "&rankList[" + j + "][i]=" + _playInfo.List_i;
          url += rankList_i;
        }
        var gameDiv = document.getElementById("Cocos2dGameContainer");
        var background = document.createElement("img");
        background.id = "GameZhanjiQRCode";
        background.src = url;
        background.style.transform = "rotate(-90deg)";
        background.alt = "bigImg";
        background.width = _width;
        background.height = _height;
        background.style.position = "absolute";
        background.style.top = parseInt(gameDiv.style.height.replace(/px/, "")) / 2 - background.height / 2 + "px";
        background.style.left = parseInt(gameDiv.style.width.replace(/px/, "")) / 2 - background.width / 2 + "px";
        gameDiv.appendChild(background);
      },
      init: function init(gameID, deskPasswd, gameRules, userInfoList) {
        this.gameID = gameID;
        this.deskPasswd = deskPasswd;
        this.gameRules = gameRules;
        this.userInfoList = userInfoList;
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        var GameZhanji = document.getElementById("GameZhanjiQRCode");
        GameZhanji && GameZhanji.remove();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  GiveGiftCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f21beme7nFEyJwae4C2ZwQ8", "GiveGiftCard");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SpriteArray_1 = require("../ui/SpriteArray");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DEFAULT_MIN_GIVE_NUM = 1;
    var DEFAULT_MIN_HOLD_NUM = 5;
    var GiveGiftCard = function(_super) {
      __extends(GiveGiftCard, _super);
      function GiveGiftCard() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.targetIDEdit = null;
        _this.giveNumEdit = null;
        _this.progressSlider = null;
        _this.GiftlistNode = null;
        _this.newHandNode = null;
        _this.countSliderNode = null;
        _this.zhuanzengLogic = new (require("ZhuanzengLogic"))();
        _this.annimetion = null;
        _this._minHoldNum = DEFAULT_MIN_HOLD_NUM;
        _this._minGiveNum = DEFAULT_MIN_GIVE_NUM;
        return _this;
      }
      GiveGiftCard.prototype.start = function() {};
      GiveGiftCard.prototype.onEnable = function() {
        this.init();
      };
      GiveGiftCard.prototype.init = function() {
        this._minHoldNum = globalThis.ConfigDataManager.getConfigDataByKey("sendGiftMyLimitGiftcard", DEFAULT_MIN_HOLD_NUM);
        this._minGiveNum = globalThis.ConfigDataManager.getConfigDataByKey("sendGiftMinCard", DEFAULT_MIN_GIVE_NUM);
        var myCount = globalThis.UserInfoManager.getMyInfo().giftCard;
        this.giveNumEdit.string = this._minGiveNum.toString();
        this.progressSlider.progress = 0;
        myCount >= this._minHoldNum && myCount >= this._minGiveNum && (this.progressSlider.progress = 0);
      };
      GiveGiftCard.prototype.onToggleContainerClick = function(toggle) {
        switch (toggle.node.name) {
         case "toggle1":
          this.doButton_GiftList();
          break;

         case "toggle2":
          this.doButton_NewHand();
        }
      };
      GiveGiftCard.prototype.doButton_GiftList = function() {
        this.GiftlistNode.active = true;
        this.newHandNode.active = false;
      };
      GiveGiftCard.prototype.doButton_NewHand = function() {
        this.GiftlistNode.active = false;
        this.newHandNode.active = true;
      };
      GiveGiftCard.prototype.onchoiceClick = function(event, value) {
        var node = event.target;
        var btn_xz = node.getComponent(cc.Button);
        var showIndex = btn_xz.getComponent(SpriteArray_1.default).index;
        if (0 == showIndex) {
          btn_xz.getComponent(SpriteArray_1.default).index = 1;
          this.countSliderNode.active = false;
        } else {
          btn_xz.getComponent(SpriteArray_1.default).index = 0;
          this.countSliderNode.active = true;
        }
      };
      GiveGiftCard.prototype.onConfirmBtnClick = function() {
        var _this = this;
        if ("" == this.targetIDEdit.string) {
          globalThis.createTips("\u8bf7\u8f93\u5165\u597d\u53cbID");
          return;
        }
        if ("" == this.giveNumEdit.string) {
          globalThis.createTips("\u8bf7\u8f93\u5165\u8d60\u9001\u6570\u91cf");
          return;
        }
        if (!/(^[1-9]\d*$)/.test(this.giveNumEdit.string + "")) {
          globalThis.createTips("\u8bf7\u8f93\u5165\u6b63\u6574\u6570\u8d60\u9001\u6570\u91cf");
          return;
        }
        var giveType = globalThis.E_ResourceType.GiftCard;
        var friendID = parseInt(this.targetIDEdit.string);
        var giveNum = parseInt(this.giveNumEdit.string);
        if (globalThis.UserInfoManager.getMyInfo().userID == friendID) {
          console.log("## \u8d60\u9001\u7ed9\u81ea\u5df1", globalThis.UserInfoManager.getMyInfo().userID, friendID);
          globalThis.createTips("\u4e0d\u53ef\u4ee5\u8d60\u9001\u7ed9\u81ea\u5df1");
          return;
        }
        var myCount = globalThis.UserInfoManager.getMyInfo().giftCard;
        if (myCount < this._minHoldNum) {
          globalThis.createTips("\u60a8\u7684\u793c\u5238\u4f4e\u4e8e" + this._minHoldNum + "\u5f20\uff0c\u65e0\u6cd5\u8f6c\u8d60\u7ed9\u4ed6\u4eba");
          return;
        }
        if (giveNum < this._minGiveNum) {
          globalThis.createTips("\u60a8\u8f6c\u8d60\u7684\u793c\u5238\u6570\u91cf\u5c0f\u4e8e" + this._minGiveNum + "\u5f20\uff0c\u65e0\u6cd5\u8f6c\u8d60\u7ed9\u4ed6\u4eba");
          return;
        }
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var msgCallback = function(btnName) {
          if (btnName == btnName1) {
            var requestSendGiftCallback = function() {
              globalThis.createTips("\u8d60\u9001\u793c\u5238\u6210\u529f");
              _this.doEditBoxCountChanged();
            };
            _this.zhuanzengLogic.requestSendGift(friendID, 5, giveNum, requestSendGiftCallback);
          }
        };
        var shouxufei = globalThis.ConfigDataManager.getConfigDataByKey("sendGiftRate", .05);
        var shijishoudao = giveNum - Math.ceil(shouxufei * giveNum);
        var msgObj = {
          msg: "\n\u8f6c\u8d60\u9700\u6536\u53d6" + 100 * shouxufei + "%\u7684\u624b\u7eed\u8d39\n\u60a8\u8f6c\u8d60\u7684" + giveNum + "\u5f20\u793c\u5238\uff0c\u5bf9\u65b9\u5c06\u6536\u5230" + shijishoudao + "\u5f20\u793c\u5238",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      GiveGiftCard.prototype.doEditBoxCountChanged = function() {
        isNaN(Number(this.giveNumEdit.string)) && (this.giveNumEdit.string = "");
      };
      GiveGiftCard.prototype.onSliderProgressChanged = function() {
        var myCount = globalThis.UserInfoManager.getMyInfo().giftCard;
        var progress = this.progressSlider.progress;
        var count = Math.ceil(progress * myCount);
        count > myCount && (count = myCount);
        this.giveNumEdit.string = count.toString();
      };
      GiveGiftCard.prototype.updateGiveNumUI = function(count) {
        this.giveNumEdit.string = count.toString();
        var myCount = globalThis.LobbySocket.getMyInfo().giftCard;
      };
      GiveGiftCard.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.EditBox) ], GiveGiftCard.prototype, "targetIDEdit", void 0);
      __decorate([ property(cc.EditBox) ], GiveGiftCard.prototype, "giveNumEdit", void 0);
      __decorate([ property(cc.Slider) ], GiveGiftCard.prototype, "progressSlider", void 0);
      __decorate([ property(cc.Node) ], GiveGiftCard.prototype, "GiftlistNode", void 0);
      __decorate([ property(cc.Node) ], GiveGiftCard.prototype, "newHandNode", void 0);
      __decorate([ property(cc.Node) ], GiveGiftCard.prototype, "countSliderNode", void 0);
      __decorate([ property(cc.Node) ], GiveGiftCard.prototype, "annimetion", void 0);
      GiveGiftCard = __decorate([ ccclass ], GiveGiftCard);
      return GiveGiftCard;
    }(cc.Component);
    exports.default = GiveGiftCard;
    cc._RF.pop();
  }, {
    "../ui/SpriteArray": "SpriteArray",
    ZhuanzengLogic: "ZhuanzengLogic"
  } ],
  GlobalConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "717aerexOVNZa2qnG42yoEm", "GlobalConfig");
    "use strict";
    window.G_PLATFORM_NAME_CHINESE = "\u5076ONE\u9189\u7f8e\u57ce";
    window.G_PLATFORM_NAME = "_DAXIANGXIASHAN";
    window.G_APP_NAME_EN = "Daxaingxiashan";
    window.G_APP_NAME_CH = "\u5076ONE\u9189\u7f8e\u57ce";
    window.G_CHOOSE_CITY = "city_switch_new" + G_PLATFORM_NAME;
    window.G_ACCOUNT_KEY = "loginAccountNoRepeat" + G_PLATFORM_NAME;
    window.G_PASSWARD_KEY = "loginPasswordNotRepeat" + G_PLATFORM_NAME;
    window.G_PASSWARD_KEY = "loginPasswardNotRepeat" + G_PLATFORM_NAME;
    window.G_MUSIC_SWITCH = "music_switch" + G_PLATFORM_NAME;
    window.G_SOUND_SWITCH = "sound_switch" + G_PLATFORM_NAME;
    window.G_MUSIC_CHANGE = "music_change" + G_PLATFORM_NAME;
    window.G_SOUND_CHANGE = "sound_change" + G_PLATFORM_NAME;
    window.G_BACKGROUND_SWITCH = "backGround_switch" + G_PLATFORM_NAME;
    window.G_SOUND_SIZE = "sound_size" + G_PLATFORM_NAME;
    window.G_OUTCARD_SOUND = "outcard_sound" + G_PLATFORM_NAME;
    window.G_SOUND_TYPE = "sound_type1" + G_PLATFORM_NAME;
    window.G_TING_CARD = "ting_card" + G_PLATFORM_NAME;
    window.G_CARD_COLOR = "card_color" + G_PLATFORM_NAME;
    window.G_GAME_BACK = "game_back" + G_PLATFORM_NAME;
    window.G_LIVE_BROADCAST = "live_broadcast" + G_PLATFORM_NAME;
    window.G_SHARE_USERID = "share_userid" + G_PLATFORM_NAME;
    window.G_SOUND_LANGUAGE = "sound_language";
    window.G_SOUND_LANGUAGE_IS_MANDARIN = "0";
    window.G_CREATE_ROOM_DATA = "create_room_data";
    window.G_LOGIN_KEY = 1;
    window.G_SHOW_GAME_VOICE = false;
    window.G_GAMESEVER_KEY = 1;
    if (1 == window.G_GAMESEVER_KEY) {
      window.G_PHP_IP = "ouwan.hmzb.top";
      window.G_HTTP_DOMAIN = "39.99.248.19";
      window.G_AGENT_SERVER = "39.99.248.19";
    } else {
      window.G_PHP_IP = "ouone.hmzb.top";
      window.G_HTTP_DOMAIN = "47.106.184.122";
      window.G_AGENT_SERVER = "47.106.184.122";
    }
    window.wxShareURL = "https://ouwan.hmzb.top/api/v1/server/Wxlogauth";
    window.wxShareIMG = "http://ouwan.hmzb.top/cocos/imag_dxxs.png";
    window.wxShareAdvIMG = "http://ouwan.hmzb.top/cocos/imag_dxxs.png";
    window.wxlobby_Qurcode = "http://ouwan.hmzb.top/cocos/lobby_Qurcode.png";
    window.wxgame_Qurcode = "http://ouwan.hmzb.top/cocos/game_Qurcode.png";
    window.iCheckCode = "";
    window.G_SECRET_KEY = 25614;
    window.G_SERVER_PORT = 8090;
    window.G_SEND_PORT = 3015;
    window.USER_MAGICEXPRESSCOSTDIAMON = [ 20, 10, 20, 10, 30, 30, 10, 15, 20, 40 ];
    window.G_SHOP_BUY_CHANNEL = 2;
    window.G_LOGIN_TYPE_XX = 0;
    window.G_WX_UINIONID = null;
    window.G_USER_PASSWORD = null;
    window.G_PHONE_NUMBER = "phone_number" + G_PLATFORM_NAME;
    window.G_PHONE_PASSWD = "phone_passwd" + G_PLATFORM_NAME;
    window.G_REMEMBER_PASSWORD = "remember_password" + G_PLATFORM_NAME;
    window.G_LOGIN_TYPE = "login_type" + G_PLATFORM_NAME;
    window.G_IS_LOADER_STATIC_DATA = false;
    window.G_WEICHAT_REFRESH_TOKEN = "weichat_refresh_token" + G_PLATFORM_NAME;
    window.G_WEICHAT_OPENID = "weichat_openid" + G_PLATFORM_NAME;
    window.G_QQ_ACCESS_TOKEN = "qq_access_token" + G_PLATFORM_NAME;
    window.G_QQ_OPENID = "qq_openid" + G_PLATFORM_NAME;
    window.G_QQ_EXPIRES_IN = "qq_expires_in" + G_PLATFORM_NAME;
    window.G_PHONE_NUMBER = "phone_number" + G_PLATFORM_NAME;
    window.G_PHONE_PASSWD = "phone_passwd" + G_PLATFORM_NAME;
    window.G_LOGIN_TYPE = "login_type" + G_PLATFORM_NAME;
    window.G_REMEMBER_PASSWORD = "remember_password" + G_PLATFORM_NAME;
    window.G_LOBBY_LAYOUT_TYPE = "lobby_layout_type" + G_PLATFORM_NAME;
    window.G_GAME_VERSION_KEY = "game_{0}_version" + G_PLATFORM_NAME;
    window.G_JOIN_ROOM_SCENE = "join_room_scene_{0}" + G_PLATFORM_NAME;
    window.G_REQUEST_CODE_TIME = "request_code_time_{0}" + G_PLATFORM_NAME;
    window.G_ZHIDING_CLUB_ID = "zhiding_club_id_{0}" + G_PLATFORM_NAME;
    window.G_SELECTED_SERVER_ID = "selected_server_id" + G_PLATFORM_NAME;
    window.G_LOBBY_VERSION_KEY_TEST = "lobby_version_test" + G_PLATFORM_NAME;
    window.G_GAME_VERSION_KEY_TEST = "game_{0}_version_test" + G_PLATFORM_NAME;
    window.G_CITY_LIST = [ {
      id: 1,
      name: G_PLATFORM_NAME_CHINESE,
      gameList: [ 20161004, 20211004 ]
    } ];
    window.G_REGIST_GAME_LIST = [ {
      id: 20161004,
      name: "\u5168\u5357\u9ebb\u5c06",
      path: "HZMJ",
      picName: "hzmj",
      sceneName: "HZMJ",
      gameType: E_GameType.MJ
    }, {
      id: 20211004,
      name: "\u897f\u5468\u9ebb\u5c06",
      path: "HZMJ",
      picName: "hzmj",
      sceneName: "HZMJ",
      gameType: E_GameType.MJ
    } ];
    window.isShow = false;
    window.sharedWords = [ "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\uff0c\u4e3a\u5bb6\u4e61\u7684\u597d\u4e1c\u897f\u4ee3\u8a00\u3002", "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\uff0c\u6211\u4eec\u4e00\u8d77\u4e3a\u5bb6\u4e61\u4ee3\u8a00\u3002", "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\uff0c\u6e38\u620f\u4e5f\u662f\u4e00\u79cd\u751f\u4ea7\u529b\u3002", "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\uff0c\u4e3a\u6211\u7684\u5bb6\u4e61\u4ee3\u8a00\u3002", "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\uff0c\u4e3a\u5bb6\u4e61\u4ee3\u8a00\u8fdb\u884c\u4e2d..." ];
    window.G_BISAI_GAME_LIST = [ 20173124 ];
    window.G_SPECIAL_GAME_LIST = [];
    window.G_BR_GAME_LIST = [];
    window.G_DESK_GAME_LIST = [];
    window.G_ENTER_GAME_LIST = [];
    window.G_TIPS_GAME_LIST = [];
    window.G_ROOM_GAME_LIST = [];
    window.G_MULTI_NUM = 100;
    window.G_IS_SHOW_POINT = true;
    window.C_Director = cc.director;
    window.C_WinSize = cc.view.getVisibleSize();
    window.DEBUG = 2;
    window.rankInfoArr = [];
    window.rankInfoData = {};
    window.curFinishState = [ "\u672a\u8fbe\u6807", "\u5df2\u8fbe\u6807" ];
    window.CheckPointInfoArr = [];
    window.LOOBBY_STATIC = false;
    window.CUR_SCREEN = false;
    window.personVedio = {};
    cc._RF.pop();
  }, {} ],
  GlobalData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "688454DXbdE4anH2hBplrRY", "GlobalData");
    "use strict";
    window.G_HANDLE_CODE_OK = 0;
    window.G_JSON_DATA_STATUS_OK = 1;
    window.G_COLOR_SELECTED = cc.color(201, 35, 17, 255);
    window.G_COLOR_NOT_SELECTED = cc.color(20, 77, 152, 255);
    window.G_DESC_FONT_SIZE = 36;
    window.G_WEB_VIEW_LAYER_TAG = 8889;
    window.G_LOADING_ZORDER_TAG = 8888;
    window.G_TIPS_ZORDER_TAG = 8887;
    window.G_CLICKTIPS_ZORDER_TAG = 8886;
    window.G_SYSTEMMSG_ZORDER_TAG = 8885;
    window.G_SYSTEMNOTICE_ZORDER_TAG = 8884;
    window.G_MSGBOX_ZORDER_TAG = 8883;
    window.G_REPEAT_CONNECT_LAYER_TAG = 8882;
    window.G_DISMISS_ROOM_LAYER_TAG = 8881;
    window.G_GAME_UPDATE_LAYER_TAG = 8880;
    window.G_FRIEND_NOTIFY_LAYER_TAG = 8879;
    window.G_MATCH_NOTIFY_LAYER_TAG = 8878;
    window.G_CHECKPOINT_NOTIFY_LAYER_TAG = 8878;
    window.G_PLAYERUI_ZORDER_TAG = 689;
    window.G_CHATUI_ZORDER_TAG = 690;
    window.G_VOICE_ZORDER_TAG = 691;
    window.G_GAME_SET_ZORDER_TAG = 692;
    window.G_SET_ZORDER_TAG = 693;
    window.G_RULE_ZORDER_TAG = 694;
    window.G_FRIEND_INVITE_ZORDER_TAG = 695;
    window.G_RESULT_ZORDER_TAG = 889;
    window.G_ALL_RESULT_ZORDER_TAG = 890;
    window.G_CUO_PAI_LAYER = 1e3;
    window.G_TUOGUAN_LAYER_TAG = 6889;
    window.G_SUBSIDY_ZORDER_TAG = 7974;
    window.G_BUYGOLD_ZORDER_TAG = 7975;
    window.G_MATCH_LAYER_TAG = 9896;
    window.G_COMMON_TIMEOUT_TIME = 20;
    window.G_COMMON_LOADING_TIME = 30;
    window.G_ANIMATION_FRAME_TIME = .1;
    window.G_MSG_HEAD_SIZE = 20;
    window.G_INVALID_BYTE_VALUE = 255;
    window.MAX_USER_NAME_LEN = 256;
    window.G_CHAT_COMMON_TEXT_TAB = [ "\u522b\u5435 \u522b\u5435 \u4e13\u5fc3\u6253\u9ebb\u5c06", "\u522b\u8d70\u522b\u8d70\u6211\u8981\u6253\u5230\u5929\u4eae", "\u5feb\u662f\u4e0d\u662f\u8d62\u4e86\u5c31\u62d6\u65f6\u95f4\u4e86", "\u5927\u5bb6\u6ce8\u610f\u522b\u4e71\u6254\uff0c\u5927\u80e1\u6760\u7206\u5c31\u4e0d\u597d\u4e86", "\u4e1c\u5357\u897f\u5317\u4e2d \u80e1\u724c\u9760\u724c\u98ce", "\u4eca\u5929\u724c\u98ce\u86ee\u597d\u54e6", "\u770b\u4f60\u6280\u672f\u8fd9\u4e48\u597d\u52a0\u4e2a\u5fae\u4fe1\u54c7", "\u4f60\u7684\u6280\u672f\u8fd9\u4e48\u597d\u662f\u4e0d\u662f\u5728\u706b\u8f66\u7ad9\u5b66\u5230\u7684", "\u4f60\u8981\u6253\u5feb\u6765\u90fd\u7b49\u5230\u5929\u4eae\u4e86", "\u4e00\u665a\u4e0a\u90fd\u6ca1\u80e1\u5f00 \u4e0d\u597d\u641e\u91ce", "\u600e\u4e48\u53c8\u65ad\u7ebf\u7f51\u7edc\u8fd9\u4e48\u5dee", "\u732a\u4ed4\u597d\u5356" ];
    window.G_CHAT_MAX_NUM = 20;
    window.G_CHAT_COMMON_MAX_NUM = 10;
    window.G_WAR_RECORD_MAX_NUM = 50;
    window.G_WAR_RECORD_PLAYER_NUM = 9;
    window.G_longitude = "\u672a\u77e5\u7ecf\u5ea6";
    window.G_latitude = "\u672a\u77e5\u7eac\u5ea6";
    window.G_province = "\u672a\u77e5\u7701";
    window.G_city = "\u672a\u77e5\u5e02";
    window.G_district = "\u672a\u77e5\u533a/\u53bf";
    window.G_addrStr = "\u672a\u77e5\u5730\u5740";
    window.G_address = "\u672a\u6388\u6743\u5b9a\u4f4d";
    window.G_DEFAULT_LOBBY_LAYOUT_TYPE = 1;
    window.G_DEFAULT_STRING = "aa";
    window.G_CLUB_DESK_LEN = 20;
    window.G_PRIVATE_ROOM_COST_NUM = 25;
    window.G_bGetChatList = false;
    window.G_chatList = {};
    cc._RF.pop();
  }, {} ],
  GlobalEnum: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a404eEXXSNDkoFw97mqWbcD", "GlobalEnum");
    "use strict";
    var _window$E_ResourceNam;
    window.E_REQUEST_TYPE = {
      GET: "GET",
      POST: "POST"
    };
    window.E_ROOM_TYPE = {
      GOLD: 0,
      CARD: 1,
      PRIVATE: 2,
      MATCH: 3,
      REALMATCH: 4,
      TABLE: 5,
      BARRIERMATCH: 6,
      NORMAL: -1
    };
    window.E_ROOM_SORT = {
      RANKMATCH: 3,
      CHECKPOINTMATCH: 4
    };
    window.E_RegType = {
      PC: 0,
      MOB: 1
    };
    window.E_RegWay = {
      FAST: 0,
      COMMON: 1,
      WECHAT: 2,
      QQ: 3,
      PHONE: 4
    };
    window.E_LoginType = {
      PC: 0,
      WX: 1,
      QQ: 2,
      PHONE: 3
    };
    window.E_UserSex = {
      NIL: null,
      FEMALE: 0,
      MALE: 1,
      NONE: 2
    };
    window.SELECT_TYPE_ONE = 1;
    window.SELECT_TYPE_MORE = 2;
    window.SELECT_TYPE_OTHER = 3;
    window.SELECT_TYPE_INPUT = 4;
    window.CHECKBOX_NAME = "CheckBox_{0}_{1}";
    window.INPUTBOX_NAME = "INPUT_{0}_{1}";
    window.CELL_NUM = 4;
    window.E_NET_TYPE = {
      NIL: null,
      NONE: "0",
      WIFI: "1",
      MOBILE: "2",
      ONTHER: "3"
    };
    window.E_REGIST_FANCITON_TAB = {
      NETWORK_CHANGED: "networkChanged"
    };
    window.E_RegStatus = {
      REG: 0,
      LOGIN: 1
    };
    window.E_NoticeType = {
      IMMEDIATELY: 0,
      COMMON: 1,
      SPECIAL: 2,
      STOP: 3,
      STOP_SVR_PRE_TIP: 100
    };
    window.E_WX_ShareType = {
      FRIEND: 1,
      ZONE: 2
    };
    window.E_QQ_ShareType = {
      FRIEDN: 1,
      ZONE: 2
    };
    window.E_PROP_ID_DEF = {
      prop_flower_id: 1,
      prop_brick_id: 2,
      prop_anti_id: 3,
      prop_kick_id: 4,
      prop_house_id: 11,
      prop_egg_id: 12,
      prop_cake_id: 13,
      prop_beer_id: 14,
      prop_car_id: 15,
      prop_kiss_id: 16,
      prop_bomb_id: 17,
      prop_applause_id: 18,
      prop_ring_id: 19,
      prop_changecard_id: 39,
      prop_recordcrad_id: 40
    };
    window.E_ConsumeType = {
      RMB: 0,
      GOLD: 1,
      DIAMOND: 2
    };
    window.E_ItemType = {
      NONE: 0,
      GOLD: 1,
      DIAMOND: 2,
      PROP: 3,
      SUBSTANCE: 4
    };
    window.E_RankType = {
      RICH: 0,
      WIN: 1
    };
    window.E_RichType = {
      CARD: "jewels",
      GOLD: "money"
    };
    window.E_ResourceType = {
      NONE: 0,
      GOLD: 1,
      CARD: 2,
      BANK: 3,
      FIRECOIN: 4,
      GiftCard: 5,
      TRANSFERNUM: 6
    };
    window.E_ResourceName = (_window$E_ResourceNam = {}, _window$E_ResourceNam[E_ResourceType.NONE] = "\u672a\u77e5", 
    _window$E_ResourceNam[E_ResourceType.GOLD] = "\u91d1\u5e01", _window$E_ResourceNam[E_ResourceType.CARD] = "\u94bb\u77f3", 
    _window$E_ResourceNam[E_ResourceType.BANK] = "\u94f6\u884c\u91d1\u5e01", _window$E_ResourceNam[E_ResourceType.GiftCard] = "\u793c\u5238", 
    _window$E_ResourceNam[E_ResourceType.TRANSFERNUM] = "\u5151\u6362\u6b21\u6570", 
    _window$E_ResourceNam);
    window.E_UserStatus = {
      USER_STATUS_DEFAULT: 0,
      USER_STATUS_WATCH: 1,
      USER_STATUS_SITING: 2,
      USER_STATUS_AGREE: 3,
      USER_STATUS_PLAYING: 4
    };
    window.E_ReasonKickout = {
      REASON_KICKOUT_DEFAULT: 0,
      REASON_KICKOUT_STAND: 1,
      REASON_KICKOUT_STAND_MINLIMIT: 2,
      REASON_KICKOUT_STAND_MAXLIMIT: 3,
      REASON_KICKOUT_NOTAGREE: 4,
      REASON_KICKOUT_STAND_FIRECOIN_MINLIMIT: 5,
      REASON_KICKOUT_STAND_FIRECOIN_MAXLIMIT: 6,
      REASON_KICKOUT_LONG_TIME_NOOPERATION: 7,
      REASON_KICKOUT_BARRIERMATCH_FAIL: 8
    };
    window.E_MJ_TYPE = {
      NONE: 0,
      W1: 1,
      W2: 2,
      W3: 3,
      W4: 4,
      W5: 5,
      W6: 6,
      W7: 7,
      W8: 8,
      W9: 9,
      W10: 10,
      T1: 11,
      T2: 12,
      T3: 13,
      T4: 14,
      T5: 15,
      T6: 16,
      T7: 17,
      T8: 18,
      T9: 19,
      T10: 20,
      B1: 21,
      B2: 22,
      B3: 23,
      B4: 24,
      B5: 25,
      B6: 26,
      B7: 27,
      B8: 28,
      B9: 29,
      B10: 30,
      FD: 31,
      FN: 32,
      FX: 33,
      FB: 34,
      ZHONG: 35,
      FA: 36,
      BAI: 37,
      FCHUN: 41,
      FXIA: 42,
      FQIU: 43,
      FDONG: 44,
      FMEI: 45,
      FLAN: 46,
      FZHU: 47,
      FJU: 48,
      CAISHEN: 49,
      YUANBAO: 50,
      MAO: 51,
      LAOSHU: 52
    };
    window.E_LobbyView = {
      LOBBY: 0,
      CREATE: 1,
      GOLD: 2,
      ROOM: 3
    };
    window.E_PlatformVersionType = {
      IOS: 1,
      ANDROID: 2
    };
    window.E_ResourceChangeReason = {
      DEFAULT: 0,
      CREATE_ROOM: 1,
      GAME_BEGIN: 2,
      GAME_FINISHED: 3,
      GAME_SELLETE_ROLLBACK: 4,
      GAME_SELLETE_NORAML: 5,
      GAME_SELLETE_AA: 6,
      GOLD_ROOM_PUMP: 7,
      ROOM_PUMP_CONSUME: 8,
      SYSTEM_SUBSIDY: 9,
      REGISTER: 10,
      MAGIC_EXPRESS: 11,
      BANK_SAVE: 1e3,
      BANK_TAKE: 1001,
      BANK_TRAN: 1002,
      GIVE: 1003,
      SUPPORT: 1004,
      SIGN: 1005,
      BACK_RECHARE: 1006,
      PAY_RECHARE: 1007,
      AGENT_RECHARE: 1008,
      TURNTABLE: 1009,
      SHARE: 1010,
      FRIEND_REWARD: 1011,
      BIND_PHONE: 1012,
      SEND_HORN: 1013,
      USER_MAIL: 1014,
      BIND_AGENT: 1015,
      INVITE_ENTER: 1016,
      AGENT_GIVE: 1017,
      CLUB_RECHARGE: 1018,
      BACK_CLUB_RECHARGE: 1019,
      EXIT_CLUB: 1020,
      SYSTEM_MAIL: 1021,
      APP_PAY_TAKE: 1022,
      APPLY_POS: 1023,
      LOTTERY_PURCHASE: 1040,
      GOLD_COLOR: 1041,
      FADEOUT: 1042,
      ACHIEVEMENT: 1043,
      BATTERY_MALL_PURCHASE: 1044,
      USE_RED_PACKET: 1045,
      MATCH_REWARDS: 1046,
      GAME_MATCH_FEE: 1047,
      MATCH_FAIL: 1048,
      ACHIEVEMENT_REWARDS: 1049
    };
    window.E_LoginStatus = {
      FAILURE: 0,
      CANCEL: -1,
      SUCCEED: 1
    };
    window.E_FeedbackType = {
      GAME: 1,
      LOGIN: 2,
      PAY: 3,
      REPORT: 4,
      ONTHER: 5
    };
    window.E_FeedbackStatus = {
      NONE: 0,
      NO_READ: 1,
      READ: 2,
      CLOSE: 3
    };
    window.E_LobbyLayoutType = {
      TYPT_1: 1,
      TYPT_2: 2
    };
    window.E_BankRecordType = {
      SAVE: 1,
      TAKE: 2,
      TRANSFER: 3
    };
    window.E_SHARE_WAY = {
      DEFAULT: 1,
      IMAGE_LOCAL: 2,
      IMAGE_URL: 3,
      TEXT_AND_IMAGE_URL: 4,
      TEXT_AND_IMAGE_LOCAL: 5,
      TEXT: 6
    };
    window.E_FriendNotifyType = {
      REQ_ADD: 1,
      ANSWER_ADD: 2,
      REWARD: 3,
      MESSAGE: 4,
      INVITE_PLAYGAME: 5,
      DEL: 6
    };
    window.E_FriendOnlineStatus = {
      OFF: 0,
      ON: 1
    };
    window.E_FriendRewardStatus = {
      OFF: 0,
      ON: 1
    };
    window.E_AnswerAddFriendsGroup = {
      AGREE: 1,
      REFUSE: 2
    };
    window.E_FriendsGroupNotifyType = {
      REQ_JOIN: 1,
      INVITE_JOIN: 2,
      DELETED: 3,
      QUIT: 4,
      DISMISS: 5,
      REQ_JOIN_OK: 6,
      REQ_JOIN_FAIL: 7,
      ECV_INVITE_JOIN: 8,
      REFUSE_JOIN: 9,
      AGREE_JOIN: 10,
      TRANSFER: 11,
      AUTH: 12
    };
    window.E_FriendsGroupMsgType = {
      ROOM: 1,
      ACCO: 2
    };
    window.E_FriendsGroupMemberStatus = {
      NORMAL: 0,
      KING: 1,
      MANAGER: 2
    };
    window.E_FriendsGroupPowerType = {
      NO: 0,
      DEL: 1,
      DESK: 2,
      VIP: 4,
      FIRE_COIN: 8,
      SET: 16,
      ALL: 31
    };
    window.E_NOTIFY_MSG_TYPE = {
      SMT_CHAT: 1,
      SMT_EJECT: 2,
      SMT_GLOBAL: 4,
      SMT_PROMPT: 8,
      SMT_TABLE_ROLL: 16
    };
    window.E_GameType = {
      PK: 1,
      MJ: 2,
      BR: 3,
      DW: 4,
      QT: 5
    };
    window.E_PayWay = {
      WEI_XIN: 1,
      ZHI_FU_BAO: 2,
      QQ_QIAN_BAO: 3
    };
    window.E_PayType = {
      PING_GUO: 1,
      WEI_XIN: 2,
      HUI_FU_BAO: 3,
      WANG_SHI_FU: 4,
      JIAN_FU: 5,
      XIN_BAO: 6,
      HUI_FU_BAO_ZL: 7,
      QU_ZHI_FU: 8,
      ZHI_YI_FU: 9,
      JUN_FU_TONG: 10,
      ZHI_FU_GOU: 100,
      MO_FANG: 200
    };
    window.E_PAIWEI_INFO = {
      Sign_ENTER: 1,
      Sign_LEFT: 2,
      LobbyID: 1e4
    };
    window.rankMatchLevel = {
      NOVICE_ONE_STAR: 0,
      NOVICE_TWO_STAR: 1,
      NOVICE_THREE_STAR: 2,
      NOVICE_FOUR_STAR: 3,
      NOVICE_FIVE_STAR: 4,
      ELITE_ONE_STAR: 5,
      ELITE_TWO_STAR: 6,
      ELITE_THREE_STAR: 7,
      ELITE_FOUR_STAR: 8,
      ELITE_FIVE_STAR: 9,
      MASTER_ONE_STAR: 10,
      MASTER_TWO_STAR: 11,
      MASTER_THREE_STAR: 12,
      MASTER_FOUR_STAR: 13,
      MASTER_FIVE_STAR: 14,
      EXPERT_ONE_STAR: 15,
      EXPERT_TWO_STAR: 16,
      EXPERT_THREE_STAR: 17,
      EXPERT_FOUR_STAR: 18,
      EXPERT_FIVE_STAR: 19,
      ARTIST_ONE_STAR: 20,
      ARTIST_TWO_STAR: 21,
      ARTIST_THREE_STAR: 22,
      ARTIST_FOUR_STAR: 23,
      ARTIST_FIVE_STAR: 24,
      KING_ONE_STAR: 25,
      KING_TWO_STAR: 26,
      KING_THREE_STAR: 27,
      KING_FOUR_STAR: 28,
      KING_FIVE_STAR: 29,
      SUPREME_ONE_STAR: 30,
      SUPREME_TWO_STAR: 31,
      SUPREME_THREE_STAR: 32,
      SUPREME_FOUR_STAR: 33,
      SUPREME_FIVE_STAR: 34
    };
    window.E_BANNER_TYPE = {
      IMG: 1,
      VEDIO: 2,
      OTHER: 3
    };
    cc._RF.pop();
  }, {} ],
  GlobalError: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bce97RK4XdPArZvfWfPhsYh", "GlobalError");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    window.GlobalError = window.GlobalError ? window.GlobalError : {};
    GlobalError.ERROR_GAME_CONNECT_FAILED = -3;
    GlobalError.ERROR_LOBBY_CONNECT_FAILED = -2;
    GlobalError.ERROR_CONNECT_TIMEOUT = -1;
    GlobalError.ERROR_ACCOUNT_EXISTS = 1;
    GlobalError.ERROR_ACCOUNT_NOTEXISTS = 2;
    GlobalError.ERROR_PASSWD_FALSE = 3;
    GlobalError.ERROR_NO_USER_DATA = 4;
    GlobalError.ERROR_ALREADY_LOGON = 5;
    GlobalError.ERROR_DESK_FULL = 6;
    GlobalError.ERROR_NO_THIS_DESK = 7;
    GlobalError.ERROR_DESKSTATION_HAVENOUSER = 8;
    GlobalError.ERROR_INVALID_DESK = 9;
    GlobalError.ERROR_DESK_NOT_INDISMISSS = 10;
    GlobalError.ERROR_NO_BUY_DESK_CONFIG = 11;
    GlobalError.ERROR_USER_ALREADY_LOGON = 12;
    GlobalError.ERROR_TARGET_USER_NOT_EXISTS = 13;
    GlobalError.ERROR_ACCOUNT_NOT_MATCH = 14;
    GlobalError.ERROR_SERVICE_FULL = 15;
    GlobalError.ERROR_SERVICE_ROOM_NO_MONEYEQUIRE = 16;
    GlobalError.ERROR_ROOM_EXISTING = 17;
    GlobalError.ERROR_NOT_ENOUGH_JEWELS = 18;
    GlobalError.ERROR_CANNOT_SEND_MYSELF = 19;
    GlobalError.ERROR_NO_MATCH_DATA = 20;
    GlobalError.ERROR_NO_THIS_ROOM = 21;
    GlobalError.ERROR_NO_GRADE_DATA = 22;
    GlobalError.ERROR_NO_ROOMOPENED_DATA = 23;
    GlobalError.ERROR_ROOM_TOKEN_NOTMATCH = 24;
    GlobalError.ERROR_NO_MAIL_DATA = 25;
    GlobalError.ERROR_NO_REQ_SUPPORT_TIMES = 26;
    GlobalError.ERROR_INVITE_CODE = 27;
    GlobalError.ERROR_TOKEN_IS_INVALID = 28;
    GlobalError.ERROR_CANNOT_BUYDESK_INROOM = 29;
    GlobalError.ERROR_CANNOT_ENTERDESK_INROOM = 30;
    GlobalError.ERROR_ACCOUNT_INVALID = 31;
    GlobalError.ERROR_INVALID_MAIL = 32;
    GlobalError.ERROR_NOVAILD_DESK = 33;
    GlobalError.ERROR_HAVE_DIRTYWORD = 34;
    GlobalError.ERROR_NEED_SET_BANKPASSWD = 35;
    GlobalError.ERROR_BANKPASSWD_FALSE = 36;
    GlobalError.ERROR_BANK_SAVEMONEY_TOOMUCH = 37;
    GlobalError.ERROR_BANK_TAKEMONEY_TOOMUCH = 38;
    GlobalError.ERROR_BUY_DESK_TOPLIMIT = 39;
    GlobalError.ERROR_FRIEND_ALREADY_EXISTS = 40;
    GlobalError.ERROR_FRIEND_ALREDAY_REQADD = 41;
    GlobalError.ERROR_FIRNED_CANNOT_ADDMYSELF = 42;
    GlobalError.ERROR_FRIEND_ISNOT_FRIEND = 43;
    GlobalError.ERROR_FRIEND_ALREADY_INVITE = 44;
    GlobalError.ERROR_GAME_CANNOT_GAMEBEGIN = 45;
    GlobalError.ERROR_ACCOUNT_SEAL = 46;
    GlobalError.ERROR_FRIENDSGROUP_NOT_EXISTS = 47;
    GlobalError.ERROR_FRIENDSGROUP_NO_MASTER = 48;
    GlobalError.ERROR_FRIENDSGROUP_EVE_LIMIT = 49;
    GlobalError.ERROR_FRIENDSGROUP_ALL_LIMIT = 50;
    GlobalError.ERROR_FRIENDSGROUP_JOIN_LIMIT = 51;
    GlobalError.ERROR_FRIENDSGROUP_PEOPLE_FULL = 52;
    GlobalError.ERROR_FRIENDSGROUP_REPEAT_SEND = 53;
    GlobalError.ERROR_FRIENDSGROUP_ALREADY_IN = 54;
    GlobalError.ERROR_FRIENDSGROUP_NOT_NOTIY = 55;
    GlobalError.ERROR_FRIENDSGROUP_ERROR_NOTIY = 56;
    GlobalError.ERROR_FRIENDSGROUP_ERROR_WORD = 57;
    GlobalError.ERROR_FRIENDSGROUP_CREATE_FULL = 58;
    GlobalError.ERROR_FRIENDSGROUP_ERROR_ID = 59;
    GlobalError.ERROR_FRIENDSGROUP_ILLEGAL_OPER = 60;
    GlobalError.ERROR_FRIENDSGROUP_ERR_DISMISS = 61;
    GlobalError.ERROR_FRIEND_ERR_REWARDCOUNT = 62;
    GlobalError.ERROR_FRIENDSGROUP_ERR_JOIN_ROOM = 63;
    GlobalError.ERROR_STOP_JOIN = 64;
    GlobalError.ERROR_FRIENDSGROUP_DESK_NOT_EXISTS = 65;
    GlobalError.ERROR_FRIENDSGROUP_DESK_PLAYING = 66;
    GlobalError.ERROR_PHONE_NO_BIND = 67;
    GlobalError.ERROR_DESKSTATION_NOTEXISTS = 68;
    GlobalError.ERROR_DESKSTATION_HAVEUSER = 69;
    GlobalError.ERROR_NO_MANAGER = 70;
    GlobalError.ERROR_FRIENDSGROUP_MANA_LIMIT = 71;
    GlobalError.ERROR_FRIENDSGROUP_ALREADY_NOTIY = 72;
    GlobalError.ERROR_FRIEND_ROOM_DESK_FULL = 73;
    GlobalError.ERROR_NO_SET_PEOPLE = 74;
    GlobalError.ERROR_NOT_ENOUGH_MONEY = 75;
    GlobalError.ERROR_CANNOT_DEL_USER = 76;
    GlobalError.ERROR_FRIENDSGROUP_ERR_CREATE_ROOM = 77;
    GlobalError.ERROR_FRIENDSGROUP_FIRECOIN_LIMIT = 78;
    GlobalError.ERROR_FRIENDSGROUP_NO_FIRECOIN_INROOM = 79;
    GlobalError.ERROR_NOT_AGENT = 80;
    GlobalError.ERROR_FRIENDSGROUP_FIRECOIN_RECOVER = 81;
    GlobalError.ERROR_GAME_PLAYING_ERR_SIT = 82;
    GlobalError.ERROR_FRIENDSGROUP_OPP_CREATE_FULL = 83;
    GlobalError.ERROR_SERVER_CLOSE = 84;
    GlobalError.ERROR_NAME_REPEAT = 85;
    GlobalError.ERROR_FRIENDSGROUP_HAVE_ROOM = 86;
    GlobalError.ERROR_FRIENDSGROUP_NOT_JEWELS = 87;
    GlobalError.ERROR_FRIENDSGROUP_NOT_MONEY = 88;
    GlobalError.ERROR_GAME_NO_START = 89;
    GlobalError.ERROR_MAC_NOTMATCH = 90;
    GlobalError.ERROR_CREATE_ROOM = 91;
    GlobalError.ERROR_XIANLIAO_NO_BIND = 92;
    GlobalError.ERROR_MATCH_PLAYING = 93;
    GlobalError.ERROR_MATCH_OVER = 94;
    GlobalError.ERROR_LOCATION_CLOSED = 95;
    GlobalError.ERROR_RANKMATCH_OVER = 96;
    GlobalError.ERROR_CHECKPOINTS_INVALID = 97;
    GlobalError.ERROR_BARRIERMATCH_NO_SET = 98;
    GlobalError.ERROR_BARRIERMATCH_OVER = 99;
    GlobalError.ERROR_MATCH_START_SOON = 100;
    GlobalError.ERROR_NO_CHAT_DATA = 101;
    GlobalError.ERROR_CHAT_DATA_TOPLIMIT = 102;
    GlobalError.ERROR_ACCOUNT_TALK = 103;
    GlobalError.ERROR_NOT_ENOUGH_GIFTCARD = 104;
    GlobalError.ERROR_NOT_REVIVE_GAMESTATUS = 105;
    GlobalError.ERROR_MATCH_NOTEXISTS = 106;
    GlobalError.KEY_VALUE_TAB = [ [ [ GlobalError.ERROR_GAME_CONNECT_FAILED ], "\u6e38\u620f\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25" ], [ [ GlobalError.ERROR_LOBBY_CONNECT_FAILED ], "\u5927\u5385\u670d\u52a1\u5668\u8fde\u63a5\u5931\u8d25" ], [ [ GlobalError.ERROR_CONNECT_TIMEOUT ], "\u8bf7\u6c42\u8fde\u63a5\u670d\u52a1\u5668\u8d85\u65f6" ], [ [ GlobalError.ERROR_ACCOUNT_EXISTS ], "\u8d26\u53f7\u5df2\u7ecf\u5b58\u5728" ], [ [ GlobalError.ERROR_ACCOUNT_NOTEXISTS ], "\u8d26\u53f7\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_PASSWD_FALSE ], "\u5bc6\u7801\u9519\u8bef" ], [ [ GlobalError.ERROR_NO_USER_DATA ], "\u6ca1\u6709\u73a9\u5bb6\u6570\u636e" ], [ [ GlobalError.ERROR_ALREADY_LOGON ], "\u73a9\u5bb6\u5df2\u7ecf\u767b\u5f55\u6e38\u620f" ], [ [ GlobalError.ERROR_DESK_FULL ], "\u684c\u5b50\u4eba\u6570\u6ee1\u4e86" ], [ [ GlobalError.ERROR_NO_THIS_DESK ], "\u6ca1\u6709\u8fd9\u4e2a\u684c\u5b50" ], [ [ GlobalError.ERROR_DESKSTATION_HAVENOUSER ], "\u8fd9\u4e2a\u5ea7\u4f4d\u4e0a\u6ca1\u6709\u73a9\u5bb6" ], [ [ GlobalError.ERROR_INVALID_DESK ], "\u684c\u5b50\u4e0d\u53ef\u7528" ], [ [ GlobalError.ERROR_DESK_NOT_INDISMISSS ], "\u684c\u5b50\u6ca1\u6709\u5904\u4e8e\u89e3\u6563\u72b6\u6001" ], [ [ GlobalError.ERROR_NO_BUY_DESK_CONFIG ], "\u6ca1\u6709\u8fd9\u4e2a\u914d\u7f6e" ], [ [ GlobalError.ERROR_USER_ALREADY_LOGON ], "\u73a9\u5bb6\u5df2\u7ecf\u767b\u5f55\u4e86" ], [ [ GlobalError.ERROR_TARGET_USER_NOT_EXISTS ], "\u76ee\u6807\u73a9\u5bb6\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_ACCOUNT_NOT_MATCH ], "\u8d26\u53f7\u4e0d\u5339\u914d" ], [ [ GlobalError.ERROR_SERVICE_FULL ], "\u670d\u52a1\u5668\u4eba\u6570\u5df2\u6ee1" ], [ [ GlobalError.ERROR_SERVICE_ROOM_NO_MONEYEQUIRE ], "\u4e0d\u6ee1\u8db3\u8fdb\u5165\u623f\u95f4\u6761\u4ef6" ], [ [ GlobalError.ERROR_ROOM_EXISTING ], "\u6e38\u620f\u4e2d\u4e0d\u80fd\u79bb\u5f00\u623f\u95f4" ], [ [ GlobalError.ERROR_NOT_ENOUGH_JEWELS ], "\u94bb\u77f3\u4e0d\u8db3" ], [ [ GlobalError.ERROR_CANNOT_SEND_MYSELF ], "\u4e0d\u80fd\u8d60\u9001\u7ed9\u81ea\u5df1" ], [ [ GlobalError.ERROR_NO_MATCH_DATA ], "\u76ee\u6807\u6570\u636e\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_NO_THIS_ROOM ], "\u623f\u95f4\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_NO_GRADE_DATA ], "" ], [ [ GlobalError.ERROR_NO_ROOMOPENED_DATA ], "" ], [ [ GlobalError.ERROR_NO_MAIL_DATA ], "" ], [ [ GlobalError.ERROR_ROOM_TOKEN_NOTMATCH ], "token\u4e0d\u5339\u914d" ], [ [ GlobalError.ERROR_NO_REQ_SUPPORT_TIMES ], "\u4eca\u5929\u53ef\u7533\u6e05\u7834\u4ea7\u6b21\u6570\u4e0d\u8db3" ], [ [ GlobalError.ERROR_INVITE_CODE ], "\u9080\u8bf7\u7801\u9519\u8bef" ], [ [ GlobalError.ERROR_TOKEN_IS_INVALID ], "token\u65e0\u6548" ], [ [ GlobalError.ERROR_CANNOT_BUYDESK_INROOM ], "\u4f60\u4ee5\u5728\u623f\u95f4\u4e2d\u65e0\u6cd5\u521b\u5efa\u623f\u95f4 \u81ea\u52a8\u52a0\u5165\u4e2d.." ], [ [ GlobalError.ERROR_CANNOT_ENTERDESK_INROOM ], "" ], [ [ GlobalError.ERROR_ACCOUNT_INVALID ], "\u8d26\u53f7\u4e0d\u5408\u6cd5" ], [ [ GlobalError.ERROR_INVALID_MAIL ], "\u6ca1\u6709\u8fd9\u4e2a\u90ae\u4ef6" ], [ [ GlobalError.ERROR_NOVAILD_DESK ], "\u684c\u5b50\u5df2\u8d2d\u4e70\u5b8c" ], [ [ GlobalError.ERROR_HAVE_DIRTYWORD ], "\u8f93\u5165\u5185\u5bb9\u542b\u654f\u611f\u8bcd\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165" ], [ [ GlobalError.ERROR_NEED_SET_BANKPASSWD ], "\u8bf7\u5148\u8bbe\u7f6e\u94f6\u884c\u5bc6\u7801" ], [ [ GlobalError.ERROR_BANKPASSWD_FALSE ], "\u94f6\u884c\u5bc6\u7801\u9519\u8bef" ], [ [ GlobalError.ERROR_BANK_SAVEMONEY_TOOMUCH ], "\u5b58\u7684\u91d1\u5e01\u4e0d\u80fd\u8d85\u8fc7\u8eab\u4e0a\u7684\u91d1\u5e01" ], [ [ GlobalError.ERROR_BANK_TAKEMONEY_TOOMUCH ], "\u53d6\u7684\u91d1\u5e01\u4e0d\u80fd\u8d85\u8fc7\u94f6\u884c\u7684\u91d1\u5e01" ], [ [ GlobalError.ERROR_BUY_DESK_TOPLIMIT ], "\u521b\u5efa\u623f\u95f4\u5df2\u8fbe\u4e0a\u9650" ], [ [ GlobalError.ERROR_FRIEND_ALREADY_EXISTS ], "\u5df2\u7ecf\u662f\u597d\u53cb\u4e86" ], [ [ GlobalError.ERROR_FRIEND_ALREDAY_REQADD ], "\u5df2\u7ecf\u53d1\u9001\u6dfb\u52a0\u597d\u53cb\u8bf7\u6c42" ], [ [ GlobalError.ERROR_FIRNED_CANNOT_ADDMYSELF ], "\u4e0d\u80fd\u52a0\u81ea\u5df1\u4e3a\u597d\u53cb" ], [ [ GlobalError.ERROR_FRIEND_ISNOT_FRIEND ], "\u5bf9\u65b9\u8fd8\u4e0d\u662f\u597d\u53cb" ], [ [ GlobalError.ERROR_FRIEND_ALREADY_INVITE ], "\u5df2\u7ecf\u6536\u5230\u9080\u8bf7\u4e86" ], [ [ GlobalError.ERROR_GAME_CANNOT_GAMEBEGIN ], "\u672a\u6ee1\u8db3\u6e38\u620f\u5f00\u59cb\u6761\u4ef6" ], [ [ GlobalError.ERROR_ACCOUNT_SEAL ], "" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NOT_EXISTS ], "\u4ff1\u4e50\u90e8\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NO_MASTER ], "\u4e0d\u662f\u7fa4\u4e3b" ], [ [ GlobalError.ERROR_FRIENDSGROUP_EVE_LIMIT ], "\u6bcf\u5929\u53ea\u80fd\u66f4\u65391\u6b21\u540d\u5b57" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ALL_LIMIT ], "\u6700\u591a\u53ea\u80fd\u66f4\u65393\u6b21\u540d\u5b57" ], [ [ GlobalError.ERROR_FRIENDSGROUP_JOIN_LIMIT ], "\u52a0\u5165\u4ff1\u4e50\u90e8\u5df2\u8fbe\u4e0a\u9650" ], [ [ GlobalError.ERROR_FRIENDSGROUP_PEOPLE_FULL ], "\u4ff1\u4e50\u90e8\u4eba\u6570\u5df2\u6ee1" ], [ [ GlobalError.ERROR_FRIENDSGROUP_REPEAT_SEND ], "\u91cd\u590d\u53d1\u9001\u6d88\u606f" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ALREADY_IN ], "\u5df2\u7ecf\u5728\u4ff1\u4e50\u90e8\u4e2d" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NOT_NOTIY ], "\u901a\u77e5\u6d88\u606f\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERROR_NOTIY ], "\u901a\u77e5\u6d88\u606f\u5f02\u5e38" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERROR_WORD ], "\u5305\u542b\u975e\u6cd5\u5b57\u7b26" ], [ [ GlobalError.ERROR_FRIENDSGROUP_CREATE_FULL ], "\u521b\u5efa\u4ff1\u4e50\u90e8\u6570\u91cf\u5df2\u7ecf\u5230\u4e0a\u9650" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERROR_ID ], "\u76ee\u6807id\u9519\u8bef" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ILLEGAL_OPER ], "\u975e\u6cd5\u64cd\u4f5c" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERR_DISMISS ], "\u4ff1\u4e50\u90e8\u521b\u5efa\u4e00\u5929\u540e\u624d\u80fd\u89e3\u6563" ], [ [ GlobalError.ERROR_FRIEND_ERR_REWARDCOUNT ], "\u6bcf\u5929\u6253\u8d4f\u597d\u53cb\u6b21\u6570\u5df2\u8fbe\u4e0a\u9650" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERR_JOIN_ROOM ], "\u975e\u4ff1\u4e50\u90e8\u6210\u5458\u7981\u6b62\u52a0\u5165\u4ff1\u4e50\u90e8\u623f\u95f4" ], [ [ GlobalError.ERROR_STOP_JOIN ], "\u6e38\u620f\u4e2d\u9014\u7981\u6b62\u52a0\u5165" ], [ [ GlobalError.ERROR_FRIENDSGROUP_DESK_NOT_EXISTS ], "\u4ff1\u4e50\u90e8\u724c\u684c\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_FRIENDSGROUP_DESK_PLAYING ], "\u6e38\u620f\u8fdb\u884c\u4e2d\uff0c\u724c\u5c40\u7ed3\u675f\u540e\u89e3\u6563" ], [ [ GlobalError.ERROR_PHONE_NO_BIND ], "\u624b\u673a\u672a\u7ed1\u5b9a" ], [ [ GlobalError.ERROR_DESKSTATION_NOTEXISTS ], "\u5ea7\u4f4d\u4e0d\u5b58\u5728" ], [ [ GlobalError.ERROR_DESKSTATION_HAVEUSER ], "\u8fd9\u4e2a\u5ea7\u4f4d\u4e0a\u5df2\u7ecf\u6709\u73a9\u5bb6" ], [ [ GlobalError.ERROR_NO_MANAGER ], "\u6ca1\u6709\u6743\u9650\u7684\u64cd\u4f5c" ], [ [ GlobalError.ERROR_FRIENDSGROUP_MANA_LIMIT ], "\u4ff1\u4e50\u90e8\u7ba1\u7406\u5458\u5df2\u8fbe\u4e0a\u9650" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ALREADY_NOTIY ], "\u6d88\u606f\u5df2\u7ecf\u88ab\u5176\u5b83\u73a9\u5bb6\u64cd\u4f5c" ], [ [ GlobalError.ERROR_FRIEND_ROOM_DESK_FULL ], "\u623f\u95f4\u4eba\u6570\u5df2\u6ee1\uff0c\u4e0d\u80fd\u8fdb\u5165\u623f\u95f4" ], [ [ GlobalError.ERROR_NO_SET_PEOPLE ], "\u6ca1\u6709\u8bbe\u7f6e\u4eba\u6570" ], [ [ GlobalError.ERROR_NOT_ENOUGH_MONEY ], "\u91d1\u5e01\u4e0d\u8db3" ], [ [ GlobalError.ERROR_CANNOT_DEL_USER ], "\u5728\u6e38\u620f\u4e2d\u65e0\u6cd5\u5220\u9664\u8be5\u73a9\u5bb6" ], [ [ GlobalError.ERROR_FRIENDSGROUP_ERR_CREATE_ROOM ], "\u521b\u5efa\u4ff1\u4e50\u90e8\u623f\u95f4\u5931\u8d25" ], [ [ GlobalError.ERROR_FRIENDSGROUP_FIRECOIN_LIMIT ], "\u706b\u5e01\u4e0d\u8db3" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NO_FIRECOIN_INROOM ], "\u6e38\u620f\u4e2d\u65e0\u6cd5\u5145\u503c\u5151\u6362\u706b\u5e01" ], [ [ GlobalError.ERROR_NOT_AGENT ], "\u4e0d\u662f\u4ee3\u7406\uff0c\u65e0\u6cd5\u64cd\u4f5c" ], [ [ GlobalError.ERROR_FRIENDSGROUP_FIRECOIN_RECOVER ], "\u706b\u5e01\u56de\u6536\u8d85\u8fc7\u9650\u5236" ], [ [ GlobalError.ERROR_GAME_PLAYING_ERR_SIT ], "\u6e38\u620f\u4e2d\u7981\u6b62\u5750\u4e0b" ], [ [ GlobalError.ERROR_FRIENDSGROUP_OPP_CREATE_FULL ], "\u5bf9\u65b9\u521b\u5efa\u4ff1\u4e50\u90e8\u6570\u91cf\u4e0a\u9650" ], [ [ GlobalError.ERROR_SERVER_CLOSE ], "\u670d\u52a1\u5668\u505c\u670d\u7ef4\u62a4\u4e2d" ], [ [ GlobalError.ERROR_NAME_REPEAT ], "\u8be5\u540d\u5b57\u5df2\u88ab\u5360\u7528" ], [ [ GlobalError.ERROR_FRIENDSGROUP_HAVE_ROOM ], "\u60a8\u8fd8\u6709\u672a\u89e3\u6563\u7684\u724c\u684c\u6216vip\u623f\uff0c\u4e0d\u80fd\u8fdb\u884c\u6b64\u64cd\u4f5c\uff01" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NOT_JEWELS ], "\u7fa4\u4e3b\u94bb\u77f3\u4e0d\u8db3" ], [ [ GlobalError.ERROR_FRIENDSGROUP_NOT_MONEY ], "\u7fa4\u4e3b\u91d1\u5e01\u4e0d\u8db3" ], [ [ GlobalError.ERROR_NO_MAIL_DATA ], "\u6ca1\u6709\u90ae\u4ef6\u6570\u636e" ], [ [ GlobalError.ERROR_GAME_NO_START ], "\u6e38\u620f\u670d\u52a1\u5668\u672a\u542f\u52a8" ], [ [ GlobalError.ERROR_MAC_NOTMATCH ], "\u8be5\u8d26\u53f7\u5df2\u88ab\u5176\u4ed6\u8bbe\u5907\u7ed1\u5b9a\uff0c\u5982\u662f\u672c\u4eba\u8d26\u53f7\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\u89e3\u7ed1" ], [ [ GlobalError.ERROR_CREATE_ROOM ], "\u8bbe\u7f6e\u7684\u5165\u573a\u9650\u5236\u4e0d\u80fd\u4f4e\u4e8e\u5e95\u6ce8" ], [ [ GlobalError.ERROR_XIANLIAO_NO_BIND ], "\u8be5\u95f2\u804a\u672a\u7ed1\u5b9a\u5fae\u4fe1\u8d26\u53f7" ], [ [ GlobalError.ERROR_MATCH_PLAYING ], "\u6bd4\u8d5b\u4e2d" ], [ [ GlobalError.ERROR_MATCH_OVER ], "\u6bd4\u8d5b\u5df2\u7ecf\u7ed3\u675f" ], [ [ GlobalError.ERROR_LOCATION_CLOSED ], "\u8fdb\u5165\u623f\u95f4\u524d\u8bf7\u5148\u5f00\u542f\u6e38\u620f\u83b7\u53d6\u4f4d\u7f6e\u529f\u80fd" ], [ [ GlobalError.ERROR_RANKMATCH_OVER ], "\u6392\u4f4d\u8d5b\u5df2\u7ecf\u7ed3\u675f" ], [ [ GlobalError.ERROR_CHECKPOINTS_INVALID ], "\u73a9\u5bb6\u4e0d\u80fd\u8fdb\u5165\u8be5\u5173\u5361" ], [ [ GlobalError.ERROR_BARRIERMATCH_NO_SET ], "\u95ef\u5173\u8d5b\u672a\u8bbe\u7f6e" ], [ [ GlobalError.ERROR_BARRIERMATCH_OVER ], "\u95ef\u5173\u8d5b\u5df2\u7ecf\u7ed3\u675f" ], [ [ GlobalError.ERROR_MATCH_START_SOON ], "\u6bd4\u8d5b\u573a\u5373\u5c06\u5f00\u59cb\uff0c\u8bf7\u7b49\u5f85\u6bd4\u8d5b" ], [ [ GlobalError.ERROR_NO_CHAT_DATA ], "\u6ca1\u6709\u804a\u5929\u8bb0\u5f55" ], [ [ GlobalError.ERROR_CHAT_DATA_TOPLIMIT ], "\u83b7\u53d6\u804a\u5929\u8bb0\u5f55\u8fbe\u5230\u4e0a\u9650" ], [ [ GlobalError.ERROR_ACCOUNT_TALK ], "\u8d26\u53f7\u5df2\u7ecf\u88ab\u7981\u8a00" ], [ [ GlobalError.ERROR_NOT_ENOUGH_GIFTCARD ], "\u793c\u5238\u4e0d\u8db3" ], [ [ GlobalError.ERROR_NOT_REVIVE_GAMESTATUS ], "\u4e0d\u662f\u6bd4\u8d5b\u590d\u6d3b\u9636\u6bb5" ], [ [ GlobalError.ERROR_MATCH_NOTEXISTS ], "\u4e0d\u5b58\u5728\u8fd9\u573a\u6bd4\u8d5b" ] ];
    var ERROR_STRING_LIST = {};
    for (var _iterator = _createForOfIteratorHelperLoose(GlobalError.KEY_VALUE_TAB), _step; !(_step = _iterator()).done; ) {
      var keyValueTab = _step.value;
      ERROR_STRING_LIST[keyValueTab[0].toString()] = keyValueTab[1];
    }
    GlobalError.getErrorStr = function(code) {
      var errorStr = ERROR_STRING_LIST[code.toString()];
      if (errorStr) return errorStr;
      return tools.stringFormat("\u672a\u5b9a\u4e49\u7684\u9519\u8bef code = {0}", code);
    };
    cc._RF.pop();
  }, {} ],
  GlobalFunction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45dd6wQ+n5NJJl4n678p0nw", "GlobalFunction");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    window.getResourcePrefab = function(layerName, cb) {
      layerName = "prefab/" + layerName;
      var prefab = null;
      cc.loader.loadRes(layerName, function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        prefab = cc.instantiate(loadedResource);
        cb(prefab);
      });
    };
    String.prototype.format = function(args) {
      var result = this;
      if (arguments.length > 0) if (1 == arguments.length && "object" == typeof args) {
        for (var key in args) if (void 0 != args[key]) {
          var reg = new RegExp("({" + key + "})", "g");
          result = result.replace(reg, args[key]);
        }
      } else for (var i = 0; i < arguments.length; i++) if (void 0 != arguments[i]) {
        var reg = new RegExp("({)" + i + "(})", "g");
        result = result.replace(reg, arguments[i]);
      }
      return result;
    };
    cc.Node.prototype.loadTexture = function(res) {
      var sprite = this.getComponent(cc.Sprite);
      if (!sprite) {
        cc.error(" node \u6ca1\u6709sprite\u63a7\u4ef6 ");
        return;
      }
      cc.loader.loadRes(res, cc.SpriteFrame, function(err, spriteFrame) {
        if (err) {
          cc.error("get res erro");
          return;
        }
        sprite && (sprite.spriteFrame = spriteFrame);
      });
    };
    cc.Node.prototype.newSetTag = function(tag) {
      this.customTag = tag;
    };
    cc.Node.prototype.newGetTag = function() {
      null != this.customTag && void 0 != this.customTag || cc.error(" tag is null or undifiend ");
      return this.customTag;
    };
    cc.Button.prototype._onTouchEnded = function(event) {
      if (!this.interactable || !this.enabledInHierarchy) return;
      if (this._pressed) {
        MYAudioEngine.playClickSound();
        cc.Component.EventHandler.emitEvents(this.clickEvents, event);
        this.node.emit("click", this);
      }
      this._pressed = false;
      this._updateState();
      event.stopPropagation();
    };
    window.cloneObject = function(object) {
      if (!object) return;
      if ("array" == typeof object && 0 == object.length) return;
      return JSON.parse(JSON.stringify(object));
    };
    window.F_InitListView = function(data, onAddItemCallback, listView, listItem, gridNum, offsetX, offsetY, myListViewEventCallback, bScale) {
      var scrollView = listView.getComponent(cc.ScrollView);
      var content = scrollView.content;
      content.removeAllChildren();
      for (var idx in data) {
        var itemLayer = cc.instantiate(listItem);
        content.addChild(itemLayer);
        itemLayer.active = true;
        onAddItemCallback(listView, itemLayer, data[idx], idx);
      }
      scrollView.horizontal && scrollView.scheduleOnce(function() {
        scrollView.scrollToPercentHorizontal(.01, .1);
      }, .016);
    };
    window.createSprite = function(resource) {
      var node = new cc.Node();
      var sprite = node.addComponent(cc.Sprite);
      cc.loader.loadRes(resource, cc.SpriteFrame, function(err, spriteFrame) {
        resource && (sprite.spriteFrame = spriteFrame);
      });
      return node;
    };
    window.setTexture = function(node, res) {
      cc.loader.loadRes(res, cc.SpriteFrame, function(err, spriteFrame) {
        if (err) {
          cc.log(err);
          return;
        }
        node.spriteFrame = spriteFrame;
      });
    };
    window.F_CreateRichColorLabel = function(strTable) {
      var node = new cc.Node();
      var label = node.addComponent(cc.RichText);
      var wText = "";
      for (var _iterator = _createForOfIteratorHelperLoose(strTable), _step; !(_step = _iterator()).done; ) {
        var labelInfo = _step.value;
        var text = labelInfo.str;
        var color = labelInfo.color;
        var colorValue = color.toHEX("rrggbb");
        wText += "<color=#" + String(colorValue) + ">" + text + "</color>";
      }
      label.string = wText;
      return node;
    };
    window.createLabel = function(text) {
      var node = new cc.Node();
      var label = node.addComponent(cc.Label);
      label.string = text;
      return node;
    };
    window.createAtlasLabel = function(text, res) {
      var node = new cc.Node();
      var label = node.addComponent(cc.Label);
      label.string = text;
      cc.loader.loadRes(res, cc.LabelAtlas, function(err, font) {
        err && cc.log(err);
        label.font = font;
      });
      return node;
    };
    window.createBitmapFontLabel = function(text, res) {
      var node = new cc.Node();
      var label = node.addComponent(cc.Label);
      label.string = text;
      var fontRes = window.prefabMap.get("bitmapFont" + res);
      fontRes ? label.font = fontRes : cc.loader.loadRes(res, cc.BitmapFont, function(err, font) {
        err && cc.log(err);
        window.prefabMap.get("bitmapFont" + res);
        label.font = font;
      });
      return node;
    };
    window.skeletonAnimationCreate = function(res, animation, skin) {
      var node = new cc.Node();
      var skeleton = node.addComponent(sp.Skeleton);
      cc.loader.loadRes(res, sp.SkeletonData, function(err, skeletonData) {
        skeleton.skeletonData = skeletonData;
        skeleton.animation = animation;
        skin && setTimeout(function() {
          skeleton.setSkin(skin);
        }, 100);
      });
      skeleton.premultipliedAlpha = false;
      skeleton.loop = false;
      return node;
    };
    window.printInfo = function(str) {
      var params = [];
      for (var i = 1; i < arguments.length; i++) params.push(arguments[i]);
      if (DEBUG >= 2) {
        if (0 !== params.length) {
          var _tools;
          cc.log((_tools = tools).stringFormat.apply(_tools, [ str ].concat(params)));
          return;
        }
        cc.log(str);
      }
    };
    window.dump = function(value, description) {
      if (!DEBUG >= 2) return;
      cc.log(cloneObject(value), description);
    };
    window.objIsEmpty = function(obj) {
      if (void 0 == obj || null == obj) return true;
      return false;
    };
    window.tableIsEmpty = function(table) {
      if (void 0 == table || null == table) return true;
      for (var key in table) return false;
      return true;
    };
    window.getDateTime = function(dt) {
      var year = dt.getFullYear();
      var month = dt.getMonth() + 1;
      var day = dt.getDate();
      var h = dt.getHours();
      var m = dt.getMinutes();
      var s = dt.getSeconds();
      month = month < 10 ? "0" + month : month;
      day = day < 10 ? "0" + day : day;
      h = h < 10 ? "0" + h : h;
      m = m < 10 ? "0" + m : m;
      s = s < 10 ? "0" + s : s;
      return year + " / " + month + " / " + day + "     " + h + " : " + m + " : " + s;
    };
    window.F_CreateWebViewLayer = function(url) {
      var node = new cc.Node();
      var webView = node.addComponent(cc.WebView);
      webView.url = url;
      node.width = 2 * C_WinSize.width;
      node.height = 2 * C_WinSize.height;
      node.x = C_WinSize.width;
      node.y = C_WinSize.height;
      var scene = cc.director.getScene();
      scene.addChild(node);
      return node;
    };
    window.F_GetDateStringByTime = function(tTime) {
      var myDate = new Date(1e3 * tTime);
      var result = myDate.toLocaleDateString().replace(/V/g, "-") + " " + myDate.toTimeString().substr(0, 8);
      return result;
    };
    window.F_GetDateNoTimeStringByTime = function(tDate) {
      var myDate = new Date(1e3 * tDate);
      var result = myDate.toLocaleDateString().replace(/V/g, "-");
      return result;
    };
    window.F_GetTime = function() {
      var curTime = Date.parse(new Date());
      return curTime / 1e3;
    };
    window.F_RandomNum = function(minNum, maxNum) {
      return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);
    };
    window.F_Object2Arr = function(o) {
      var a = [];
      for (var k in o) {
        var v = o[k];
        a.push(v);
      }
      return a;
    };
    window.objectGetArr = function(o) {
      var a = [];
      for (var k in o) {
        var v = o[k];
        a.push(v);
      }
      return a;
    };
    window.F_GetMoneyDisplay = function(money) {
      return money / G_MULTI_NUM;
    };
    window.F_ChangeShowMulNum = function(money, needTwoPoint) {
      if ("undefined" == typeof money) return;
      if (G_IS_SHOW_POINT) {
        var mulMoney = money / G_MULTI_NUM;
        return needTwoPoint ? mulMoney.toFixed(2) : mulMoney;
      }
      return money;
    };
    window.gameCommon = {};
    gameCommon.RESPATH = {
      sound_began_bet: "sound/GameCommonRes/audio/sound/began_bet",
      sound_stop_bet: "sound/GameCommonRes/audio/sound/stop_bet",
      sound_fly_card: "sound/GameCommonRes/audio/sound/fly_card",
      sound_bet_chip: "sound/GameCommonRes/audio/sound/bet_chip_mp3",
      sound_shouchouma: "sound/GameCommonRes/audio/sound/shouchouma",
      sound_flock_chip: "sound/GameCommonRes/audio/sound/flock_chip",
      sound_xiu: "sound/GameCommonRes/audio/sound/xiu",
      sound_clock: "sound/GameCommonRes/audio/sound/clock",
      sound_countDown: "sound/GameCommonRes/audio/sound/countDown"
    };
    window.filterShangzhuangList = function(list) {
      var zhuangList = [];
      for (var k = 0; k < list.length; k++) {
        var v = list[k];
        v.userID && 0 != v.userID && zhuangList.push(v);
      }
      return zhuangList;
    };
    window.getFloatScore = function(node, money, offx, offy, api) {
      if (!node) return;
      if (!money) return;
      var scoreNode = null;
      scoreNode = money >= 0 ? createBitmapFontLabel("+" + Math.abs(money) / G_MULTI_NUM, "font/result_font_num_win_yellow") : createBitmapFontLabel("-" + Math.abs(money) / G_MULTI_NUM, "font/result_font_num_lose_blue");
      node.addChild(scoreNode);
      cc.log("---------scoreNode:", scoreNode);
      scoreNode.x = offx || 0;
      scoreNode.y = offy || 0;
      var myX = 0;
      myX = offx || -65;
      var act1, act2, act4, act5, act6, act8;
      if (api) {
        act1 = cc.moveBy(.4, cc.v2(60, 35));
        act2 = cc.fadeIn(.4);
        act4 = cc.moveBy(.5, cc.v2(0, 35));
        act5 = cc.fadeOut(.5);
        act6 = cc.spawn(act4, act5);
        act8 = cc.delayTime(1.5);
      } else {
        act1 = cc.moveBy(.4, cc.v2(0, 50));
        act2 = cc.fadeIn(.4);
        act4 = cc.moveBy(.5, cc.v2(myX, 20));
        act5 = cc.fadeOut(.5);
        act6 = cc.spawn(act4, act5);
        act8 = cc.delayTime(1.5);
      }
      scoreNode.runAction(cc.sequence(cc.spawn(act1, act2), act8, cc.spawn(act5, act6), cc.callFunc(function() {
        scoreNode.removeFromParent();
      })));
    };
    window.pengArrowDirection = function(viewSeatNoPengGang, viewSeatNoBePengGang) {
      var spriteDirectionAngle = {
        zuo: 90,
        shang: 0,
        you: 270,
        xia: 180
      };
      if (0 == viewSeatNoPengGang) {
        if (1 == viewSeatNoBePengGang) return spriteDirectionAngle.zuo;
        if (2 == viewSeatNoBePengGang) return spriteDirectionAngle.shang;
        if (3 == viewSeatNoBePengGang) return spriteDirectionAngle.you;
      } else if (1 == viewSeatNoPengGang) {
        if (2 == viewSeatNoBePengGang) return spriteDirectionAngle.shang;
        if (3 == viewSeatNoBePengGang) return spriteDirectionAngle.you;
        if (0 == viewSeatNoBePengGang) return spriteDirectionAngle.xia;
      } else if (2 == viewSeatNoPengGang) {
        if (1 == viewSeatNoBePengGang) return spriteDirectionAngle.zuo;
        if (3 == viewSeatNoBePengGang) return spriteDirectionAngle.you;
        if (0 == viewSeatNoBePengGang) return spriteDirectionAngle.xia;
      } else if (3 == viewSeatNoPengGang) {
        if (1 == viewSeatNoBePengGang) return spriteDirectionAngle.zuo;
        if (2 == viewSeatNoBePengGang) return spriteDirectionAngle.shang;
        if (0 == viewSeatNoBePengGang) return spriteDirectionAngle.xia;
      }
    };
    window.F_GetMoneyWithRatio = function(money, ratio) {
      return "undefined" != typeof money ? Number(money) * ratio : 0;
    };
    window.F_GetMoneyInput = function(money) {
      return F_GetMoneyWithRatio(money, G_MULTI_NUM);
    };
    window.Utf8ToGb2312 = function(str1) {
      var substr = "";
      var a = "";
      var b = "";
      var c = "";
      var i = -1;
      i = str1.indexOf("%");
      if (-1 == i) return str1;
      while (-1 != i) {
        if (i < 3) {
          substr += str1.substr(0, i - 1);
          str1 = str1.substr(i + 1, str1.length - i);
          a = str1.substr(0, 2);
          str1 = str1.substr(2, str1.length - 2);
          if (false & parseInt("0x" + a)) substr += String.fromCharCode(parseInt("0x" + a)); else if (false & parseInt("0x" + a)) {
            b = str1.substr(1, 2);
            str1 = str1.substr(3, str1.length - 3);
            var widechar = (31 & parseInt("0x" + a)) << 6;
            widechar |= 63 & parseInt("0x" + b);
            substr += String.fromCharCode(widechar);
          } else {
            b = str1.substr(1, 2);
            str1 = str1.substr(3, str1.length - 3);
            c = str1.substr(1, 2);
            str1 = str1.substr(3, str1.length - 3);
            var widechar = (15 & parseInt("0x" + a)) << 12;
            widechar |= (63 & parseInt("0x" + b)) << 6;
            widechar |= 63 & parseInt("0x" + c);
            substr += String.fromCharCode(widechar);
          }
        } else {
          substr += str1.substring(0, i);
          str1 = str1.substring(i);
        }
        i = str1.indexOf("%");
      }
      return substr + str1;
    };
    window.randomInt = function(min, max) {
      return Math.floor(Math.random() * (max - min) + min);
    };
    window.getRankInfo = function(gameExp, isNext) {
      var breakIndex = 0;
      for (var i = 0; i < window.rankInfoArr.length; i++) if (window.rankInfoArr[i].gameExp > gameExp) {
        breakIndex = i;
        break;
      }
      0 != breakIndex && (breakIndex -= 1);
      if (isNext) return breakIndex;
      return rankInfoArr[breakIndex];
    };
    window.getNextRankInfo = function(gameExp) {
      var breakIndex = getRankInfo(gameExp, true);
      return rankInfoArr[breakIndex + 1];
    };
    cc._RF.pop();
  }, {} ],
  GlobelContext: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d52c7CqhixGMpdToUdxzngT", "GlobelContext");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GlobelContext = function() {
      function GlobelContext() {}
      GlobelContext.TXYLicenseURL = "https://license.vod2.myqcloud.com/license/v2/1311608929_1/v_cube.license";
      GlobelContext.TXYPushKey = "85fcf25bd2f894e16cb461fe37c0ab83";
      GlobelContext.AppName = "ouone";
      GlobelContext.PushStreamUrl = "168799.livepush.myqcloud.com";
      GlobelContext.PullStreamUrl = "push.ouwan.hmzb.top";
      GlobelContext.url = "https://ouwan.hmzb.top/";
      return GlobelContext;
    }();
    exports.default = GlobelContext;
    cc._RF.pop();
  }, {} ],
  GongGaoItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "003a4IwCKNPapBz9ZVOOAxE", "GongGaoItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: cc.Label,
        NeiRongLabel: cc.Label,
        timeLabel: cc.Label,
        yidu: cc.Node,
        xiangqing: cc.Node,
        bgSprite: cc.Node,
        fromLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.SystemNoticeLogic = new (require("SystemNoticeLogic"))();
      },
      start: function start() {},
      init: function init(data, layer, view) {
        this.layer = layer;
        this.view = view;
        this.ID = data.id;
        data.title && (this.titleLabel.string = data.title);
        this.NeiRongLabel.string = data.content;
        if (data.time) {
          var date = new Date(1e3 * data.time);
          var Y = date.getFullYear() + "";
          var M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "";
          var D = (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) + "";
          var h = (date.getHours() < 10 ? "0" + date.getHours() : date.getHours()) + ":";
          var m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
          this.timeLabel.string = Y + "/" + M + "/" + D + "  " + h + m;
        }
        1 == data.type ? this.fromLabel.string = "\u53d1\u4ef6\u4eba: \u666e\u901a\u516c\u544a" : this.fromLabel.string = "\u53d1\u4ef6\u4eba: \u7279\u6b8a\u516c\u544a";
      },
      doButton: function doButton() {
        if (true == this.xiangqing.active) {
          this.xiangqing.active = false;
          this.node.height = this.bgSprite.height;
        } else {
          this.xiangqing.active = true;
          this.node.height = this.bgSprite.height + this.xiangqing.height;
        }
      },
      doButton_del: function doButton_del() {
        var _this = this;
        var callback = function callback() {
          createTips("\u5220\u9664\u6210\u529f");
          _this.view.removeAllChildren();
          _this.layer.getComponent("GongGaoLayer").initUI();
        };
        this.SystemNoticeLogic.requestdelNotice(this.ID, callback);
      }
    });
    cc._RF.pop();
  }, {
    SystemNoticeLogic: "SystemNoticeLogic"
  } ],
  GongGaoLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "60d15edZ+hJyIXpodCwj2A+", "GongGaoLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        NoticeItem: cc.Prefab,
        NoticeView: cc.Node,
        NoticeNode: cc.Node,
        LiftNode: cc.Node,
        Jzdbsm: cc.Button,
        Wgsm: cc.Button
      },
      onLoad: function onLoad() {
        if (cc.winSize.width / 1280 < 1) {
          this.NoticeNode.setScale(cc.winSize.width / 1280);
          this.LiftNode.setScale(cc.winSize.width / 1280);
        }
        this.initUI();
      },
      initUI: function initUI() {
        var _this = this;
        this.SystemNoticeLogic = new (require("SystemNoticeLogic"))();
        this.SystemNoticeManager = new (require("NoticeManager"))();
        var callback = function callback(NoticeList) {
          if (NoticeList.length > 0) for (var i = 0; i < NoticeList.length; i++) {
            var item = cc.instantiate(_this.NoticeItem);
            var script = item.getComponent("GongGaoItem");
            script.init(NoticeList[i], _this.node, _this.NoticeView);
            _this.NoticeView.addChild(item);
          }
        };
        this.loadContent(null, "jzdbsm");
      },
      loadContent: function loadContent(event, dataString) {
        if (!dataString || "" == dataString) return;
        var noticeView = this.NoticeView;
        if (this.m_contentStr != dataString) {
          this.m_contentStr = dataString;
          noticeView.removeAllChildren();
          if ("jzdbsm" == dataString) {
            this.Jzdbsm.interactable = false;
            this.Wgsm.interactable = true;
          } else if ("wgsm" == dataString) {
            this.Jzdbsm.interactable = true;
            this.Wgsm.interactable = false;
          }
        }
        cc.loader.loadRes("lobby/ui/gonggao/" + dataString, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) {
            cc.error(err);
            return;
          }
          var node = new cc.Node();
          var sp = node.addComponent(cc.Sprite);
          sp.spriteFrame = spriteFrame;
          noticeView.addChild(node);
        });
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    NoticeManager: "NoticeManager",
    SystemNoticeLogic: "SystemNoticeLogic"
  } ],
  HZMJ_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99e5f0XtT9Ij6/ZW7gpc3W3", "HZMJ_Common");
    "use strict";
    var _window$HZMJ_MACROS_D, _window$HZMJ_NOTIFY_A;
    window.HZMJ_MACROS_DEF = (_window$HZMJ_MACROS_D = {
      PLAY_COUNT: 4,
      MEN_CARD_NUM: 28,
      HAND_CARD_NUM: 14,
      OUT_CARD_NUM: 60,
      HUA_CARD_NUM: 8,
      MAX_HUPAI_TYPE: 4,
      MAX_CANHU_CARD_NUM: 34,
      MAX_COUNT_GANG_FEN: 13,
      MAX_COUNT_HUPAI_FEN: 3,
      MAX_COUNT_HORSE_FEN: 8,
      MAX_COUNT_GEN_ZHUANG_FEN: 1
    }, _window$HZMJ_MACROS_D["MEN_CARD_NUM"] = 28, _window$HZMJ_MACROS_D.MAX_REMAIN_MEN_PAI_NUM = 110, 
    _window$HZMJ_MACROS_D.GANG_TYPE_MAX = 7, _window$HZMJ_MACROS_D.MAX_GANG_TYPE_INDEX = 16, 
    _window$HZMJ_MACROS_D.MAX_GENZHUANG_INDEX = 3, _window$HZMJ_MACROS_D.MJTABLE_CARDTYPE0 = 0, 
    _window$HZMJ_MACROS_D.MJTABLE_CARDTYPE1 = 1, _window$HZMJ_MACROS_D.ACTION_NO = 0, 
    _window$HZMJ_MACROS_D.ACTION_CHI = 1, _window$HZMJ_MACROS_D.ACTION_CHI_FRONT = 2, 
    _window$HZMJ_MACROS_D.ACTION_CHI_MID = 3, _window$HZMJ_MACROS_D.ACTION_CHI_BACK = 3, 
    _window$HZMJ_MACROS_D.ACTION_PENG = 5, _window$HZMJ_MACROS_D.ACTION_KAN = 6, _window$HZMJ_MACROS_D.ACTION_GANG = 7, 
    _window$HZMJ_MACROS_D.ACTION_AN_GANG = 8, _window$HZMJ_MACROS_D.ACTION_BU_GANG = 9, 
    _window$HZMJ_MACROS_D.ACTION_MING_GANG = 10, _window$HZMJ_MACROS_D.ACTION_CHI_TNG = 11, 
    _window$HZMJ_MACROS_D.ACTION_TING_PAI = 12, _window$HZMJ_MACROS_D.ACTION_HU = 13, 
    _window$HZMJ_MACROS_D.ACTION_PASS = 16, _window$HZMJ_MACROS_D.ACTION_FANCAI = 14, 
    _window$HZMJ_MACROS_D.ACTION_GANGKAI = 15, _window$HZMJ_MACROS_D.OUT = 20, _window$HZMJ_MACROS_D.Start_HandCount = 13, 
    _window$HZMJ_MACROS_D.MAX_GANG_UION_NUM = 4, _window$HZMJ_MACROS_D.MAX_CHI_UION_NUM = 3, 
    _window$HZMJ_MACROS_D.CPG_MAX_PILE_NUM = 4, _window$HZMJ_MACROS_D.Out_Time = 15, 
    _window$HZMJ_MACROS_D.MAX_MAIMA_COUNT = 6, _window$HZMJ_MACROS_D);
    window.HZMJ_CPG_TIMES = {
      TIMES_TWO: 2,
      TIMES_THREE: 3,
      TIMES_EACH_OTHER_THREE: 4
    };
    window.HZMJ_HUTYPE_NAME_DEF = {};
    window.HZMJ_HUTYPE_NAME_DEF[255] = "";
    window.HZMJ_HUTYPE_NAME_DEF[3] = "\u5e73\u80e1";
    window.HZMJ_HUTYPE_NAME_DEF[6] = "\u6760\u4e0a\u82b1";
    window.HZMJ_HUTYPE_NAME_DEF[32] = "\u5927\u80e1";
    window.HZMJ_HUTYPE_NAME_DEF[58] = "\u4e03\u5c0f\u5bf9";
    window.HZMJ_HUTYPE_NAME_DEF[91] = "\u5355\u540a";
    window.HZMJ_HUTYPE_NAME_DEF[61] = "\u6e05\u4e00\u8272";
    window.HZMJ_HUTYPE_NAME_DEF[75] = "\u98ce\u4e00\u8272";
    window.HZMJ_HUTYPE_NAME_DEF[79] = "\u5927\u4e09\u5143";
    window.HZMJ_HUTYPE_NAME_DEF[84] = "\u5341\u4e09\u5e7a";
    window.HZMJ_HUTYPE_NAME_DEF[91] = "\u5355\u540a";
    window.HZMJ_HUTYPE_NAME_DEF[92] = "\u5355\u8c6a\u534e";
    window.HZMJ_HUTYPE_NAME_DEF[93] = "\u53cc\u8c6a\u534e";
    window.HZMJ_HUTYPE_NAME_DEF[94] = "\u4e09\u8c6a\u534e";
    window.HZMJ_HUTYPE_NAME_DEF[95] = "\u8e72\u8e72\u9f50";
    window.HZMJ_HUTYPE_NAME_DEF[96] = "\u53cd\u8e29";
    window.HZMJ_HUTYPE_Cardtype = {};
    window.HZMJ_HUTYPE_Cardtype[255] = "";
    window.HZMJ_HUTYPE_Cardtype[3] = 1;
    window.HZMJ_HUTYPE_Cardtype[6] = 1;
    window.HZMJ_HUTYPE_Cardtype[32] = 2;
    window.HZMJ_HUTYPE_Cardtype[46] = 2;
    window.HZMJ_HUTYPE_Cardtype[58] = 4;
    window.HZMJ_HUTYPE_Cardtype[61] = 5;
    window.HZMJ_HUTYPE_Cardtype[79] = 8;
    window.HZMJ_HUTYPE_Cardtype[91] = 3;
    window.HZMJ_HUTYPE_Cardtype[92] = 8;
    window.HZMJ_HUTYPE_Cardtype[93] = 16;
    window.HZMJ_HUTYPE_Cardtype[94] = 32;
    window.HZMJ_HUTYPE_Cardtype[95] = 8;
    window.HZMJ_HUTYPE_Cardtype[96] = 1;
    window.HZMJ_HU_FEN_TYPE = {};
    window.HZMJ_HU_FEN_TYPE[0] = "";
    window.HZMJ_HU_FEN_TYPE[1] = "\u81ea\u6478";
    window.HZMJ_HU_FEN_TYPE[2] = "\u88ab\u81ea\u6478";
    window.HZMJ_HU_FEN_TYPE[3] = "\u70b9\u70ae";
    window.HZMJ_HU_FEN_TYPE[4] = "\u5403\u80e1";
    window.HZMJ_HU_FEN_TYPE[5] = "\u627f\u5305";
    window.HZMJ_GANG_FEN_TYPE = {};
    window.HZMJ_GANG_FEN_TYPE[0] = "";
    window.HZMJ_GANG_FEN_TYPE[1] = "\u6697\u6760";
    window.HZMJ_GANG_FEN_TYPE[2] = "\u660e\u6760";
    window.HZMJ_GANG_FEN_TYPE[3] = "\u660e\u6760";
    window.HZMJ_GANG_FEN_TYPE[4] = "\u88ab\u6697\u6760";
    window.HZMJ_GANG_FEN_TYPE[5] = "\u70b9\u6760";
    window.HZMJ_GANG_FEN_TYPE[6] = "\u88ab\u660e\u6760";
    window.HZMJ_GANG_FEN_TYPE[7] = "\u88ab\u660e\u6760";
    window.HZMJ_STATION = {};
    window.HZMJ_STATION[0] = "";
    window.HZMJ_STATION[1] = "\u672c\u5bb6";
    window.HZMJ_STATION[2] = "\u4e0b\u5bb6";
    window.HZMJ_STATION[4] = "\u5bf9\u5bb6";
    window.HZMJ_STATION[8] = "\u4e0a\u5bb6";
    window.HZMJ_STATION[10] = "\u4e0a\u5bb6\u4e0e\u4e0b\u5bb6";
    window.HZMJ_STATION[6] = "\u5bf9\u5bb6\u4e0e\u4e0b\u5bb6";
    window.HZMJ_STATION[12] = "\u4e0a\u5bb6\u4e0e\u5bf9\u5bb6";
    window.HZMJ_STATION[14] = "\u4e09\u5bb6";
    window.HZMJ_GENZHUANG_TYPE = {};
    window.HZMJ_GENZHUANG_TYPE[0] = "\u8bf7\u5145\u503c";
    window.HZMJ_GENZHUANG_TYPE[1] = "\u8ddf\u5e84";
    window.HZMJ_GENZHUANG_TYPE[2] = "\u88ab\u8ddf\u5e84";
    window.HZMJ_HORSE_FEN_TYPE = {};
    window.HZMJ_HORSE_FEN_TYPE[0] = "";
    window.HZMJ_HORSE_FEN_TYPE[1] = "\u8d62\u9a6c";
    window.HZMJ_HORSE_FEN_TYPE[2] = "\u8f93\u9a6c";
    window.HZMJ_NOTIFY_AssistantID = (_window$HZMJ_NOTIFY_A = {
      SUB_C_OUT_CARD: 50,
      SUB_C_OPERATE_CARD: 51,
      SUB_C_TRUSTEE: 52,
      SUB_C_ZUO_SHENG_YI: 53,
      SUB_C_CHOOSE_CHI: 54,
      SUB_S_GAME_START: 100,
      SUB_S_OUT_CARD: 101,
      SUB_S_SEND_CARD: 102,
      SUB_S_OPERATE_NOTIFY: 103,
      SUB_S_OPERATE_RESULT: 104,
      SUB_S_GAME_END: 105,
      SUB_S_TRUSTEE: 106,
      SUB_S_GAME_END_ALL: 107,
      SUB_S_QIHU_NOTIFY: 108,
      SUB_S_OUT_CARD_RESULT: 109,
      SUB_S_PICK_FOLLOWER: 110,
      SUB_S_ZHUA_AFTER_PICK: 111,
      SUB_S_LIMIT_OUT: 112,
      SUB_S_REMOV_OUT_LIMIT: 113
    }, _window$HZMJ_NOTIFY_A["SUB_S_REMOV_OUT_LIMIT"] = 114, _window$HZMJ_NOTIFY_A.SUB_S_ZSY_POPUP = 117, 
    _window$HZMJ_NOTIFY_A.SUB_S_CPG_TIMES_PROMPT = 118, _window$HZMJ_NOTIFY_A);
    window.HZMJ_GameStation = {
      GS_STATUS_FREE: 0,
      GS_STATUS_PLAYING: 1,
      GS_FOLLOWER_CHECK: 2
    };
    window.HZMJ_TYPE = {
      MJ_TYPE_NONE: 0,
      MJ_TYPE_W1: 1,
      MJ_TYPE_W2: 2,
      MJ_TYPE_W3: 3,
      MJ_TYPE_W4: 4,
      MJ_TYPE_W5: 5,
      MJ_TYPE_W6: 6,
      MJ_TYPE_W7: 7,
      MJ_TYPE_W8: 8,
      MJ_TYPE_W9: 9,
      MJ_TYPE_T1: 11,
      MJ_TYPE_T2: 12,
      MJ_TYPE_T3: 13,
      MJ_TYPE_T4: 14,
      MJ_TYPE_T5: 15,
      MJ_TYPE_T6: 16,
      MJ_TYPE_T7: 17,
      MJ_TYPE_T8: 18,
      MJ_TYPE_T9: 19,
      MJ_TYPE_B1: 21,
      MJ_TYPE_B2: 22,
      MJ_TYPE_B3: 23,
      MJ_TYPE_B4: 24,
      MJ_TYPE_B5: 25,
      MJ_TYPE_B6: 26,
      MJ_TYPE_B7: 27,
      MJ_TYPE_B8: 28,
      MJ_TYPE_B9: 29,
      MJ_TYPE_FD: 31,
      MJ_TYPE_FN: 32,
      MJ_TYPE_FX: 33,
      MJ_TYPE_FB: 34,
      MJ_TYPE_ZHONG: 35,
      MJ_TYPE_FA: 36,
      MJ_TYPE_BAI: 37,
      MJ_TYPE_FCHUN: 41,
      MJ_TYPE_FXIA: 42,
      MJ_TYPE_FQIU: 43,
      MJ_TYPE_FDONG: 44,
      MJ_TYPE_FMEI: 45,
      MJ_TYPE_FLAN: 46,
      MJ_TYPE_FZHU: 47,
      MJ_TYPE_FJU: 48,
      MJ_TYPE_CAISHEN: 49,
      MJ_TYPE_YUANBAO: 50,
      MJ_TYPE_MAO: 51,
      MJ_TYPE_LAOXU: 52
    };
    cc._RF.pop();
  }, {} ],
  HZMJ_CtrlBtns: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2658erCVm1ONIq/0xnnHvpm", "HZMJ_CtrlBtns");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ctrlBtnsBg: cc.Node,
        tingBtn: cc.Node,
        chiBtn: cc.Node,
        pengBtn: cc.Node,
        gangBtn: cc.Node,
        huBtn: cc.Node,
        zimoBtn: cc.Node,
        guoBtn: cc.Node,
        chiNode: cc.Node,
        ChiLayout: cc.Node,
        ChiCardsPre: cc.Prefab
      },
      onLoad: function onLoad() {
        this.node.children.forEach(function(n) {
          return n.active = false;
        });
        this.initEvent();
      },
      initEvent: function initEvent() {
        GameEvent.on("onHandleCard", this.show, this);
        GameEvent.on("onGuo", this.guoEvent, this);
        GameEvent.on("onHideCtrlBtn", this.hide, this);
      },
      closeEvent: function closeEvent() {
        GameEvent.off("onHandleCard", this.show, this);
        GameEvent.off("onGuo", this.guoEvent, this);
        GameEvent.off("onHideCtrlBtn", this.hide, this);
      },
      show: function show(event, deskComponentTarget) {
        deskComponentTarget && (this.deskComponentTarget = deskComponentTarget);
        if (cc.mj.Data.isPlayback) return;
        var data = event;
        cc.mj.Data.showCtrlBtns = true;
        this.ctrlBtnsBg && (this.ctrlBtnsBg.active = true);
        if (data.isGuo) {
          this.guoBtn.active = true;
          this.guoBtn.getChildByName("nomor_2").active = false;
        }
        data.isPeng && (this.pengBtn.active = true);
        if (data.isChi) {
          this.chiBtn.active = true;
          this.chiValue = {};
          this.chiValue = event.chiUion;
        }
        event.gangUion.length > 0 ? this.gangValue = event.gangUion[0] : this.gangValue = null;
        if (data.isGang || data.isBuGang || data.isAnGang) {
          this.gangHandType = {
            isGang: true
          };
          data.isBuGang ? this.gangHandType = {
            isBuGang: true
          } : data.isAnGang && (this.gangHandType = {
            isAnGang: true
          });
          this.gangBtn.active = true;
        }
        if (data.isTing) {
          this.tingBtn.active = true;
          this.huHandType = {
            isTing: true
          };
        }
        if (data.isHu) {
          this.huBtn.active = true;
          this.huHandType = {
            isHu: true
          };
          this.guoBtn.getChildByName("nomor_2").active = true;
        }
        if (data.isZiMo) {
          this.zimoBtn.active = true;
          this.huHandType = {
            isZiMo: true
          };
        }
        this.byMJCardType = event.byMJCardType;
        this.eventData = event;
      },
      guoEvent: function guoEvent(event) {
        event.uid === cc.mj.Data.uid && this.hide();
      },
      hide: function hide() {
        cc.mj.Data.showCtrlBtns = false;
        this.ctrlBtnsBg && (this.ctrlBtnsBg.active = false);
        this.chiNode && (this.chiNode.active = false);
        this.node.children.forEach(function(n) {
          return n.active = false;
        });
        this.gangHandType = null;
        this.huHandType = null;
      },
      btnClickEvent: function btnClickEvent(event, type) {
        var _this = this;
        switch (type) {
         case "ting":
          if (this.deskComponentTarget) {
            var responseInfoData = {
              eventType: HZMJ_MACROS_DEF.ACTION_TING_PAI
            };
            this.deskComponentTarget.userResponseEvent(responseInfoData);
          }
          this.hide();
          break;

         case "chi":
          if (this.chiValue.length > 1) {
            this.chiNode.active = true;
            this.SendChoosedChi();
            this.ChiLayout.children.forEach(function(node, index) {
              node.destroy();
            });
            for (var index = 0; index < this.chiValue.length; index++) {
              var element = this.chiValue[index];
              this.setChiCard(element);
            }
          } else {
            if (this.deskComponentTarget) {
              var _responseInfoData = {
                eventType: HZMJ_MACROS_DEF.ACTION_CHI,
                chiValue: this.chiValue[0]
              };
              this.deskComponentTarget.userResponseEvent(_responseInfoData);
            }
            this.hide();
          }
          break;

         case "peng":
          if (this.deskComponentTarget) {
            var _responseInfoData2 = {
              eventType: HZMJ_MACROS_DEF.ACTION_PENG
            };
            this.deskComponentTarget.userResponseEvent(_responseInfoData2);
          }
          this.hide();
          break;

         case "gang":
          if (this.deskComponentTarget && this.gangValue) {
            var _responseInfoData3 = {
              eventType: HZMJ_MACROS_DEF.ACTION_GANG,
              gangValue: this.gangValue
            };
            this.deskComponentTarget.userResponseEvent(_responseInfoData3);
          }
          this.hide();
          break;

         case "hu":
         case "zm":
          if (this.deskComponentTarget) {
            var _responseInfoData4 = {
              eventType: HZMJ_MACROS_DEF.ACTION_HU
            };
            this.deskComponentTarget.userResponseEvent(_responseInfoData4);
          }
          this.hide();
          break;

         case "guo":
          if (this.deskComponentTarget) {
            var requestGuoAction = function requestGuoAction(isGuoAction) {
              var responseInfoData = {
                eventType: HZMJ_MACROS_DEF.ACTION_PASS,
                iSGuoAction: isGuoAction
              };
              _this.deskComponentTarget.userResponseEvent(responseInfoData);
            };
            if (this.huBtn.active) {
              var btnName1 = "\u786e  \u5b9a";
              var btnName2 = "\u53d6  \u6d88";
              var msgCallback = function msgCallback(btnName) {
                btnName == btnName1 ? requestGuoAction(true) : _this.show(_this.eventData, _this.deskComponentTarget);
              };
              var msgObj = {};
              msgObj.msg = "\u786e\u5b9a\u8981\u9009\u62e9\u8fc7\u7684\u64cd\u4f5c\u5417?";
              msgObj.btn1 = btnName1;
              msgObj.btn2 = btnName2;
              msgObj.callbackFun = msgCallback;
              createMsgBox(msgObj);
            } else this.gangBtn.active ? requestGuoAction(true) : requestGuoAction(false);
          }
          this.hide();
        }
      },
      setChiCard: function setChiCard(chiValue) {
        var _this2 = this;
        var nodes = cc.instantiate(this.ChiCardsPre);
        this.ChiLayout.addChild(nodes);
        nodes.active = true;
        var button = nodes.getChildByName("btn").getComponent(cc.Button);
        var clickEventHandler = new cc.Component.EventHandler();
        clickEventHandler.target = this.node;
        clickEventHandler.component = "HZMJ_CtrlBtns";
        clickEventHandler.handler = "Chicallback";
        clickEventHandler.customEventData = chiValue;
        button.clickEvents.push(clickEventHandler);
        var cards = nodes.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        cards.forEach(function(card, i) {
          card.init(chiValue[i], true, false, "daoCard", 0, _this2.byMJCardType);
        });
      },
      Chicallback: function Chicallback(event, customEventData) {
        if (this.deskComponentTarget) {
          this.chiNode.active = true;
          var responseInfoData = {
            eventType: HZMJ_MACROS_DEF.ACTION_CHI,
            chiValue: customEventData
          };
          this.deskComponentTarget.userResponseEvent(responseInfoData);
        }
        this.hide();
      },
      SendChoosedChi: function SendChoosedChi() {
        this.deskComponentTarget && this.deskComponentTarget.SendChoosedChi();
      },
      onDestroy: function onDestroy() {
        this.closeEvent();
      }
    });
    cc._RF.pop();
  }, {} ],
  HZMJ_Data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "859f1uS/BBOLIx7fpKgj845", "HZMJ_Data");
    "use strict";
    var Pos = [ [ 0, 1, 2, 3 ], [ 3, 0, 1, 2 ], [ 2, 3, 0, 1 ], [ 1, 2, 3, 0 ] ];
    cc.Class({
      extends: cc.Component,
      properties: {
        uid: null,
        isGaming: false,
        isWatchMode: false,
        roomResult: null,
        isPlayback: false,
        playbackData: null,
        playbackNum: 0
      },
      init: function init() {},
      getPlayerByKeyValue: function getPlayerByKeyValue(key, value) {
        if ("uid" == key) {
          var userList = GameSocket.getDeskUserList();
          for (var k in userList) {
            var v = userList[k];
            if (v.userID == value) return v;
          }
        }
      },
      getPlayerData: function getPlayerData() {
        return this.getPlayerByKeyValue("uid", cc.mj.userInfoMgr.uid);
      },
      onSync: function onSync(data) {
        this.deleteData();
      },
      getPlayerInfo: function getPlayerInfo(net_player) {},
      deleteData: function deleteData() {
        this.uid = null;
        this.roomResult = null;
        this.isGaming = false;
        this.isPlayback = false;
        this.playbackData = null;
        this.playbackNum = 0;
        this.showCtrlBtns = null;
        this.selectedCard = null;
        this.notcanPutCard = null;
        this.moveFlag = null;
        this.isDingZhuang = null;
        this.turnFlag = null;
        this.showRoomOverFlag = false;
        this.curPutCard = null;
        this.mopaiAction = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  HZMJ_EditTool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33388i4mJ1O/b6o80sdAXwE", "HZMJ_EditTool");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HZMJ_EditTool = function(_super) {
      __extends(HZMJ_EditTool, _super);
      function HZMJ_EditTool() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._nameMap = {
          playOne: "Bottom",
          playTwo: "Left",
          playThree: "Top",
          playFour: "Right"
        };
        _this.playerRootNode = null;
        _this.cardItemNode = null;
        _this.path = "assets/resources/HZMJ/cards.json";
        _this._isCleaning = false;
        _this._isLoading = false;
        _this._isSaving = false;
        return _this;
      }
      Object.defineProperty(HZMJ_EditTool.prototype, "clean", {
        get: function() {
          return this._isCleaning;
        },
        set: function(v) {
          if (this._isCleaning) return;
          this._isCleaning = true;
          for (var _i = 0, _a = this.playerRootNode.children; _i < _a.length; _i++) {
            var playerNode = _a[_i];
            var showHandCardsNode = playerNode.getChildByName("showHandCards");
            var handCardsNode = playerNode.getChildByName("handCards");
            handCardsNode || (handCardsNode = playerNode.getChildByName("handCards3D"));
            var pushCardsNode = playerNode.getChildByName("pushCards3D");
            handCardsNode.removeAllChildren();
            pushCardsNode.removeAllChildren();
            showHandCardsNode && showHandCardsNode.removeAllChildren();
          }
          this._isCleaning = false;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HZMJ_EditTool.prototype, "load", {
        get: function() {
          return this._isLoading;
        },
        set: function(v) {
          var _this = this;
          if (this._isLoading) return;
          this._isLoading = true;
          this.readFile(this.path, function(err, data) {
            _this._isLoading = false;
            if (err) {
              cc.error(err);
              return;
            }
            cc.log("load data", data);
            var sourceData = JSON.parse(data);
            for (var key in sourceData) _this._deserializePlayerCard(sourceData[key], _this.playerRootNode.getChildByName(key));
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(HZMJ_EditTool.prototype, "save", {
        get: function() {
          return this._isSaving;
        },
        set: function(v) {
          var _this = this;
          if (this._isSaving) return;
          this._isSaving = true;
          var data = {};
          for (var _i = 0, _a = this.playerRootNode.children; _i < _a.length; _i++) {
            var playerNode = _a[_i];
            data[playerNode.name] = this._serializePlayerCard(playerNode);
          }
          this.writeFile(this.path, JSON.stringify(data), function(err) {
            _this._isSaving = false;
            if (err) {
              cc.error(err);
              return;
            }
            cc.log("write data sucess", JSON.stringify(data));
          });
        },
        enumerable: false,
        configurable: true
      });
      HZMJ_EditTool.prototype._deserializePlayerCard = function(data, playerNode) {
        var showHandCardsNode = playerNode.getChildByName("showHandCards");
        var handCardsNode = playerNode.getChildByName("handCards");
        handCardsNode || (handCardsNode = playerNode.getChildByName("handCards3D"));
        var pushCardsNode = playerNode.getChildByName("pushCards3D");
        handCardsNode.removeAllChildren();
        pushCardsNode.removeAllChildren();
        showHandCardsNode && showHandCardsNode.removeAllChildren();
        var itemMap = new Map();
        for (var _i = 0, _a = this.cardItemNode.children; _i < _a.length; _i++) {
          var itemNode = _a[_i];
          itemMap.set(itemNode.name, itemNode);
        }
        for (var _b = 0, _c = data.hand_cards; _b < _c.length; _b++) {
          var cardInfo = _c[_b];
          var cardItemNode = itemMap.get(cardInfo.name);
          cardItemNode || cc.error("get card item from scene CardItem failed", cardInfo.name);
          var node = cc.instantiate(cardItemNode);
          node.active = cardInfo.active;
          node.x = cardInfo.x;
          node.y = cardInfo.y;
          node.parent = handCardsNode;
        }
        for (var _d = 0, _e = data.push_cards; _d < _e.length; _d++) {
          var cardInfo = _e[_d];
          var cardItemNode = itemMap.get(cardInfo.name);
          cardItemNode || cc.error("get card item from scene CardItem failed", cardInfo.name);
          var node = cc.instantiate(cardItemNode);
          node.active = cardInfo.active;
          node.x = cardInfo.x;
          node.y = cardInfo.y;
          node.parent = pushCardsNode;
        }
        if (showHandCardsNode) for (var _f = 0, _g = data.show_hand_cards; _f < _g.length; _f++) {
          var cardInfo = _g[_f];
          var cardItemNode = itemMap.get(cardInfo.name);
          cardItemNode || cc.error("get card item from scene CardItem failed", cardInfo.name);
          var node = cc.instantiate(cardItemNode);
          node.active = cardInfo.active;
          node.x = cardInfo.x;
          node.y = cardInfo.y;
          node.parent = showHandCardsNode;
        }
      };
      HZMJ_EditTool.prototype._serializePlayerCard = function(playerNode) {
        var data = {
          hand_cards: [],
          push_cards: [],
          show_hand_cards: []
        };
        var showHandCardsNode = playerNode.getChildByName("showHandCards");
        var handCardsNode = playerNode.getChildByName("handCards");
        handCardsNode || (handCardsNode = playerNode.getChildByName("handCards3D"));
        var pushCardsNode = playerNode.getChildByName("pushCards3D");
        var allHandCardNode = handCardsNode ? handCardsNode.children : [];
        for (var _i = 0, allHandCardNode_1 = allHandCardNode; _i < allHandCardNode_1.length; _i++) {
          var cardNode = allHandCardNode_1[_i];
          var nodeName = cardNode.name;
          -1 !== nodeName.indexOf("-") && (nodeName = nodeName.split("-")[0]);
          nodeName = this._nameMap[playerNode.name] + "HandCard";
          var card = {
            name: nodeName,
            active: cardNode.active,
            x: Number(cardNode.x.toFixed(2)),
            y: Number(cardNode.y.toFixed(2))
          };
          data.hand_cards.push(card);
        }
        var allPushCardNode = pushCardsNode ? pushCardsNode.children : [];
        for (var _a = 0, allPushCardNode_1 = allPushCardNode; _a < allPushCardNode_1.length; _a++) {
          var cardNode = allPushCardNode_1[_a];
          var nodeName = cardNode.name;
          -1 !== nodeName.indexOf("-") && (nodeName = nodeName.split("-")[0]);
          nodeName = this._nameMap[playerNode.name] + "PushCard";
          var card = {
            name: nodeName,
            active: cardNode.active,
            x: Number(cardNode.x.toFixed(2)),
            y: Number(cardNode.y.toFixed(2))
          };
          data.push_cards.push(card);
        }
        var allShowHandCardNode = showHandCardsNode ? showHandCardsNode.children : [];
        for (var _b = 0, allShowHandCardNode_1 = allShowHandCardNode; _b < allShowHandCardNode_1.length; _b++) {
          var cardNode = allShowHandCardNode_1[_b];
          var nodeName = cardNode.name;
          -1 !== nodeName.indexOf("-") && (nodeName = nodeName.split("-")[0]);
          nodeName = this._nameMap[playerNode.name] + "ShowHandCard";
          var card = {
            name: nodeName,
            active: cardNode.active,
            x: Number(cardNode.x.toFixed(2)),
            y: Number(cardNode.y.toFixed(2))
          };
          data.show_hand_cards.push(card);
        }
        return data;
      };
      HZMJ_EditTool.prototype.readFile = function(path, cb) {
        var projectPath = Editor.Project.path.replace("\\", "/");
        var filePath = projectPath + "/" + path;
        var fs = require("fs");
        fs.readFile(filePath, "utf-8", function(err, data) {
          if (err) {
            console.error("load " + filePath + " error:", err);
            cb && cb(err, null);
            return;
          }
          console.info("load " + filePath + " sucess");
          cb && cb(null, data);
        });
      };
      HZMJ_EditTool.prototype.writeFile = function(path, data, cb) {
        var projectPath = Editor.Project.path.replace("\\", "/");
        var filePath = projectPath + "/" + path;
        var dirName = filePath.substr(0, filePath.lastIndexOf("/") + 1);
        var fs = require("fs");
        var write = function() {
          fs.writeFile(filePath, data, function(err) {
            if (err) {
              console.error("save " + filePath + " error:", err);
              cb && cb(null);
              return;
            }
            console.info("save " + filePath + " sucess:");
            cb && cb(null);
          });
        };
        fs.exists(dirName, function(e) {
          e ? write() : fs.mkdir(dirName, function(err) {
            if (err) {
              console.error("save " + filePath + " mkdir error:", err);
              cb && cb(err);
              return;
            }
            write();
          });
        });
      };
      __decorate([ property(cc.Node) ], HZMJ_EditTool.prototype, "playerRootNode", void 0);
      __decorate([ property(cc.Node) ], HZMJ_EditTool.prototype, "cardItemNode", void 0);
      __decorate([ property({
        displayName: "\u914d\u7f6e\u8def\u5f84"
      }) ], HZMJ_EditTool.prototype, "path", void 0);
      __decorate([ property({
        displayName: "\u6e05\u7406"
      }) ], HZMJ_EditTool.prototype, "clean", null);
      __decorate([ property({
        displayName: "\u52a0\u8f7d"
      }) ], HZMJ_EditTool.prototype, "load", null);
      __decorate([ property({
        displayName: "\u4fdd\u5b58"
      }) ], HZMJ_EditTool.prototype, "save", null);
      HZMJ_EditTool = __decorate([ ccclass ], HZMJ_EditTool);
      return HZMJ_EditTool;
    }(cc.Component);
    exports.default = HZMJ_EditTool;
    cc._RF.pop();
  }, {
    fs: void 0
  } ],
  HZMJ_GameOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8eeb8PPDJRFvajN7tB1FlIS", "HZMJ_GameOver");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    cc.Class({
      extends: cc.Component,
      properties: {
        gameCards: cc.Node,
        huangZhuang: cc.Node,
        gameOverplayers: cc.Node,
        gameBtn: cc.Node,
        closeBtn: cc.Node,
        returnBtn: cc.Node,
        gameBtnSpriteFame: [ cc.SpriteFrame ],
        rewardRichText: cc.RichText,
        bgNode: cc.Node,
        contentBGNode: cc.Node,
        bgSpines: [ sp.Skeleton ],
        titleSpines: [ sp.Skeleton ],
        gaungQuanSpine: sp.Skeleton,
        contentBGSpines: [ sp.Skeleton ],
        leftBGSpines: [ sp.Skeleton ],
        leftBGSpriteFame: [ cc.Node ],
        leftBGWinSpriteFame: [ cc.Node ],
        leftEffectSpines: [ sp.Skeleton ],
        drawSpine: sp.Skeleton
      },
      onLoad: function onLoad() {
        this._isShowSettle = true;
        this._recordNodeShow = {};
        this.resize();
      },
      start: function start() {},
      resize: function resize() {
        var canvas = cc.Canvas.instance;
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.sourceDesignSize;
        designSize || (designSize = cc.view.getDesignResolutionSize());
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          canvas.fitWidth = false;
          canvas.fitHeight = true;
          var scaleW = designSize.height / frameSize.height * frameSize.width / designSize.width;
          this.bgNode.scaleX = scaleW;
          this.bgNode.scaleY = scaleW;
          this.contentBGNode.scaleX = scaleW;
          this.contentBGNode.scaleY = scaleW;
          console.log("GameOverUI \u9002\u914d \u957f\u5c4f \u9002\u914d\u9ad8\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        } else {
          canvas.fitWidth = true;
          canvas.fitHeight = false;
          var scale = frameSize.height / designSize.height;
          this.bgNode.scale = designSize.width / frameSize.width * frameSize.height / designSize.height;
          console.log("GameOverUI \u9002\u914d \u77ed\u5c4f \u9002\u914d\u9ad8\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        }
      },
      show: function show(resultInfo) {
        var _this = this;
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();
        var isReplay = resultInfo.isReplay;
        var resultType = resultInfo.resultType;
        var playsData = resultInfo.playsData;
        console.log(tools.getCurTime() + " \u5355\u5c40\u7ed3\u7b97", JSON.stringify(resultInfo));
        this._isShowSettle = true;
        this.node.active = true;
        this.gameBtn.getComponent(cc.Sprite).spriteFrame = this.gameBtnSpriteFame[0];
        this.node.children.forEach(function(d) {
          return d.active = true;
        });
        this.gameCards.children.forEach(function(d) {
          return d.active = false;
        });
        this.returnBtn.active = false;
        this.rewardRichText.node.active = false;
        this.gameOverplayers.active = false;
        this.gameOverplayers.children.forEach(function(d) {
          return d.active = false;
        });
        this.huangZhuang.active = false;
        this.bgSpines.forEach(function(skeleton, index) {
          skeleton.node.active = false;
        });
        var bgSkeleton = this.bgSpines[resultType];
        bgSkeleton.node.active = true;
        this.titleSpines.forEach(function(skeleton, index) {
          skeleton.node.active = false;
        });
        var titleSkeleton = this.titleSpines[resultType];
        titleSkeleton.node.active = true;
        this.contentBGSpines.forEach(function(skeleton, index) {
          skeleton.node.active = false;
        });
        var contentSkeleton = this.contentBGSpines[resultType];
        contentSkeleton.node.active = true;
        this.leftBGSpines.forEach(function(skeleton, index) {
          skeleton.node.active = false;
        });
        var leftBGSkeleton = this.leftBGSpines[resultType];
        leftBGSkeleton.node.active = false;
        this.leftBGSpriteFame.forEach(function(Sprite, index) {
          Sprite.active = false;
        });
        this.leftBGWinSpriteFame.forEach(function(Sprite, index) {
          Sprite.active = false;
        });
        var leftBGSprite = this.leftBGSpriteFame[resultType];
        if (1 == resultType) {
          leftBGSprite.active = true;
          var playData = resultInfo.playsData[resultInfo.mySeatNo];
          var byHuType = 0;
          for (var index = 0; index < 4; index++) 255 != playData.byHuDouble[index] && (byHuType = 32 == playData.byHuDouble[index] || 91 == playData.byHuDouble[index] || 3 == playData.byHuDouble[index] ? 0 : 61 == playData.byHuDouble[index] || 58 == playData.byHuDouble[index] ? 1 : 2);
          var HuType = "";
          if (1 == byHuType) this.scheduleOnce(function() {
            HuType = leftBGSprite.getChildByName("zhonghu");
            HuType.active = true;
            var leftTitledraw = HuType.getChildByName("amition");
            leftTitledraw.active = true;
          }, 1); else {
            var timeof = 0;
            if (2 == byHuType) {
              HuType = leftBGSprite.getChildByName("dahu");
              HuType.active = true;
              timeof = .5;
            } else if (0 == byHuType) {
              HuType = leftBGSprite.getChildByName("xiaohu");
              HuType.active = true;
              timeof = .2;
            }
            var leftTitledraw = HuType.getChildByName("amition1");
            var leftTitledraw2 = HuType.getChildByName("amition2");
            leftTitledraw.active = false;
            leftTitledraw2.active = false;
            var leftTitleSkeleton = leftTitledraw.getComponent(sp.Skeleton);
            var callBack = function callBack() {
              leftTitledraw2.active = true;
              leftTitledraw.active = false;
              var leftTitleSkeleton2 = leftTitledraw2.getComponent(sp.Skeleton);
              _this.playSkelenAnimation(leftTitleSkeleton2, "xunhuan", true, null);
            };
            this.scheduleOnce(function() {
              leftTitledraw.active = true;
              leftTitledraw2.active = false;
              _this.playSkelenAnimation(leftTitleSkeleton, "tiao", false, callBack);
            }, timeof);
          }
        } else {
          var timeoN = 0;
          0 == resultType ? timeoN = .5 : 2 == resultType && (timeoN = .7);
          this.scheduleOnce(function() {
            leftBGSprite.active = true;
          }, timeoN);
        }
        this.leftEffectSpines.forEach(function(skeleton, index) {
          skeleton.node.active = false;
        });
        var leftEffectSkeleton = this.leftEffectSpines[resultType];
        leftEffectSkeleton.node.active = true;
        this.gaungQuanSpine.node.active = 1 === resultType;
        this.drawSpine.node.active = 0 === resultType;
        if (!isReplay) {
          leftBGSkeleton.node.active = false;
          leftEffectSkeleton.node.active = true;
        }
        var spines = [ bgSkeleton, titleSkeleton, contentSkeleton, leftBGSkeleton, leftEffectSkeleton, this.gaungQuanSpine, this.drawSpine ];
        spines.forEach(function(spine, index) {
          _this.playSkelenAnimation(spine, "KaiShi", false, null);
        });
        var showDetail = function showDetail() {
          var rewardGiftCount = resultInfo.rewardGiftCard;
          _this.scheduleOnce(function() {
            if (rewardGiftCount > 0) {
              _this.rewardRichText.node.active = true;
              var cTime = 0;
              _this.rewardRichText.string = "\u793c\u5238 " + cTime;
              _this.rewardGift = function() {
                cTime += rewardGiftCount / 100 >= 1 ? 10 : rewardGiftCount / 1e3 >= 1 ? 100 : rewardGiftCount / 1e4 >= 1 ? 1e3 : 1;
                cTime++;
                if (cTime > rewardGiftCount) {
                  _this.unschedule(_this.rewardGift);
                  _this.rewardRichText.string = "\u793c\u5238 " + rewardGiftCount;
                } else _this.rewardRichText.string = "\u793c\u5238 " + cTime;
              };
              _this.schedule(_this.rewardGift, .001 / rewardGiftCount);
            }
          }, .1);
          if (0 === resultType) return;
          _this.gameCards.active = true;
          _this.gameOverplayers.active = true;
          _this.gameCards.active = true;
          playsData.forEach(function(info, i) {
            if (info.userID <= 0) return;
            if (1 == info.resultType) {
              var node = _this.gameCards.children[0];
              node.getComponent("HZMJ_gameOverItem").initData(info);
              node.active = true;
            }
            var PlayNode = _this.gameOverplayers.children[i];
            PlayNode.active = true;
            PlayNode.getChildByName("name").getComponent(cc.Label).string = tools.getCutStringByCount(decodeURI(info.name), 5);
            PlayNode.getChildByName("name").color = 1 == info.resultType ? cc.color(255, 234, 20) : cc.color(87, 40, 40);
            PlayNode.getChildByName("score").getComponent(cc.Label).string = info.score;
            PlayNode.getChildByName("score").color = 1 == info.resultType ? cc.color(255, 255, 255) : cc.color(176, 59, 52);
            PlayNode.getChildByName("bg").getComponent("SpriteArray").index = 1 == info.resultType ? 1 : 0;
            var imgHead = PlayNode.getChildByName("head").getChildByName("avatar");
            var onGetHeadRes = function(avataRes) {
              imgHead && cc.isValid(imgHead) && (imgHead.getComponent(cc.Sprite).spriteFrame = avataRes);
            }.bind(_this);
            var headUrl = info.avatar;
            AvatarManager.requestHeadRes(headUrl, info.userID, onGetHeadRes, null);
            PlayNode.getChildByName("bank").active = info.isBanker;
            PlayNode.getChildByName("image_Hu").active = 1 == info.resultType;
          });
        };
        this.scheduleOnce(function() {
          showDetail();
          spines.forEach(function(spine, index) {
            _this.playSkelenAnimation(spine, "XunHuan", true, null);
          });
        }, 1);
        this.gameBtn.active = false;
        this.closeBtn.active = false;
        if (isReplay) {
          this.gameBtn.active = false;
          this.closeBtn.active = false;
        }
        if (resultInfo.isGoldRoom) {
          this.returnBtn.active = true;
          this.closeBtn.active = true;
        }
      },
      hide: function hide() {
        this.node.active = false;
      },
      onContinueBtnClick: function onContinueBtnClick() {
        GameEvent.emit("closeGameOver");
        var GameLogicBase = new (require("GameLogicBase"))();
        GameEvent.emit("onclosebtn");
      },
      onBtnreturnClick: function onBtnreturnClick() {
        GameSocket.requestStand();
      },
      onHePaiBtnClick: function onHePaiBtnClick() {
        if (this._isShowSettle) {
          this._isShowSettle = !this._isShowSettle;
          this.gameBtn.getComponent(cc.Sprite).spriteFrame = this.gameBtnSpriteFame[1];
          for (var _iterator = _createForOfIteratorHelperLoose(this.node.children), _step; !(_step = _iterator()).done; ) {
            var node = _step.value;
            if (node == this.gameBtn || node == this.closeBtn) continue;
            node.active = false;
          }
        }
      },
      playSkelenAnimation: function playSkelenAnimation(skeleton, animName, isLoop, callBack) {
        skeleton.loop = isLoop;
        skeleton.animation = animName;
        skeleton.setCompleteListener(function() {
          callBack && this.scheduleOnce(callBack, .2);
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    GameLogicBase: "GameLogicBase"
  } ],
  HZMJ_GameTableLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7bc2dRvWdRHFa9AQnni4KZx", "HZMJ_GameTableLogic");
    "use strict";
    var ARENA_CONFIG = [ {
      people: 2,
      roomids: [ 7, 8, 9, 10, 11 ]
    }, {
      people: 3,
      roomids: [ 12, 13, 14, 15, 16 ]
    }, {
      people: 4,
      roomids: [ 2, 3, 4, 5, 6 ]
    } ];
    cc.Class({
      extends: require("GameLogicBase"),
      properties: {},
      ctor: function ctor() {},
      ctorData: function ctorData() {
        GameManager.setLogic(this, this.setPlayInfo.bind(this));
        this.playCount = 4;
        this._outTime = 0;
        this._blockTime = 0;
        this._autoBlockTime = 5;
        this._restMahjongNum = 136;
        this._bSuperClient = false;
        this._playType = G_INVALID_BYTE_VALUE;
        this._gameBeginStatus = false;
        this.m_StartVisible = false;
        this.m_OverVisible = false;
        G_SHOW_GAME_VOICE = false;
        this._oldGetCardList = {};
        this._oldGetCardCount = 0;
        this.playInfo || this.__initData();
        if (this.isMatchRoom() || this.isBarrierMatchRoom()) {
          this.playCount = 2;
          this._logicInfo.seatCount = this.playCount;
        }
        if (this.isGoldRoom()) {
          var roomID = RoomListManager.getRoomInfo().roomID;
          for (var i = 0; i < ARENA_CONFIG.length; i++) {
            var roomidsArr = ARENA_CONFIG[i].roomids;
            for (var index = 0; index < roomidsArr.length; index++) if (roomID == roomidsArr[index]) {
              this.playCount = ARENA_CONFIG[i].people;
              this._logicInfo.seatCount = this.playCount;
              return;
            }
          }
        }
      },
      onLoad: function onLoad() {
        cc.log("********\u8fdb\u5165\u9ebb\u5c06\u903b\u8f91\u754c\u9762***********");
        this.ctorData();
      },
      __initData: function __initData() {
        this._restMahjongNum = 136;
        this.handArrData = {};
        this.handArrCount = {};
        this._cpgArrData = {};
        this.roomCardAllScore = {};
        this._isMeTuoGuan = false;
        for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) {
          this.handArrData[i] = {};
          for (var j = 0; j < HZMJ_MACROS_DEF.HAND_CARD_NUM; j++) this.handArrData[i][j] = G_INVALID_BYTE_VALUE;
          this.handArrCount[i] = HZMJ_MACROS_DEF.HAND_CARD_NUM - 1;
          this.roomCardAllScore[i] = 0;
        }
        this.__recordAllUserName();
      },
      __recordAllUserName: function __recordAllUserName() {
        this._nameList = {};
        this._UserIdList = {};
        for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) {
          this._nameList[i] = this.getUserNameBySeat(i);
          this._UserIdList[i] = this.getUserIdBySeat(i);
        }
      },
      setPlayInfo: function setPlayInfo(playInfo) {
        this.playInfo = playInfo;
        var logicInfo = {
          seatCount: HZMJ_MACROS_DEF.PLAY_COUNT,
          playInfo: playInfo
        };
        var ui = GameManager.getGameUI();
        this._super(ui, logicInfo);
      },
      start: function start() {},
      _initReplayData: function _initReplayData() {
        RoomListManager.setRoomInfo({
          gameID: this.playInfo.gameID
        });
        RoomListManager.setCurRuleInfo(this.playInfo.gameRules);
        var playerCount = 0;
        for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) this.playInfo.user[i] && playerCount++;
        this.playCount = playerCount;
        var info = {
          deskPasswd: this.playInfo.bRoomPassward,
          masterID: "",
          masterName: this.playInfo.bRoomMasterName,
          runGameCount: this.playInfo.bCurPlayCount,
          totalGameCount: this.playInfo.bAllPlayCount
        };
        this.tableUI.showVipRoomInfo(info);
        this.tableUI.setRoomPswText(this.playInfo.bCurPlayCount, this.playInfo.bCurQuanFeng);
        for (var i = 0; i < this.playCount; i++) {
          var recordUser = this.playInfo.user[i];
          var user = {};
          user.nickName = recordUser.nickName;
          user.dwUserID = recordUser.dwUserID;
          user.money = 0;
          user.hearUrl = recordUser.hearUrl;
          user.bBoy = recordUser.bBoy;
          user.score = recordUser.iScore;
          user.headURL = recordUser.hearUrl;
          user.userID = recordUser.dwUserID;
          user.name = recordUser.nickName;
          this.tableUI.addUser(user, this.logicToViewSeatNo(i));
        }
      },
      startReplayGame: function startReplayGame() {
        var _this = this;
        cc.mj.Data.isPlayback = true;
        this._initReplayData();
        this.__initData();
        this.__recordAllUserName();
        this.tableUI.setReplayUI();
        this.tableUI.ShowNetWork(false);
        var beginInfo = {};
        beginInfo.byNtStation = this.playInfo.bBankerPos;
        beginInfo.byCard = [];
        beginInfo.byCradCount = [];
        for (var index = 0; index < this.playCount; index++) {
          var HandCrad = this.playInfo.handArrData[index];
          var count = 0;
          var HandData = [];
          for (var j = 0; j < HZMJ_MACROS_DEF.HAND_CARD_NUM; j++) {
            HandData.push(HandCrad[j]);
            HandCrad[j] != G_INVALID_BYTE_VALUE && (count += 1);
          }
          beginInfo.byCard.push(HandData);
          beginInfo.byCradCount.push(count);
        }
        this.handArrData = cloneObject(beginInfo.byCard);
        this.handArrCount = cloneObject(beginInfo.byCradCount);
        beginInfo.iMenNums = this.playInfo.bMenRestNum;
        beginInfo.iPlayintCount = this.playInfo.bCurPlayCount;
        this.mySeatNo = 0;
        this.curBankerSeatNO = beginInfo.byNtStation;
        this._iMenNums = beginInfo.iMenNums;
        this.tableUI.Showdirection(beginInfo.byNtStation, this.playInfo.byLackFengWei);
        this.gameStationLogic(beginInfo);
        this.tableUI.setChuPaiEnabled(-1);
        this.tmpDelay = function() {
          var eventIdx = 0;
          _this.playMahjong = function() {
            var eventInfo = _this.playInfo.event[eventIdx];
            if (!eventInfo) {
              eventIdx += 1;
              return;
            }
            switch (eventInfo.eventType) {
             case "get":
              _this._replayOptionGetCard(eventInfo);
              break;

             case "out":
              _this._replayOptionOutCard(eventInfo);
              break;

             case "chi":
              _this._replayOptionChi(eventInfo);
              break;

             case "peng":
              _this._replayOptionPeng(eventInfo);
              break;

             case "gang":
             case "bugang":
             case "angang":
              _this._replayOptionGang(eventInfo);
              break;

             case "hua":
              _this._replayOptionHua(eventInfo);
              break;

             case "getAfterPickFlower":
              _this._replayOptionPickFlower(eventInfo);
              break;

             case "hu":
              _this._replayOptionHu(eventInfo);
              break;

             case "GameEnd":
              _this.unschedule(_this.playMahjong);
              _this._replayOptionGameEnd(eventInfo);
            }
            eventIdx += 1;
          };
          _this.schedule(_this.playMahjong, .5);
          _this.unschedule(_this.tmpDelay);
        };
        this.schedule(this.tmpDelay, .1);
      },
      getUserdwUserIDBySeat: function getUserdwUserIDBySeat(logicSeatNO) {
        if (this.playInfo) return this.playInfo.user[logicSeatNO].dwUserID;
      },
      getUserSexBySeat: function getUserSexBySeat(logicSeatNO) {
        if (this.playInfo) {
          console.log("getUserSexBySeat replay", logicSeatNO, this.playInfo);
          return this.playInfo.user[logicSeatNO.toString()].bBoy;
        }
        console.log("getUserSexBySeat normal", null);
        return this._super(logicSeatNO);
      },
      _formatCards: function _formatCards(cardsData, maxCount) {
        var result = {
          count: 0,
          cards: []
        };
        for (var i = 0; i < maxCount; i++) {
          var card = cardsData[i];
          if (!card) continue;
          card != G_INVALID_BYTE_VALUE && result.count++;
          result.cards.push(card);
        }
        return result;
      },
      _replayOptionGetCard: function _replayOptionGetCard(eventInfo) {
        this.tableUI.getCard(eventInfo.bUser, eventInfo.cardValue, 15);
      },
      _replayOptionOutCard: function _replayOptionOutCard(eventInfo) {
        var handCardsData = this._formatCards(eventInfo.handData, HZMJ_MACROS_DEF.HAND_CARD_NUM);
        this.tableUI.outCard(eventInfo.bUser, eventInfo.cardValue, handCardsData.cards, handCardsData.count, eventInfo.handCardIndex);
      },
      _replayOptionChi: function _replayOptionChi(eventInfo) {
        var handCardsData = this._formatCards(eventInfo.handData, HZMJ_MACROS_DEF.HAND_CARD_NUM);
        var optionInfo = {
          eventType: HZMJ_MACROS_DEF.ACTION_CHI,
          byStation: eventInfo.bUser,
          eventSendPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bUser),
          eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bBeUser),
          curMahJongValue: eventInfo.cardValue,
          resultList: [ eventInfo.chiList[0], eventInfo.chiList[1], eventInfo.chiList[2], G_INVALID_BYTE_VALUE ],
          handCount: handCardsData.count,
          handList: handCardsData.cards
        };
        this.tableUI.eventChiPengGang(optionInfo);
      },
      _replayOptionPeng: function _replayOptionPeng(eventInfo) {
        var handCardsData = this._formatCards(eventInfo.handData, HZMJ_MACROS_DEF.HAND_CARD_NUM);
        var optionInfo = {
          eventType: HZMJ_MACROS_DEF.ACTION_PENG,
          byStation: eventInfo.bUser,
          eventSendPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bUser),
          eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bBeUser),
          curMahJongValue: eventInfo.cardValue,
          handCount: handCardsData.count,
          handList: handCardsData.cards
        };
        this.tableUI.eventChiPengGang(optionInfo);
      },
      _replayOptionGang: function _replayOptionGang(eventInfo) {
        var gangType = HZMJ_MACROS_DEF.ACTION_MING_GANG;
        "bugang" === eventInfo.eventType ? gangType = HZMJ_MACROS_DEF.ACTION_BU_GANG : "angang" === eventInfo.eventType && (gangType = HZMJ_MACROS_DEF.ACTION_AN_GANG);
        var handCardsData = this._formatCards(eventInfo.handData, HZMJ_MACROS_DEF.HAND_CARD_NUM);
        var optionInfo = {
          eventType: gangType,
          byStation: eventInfo.bUser,
          eventSendPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bUser),
          eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(eventInfo.bBeUser),
          curMahJongValue: eventInfo.cardValue,
          handCount: handCardsData.count,
          handList: handCardsData.cards
        };
        this.tableUI.eventChiPengGang(optionInfo);
      },
      _replayOptionHua: function _replayOptionHua(eventInfo) {
        var info = {};
        info.byCurrentUser = eventInfo.bUser;
        info.byCardCount = eventInfo.cardCount;
        info.byHuaCard = {};
        for (var j = 0; j <= HZMJ_MACROS_DEF.HUA_CARD_NUM - 1; j++) info.byHuaCard[j] = eventInfo.byHuaCard[j];
        info.byHuaCardCount = eventInfo.huaCardCount;
        info.byWildHuaCard = {};
        for (var _j = 0; _j <= HZMJ_MACROS_DEF.HUA_CARD_NUM - 1; _j++) info.byWildHuaCard[_j] = eventInfo.byWildHuaCard[_j];
        info.byWildHuaCardCount = eventInfo.wildHuaCardCount;
        var byflowerCardData = [];
        for (var index = 0; index < HZMJ_MACROS_DEF.HUA_CARD_NUM; index++) info.byHuaCard[index] != G_INVALID_BYTE_VALUE && byflowerCardData.push(info.byHuaCard[index]);
        for (var i = 0; i < HZMJ_MACROS_DEF.HUA_CARD_NUM; i++) info.byWildHuaCard[i] != G_INVALID_BYTE_VALUE && byflowerCardData.push(info.byWildHuaCard[i]);
        this.tableUI.ShowflowerCard(this.logicToViewSeatNo(info.byCurrentUser), byflowerCardData, info.byHuaCardCount, info.byWildHuaCardCount);
        this.tableUI.ShowMyHandCard(this.logicToViewSeatNo(info.byCurrentUser), eventInfo.handData);
      },
      _replayOptionPickFlower: function _replayOptionPickFlower(eventInfo) {
        this.tableUI.ShowMyHandCard(this.logicToViewSeatNo(eventInfo.bUser), eventInfo.handData);
        this.tableUI.showRestNum(true, eventInfo.iMenNums);
      },
      _replayOptionHu: function _replayOptionHu(eventInfo) {
        this.tableUI.eventHu(this.logicToViewSeatNo(eventInfo.bUser), this.logicToViewSeatNo(eventInfo.bBeUser));
      },
      _replayOptionGameEnd: function _replayOptionGameEnd(eventInfo) {
        var curCount, sumCount = this.getGameCountInfo();
        var m_UserHuPaiLeiXing = [];
        for (var index = 0; index < 35; index++) {
          if (!eventInfo.UserHuPaiLeiXing[index]) break;
          m_UserHuPaiLeiXing.push(eventInfo.UserHuPaiLeiXing[index]);
        }
        var resultInfo = {
          bZimo: eventInfo.bZimo,
          bIsLiuJu: eventInfo.bIsLiuJu,
          byDianPao: [],
          byBeDianPao: eventInfo.byBeDianPao,
          byPs: eventInfo.byPs,
          byArHandPai: [],
          byArHandPaiCount: [],
          byBaoCard: 255,
          byHorsePai: [],
          byHaveHorsePai: [],
          iHaveHorseCount: [],
          iHorseCount: [],
          iHuTypeEx: [],
          iFanCount: [],
          bycountGangFen: [],
          llGameScore: [],
          llAllScore: [],
          UserGCPData: [],
          HuPaiLeiXing: [],
          UserHuPaiLeiXing: m_UserHuPaiLeiXing,
          byHuDouble: [],
          byDouble: [],
          byHuaCardCount: [],
          byWildHuaCardCount: [],
          byOtherUserHuaType: [],
          byTaiCount: eventInfo.byTaiCount,
          byHuMode: [],
          bNotPrompt: eventInfo.bNotPrompt,
          curGameCount: curCount,
          allGameCount: sumCount,
          byNtStation: this.getCurBankerSeatNO(),
          userID: [],
          userName: [],
          usersHeadUrl: []
        };
        for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) {
          var user = eventInfo.userList[i];
          if (!user) continue;
          var basiUser = this.playInfo.user[i];
          resultInfo.userID[i] = basiUser.dwUserID;
          resultInfo.userName[i] = basiUser.nickName;
          resultInfo.usersHeadUrl[i] = basiUser.hearUrl;
          resultInfo.byDianPao[i] = eventInfo.bDianPao[i];
          resultInfo.byArHandPai[i] = user.handData;
          resultInfo.byArHandPaiCount[i] = user.handCardCount;
          resultInfo.llGameScore[i] = user.llGameScore;
          resultInfo.llAllScore[i] = user.llAllScore;
          for (var n = 0; n <= 4; n++) user.UserGCPData && user.UserGCPData[n] && (user.UserGCPData[n].byData = user.UserGCPData[n].handData);
          resultInfo.UserGCPData[i] = user.UserGCPData;
          resultInfo.byHuDouble[i] = user.byHuDouble;
          resultInfo.byDouble[i] = user.byDouble;
          resultInfo.byHuaCardCount[i] = user.byHuaCardCount;
          resultInfo.byWildHuaCardCount[i] = user.byWildHuaCardCount;
          resultInfo.byOtherUserHuaType[i] = user.byOtherUserHuaType;
          resultInfo.byHuMode[i] = user.byHuMode;
        }
        resultInfo.tableUIComponent = this.tableUI;
        GameEvent.emit("showGameOver", resultInfo, true);
      },
      userResponse: function userResponse(responseInfo) {
        var eventType = responseInfo.eventType;
        var cNetMsg;
        eventType == HZMJ_MACROS_DEF.ACTION_PASS && false == responseInfo.iSGuoAction && this.tableUI.setChuPaiEnabled(-1);
        switch (eventType) {
         case HZMJ_MACROS_DEF.OUT:
          cNetMsg = null;
          cNetMsg = GameSocket.createNetMsg(6, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_OUT_CARD);
          if (responseInfo.bClickTingOut) {
            cNetMsg.pushBOOL(true);
            console.log("\u64cd\u4f5c\u65e5\u5fd7 \u51fa\u724c \u542c \u6570\u636e", "true");
          } else {
            cNetMsg.pushBOOL(false);
            console.log("\u64cd\u4f5c\u65e5\u5fd7 \u51fa\u724c \u542c \u6570\u636e", "false");
          }
          cNetMsg.pushBYTE(responseInfo.curMahJongValue);
          cNetMsg.crossedARMPush(4);
          console.log("\u64cd\u4f5c\u65e5\u5fd7 \u51fa\u724c \u6570\u636e", responseInfo.curMahJongValue);
          GameSocket.sendData(cNetMsg);
          break;

         case HZMJ_MACROS_DEF.ACTION_PASS:
         case HZMJ_MACROS_DEF.ACTION_TING_PAI:
         case HZMJ_MACROS_DEF.ACTION_PENG:
         case HZMJ_MACROS_DEF.ACTION_HU:
          cNetMsg = null;
          cNetMsg = GameSocket.createNetMsg(5, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_OPERATE_CARD);
          cNetMsg.pushBYTE(responseInfo.eventType);
          cNetMsg.crossedARMPush(4);
          GameSocket.sendData(cNetMsg);
          console.log("\u64cd\u4f5c\u65e5\u5fd7 \u78b0 \u6570\u636e", responseInfo.eventType);
          break;

         case HZMJ_MACROS_DEF.ACTION_GANG:
          cNetMsg = null;
          cNetMsg = GameSocket.createNetMsg(5, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_OPERATE_CARD);
          cNetMsg.pushBYTE(HZMJ_MACROS_DEF.ACTION_GANG);
          for (var i = 0; i <= 3; i++) cNetMsg.pushBYTE(responseInfo.gangValue);
          GameSocket.sendData(cNetMsg);
          console.log("\u64cd\u4f5c\u65e5\u5fd7 \u6760 \u6570\u636e", responseInfo.gangValue);
          break;

         case HZMJ_MACROS_DEF.ACTION_CHI:
          cNetMsg = null;
          cNetMsg = GameSocket.createNetMsg(5, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_OPERATE_CARD);
          cNetMsg.pushBYTE(HZMJ_MACROS_DEF.ACTION_CHI);
          for (var _i = 0; _i <= 2; _i++) cNetMsg.pushBYTE(responseInfo.chiValue[_i]);
          cNetMsg.pushBYTE(G_INVALID_BYTE_VALUE);
          GameSocket.sendData(cNetMsg);
          console.log("\u64cd\u4f5c\u65e5\u5fd7 \u5403 \u6570\u636e", responseInfo.chiValue);
        }
      },
      SendDataZSY: function SendDataZSY(Visible) {
        var cNetMsg = null;
        cNetMsg = GameSocket.createNetMsg(1, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_ZUO_SHENG_YI);
        cNetMsg.pushBOOL(Visible);
        GameSocket.sendData(cNetMsg);
      },
      SendChoosedChi: function SendChoosedChi() {
        var cNetMsg = null;
        cNetMsg = GameSocket.createNetMsg(1, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_CHOOSE_CHI);
        cNetMsg.pushBOOL(true);
        GameSocket.sendData(cNetMsg);
      },
      dealGameStationResp: function dealGameStationResp(netMsg) {
        if (HZMJ_GameStation.GS_STATUS_FREE == this.gameStatus) {
          var gameStationFreeInfo = {};
          gameStationFreeInfo.bAgree = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationFreeInfo.byOutTime = netMsg.popBYTE();
          gameStationFreeInfo.byBlockTime = netMsg.popBYTE();
          gameStationFreeInfo.byMJCardType = netMsg.popBYTE();
          gameStationFreeInfo.isMenNums = netMsg.popINT();
          gameStationFreeInfo.iPlayintCount = netMsg.popINT();
          gameStationFreeInfo.iBaseFen = netMsg.popINT();
          gameStationFreeInfo.llAllScore = tools.popArray("LONGLONG", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationFreeInfo.bSuperFlag = netMsg.popBOOL();
          gameStationFreeInfo.iTimeRemaining = netMsg.popINT();
          gameStationFreeInfo.playCount = netMsg.popBYTE();
          this.playCount = gameStationFreeInfo.playCount;
          this._logicInfo.seatCount = this.playCount;
          this.tableUI.setRoomPswText(gameStationFreeInfo.iPlayintCount, gameStationFreeInfo.byQuanFeng);
          this._GameRules = gameStationFreeInfo;
          this._outTime = gameStationFreeInfo.byOutTime;
          this._blockTime = gameStationFreeInfo.byBlockTime;
          var curCount = this.getGameCountInfo();
          gameStationFreeInfo.curCount = curCount;
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u6e38\u620f\u72b6\u6001Free \u6570\u636e", gameStationFreeInfo);
          this.tableUI.ShowNetWork(false);
          this.tableUI.showTableBtn(true);
          this.tableUI.StartTimeschedule(gameStationFreeInfo.iTimeRemaining, true);
          if (0 != curCount) {
            this.tableUI.uiInfo.startBtn && (this.tableUI.uiInfo.startBtn.active = false);
            this.sendAgreeGame();
          }
          this.tableUI.onGameStationFree(gameStationFreeInfo);
          this.isMatchRoom() || this.isBarrierMatchRoom() ? this.tableUI.playerinforOrGameRulerStatic(false) : this.tableUI.playerinforOrGameRulerStatic(true);
          this.m_OverVisible = false;
        } else if (HZMJ_GameStation.GS_STATUS_PLAYING == this.gameStatus || HZMJ_GameStation.GS_FOLLOWER_CHECK == this.gameStatus) {
          var gameStationGameInfo = {};
          gameStationGameInfo.bTing = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationGameInfo.bTinging = netMsg.popBOOL();
          gameStationGameInfo.bTuoGuan = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationGameInfo.byOutTime = netMsg.popBYTE();
          gameStationGameInfo.byBlockTime = netMsg.popBYTE();
          gameStationGameInfo.byArHandPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          gameStationGameInfo.byArHandPaiCount = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          this.handArrData = cloneObject(gameStationGameInfo.byArHandPai);
          this.handArrCount = cloneObject(gameStationGameInfo.byArHandPaiCount);
          gameStationGameInfo.byArOutPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.OUT_CARD_NUM);
          gameStationGameInfo.byArOutPaiCount = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationGameInfo.byMJCardType = netMsg.popBYTE();
          var card_color = Number(cc.sys.localStorage.getItem(G_CARD_COLOR) || 0);
          gameStationGameInfo.byMJCardType = card_color;
          gameStationGameInfo.byNowOutStation = netMsg.popBYTE();
          gameStationGameInfo.byTingCanOut = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          gameStationGameInfo.byNtStation = netMsg.popBYTE();
          gameStationGameInfo.byArMenPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.MEN_CARD_NUM);
          gameStationGameInfo.byBaoCard = netMsg.popBYTE();
          gameStationGameInfo.iMenNums = netMsg.popINT();
          gameStationGameInfo.iPlayintCount = netMsg.popINT();
          gameStationGameInfo.iBaseFen = netMsg.popINT();
          gameStationGameInfo.llAllScore = tools.popArray("LONGLONG", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          gameStationGameInfo.CPGNotifyMes = this.__tagCPGNotifyMes(netMsg);
          gameStationGameInfo.UserGCPData = this.__resolveChiPengGangData(netMsg);
          gameStationGameInfo.bSuperFlag = netMsg.popBOOL();
          gameStationGameInfo.byOutAfterHuCard = tools.popArray("BYTE", netMsg, 34);
          gameStationGameInfo.remainingTimer = netMsg.popINT();
          gameStationGameInfo.iTimeRemaining = netMsg.popINT();
          gameStationGameInfo.playCount = netMsg.popBYTE();
          this.playCount = gameStationGameInfo.playCount;
          this._logicInfo.seatCount = this.playCount;
          this.__recordAllUserName();
          this.tableUI.playerinforOrGameRulerStatic(false);
          this.tableUI.ShowNetWork(true);
          this.tableUI.Showdirection(gameStationGameInfo.byNtStation, gameStationGameInfo.byLackFengWei);
          this.tableUI.setRoomPswText(gameStationGameInfo.iPlayintCount, gameStationGameInfo.byQuanFeng);
          this.tableUI.StartTimeschedule(gameStationGameInfo.iTimeRemaining);
          this._iMenNums = gameStationGameInfo.iMenNums;
          this._GameRules = gameStationGameInfo;
          this.mySeatNo = this.getMySeatNO();
          this._playType = gameStationGameInfo.byJingType;
          this._outTime = gameStationGameInfo.byOutTime;
          this._blockTime = gameStationGameInfo.byBlockTime;
          this.curBankerSeatNO = gameStationGameInfo.byNtStation;
          this.tableUI.showTableBtn(false);
          this.tableUI.hideGameStatic(false);
          this.m_OverVisible = false;
          cc.mj.Data.zhuangUid = this.getUserIdBySeat(this.curBankerSeatNO);
          for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) this.tableUI.addPlayer(this.getUserIdBySeat(i), this.getViewSeatByID(this.getUserIdBySeat(i)), gameStationGameInfo.byMJCardType);
          cc.mj.Data.isWatchMode = this.isMeWatching();
          for (var _i2 = 0; _i2 < HZMJ_MACROS_DEF.PLAY_COUNT; _i2++) {
            var byCurrentUser = _i2;
            var byflowerCardData = [];
            if (!!gameStationGameInfo.byHuaCard) for (var index = 0; index < HZMJ_MACROS_DEF.HUA_CARD_NUM; index++) gameStationGameInfo.byHuaCard[_i2][index] != G_INVALID_BYTE_VALUE && byflowerCardData.push(gameStationGameInfo.byHuaCard[_i2][index]);
            if (!!gameStationGameInfo.byWildHuaCard) for (var j = 0; j < HZMJ_MACROS_DEF.HUA_CARD_NUM; j++) gameStationGameInfo.byWildHuaCard[_i2][j] != G_INVALID_BYTE_VALUE && byflowerCardData.push(gameStationGameInfo.byWildHuaCard[_i2][j]);
            !gameStationGameInfo.byHuaCardCount || !gameStationGameInfo.byWildHuaCardCount || 0 == gameStationGameInfo.byHuaCardCount[_i2] && 0 == gameStationGameInfo.byWildHuaCardCount[_i2] || this.tableUI.ShowflowerCard(this.logicToViewSeatNo(byCurrentUser), byflowerCardData, gameStationGameInfo.byHuaCardCount[_i2], gameStationGameInfo.byWildHuaCardCount[_i2]);
          }
          gameStationGameInfo.bankerViewSeat = this.logicToViewSeatNo(this.getCurBankerSeatNO());
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u6e38\u620f\u72b6\u6001Free \u6570\u636e", gameStationGameInfo);
          this.tableUI.onGameStationGame(gameStationGameInfo);
          this.tableUI.showUserBankerbShow(this.logicToViewSeatNo(gameStationGameInfo.byNtStation), true);
          if (this.isGoldRoom()) for (var _i3 = 0; _i3 <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; _i3++) {
            _i3 == this.getMySeatNO() && (this._isMeTuoGuan = gameStationGameInfo.bTuoGuan[_i3]);
            this.tableUI.showUserAuto(this.logicToViewSeatNo(_i3), gameStationGameInfo.bTuoGuan[_i3]);
          }
          this.tableUI.showCurCanHUCard(gameStationGameInfo.byOutAfterHuCard);
          var handCard = [];
          if (!!gameStationGameInfo.byCannotOutPai) for (var _i4 = 0; _i4 < gameStationGameInfo.byCannotOutPai.length; _i4++) G_INVALID_BYTE_VALUE != gameStationGameInfo.byCannotOutPai[_i4] && handCard.push(gameStationGameInfo.byCannotOutPai[_i4]);
          for (var _j2 = 0; _j2 < handCard.length; _j2++) this.tableUI.checkhandCardList(this.logicToViewSeatNo(this.getMySeatNO()), handCard[_j2]);
          var myInfo = gameStationGameInfo.CPGNotifyMes[this.getMySeatNO()];
          var tingCanOutList = [];
          for (var _i5 = 0; _i5 <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _i5++) {
            if (G_INVALID_BYTE_VALUE == myInfo.byTingCanOut[_i5]) break;
            tingCanOutList.push(myInfo.byTingCanOut[_i5]);
          }
          var curMahJongValue = G_INVALID_BYTE_VALUE;
          var eventTypeList = [];
          myInfo.bHu && eventTypeList.push(HZMJ_MACROS_DEF.ACTION_HU);
          if (myInfo.bTing) for (var _j3 = 0; _j3 < tingCanOutList.length; _j3++) this.tableUI.showTingsanjiao(this.logicToViewSeatNo(this.getMySeatNO()), tingCanOutList[_j3]);
          if (myInfo.bGang) {
            curMahJongValue = myInfo.iGangData[0][1];
            eventTypeList.push(HZMJ_MACROS_DEF.ACTION_GANG);
          }
          if (myInfo.bPeng) {
            curMahJongValue = myInfo.byPeng;
            eventTypeList.push(HZMJ_MACROS_DEF.ACTION_PENG);
          }
          myInfo.bChi && eventTypeList.push(HZMJ_MACROS_DEF.ACTION_CHI);
          if (eventTypeList.length < 1) return;
          gameStationGameInfo.bHaveChoosedChi && myInfo.bChi || eventTypeList.push(HZMJ_MACROS_DEF.ACTION_PASS);
          var eventRecvPlayerLogicSeatNO = myInfo.byUser;
          G_INVALID_BYTE_VALUE == eventRecvPlayerLogicSeatNO && (eventRecvPlayerLogicSeatNO = this.getMySeatNO());
          var chiUion = [];
          for (var _i6 = 0; _i6 <= HZMJ_MACROS_DEF.MAX_CHI_UION_NUM - 1; _i6++) {
            if (G_INVALID_BYTE_VALUE == myInfo.byChi[_i6][0]) break;
            chiUion.push(myInfo.byChi[_i6]);
          }
          var gangUion = [];
          var gangTypeList = [];
          for (var _i7 = 0; _i7 <= HZMJ_MACROS_DEF.MAX_GANG_UION_NUM - 1; _i7++) {
            if (G_INVALID_BYTE_VALUE == myInfo.iGangData[_i7][1]) break;
            gangTypeList.push(myInfo.iGangData[_i7][0]);
            gangUion.push(myInfo.iGangData[_i7][1]);
          }
          var responseInfo = {
            eventSendPlayerViewSeatNO: this.logicToViewSeatNo(this.getMySeatNO()),
            eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(eventRecvPlayerLogicSeatNO),
            eventType: HZMJ_MACROS_DEF.ACTION_NO,
            eventTypeList: eventTypeList,
            curMahJongValue: curMahJongValue,
            outTime: this._blockTime,
            chiUion: chiUion,
            gangUion: gangUion,
            gangTypeList: gangTypeList,
            handList: this.handArrData[this.getMySeatNO()],
            handCount: this.handArrCount[this.getMySeatNO()]
          };
          cc.mj.Data.isWatchMode || this.tableUI.waitUserResponse(responseInfo);
        }
      },
      __resolveChiPengGangNotify: function __resolveChiPengGangNotify(netMsg) {
        var cpgArrData = {};
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          cpgArrData[i] = {};
          cpgArrData[i].bZhuaPai = netMsg.popBOOL();
          cpgArrData[i].bChi = netMsg.popBOOL();
          cpgArrData[i].bPeng = netMsg.popBOOL();
          cpgArrData[i].bGang = netMsg.popBOOL();
          cpgArrData[i].bKan = netMsg.popBOOL();
          cpgArrData[i].bSaoHu = netMsg.popBOOL();
          cpgArrData[i].bTing = netMsg.popBOOL();
          cpgArrData[i].bHu = netMsg.popBOOL();
          cpgArrData[i].bHaveReturn = netMsg.popBOOL();
          cpgArrData[i].bCanAction = netMsg.popBOOL();
          cpgArrData[i].bCanChi = {};
          for (var j = 0; j <= 2; j++) cpgArrData[i].bCanChi[j] = netMsg.popBOOL();
          cpgArrData[i].byPeng = netMsg.popBYTE();
          cpgArrData[i].byChi = {};
          for (var _j4 = 0; _j4 <= 2; _j4++) {
            cpgArrData[i].byChi[_j4] = {};
            for (var k = 0; k <= 2; k++) cpgArrData[i].byChi[_j4][k] = netMsg.popBYTE();
          }
          cpgArrData[i].iGangData = {};
          for (var _j5 = 0; _j5 <= 3; _j5++) {
            cpgArrData[i].iGangData[_j5] = {};
            for (var _k = 0; _k <= 1; _k++) cpgArrData[i].iGangData[_j5][_k] = netMsg.popBYTE();
          }
          cpgArrData[i].byTingCanOut = {};
          for (var _j6 = 0; _j6 <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _j6++) cpgArrData[i].byTingCanOut[_j6] = netMsg.popBYTE();
          cpgArrData[i].byMaxThing = netMsg.popBYTE();
          cpgArrData[i].byHuType = {};
          for (var _j7 = 0; _j7 <= HZMJ_MACROS_DEF.MAX_HUPAI_TYPE - 1; _j7++) cpgArrData[i].byHuType[_j7] = netMsg.popBYTE();
          cpgArrData[i].iHuPs = netMsg.popBYTE();
          cpgArrData[i].byDianPao = netMsg.popBYTE();
          cpgArrData[i].byBeDianPao = netMsg.popBYTE();
          cpgArrData[i].byBlockTime = netMsg.popBYTE();
          cpgArrData[i].byUser = netMsg.popBYTE();
          cpgArrData[i].byPs = netMsg.popBYTE();
        }
        return cpgArrData;
      },
      gameStationLogic: function gameStationLogic(gameDataInfo) {
        this.curBankerSeatNO = gameDataInfo.byNtStation;
        cc.mj.Data.zhuangUid = this.getUserIdBySeat(this.curBankerSeatNO);
        this.tableUI.showUserBankerbShow(this.logicToViewSeatNo(this.getCurBankerSeatNO()), true);
        if (this.playInfo) for (var i = 0; i < this.playCount; i++) this.tableUI.addPlayer(this.playInfo.user[i].dwUserID, this.logicToViewSeatNo(i), gameDataInfo.byMJCardType); else for (var _i8 = 0; _i8 < HZMJ_MACROS_DEF.PLAY_COUNT; _i8++) this.tableUI.addPlayer(this.getUserIdBySeat(_i8), this.getViewSeatByID(this.getUserIdBySeat(_i8)), gameDataInfo.byMJCardType);
        gameDataInfo.bankerViewSeat = this.logicToViewSeatNo(this.getCurBankerSeatNO());
        cc.mj.Data.isGaming = true;
        cc.mj.Data.uid = this.getMyID();
        this.tableUI.onGameBeginMessage(gameDataInfo);
        this.tableUI.showRestNum(true, gameDataInfo.iMenNums);
      },
      getUserNameList: function getUserNameList() {
        return this._nameList;
      },
      getUserIdList: function getUserIdList() {
        return this._UserIdList;
      },
      dealGameMessage: function dealGameMessage(netMsg) {
        var netMsgCodeId = netMsg.bAssistantID;
        var info = {};
        var rate;
        var data = new Date();
        switch (netMsgCodeId) {
         case HZMJ_NOTIFY_AssistantID.SUB_S_GAME_START:
          this.__initData();
          this.m_StartVisible = true;
          this.m_OverVisible = false;
          this.__recordAllUserName();
          var beginInfo = {};
          this.setGameStatus(HZMJ_GameStation.GS_STATUS_PLAYING);
          beginInfo.byNtStation = netMsg.popBYTE();
          beginInfo.byCard = this.__resolveHandData(netMsg);
          beginInfo.byCradCount = this.__resolveHandCount(netMsg);
          beginInfo.byArMenPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.MEN_CARD_NUM);
          beginInfo.bySezi0 = netMsg.popBYTE();
          beginInfo.bySezi1 = netMsg.popBYTE();
          beginInfo.byGetPaiDir = netMsg.popBYTE();
          beginInfo.byGetPai = netMsg.popBYTE();
          beginInfo.byMJCardType = netMsg.popBYTE();
          var card_color = Number(cc.sys.localStorage.getItem(G_CARD_COLOR) || 0);
          beginInfo.byMJCardType = card_color;
          beginInfo.byBaoCard = netMsg.popBYTE();
          beginInfo.iMenNums = netMsg.popINT();
          beginInfo.iPlayintCount = netMsg.popINT();
          beginInfo.bSuperFlag = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          beginInfo.iTimeRemaining = netMsg.popINT();
          beginInfo.byLackFengWei = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          beginInfo.byHuCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM, HZMJ_MACROS_DEF.MAX_CANHU_CARD_NUM);
          beginInfo.byCardRemainNum = tools.popArray("BYTE", netMsg, 255);
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u6e38\u620f\u5f00\u59cb \u6570\u636e", beginInfo);
          this.tableUI.setRoomPswText(beginInfo.iPlayintCount, beginInfo.byQuanFeng);
          this.mySeatNo = this.getMySeatNO();
          this.curBankerSeatNO = beginInfo.byNtStation;
          this._iMenNums = beginInfo.iMenNums;
          this.tableUI.showUserBankerbShow(this.logicToViewSeatNo(beginInfo.byNtStation), true);
          this.tableUI.Showdirection(beginInfo.byNtStation, beginInfo.byLackFengWei);
          this.tableUI.showTableBtn(false);
          this._gameBeginStatus = true;
          this.tableUI.ShowNetWork(true);
          this.tableUI.hideGameStatic(false);
          this.gameStationLogic(beginInfo);
          this.tableUI.playerinforOrGameRulerStatic(false);
          this.tableUI.TimeUnschedule();
          this.tableUI.StartTimeschedule(beginInfo.iTimeRemaining);
          if (this.isGoldRoom()) for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) this.tableUI.showUserAuto(this.logicToViewSeatNo(i), false);
          cc.mj.Data.isWatchMode = this.isMeWatching();
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_PICK_FOLLOWER:
          _info = {};
          _info.byCurrentUser = netMsg.popBYTE();
          _info.byCard = this.__resolveHandData(netMsg, _info.byCurrentUser);
          _info.byCardCount = netMsg.popBYTE();
          _info.byHuaCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HUA_CARD_NUM);
          _info.byHuaCardCount = netMsg.popBYTE();
          _info.byWildHuaCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HUA_CARD_NUM);
          _info.byWildHuaCardCount = netMsg.popBYTE();
          var byflowerCardData = [];
          for (var index = 0; index < HZMJ_MACROS_DEF.HUA_CARD_NUM; index++) _info.byHuaCard[index] != G_INVALID_BYTE_VALUE && byflowerCardData.push(_info.byHuaCard[index]);
          for (var _i9 = 0; _i9 < HZMJ_MACROS_DEF.HUA_CARD_NUM; _i9++) _info.byWildHuaCard[_i9] != G_INVALID_BYTE_VALUE && byflowerCardData.push(_info.byWildHuaCard[_i9]);
          this.tableUI.ShowflowerCard(this.logicToViewSeatNo(_info.byCurrentUser), byflowerCardData, _info.byHuaCardCount, _info.byWildHuaCardCount);
          this.tableUI.ShowMyHandCard(this.logicToViewSeatNo(_info.byCurrentUser), _info.byCard);
          this.m_StartVisible, this.tableUI.setChuPaiEnabled(-1);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_ZHUA_AFTER_PICK:
          _info = {};
          _info.byPaiIndex = netMsg.popBYTE();
          _info.byCardData = netMsg.popBYTE();
          _info.byCurrentUser = netMsg.popBYTE();
          _info.byCard = this.__resolveHandData(netMsg, _info.byCurrentUser);
          _info.byArMenPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.MEN_CARD_NUM);
          _info.byCardCount = netMsg.popBYTE();
          _info.iMenNums = netMsg.popINT();
          _info.bCanOutCard = netMsg.popBOOL();
          var _Follower = false;
          for (var _i10 = 0; _i10 < HZMJ_MACROS_DEF.HAND_CARD_NUM; _i10++) 41 == _info.byCard[_i10] ? _Follower = true : 42 == _info.byCard[_i10] ? _Follower = true : 43 == _info.byCard[_i10] ? _Follower = true : 44 == _info.byCard[_i10] ? _Follower = true : 45 == _info.byCard[_i10] ? _Follower = true : 46 == _info.byCard[_i10] ? _Follower = true : 47 == _info.byCard[_i10] ? _Follower = true : 48 == _info.byCard[_i10] && (_Follower = true);
          this._iMenNums = _info.iMenNums;
          this.tableUI.ShowMyHandCard(this.logicToViewSeatNo(_info.byCurrentUser), _info.byCard);
          this.tableUI.showRestNum(true, _info.iMenNums);
          if (this.logicToViewSeatNo(this.getMySeatNO()) == this.logicToViewSeatNo(_info.byCurrentUser) && false == _Follower && true == _info.bCanOutCard) if (this.m_StartVisible) {
            var bankerViewSeat = this.logicToViewSeatNo(this.getCurBankerSeatNO());
            this.tableUI.setChuPaiEnabled(bankerViewSeat);
          } else {
            var _byCurrentUser = this.logicToViewSeatNo(_info.byCurrentUser);
            this.tableUI.setChuPaiEnabled(_byCurrentUser);
          }
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_OUT_CARD:
          this.m_StartVisible = false;
          _info = {};
          _info.bTing = netMsg.popBOOL();
          _info.byDeskStation = netMsg.popBYTE();
          _info.byOutCardValue = netMsg.popBYTE();
          _info.byHandCard = this.__resolveHandData(netMsg, _info.byDeskStation);
          _info.byCardCount = netMsg.popBYTE();
          _info.byHuCard = tools.popArray("BYTE", netMsg, 34);
          _info.handCardIndex = netMsg.popINT();
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u51fa\u724c \u6570\u636e", _info);
          this.tableUI.outCard(_info.byDeskStation, _info.byOutCardValue, _info.byHandCard, _info.byCardCount, _info.handCardIndex);
          _info.bTing && this.tableUI.eventTing(this.logicToViewSeatNo(_info.byDeskStation));
          if (_info.byDeskStation == this.getMySeatNO()) {
            this.tableUI.showCurCanHUCard(_info.byHuCard);
            this.tableUI.setChuPaiEnabled(-1);
          }
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_OUT_CARD_RESULT:
          this.m_StartVisible = false;
          _info = {};
          _info.bResult = netMsg.popBOOL();
          _info.byErrorCode = netMsg.popBYTE();
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u51fa\u724c\u7ed3\u679c \u6570\u636e", _info);
          !_info.bResult;
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_SEND_CARD:
          _info = {};
          this._gameBeginStatus = false;
          _info.byPaiIndex = netMsg.popBYTE();
          _info.byCardData = netMsg.popBYTE();
          _info.byCurrentUser = netMsg.popBYTE();
          _info.byCard = this.__resolveHandData(netMsg, _info.byCurrentUser);
          _info.byArMenPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.MEN_CARD_NUM);
          _info.byCardCount = netMsg.popBYTE();
          _info.iMenNums = netMsg.popINT();
          _info.bCanOutCard = netMsg.popBOOL();
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u6293\u724c \u6570\u636e", _info);
          this._iMenNums = _info.iMenNums;
          GameEvent.emit("onHideCtrlBtn");
          this.tableUI.getCard(_info.byCurrentUser, _info.byCardData, this._outTime, _info);
          this.tableUI.showRestNum(true, _info.iMenNums);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_OPERATE_NOTIFY:
          _info = {};
          _info.bChi = netMsg.popBOOL();
          _info.bPeng = netMsg.popBOOL();
          _info.bGang = netMsg.popBOOL();
          _info.bHu = netMsg.popBOOL();
          _info.bTing = netMsg.popBOOL();
          _info.byUser = netMsg.popBYTE();
          _info.byChi = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_CHI_UION_NUM, 3);
          _info.byPeng = netMsg.popBYTE();
          _info.byGangData = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_GANG_UION_NUM, 2);
          _info.byTingCanOut = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          _info.byHuCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          _info.byCardRemainNum = tools.popArray("BYTE", netMsg, 255);
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u5403\u78b0\u6760\u80e1\u901a\u77e5\u4e8b\u4ef6\u4e8b\u4ef6 \u6570\u636e", _info);
          var myInfo = _info;
          var tingCanOutList = [];
          for (var _i11 = 0; _i11 <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _i11++) {
            if (G_INVALID_BYTE_VALUE == myInfo.byTingCanOut[_i11]) break;
            tingCanOutList.push(myInfo.byTingCanOut[_i11]);
          }
          var curMahJongValue = G_INVALID_BYTE_VALUE;
          var eventTypeList = [];
          myInfo.bHu && eventTypeList.push(HZMJ_MACROS_DEF.ACTION_HU);
          if (myInfo.bTing) for (var j = 0; j < tingCanOutList.length; j++) this.tableUI.showTingsanjiao(this.logicToViewSeatNo(_info.byUser), tingCanOutList[j]);
          if (myInfo.bGang) {
            curMahJongValue = myInfo.byGangData[0][1];
            eventTypeList.push(HZMJ_MACROS_DEF.ACTION_GANG);
          }
          if (myInfo.bPeng) {
            curMahJongValue = myInfo.byPeng;
            eventTypeList.push(HZMJ_MACROS_DEF.ACTION_PENG);
          }
          if (myInfo.bChi) {
            curMahJongValue = myInfo.byGangData[0][1];
            eventTypeList.push(HZMJ_MACROS_DEF.ACTION_CHI);
          }
          if (eventTypeList.length < 1) return;
          eventTypeList.push(HZMJ_MACROS_DEF.ACTION_PASS);
          var eventRecvPlayerLogicSeatNO = myInfo.byUser;
          G_INVALID_BYTE_VALUE == eventRecvPlayerLogicSeatNO && (eventRecvPlayerLogicSeatNO = this.getMySeatNO());
          myInfo.bHu && (this._HuPosition = eventRecvPlayerLogicSeatNO);
          var chiUion = [];
          for (var _i12 = 0; _i12 <= HZMJ_MACROS_DEF.MAX_CHI_UION_NUM - 1; _i12++) {
            if (G_INVALID_BYTE_VALUE == myInfo.byChi[_i12][0]) break;
            chiUion.push(myInfo.byChi[_i12]);
          }
          var gangUion = [];
          var gangTypeList = [];
          for (var _i13 = 0; _i13 <= HZMJ_MACROS_DEF.MAX_GANG_UION_NUM - 1; _i13++) {
            if (G_INVALID_BYTE_VALUE == myInfo.byGangData[_i13][1]) break;
            gangTypeList.push(myInfo.byGangData[_i13][0]);
            gangUion.push(myInfo.byGangData[_i13][1]);
          }
          var responseInfo = {
            eventSendPlayerViewSeatNO: this.logicToViewSeatNo(this.getMySeatNO()),
            eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(eventRecvPlayerLogicSeatNO),
            eventType: HZMJ_MACROS_DEF.ACTION_NO,
            eventTypeList: eventTypeList,
            curMahJongValue: curMahJongValue,
            outTime: this._blockTime,
            chiUion: chiUion,
            gangUion: gangUion,
            gangTypeList: gangTypeList,
            handCount: this.handArrCount[this.getMySeatNO()]
          };
          this._isMeTuoGuan && (responseInfo.outTime = this._autoBlockTime);
          if (!!this.handArrData) for (var _i14 = 0; _i14 <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _i14++) {
            if (G_INVALID_BYTE_VALUE == this.handArrData[this.getMySeatNO()][_i14]) break;
            this.handArrCount[this.getMySeatNO()] = _i14 + 1;
          }
          !this.handArrCount || (responseInfo.handCount = this.handArrCount[this.getMySeatNO()]);
          this.tableUI.waitUserResponse(responseInfo);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_OPERATE_RESULT:
          _info = {};
          _info.bClearAction = netMsg.popBOOL();
          _info.bZhua = netMsg.popBOOL();
          _info.byActionType = netMsg.popBYTE();
          _info.byStation = netMsg.popBYTE();
          _info.byBeStation = netMsg.popBYTE();
          _info.byCardValue = netMsg.popBYTE();
          _info.byData = tools.popArray("BYTE", netMsg, 4);
          _info.byCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          _info.byArOutPai = tools.popArray("BYTE", netMsg, 60);
          _info.byCardCount = netMsg.popBYTE();
          _info.byOutCanHuCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          _info.byHuCard = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM, HZMJ_MACROS_DEF.MAX_CANHU_CARD_NUM);
          _info.byCardRemainNum = tools.popArray("BYTE", netMsg, 255);
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u64cd\u4f5c\u7ed3\u679c \u6570\u636e", _info);
          if (13 != _info.byActionType && 14 != _info.byActionType && 15 != _info.byActionType && _info.byCardValue == G_INVALID_BYTE_VALUE) return;
          this.handArrData = cloneObject(_info.byArHandPai);
          var eventInfo = {
            eventType: _info.byActionType,
            byStation: _info.byStation,
            eventSendPlayerViewSeatNO: this.logicToViewSeatNo(_info.byStation),
            eventRecvPlayerViewSeatNO: this.logicToViewSeatNo(_info.byBeStation),
            curMahJongValue: _info.byCardValue,
            resultList: [ _info.byData[0], _info.byData[1], _info.byData[2], _info.byData[3] ],
            handList: _info.byArHandPai,
            handCount: _info.byHandCardCount,
            outTime: this._outTime
          };
          GameEvent.emit("onHideCtrlBtn");
          this.getUserIdBySeat(eventInfo.byStation) === cc.mj.Data.uid || cc.mj.Data.isPlayback || (cc.mj.Data.notcanPutCard = false);
          if (HZMJ_MACROS_DEF.ACTION_AN_GANG == _info.byActionType) eventInfo.resultList = [ _info.byData[3], _info.byData[3], _info.byData[3], _info.byData[3] ]; else {
            if (HZMJ_MACROS_DEF.ACTION_TING_PAI == _info.byActionType) {
              this.tableUI.eventTing(this.logicToViewSeatNo(_info.byStation));
              return;
            }
            if (HZMJ_MACROS_DEF.ACTION_HU == _info.byActionType) {
              this.tableUI.eventHu(this.logicToViewSeatNo(_info.byStation), this.logicToViewSeatNo(_info.byBeStation));
              return;
            }
            if (HZMJ_MACROS_DEF.ACTION_FANCAI == _info.byActionType) {
              this.tableUI.eventFanCai(this.logicToViewSeatNo(_info.byStation), this.logicToViewSeatNo(_info.byBeStation));
              return;
            }
            if (HZMJ_MACROS_DEF.ACTION_GANGKAI == _info.byActionType) {
              this.tableUI.eventGngKai(this.logicToViewSeatNo(_info.byStation), this.logicToViewSeatNo(_info.byBeStation));
              return;
            }
          }
          this.tableUI.eventChiPengGang(eventInfo);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_LIMIT_OUT:
          _info = {};
          _info.byUser = netMsg.popBYTE();
          _info.byCannotOutCard = tools.popArray("BYTE", netMsg, 2);
          var handCard = [];
          for (var _i15 = 0; _i15 < _info.byCannotOutCard.length; _i15++) G_INVALID_BYTE_VALUE != _info.byCannotOutCard[_i15] && handCard.push(_info.byCannotOutCard[_i15]);
          for (var _j8 = 0; _j8 < handCard.length; _j8++) this.tableUI.checkhandCardList(this.logicToViewSeatNo(_info.byUser), handCard[_j8]);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_REMOV_OUT_LIMIT:
          _info = {};
          _info.byUser = netMsg.popBYTE();
          _info.byCannotOutCard = tools.popArray("BYTE", netMsg, 2);
          this.tableUI.CanlehandCardColor(this.logicToViewSeatNo(_info.byUser));
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_CPG_TIMES_PROMPT:
          _info = {};
          _info.CPGTimesType = netMsg.popBYTE();
          _info.name = netMsg.popNCHAR(64);
          _info.bCPGUser = netMsg.popBOOL();
          var userName = _info.name;
          var Dtr = "";
          2 == _info.CPGTimesType ? Dtr = true == _info.bCPGUser ? "\u60a8\u628a\u3010" + userName + "\u3011\u5403\u78b0\u6760\u4e862\u6b21" : "\u60a8\u88ab\u3010" + userName + "\u3011\u5403\u78b0\u6760\u4e862\u6b21" : 3 == _info.CPGTimesType ? Dtr = true == _info.bCPGUser ? "\u60a8\u628a\u3010" + userName + "\u3011\u505a\u751f\u610f\u4e86" : "\u60a8\u88ab\u3010" + userName + "\u3011\u505a\u751f\u610f\u4e86" : 4 == _info.CPGTimesType && (Dtr = "\u60a8\u548c\u3010" + userName + "\u3011\u4e92\u76f8\u505a\u751f\u610f");
          this.tableUI.ShowChiPengGangtips(Dtr);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_GAME_END:
          if (this.m_OverVisible) return;
          this.m_OverVisible = true;
          var _info = {};
          _info.bZimo = netMsg.popBOOL();
          _info.bIsLiuJu = netMsg.popBOOL();
          _info.byDianPao = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.byBeDianPao = netMsg.popBYTE();
          _info.byPs = netMsg.popBYTE();
          _info.byArHandPai = this.__resolveHandData(netMsg);
          _info.byArHandPaiCount = this.__resolveHandCount(netMsg);
          _info.byHuDouble = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT, HZMJ_MACROS_DEF.MAX_HUPAI_TYPE);
          _info.iFanCount = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.bTing = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.GoldRoom = this.isGoldRoom() && !this.isBarrierMatchRoom();
          _info.llGameScore = tools.popArray("LONGLONG", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.llWinFailDouble = tools.popArray("LONGLONG", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.bycountGangFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iGenZhuangScore = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iHuFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iMaFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iMaiMaShu = netMsg.popINT();
          if (_info.GoldRoom) for (var _index = 0; _index < 4; _index++) 0 != _info.llGameScore[_index] && (_info.llGameScore[_index] = F_GetMoneyDisplay(Number(_info.llGameScore[_index])));
          _info.byMaPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_MAIMA_COUNT, 2);
          _info.iJiZhuangTimes = netMsg.popINT();
          _info.bHuType = netMsg.popBYTE();
          _info.UserGCPData = this.__resolveChiPengGangData(netMsg);
          _info.byRemainMenPai = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_REMAIN_MEN_PAI_NUM);
          _info.byRemainMenPaiCount = netMsg.popBYTE();
          _info.CountHuFenStruct = this._resolveCountHuFenStruct(netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.CountGangFenStruct = this._resolveCountGangFenStruct(netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.CountGenZhuangFenStruct = this._resolveCountGenZhuangFenStruct(netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.CountHorseFenStruct = this._resolveCountHorseFenStruct(netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.rewardGiftCard = netMsg.popINT();
          var curCount, sumCount = this.getGameCountInfo();
          _info.curGameCount = curCount;
          _info.allGameCount = sumCount;
          _info.byNtStation = this.getCurBankerSeatNO();
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u5c0f\u7d50\u7b97\u4e8b\u4ef6 \u6570\u636e", _info);
          this.tableUI.setbNotPrompt(_info.bNotPrompt);
          for (var k = 0; k < HZMJ_MACROS_DEF.PLAY_COUNT; k++) this.tableUI.ShowPlayHandCard(this.logicToViewSeatNo(k), _info.byArHandPai[k], _info.byArHandPaiCount[k], _info.byDianPao[k], _info.byPs);
          GameEvent.emit("onGameOver", _info);
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_GAME_END_ALL:
          _info = {};
          _info.iHuCount = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iZimo = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iJiePao = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iDianPao = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iDianGang = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iBuGang = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.iAnGangCount = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.llGameScore = tools.popArray("LONGLONG", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.userID = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.PLAY_COUNT);
          _info.wanfa = this.tableUI._wanfaString;
          _info.sumCount = this.getGameCountInfo();
          _info.roomPsw = window.deskPasswd;
          _info.roomMastId = this.getRoomMasterId();
          console.log(tools.getCurTime() + " \u724c\u5c40\u65e5\u5fd7 \u603b\u7ed3\u7b97 \u6570\u636e", _info);
          this.m_OverVisible = false;
          this.tableUI.setAllResultData(_info);
          this.tableUI.setAllResultData(_info, this.getGameCountInfo());
          break;

         case HZMJ_NOTIFY_AssistantID.ASS_CHANGE_PAI_RESULT:
          netMsg.crossedARM(3);
          var isSuccess = netMsg.popBOOL();
          var handList = {};
          for (var _i16 = 0; HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _i16++) handList[_i16] = netMsg.popBYTE();
          var handCount = netMsg.popBYTE();
          isSuccess;
          break;

         case HZMJ_NOTIFY_AssistantID.SUB_S_TRUSTEE:
          _info = {};
          _info.bTrustee = netMsg.popBOOL();
        }
      },
      __resolveGangFenData: function __resolveGangFenData(netMsg) {
        var gangData = [];
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          gangData[i] = {};
          gangData[i].byGangType = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          gangData[i].byXiangYingStation = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          gangData[i].bBaoTing = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          gangData[i].byGangNums = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          gangData[i].iAllFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          gangData[i].byNums = netMsg.popBYTE();
        }
        return gangData;
      },
      _resolveCountHuFenStruct: function _resolveCountHuFenStruct(netMsg, count) {
        var CountHuFenStruct = [];
        for (var index = 0; index < count; index++) {
          CountHuFenStruct[index] = {};
          CountHuFenStruct[index].byNameType = tools.popArray("BYTE", netMsg, 3);
          CountHuFenStruct[index].byXiangYingStation = tools.popArray("BYTE", netMsg, 3);
          CountHuFenStruct[index].byXiangYingStationEx = tools.popArray("BYTE", netMsg, 3);
          CountHuFenStruct[index].iAllFen = tools.popArray("INT", netMsg, 3);
          CountHuFenStruct[index].byNums = netMsg.popBYTE();
        }
        return CountHuFenStruct;
      },
      _resolveCountGangFenStruct: function _resolveCountGangFenStruct(netMsg, count) {
        var CountGangFenStruct = {};
        for (var index = 0; index < count; index++) {
          CountGangFenStruct[index] = {};
          CountGangFenStruct[index].byGangType = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          CountGangFenStruct[index].byXiangYingStation = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          CountGangFenStruct[index].bBaoTing = tools.popArray("BOOL", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          CountGangFenStruct[index].byGangNums = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          CountGangFenStruct[index].iAllFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GANG_FEN);
          CountGangFenStruct[index].byNums = netMsg.popBYTE();
        }
        return CountGangFenStruct;
      },
      _resolveCountGenZhuangFenStruct: function _resolveCountGenZhuangFenStruct(netMsg, count) {
        var CountGenZhuangFenStruct = {};
        for (var index = 0; index < count; index++) {
          CountGenZhuangFenStruct[index] = {};
          CountGenZhuangFenStruct[index].byGenZhuangType = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GEN_ZHUANG_FEN);
          CountGenZhuangFenStruct[index].byXiangYingStation = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GEN_ZHUANG_FEN);
          CountGenZhuangFenStruct[index].iAllFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_GEN_ZHUANG_FEN);
          CountGenZhuangFenStruct[index].byNums = netMsg.popBYTE();
        }
        return CountGenZhuangFenStruct;
      },
      _resolveCountHorseFenStruct: function _resolveCountHorseFenStruct(netMsg, count) {
        var CountHorseFenStruct = {};
        for (var index = 0; index < count; index++) {
          CountHorseFenStruct[index] = {};
          CountHorseFenStruct[index].byBuyHorseType = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_HORSE_FEN);
          CountHorseFenStruct[index].byMaiStation = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_HORSE_FEN);
          CountHorseFenStruct[index].byBeiMaiStation = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_HORSE_FEN);
          CountHorseFenStruct[index].iAllFen = tools.popArray("INT", netMsg, HZMJ_MACROS_DEF.MAX_COUNT_HORSE_FEN);
          CountHorseFenStruct[index].byNums = netMsg.popBYTE();
        }
        return CountHorseFenStruct;
      },
      __resolveHuPaiData: function __resolveHuPaiData(netMsg) {
        var HupaiData = {};
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          HupaiData[i] = {};
          HupaiData[i].byNameType = tools.popArray("BYTE", netMsg, 3);
          HupaiData[i].byXiangYingStation = tools.popArray("BYTE", netMsg, 3);
          HupaiData[i].byXiangYingStationEx = tools.popArray("BYTE", netMsg, 3);
          HupaiData[i].iAllFen = tools.popArray("INT", netMsg, 3);
          HupaiData[i].byNums = netMsg.popBYTE();
        }
        return HupaiData;
      },
      __resolveChiPengGangData: function __resolveChiPengGangData(netMsg) {
        var cpgArrData = {};
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          cpgArrData[i] = {};
          for (var j = 0; j <= 4; j++) {
            cpgArrData[i][j] = {};
            cpgArrData[i][j].byType = netMsg.popBYTE();
            cpgArrData[i][j].iStation = netMsg.popBYTE();
            cpgArrData[i][j].iBeStation = netMsg.popBYTE();
            cpgArrData[i][j].iOutpai = netMsg.popBYTE();
            cpgArrData[i][j].byData = {};
            for (var k = 0; k <= 3; k++) cpgArrData[i][j].byData[k] = netMsg.popBYTE();
          }
        }
        this._cpgArrData = cloneObject(cpgArrData);
        return cpgArrData;
      },
      __resolveHandData: function __resolveHandData(netMsg, logicSeatNO) {
        if ("undefined" != typeof logicSeatNO && null != logicSeatNO) {
          var handData = {};
          for (var j = 0; j <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; j++) handData[j] = netMsg.popBYTE();
          !this.handArrData || (this.handArrData[logicSeatNO] = cloneObject(handData));
          return handData;
        }
        var handArrData = {};
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          handArrData[i] = [];
          for (var _j9 = 0; _j9 <= HZMJ_MACROS_DEF.HAND_CARD_NUM - 1; _j9++) handArrData[i].push(netMsg.popBYTE());
        }
        this.handArrData = cloneObject(handArrData);
        return handArrData;
      },
      __resolveHandCount: function __resolveHandCount(netMsg, logicSeatNO) {
        if ("undefined" != typeof logicSeatNO && null != logicSeatNO) {
          var handCount = netMsg.popBYTE();
          this.handArrCount[logicSeatNO] = handCount;
          return handCount;
        }
        var handArrCount = {};
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) handArrCount[i] = netMsg.popBYTE();
        this.handArrCount = cloneObject(handArrCount);
        return handArrCount;
      },
      getHandArrData: function getHandArrData() {
        return this.handArrData;
      },
      getHandArrCount: function getHandArrCount() {
        return this.handArrCount;
      },
      sendPao: function sendPao(beishu) {
        var cNetMsg = GameSocket.createNetMsg(1, MSG_MAIN_LOADER_GAME, HZMJ_NOTIFY_AssistantID.SUB_C_DIANPAO);
        cNetMsg.pushBYTE(beishu);
        GameSocket.sendData(cNetMsg);
      },
      sendMing: function sendMing() {},
      clearUI: function clearUI() {
        this.tableUI.clearUI();
      },
      showAllResultUI: function showAllResultUI() {
        var isShow = true;
        isShow ? this.tableUI.showAllResult() : this._super();
      },
      logicToViewSeatNo: function logicToViewSeatNo(deskStation) {
        if (null == deskStation) return G_INVALID_BYTE_VALUE;
        if (deskStation < 0 || deskStation >= this._logicInfo.seatCount) return G_INVALID_BYTE_VALUE;
        var viewSeat = (deskStation + this.seatOffset + this._logicInfo.seatCount) % this._logicInfo.seatCount;
        this.playCount && 2 == this.playCount && (1 == viewSeat ? viewSeat = 2 : 3 == viewSeat && (viewSeat = 2));
        if (this.playCount && 3 == this.playCount) {
          2 == viewSeat && (viewSeat = 3);
          3 == deskStation && (viewSeat = G_INVALID_BYTE_VALUE);
        }
        cc.log("\u903b\u8f91\u5ea7\u4f4d\u53f7\u8f6c\u4e3a\u89c6\u56fe\u5ea7\u4f4d\u53f7 deskStation:" + deskStation + " viewSeat:" + viewSeat + " seatOffset:" + this.seatOffset + " seatCount:" + this._logicInfo.seatCount + " playCount:" + this.playCount);
        return viewSeat;
      },
      __tagCPGNotifyMes: function __tagCPGNotifyMes(netMsg) {
        var CPGNotifyMes = [];
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          CPGNotifyMes[i] = [];
          CPGNotifyMes[i].bZhuaPai = netMsg.popBOOL();
          CPGNotifyMes[i].bChi = netMsg.popBOOL();
          CPGNotifyMes[i].bPeng = netMsg.popBOOL();
          CPGNotifyMes[i].bGang = netMsg.popBOOL();
          CPGNotifyMes[i].bKan = netMsg.popBOOL();
          CPGNotifyMes[i].bSaoHu = netMsg.popBOOL();
          CPGNotifyMes[i].bTing = netMsg.popBOOL();
          CPGNotifyMes[i].bHu = netMsg.popBOOL();
          CPGNotifyMes[i].bHaveReturn = netMsg.popBOOL();
          CPGNotifyMes[i].bCanAction = netMsg.popBOOL();
          CPGNotifyMes[i].bCanChi = tools.popArray("BOOL", netMsg, 3);
          CPGNotifyMes[i].byPeng = netMsg.popBYTE();
          CPGNotifyMes[i].byChi = tools.popArray("BYTE", netMsg, 3, 3);
          CPGNotifyMes[i].iGangData = tools.popArray("BYTE", netMsg, 4, 2);
          CPGNotifyMes[i].byTingCanOut = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.HAND_CARD_NUM);
          CPGNotifyMes[i].byMaxThing = netMsg.popBYTE();
          CPGNotifyMes[i].byHuType = tools.popArray("BYTE", netMsg, HZMJ_MACROS_DEF.MAX_HUPAI_TYPE);
          CPGNotifyMes[i].iHuPs = netMsg.popBYTE();
          CPGNotifyMes[i].byDianPao = netMsg.popBYTE();
          CPGNotifyMes[i].byBeDianPao = netMsg.popBYTE();
          CPGNotifyMes[i].byBlockTime = netMsg.popBYTE();
          CPGNotifyMes[i].byUser = netMsg.popBYTE();
          CPGNotifyMes[i].byPs = netMsg.popBYTE();
        }
        return CPGNotifyMes;
      },
      changeTabIndex: function changeTabIndex(arr) {
        var tempArr = [];
        for (var i = 0; i < arr.length; i++) {
          tempArr[i + 1] = [];
          for (var j = 0; j < arr[i].length; j++) tempArr[i + 1][j + 1] = arr[i][j];
        }
        return tempArr;
      },
      gameBeginClearUI: function gameBeginClearUI() {
        this.tableUI.onGameBeginClearUI();
      },
      getRate: function getRate() {
        var rate = 1;
        if (this.isGoldRoom() || this.isPrivateRoom()) return G_MULTI_NUM;
        return rate;
      },
      getLeftReadyTime: function getLeftReadyTime() {
        return 30;
      },
      getIsMeTuoGuan: function getIsMeTuoGuan() {
        return this._isMeTuoGuan;
      },
      setGameRuleInfo: function setGameRuleInfo() {
        this.playCount = this.tableUI.getGameRulesRs();
      }
    });
    cc._RF.pop();
  }, {
    GameLogicBase: "GameLogicBase"
  } ],
  HZMJ_GameTableUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f21a4rNNxFD95KI0LvE68H8", "HZMJ_GameTableUI");
    "use strict";
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("GameViewBase"),
      properties: {
        PlayerUIPrefab: cc.Prefab,
        PlayersLayer: cc.Node,
        sitPos0: cc.Node,
        sitPos1: cc.Node,
        sitPos2: cc.Node,
        sitPos3: cc.Node,
        setup_Node: [ cc.Node ],
        BankNode_Node: [ cc.Node ],
        bg_count: cc.Node,
        roomPswText: cc.Node,
        masterNameText: cc.Node,
        Text_time: cc.Node,
        Text_RoomWanfa: cc.Node,
        Text_GameRuler: cc.Node,
        Text_GameName: cc.Label,
        Text_Homeowner: cc.Label,
        Text_GameTime: cc.Label,
        btn_chat: cc.Node,
        btn_voice: cc.Node,
        changeBtn: cc.Node,
        baoPaiBox: cc.Node,
        pointNode: cc.Node,
        centerBar: cc.Node,
        playInfo: cc.Node,
        ctrlBtns: require("HZMJ_CtrlBtns"),
        players: [ require("HZMJ_User") ],
        back_node: cc.Node,
        mjSpriteAlt: cc.SpriteAtlas,
        overGameNode: cc.Node,
        overGameMaskNode: cc.Node,
        Button_SuperClient: cc.Node,
        Skeleton: [ sp.SkeletonData ],
        Button_Ting: cc.Node,
        Image_GuoHu: cc.Node,
        HuPaiLayer: cc.Node,
        HuPaiLayerPrefab: cc.Prefab,
        img_createrCard: cc.Node,
        background_1: cc.Node,
        background_2: cc.Node,
        loading_Start: cc.Node,
        btn_img: cc.Node,
        btn_Start: cc.Node,
        btn_Table: cc.Node,
        Text_Infortips: cc.Node,
        Text_Playtips: cc.Node,
        Text_Metips: cc.Node,
        ChangeNode: cc.Node,
        Voice_Node: cc.Node,
        cardPrefabs: [ cc.Prefab ],
        cardsJson: cc.JsonAsset,
        LabelNoticeNode: cc.Node
      },
      ctor: function ctor() {
        cc.log("");
      },
      setPlayInfo: function setPlayInfo(playInfo) {
        this.onLoadSuper();
        this._allResultInfo = null;
        this._playInfo = playInfo;
      },
      onEnable: function onEnable() {
        this._super();
        DataNotify.addListener(this);
        MYAudioEngine.stopMusic();
        this._playBGMusic();
        cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        GlobalEvent.instance.on("NORMAL_NOTICE", this.onNormalNotice, this);
      },
      onDisable: function onDisable() {
        this._super();
        DataNotify.removeListener(this);
        GlobalEvent.instance.off("NORMAL_NOTICE", this.onNormalNotice, this);
      },
      start: function start() {
        cc.log("********start***********");
        this.resetSize(this.node);
        this.initUI();
        this.uiInfo && this.uiInfo.playInfo && this.tableLogic.startReplayGame();
      },
      onEnter: function onEnter() {
        this["super"].onEnter(this);
        this.initUI();
      },
      onLoad: function onLoad() {
        cc.log("********\u8fdb\u5165\u9ebb\u5c06UI\u754c\u9762***********");
        var frameSize = cc.view.getFrameSize();
        cc.view.setOrientation(cc.macro.ORIENTATION_LANDSCAPE);
        frameSize.height > frameSize.width && cc.view.setFrameSize(frameSize.height, frameSize.width);
        cc.mjSpriteAlt = this.mjSpriteAlt;
        this._initCards();
        cc.mj = {};
        if (!cc.mj.Data) {
          var data = require("HZMJ_Data");
          cc.mj.Data = new data();
          cc.mj.Data.init();
        }
        this.gameInforArry = [];
        this.TouristInforArry = [];
        this.onLoadSuper = this._super;
        GameManager.setUI(this, this.setPlayInfo.bind(this));
        this.pointNode.active = false;
        this.playInfo.active = false;
        this.initEvent();
        this.m_deskStation = -1;
        cc.mj.Data.CardType = false;
        this.isShowStopSvr = true;
        this.isShowNotice = false;
        this.LabelNoticeNode.active = true;
        this.noticeList = [];
        this.noticeListSpec = [];
        this.nPlayIndex = 0;
      },
      resetSize: function resetSize(cav) {
        var canvas = cc.Canvas.instance;
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          canvas.fitHeight = true;
          canvas.fitWidth = false;
          console.log("TableUI \u9002\u914d \u957f\u5c4f \u56fa\u5b9a\u9ad8\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        } else {
          canvas.fitWidth = true;
          canvas.fitHeight = false;
          console.log("TableUI \u9002\u914d \u77ed\u5c4f \u56fa\u5b9a\u5bbd\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        }
        cc.sourceDesignSize = designSize;
        this.fitBg();
      },
      fitBg: function fitBg() {
        var bgNode = this.node.getChildByName("Bg").getChildByName("back");
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.sourceDesignSize;
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          var scaleW = designSize.height / frameSize.height * frameSize.width / designSize.width;
          bgNode.scaleX = scaleW;
          bgNode.scaleY = scaleW;
        } else {
          var scaleH = designSize.width / frameSize.width * frameSize.height / designSize.height;
          bgNode.scaleX = scaleH;
          bgNode.scaleY = scaleH;
        }
      },
      fitScreen: function fitScreen(canvasnode, designSize) {
        var scaleW = canvasnode.width / designSize.width;
        var scaleH = canvasnode.height / designSize.height;
        var bgNode = canvasnode.getChildByName("Bg").getChildByName("back");
        var bgScale = canvasnode.height / bgNode.height;
        bgNode.width *= bgScale;
        bgNode.height *= bgScale;
        if (scaleW > scaleH) {
          bgScale = canvasnode.width / bgNode.width;
          bgNode.width *= bgScale;
          bgNode.height *= bgScale;
        }
      },
      initUI: function initUI() {
        this.initUIData();
      },
      initUIData: function initUIData() {
        var _this = this;
        var uiInfo = {};
        uiInfo.seatCount = HZMJ_MACROS_DEF.PLAY_COUNT;
        uiInfo.roomMasterText = this.masterNameText;
        uiInfo.voiceBtn = this.btn_voice;
        uiInfo.chatBtn = this.btn_chat;
        uiInfo.changeBtn = this.changeBtn;
        uiInfo.beginBtn = this.btn_Start;
        uiInfo.playInfo = this._playInfo;
        uiInfo.playerPrefab = this.PlayerUIPrefab;
        uiInfo.btn_loading_Startimg = this.loading_Start;
        uiInfo.img_createrCard = this.img_createrCard;
        uiInfo.btn_img = this.btn_img;
        uiInfo.btn_room = this.btn_Table;
        uiInfo.sitPosArr = {};
        this.playPOS = [];
        for (var i = 0; i < 4; i++) {
          uiInfo.sitPosArr[i] = this["sitPos" + i];
          this.playPOS[i] = uiInfo.sitPosArr[i].getPosition();
        }
        uiInfo.sitInforArr = {};
        for (var _i = 0; _i < 4; _i++) uiInfo.sitInforArr[_i] = this.setup_Node[_i];
        this.setUiInfo(uiInfo);
        this.setCardIsCanTuoGuan(false);
        this.setGoldIsCanTuoGuan(true);
        this.setBarrierMatchIsCanTuoGuan(true);
        this.setPrivateIsCanTuoGuan(true);
        this._tingFlagList = {};
        this._mingFlag = {};
        this.isTingPai = false;
        this.upsideGroupTing = false;
        this.m_bNotPrompt = false;
        this._isInforChangeSeat = false;
        this.playerinforOrGameRulerStatic(false);
        if (this._playInfo) {
          var gameID = this._playInfo.gameID;
          var _gameIDName = GameManager.getRegistGameNameByGameID(gameID);
          document.title = G_APP_NAME_CH + "-" + _gameIDName;
        } else {
          var roomInfo = RoomListManager.getRoomInfo();
          var gameID = roomInfo.gameID;
          var gameIDName = GameManager.getRegistGameNameByGameID(gameID);
          document.title = G_APP_NAME_CH + "-" + gameIDName;
        }
        var lobbDiv = document.getElementById("lobbyQRCode");
        lobbDiv && lobbDiv.remove();
        var gameDiv = document.getElementById("GAMEQRCode");
        gameDiv && gameDiv.remove();
        var GameZhanji = document.getElementById("GameZhanjiQRCode");
        GameZhanji && GameZhanji.remove();
        this.setShowPlaytips(false);
        if (this._playInfo) {
          this.btn_img.active = false;
          this.centerBar.active = false;
        } else {
          this.InitWXvoiceconfig();
          this.scheduleOnce(function() {
            _this.setShareInfo();
            _this.requestSystemNotice();
            var G_RULES_ITEM = "G_RULES_ITEM" + window.deskPasswd;
            var RulesTYPE = Number(cc.sys.localStorage.getItem(G_RULES_ITEM) || 0);
            if (0 == RulesTYPE) {
              _this.initGameRuler();
              cc.sys.localStorage.setItem(G_RULES_ITEM, 1);
            }
          }, .5);
        }
        this.overGameNode && (this.overGameNode.zIndex = G_GAME_SET_ZORDER_TAG + 1);
        this.showGameBackColor(Number(cc.sys.localStorage.getItem(G_GAME_BACK) || 0));
      },
      _initCards: function _initCards() {
        var jsonObj = this.cardsJson.json;
        var IsMobile = false;
        var frameSize = cc.view.getFrameSize();
        frameSize.width / frameSize.height > 2 && (IsMobile = true);
        for (var i = 0; i < this.players.length; i++) {
          var playerNode = this.players[i].node;
          var cardInfo = jsonObj[playerNode.name];
          this._deserializePlayerCard(cardInfo, playerNode, i, IsMobile);
        }
      },
      _deserializePlayerCard: function _deserializePlayerCard(data, playerNode, sitIndex, IsMobile) {
        var prefabIndexMap = {
          BottomHandCard: 0,
          BottomPushCard: 1,
          BottomShowHandCard: 2,
          LeftHandCard: 3,
          LeftPushCard: 4,
          LeftShowHandCard: 5,
          TopHandCard: 6,
          TopPushCard: 7,
          TopShowHandCard: 8,
          RightHandCard: 9,
          RightPushCard: 10,
          RightShowHandCard: 11
        };
        var showHandCardsNode = playerNode.getChildByName("showHandCards");
        var handCardsNode = playerNode.getChildByName("handCards");
        handCardsNode || (handCardsNode = playerNode.getChildByName("handCards3D"));
        var pushCardsNode = playerNode.getChildByName("pushCards3D");
        handCardsNode.removeAllChildren();
        pushCardsNode.removeAllChildren();
        showHandCardsNode && showHandCardsNode.removeAllChildren();
        for (var _iterator = _createForOfIteratorHelperLoose(data.hand_cards), _step; !(_step = _iterator()).done; ) {
          var _cardInfo = _step.value;
          var _prefab = this.cardPrefabs[prefabIndexMap[_cardInfo.name]];
          var _node = cc.instantiate(_prefab);
          _node.active = _cardInfo.active;
          _node.x = _cardInfo.x;
          _node.y = _cardInfo.y;
          _node.parent = handCardsNode;
        }
        for (var _iterator2 = _createForOfIteratorHelperLoose(data.push_cards), _step2; !(_step2 = _iterator2()).done; ) {
          var _cardInfo2 = _step2.value;
          var _prefab2 = this.cardPrefabs[prefabIndexMap[_cardInfo2.name]];
          var _node2 = cc.instantiate(_prefab2);
          _node2.active = _cardInfo2.active;
          _node2.x = _cardInfo2.x;
          _node2.y = _cardInfo2.y;
          1 == sitIndex && IsMobile && (_node2.x = _node2.x + 50);
          3 == sitIndex && IsMobile && (_node2.x = _node2.x - 50);
          _node2.parent = pushCardsNode;
        }
        if (showHandCardsNode) for (var _iterator3 = _createForOfIteratorHelperLoose(data.show_hand_cards), _step3; !(_step3 = _iterator3()).done; ) {
          var cardInfo = _step3.value;
          var prefab = this.cardPrefabs[prefabIndexMap[cardInfo.name]];
          var node = cc.instantiate(prefab);
          node.active = cardInfo.active;
          node.x = cardInfo.x;
          node.y = cardInfo.y;
          node.parent = showHandCardsNode;
        }
      },
      _playBGMusic: function _playBGMusic() {
        var _this2 = this;
        if (this.bgMusic) {
          MYAudioEngine.playMusic(this.bgMusic);
          console.log("play game bgmusic");
        } else {
          var bgMusicName = "";
          this.tableLogic.isGoldRoom() && (bgMusicName = "sound/HZMJ/background/bg_Private");
          this.bg_count.active = false;
          if (this.tableLogic.isMatchRoom()) {
            bgMusicName = "sound/HZMJ/background/bg_Match";
            this.bg_count.active = true;
          }
          this.tableLogic.isBarrierMatchRoom() && (bgMusicName = "sound/HZMJ/background/bg_BarrierMatch");
          cc.loader.loadRes(bgMusicName, cc.AudioClip, function(err, res) {
            if (err) {
              console.error(err);
              return;
            }
            _this2.bgMusic = res;
            MYAudioEngine.playMusic(_this2.bgMusic);
            console.log("play game bgmusic async");
          });
        }
      },
      doSitBtn_TouchEnded: function doSitBtn_TouchEnded(event, type) {
        var deskStation = Number(type);
        var rs = this.getGameRulesRs();
        if (2 == rs) 0 != deskStation && (deskStation = 1); else if (3 == rs) {
          3 == deskStation && (deskStation = 2);
          this.m_deskStatio = deskStation;
        }
        console.log("\u70b9\u51fb\u5750\u4e0b\u6309\u94ae\u53d1\u9001\u5750\u4e0b\u547d\u4ee4" + deskStation);
        this.tableLogic.sendSit(deskStation);
      },
      playerinforOrGameRulerStatic: function playerinforOrGameRulerStatic(visible) {
        this.setup_Node[0].active = visible;
        this.setup_Node[1].active = visible;
        this.setup_Node[2].active = visible;
        this.setup_Node[3].active = visible;
        this.Text_GameRuler.active = visible;
        this.PlayersLayer.active = !visible;
        console.log("playerinforOrGameRulerStatic:", this.getGameRulesRs());
        if (visible) {
          var rs = this.getGameRulesRs();
          if (2 == rs) {
            this.setup_Node[1].active = false;
            this.setup_Node[3].active = false;
          } else 3 == rs && (this.setup_Node[2].active = false);
        }
      },
      getPlayer: function getPlayer(uid) {
        if (this.uiInfo && this.uiInfo.playInfo) {
          if (this.players && this.players[uid]) return this.players[uid];
        } else if (this.players && this.players[this.tableLogic.getViewSeatByID(uid)]) return this.players[this.tableLogic.getViewSeatByID(uid)];
      },
      addPlayer: function addPlayer(uid, localId, byMJCardType) {
        if (null != localId && 255 != localId) {
          this.m_byMJCardType = byMJCardType;
          this.players[localId].initShow(uid, byMJCardType, this);
        }
      },
      startCountdownEvent: function startCountdownEvent(event) {
        this.turnCenterBar(true, -1, 15);
      },
      turnCenterBar: function turnCenterBar(flag, index, time) {
        var _this3 = this;
        this.timeDownCb && this.unschedule(this.timeDownCb, 1);
        this.centerBar.active = flag;
        if (flag) {
          this.m_flag = flag;
          this.m_index = index;
          this.m_time = 15;
          var pin = this.centerBar.getChildByName("pointer").children;
          var timeLabel = this.centerBar.getChildByName("time").getComponent(cc.Label);
          timeLabel.node.active = false;
          pin.forEach(function(p) {
            return p.active = false;
          });
          if (-1 !== index || time) {
            if (!cc.mj.Data.isPlayback) {
              timeLabel.node.active = true;
              var cTime = time || 15;
              timeLabel.string = (cTime < 10 ? "0" + cTime : cTime) + "";
              this.timeDownCb = function() {
                cTime--;
                if (cTime < 0) {
                  _this3.unschedule(_this3.timeDownCb);
                  timeLabel.string = "";
                  _this3.turnCenterBar(_this3.m_flag, _this3.m_index, _this3.m_time);
                } else {
                  timeLabel.string = (cTime < 10 ? "0" + cTime : cTime) + "";
                  cTime <= 3;
                }
              };
              this.schedule(this.timeDownCb, 1);
            }
            if (-1 === index) return;
            cc.mj.Data.turnFlag = index;
            cc.turnFlag = index;
            pin[index].active = true;
            pin[index].getComponent(cc.Animation).play();
          }
        }
      },
      Showdirection: function Showdirection(BankviewSeat, byLackFengWei) {
        var rs = this.getGameRulesRs();
        var deskStation = this.tableLogic.logicToViewSeatNo(BankviewSeat);
        var direction = this.centerBar.getChildByName("bg").children;
        if (rs && (4 == rs || 2 == rs)) {
          if (0 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u4e1c";
            direction[1].getComponent(cc.Label).string = "\u5317";
            direction[2].getComponent(cc.Label).string = "\u897f";
            direction[3].getComponent(cc.Label).string = "\u5357";
          } else if (1 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5357";
            direction[3].getComponent(cc.Label).string = "\u897f";
            direction[2].getComponent(cc.Label).string = "\u5317";
            direction[1].getComponent(cc.Label).string = "\u4e1c";
          } else if (2 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u897f";
            direction[3].getComponent(cc.Label).string = "\u5317";
            direction[2].getComponent(cc.Label).string = "\u4e1c";
            direction[1].getComponent(cc.Label).string = "\u5357";
          } else if (3 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5317";
            direction[3].getComponent(cc.Label).string = "\u4e1c";
            direction[2].getComponent(cc.Label).string = "\u5357";
            direction[1].getComponent(cc.Label).string = "\u897f";
          }
          return;
        }
        if (rs && 3 != rs) return;
        if (!byLackFengWei) return;
        switch (byLackFengWei) {
         case 1:
          if (0 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u4e1c";
            direction[3].getComponent(cc.Label).string = "\u897f";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u5317";
          } else if (1 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u897f";
            direction[3].getComponent(cc.Label).string = "\u5317";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u4e1c";
          } else if (3 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5317";
            direction[3].getComponent(cc.Label).string = "\u4e1c";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u897f";
          }
          break;

         case 2:
          if (0 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u4e1c";
            direction[3].getComponent(cc.Label).string = "\u5357";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u5317";
          } else if (1 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5357";
            direction[3].getComponent(cc.Label).string = "\u5317";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u4e1c";
          } else if (3 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5317";
            direction[3].getComponent(cc.Label).string = "\u4e1c";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u5357";
          }
          break;

         case 3:
          if (0 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u4e1c";
            direction[3].getComponent(cc.Label).string = "\u5357";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u897f";
          } else if (1 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u5357";
            direction[3].getComponent(cc.Label).string = "\u897f";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u4e1c";
          } else if (3 == deskStation) {
            direction[0].getComponent(cc.Label).string = "\u897f";
            direction[3].getComponent(cc.Label).string = "\u4e1c";
            direction[2].getComponent(cc.Label).string = "";
            direction[1].getComponent(cc.Label).string = "\u5357";
          }
        }
      },
      movePointNode: function movePointNode(event) {
        var data = event;
        this.pointNode.active = data.flag;
        if (data.flag) {
          var position = this.pointNode.parent.convertToNodeSpaceAR(data.worldPos);
          this.pointNode.setPosition(position);
          this.pointNode.stopAllActions();
          var deviation = 0;
          switch (data.deviation) {
           case 0:
           case 2:
            deviation = 40;
            break;

           case 1:
           case 3:
            deviation = 30;
          }
          var action = cc.sequence(cc.moveTo(.5, position.x, position.y + deviation + 15), cc.moveTo(.5, position.x, position.y + deviation));
          this.pointNode.runAction(action.repeatForever());
        }
      },
      sendPutPai: function sendPutPai(event) {
        var data = event;
        var responseInfo = {
          eventType: HZMJ_MACROS_DEF.OUT,
          bClickTingOut: false,
          curMahJongValue: data.card,
          curMahJongIndex: 0
        };
        this.tableLogic.userResponse(responseInfo);
      },
      getCard: function getCard(deskStation, cardValue, outTime, Info) {
        var _this4 = this;
        this.scheduleOnce(function() {
          for (var i = 0; i < 4; i++) _this4.players[i].setHideCurChuPai(true);
        }, .8);
        MYAudioEngine.playEffect("sound/HZMJ/sound_res/zhuapai");
        if (this.uiInfo && this.uiInfo.playInfo) {
          var nextUidData = {
            uid: this.tableLogic.getUserdwUserIDBySeat(deskStation),
            deskStation: deskStation
          };
          this.nextPushUidEvent(nextUidData);
          var drawCardObj = {
            uid: this.tableLogic.logicToViewSeatNo(deskStation),
            card: cardValue,
            isBack: false,
            lastCardNum: null
          };
          this.drawCardEvent(drawCardObj);
        } else {
          var _nextUidData = {
            uid: this.tableLogic.getUserIdBySeat(deskStation),
            deskStation: deskStation
          };
          this.nextPushUidEvent(_nextUidData);
          if (Info) {
            var _drawCardObj = {
              uid: this.tableLogic.getUserIdBySeat(deskStation),
              card: cardValue,
              isBack: false,
              lastCardNum: null,
              HandCard: Info.byCard
            };
            this.drawCardEvent(_drawCardObj);
          } else {
            var _drawCardObj2 = {
              uid: this.tableLogic.getUserIdBySeat(deskStation),
              card: cardValue,
              isBack: false,
              lastCardNum: null
            };
            this.drawCardEvent(_drawCardObj2);
          }
        }
      },
      outCard: function outCard(deskStation, cardValue, handList, handCount) {
        if (this.uiInfo && this.uiInfo.playInfo) {
          var sendCardObj = {
            deskStation: this.tableLogic.logicToViewSeatNo(deskStation),
            uid: this.tableLogic.getUserdwUserIDBySeat(deskStation),
            card: cardValue,
            isBack: false,
            handList: handList,
            handCount: handCount
          };
          this.sendCardEvent(sendCardObj);
        } else {
          var _sendCardObj = {
            uid: this.tableLogic.getUserIdBySeat(deskStation),
            card: cardValue
          };
          this.sendCardEvent(_sendCardObj);
        }
        this.playGameVoice(this.tableLogic.logicToViewSeatNo(deskStation), cardValue);
      },
      playGameVoice: function playGameVoice(viewSeatNO, eventName) {
        var bBoy = this.tableLogic.getUserSexBySeat(this.tableLogic.viewToLogicSeatNo(viewSeatNO));
        if (0 == viewSeatNO) {
          var sound_type = Number(cc.sys.localStorage.getItem(G_SOUND_TYPE) || 3);
          0 == sound_type ? bBoy = true : 1 == sound_type && (bBoy = false);
        }
        bBoy ? MYAudioEngine.playEffect("sound/HZMJ/sound_res/man/" + eventName) : MYAudioEngine.playEffect("sound/HZMJ/sound_res/woman/" + eventName);
      },
      __dealGameBase: function __dealGameBase(gameInfo) {
        gameInfo.bSuperFlag && (this.Button_SuperClient.active = true);
        this._superClientLayer && (this._superClientLayer.active = false);
      },
      onGameStationFree: function onGameStationFree(gameStationFreeInfo) {
        this.__dealGameBase(gameStationFreeInfo);
        this.Text_RoomWanfa.active = this.tableLogic.isRoom();
        this.setBackground();
        this.tableLogic.isRoom() && (this.Text_RoomWanfa.getComponent(cc.Label).string = this.getGameWanfa());
        this.showRestNum(false, 0);
        this.turnCenterBar(false, 0, 0);
      },
      onGameStationGame: function onGameStationGame(gameStationGameInfo) {
        this.__dealGameBase(gameStationGameInfo);
        this.setBaoPai(true, gameStationGameInfo.byBaoCard);
        this.setHandCard();
        this.showRestNum(true, gameStationGameInfo.iMenNums);
        this.setBackground();
        this.Text_RoomWanfa.active = this.tableLogic.isRoom();
        this.tableLogic.isRoom() && (this.Text_RoomWanfa.getComponent(cc.Label).string = this.getGameWanfa());
        var roomInfo = {};
        roomInfo = RoomListManager.getRoomInfo();
        var playersData = [];
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          var playerData = {
            uid: null,
            handleCard: [],
            hasSendCards: [],
            drawCard: [],
            handCards: [],
            chiCards: [],
            pengCards: [],
            gangCards: [],
            anGangCards: [],
            BeChiCard: [],
            viewSeatNoBeChi: [],
            viewSeatNoBePeng: [],
            viewSeatNoBeGang: []
          };
          playerData.uid = this.tableLogic.getUserIdBySeat(i);
          playersData.push(playerData);
          if (0 != gameStationGameInfo.byArOutPaiCount[i]) for (var outcard = 0; outcard < gameStationGameInfo.byArOutPaiCount[i]; outcard++) playersData[i].hasSendCards.push(gameStationGameInfo.byArOutPai[i][outcard]);
          var info = gameStationGameInfo.UserGCPData[i];
          for (var j = 0; j <= HZMJ_MACROS_DEF.CPG_MAX_PILE_NUM - 1; j++) {
            if (HZMJ_MACROS_DEF.ACTION_NO == info[j].byType) break;
            var eventType = info[j].byType;
            var resultList = [];
            for (var k = 0; k <= 3; k++) G_INVALID_BYTE_VALUE != info[j].byData[k] ? resultList.push(info[j].byData[k]) : HZMJ_MACROS_DEF.ACTION_AN_GANG == eventType && resultList.push(info[j].byData[3]);
            var eventInfo = {
              eventType: eventType,
              eventSendPlayerViewSeatNO: this.tableLogic.logicToViewSeatNo(info[j].iStation),
              eventRecvPlayerViewSeatNO: this.tableLogic.logicToViewSeatNo(info[j].iBeStation),
              curMahJongValue: info[j].iOutpai,
              resultList: resultList
            };
            var chiPengGang = eventInfo.eventType;
            switch (chiPengGang) {
             case HZMJ_MACROS_DEF.ACTION_CHI:
              for (var _k = 0; _k < eventInfo.resultList.length; _k++) playersData[i].chiCards.push(eventInfo.resultList[_k]);
              playersData[i].BeChiCard.push(eventInfo.curMahJongValue);
              playersData[i].viewSeatNoBeChi.push(eventInfo.eventRecvPlayerViewSeatNO);
              break;

             case HZMJ_MACROS_DEF.ACTION_PENG:
              playersData[i].pengCards.push(eventInfo.curMahJongValue);
              playersData[i].viewSeatNoBePeng.push(eventInfo.eventRecvPlayerViewSeatNO);
              break;

             case HZMJ_MACROS_DEF.ACTION_MING_GANG:
             case HZMJ_MACROS_DEF.ACTION_BU_GANG:
              playersData[i].gangCards.push(eventInfo.curMahJongValue);
              playersData[i].viewSeatNoBeGang.push(eventInfo.eventRecvPlayerViewSeatNO);
              break;

             case HZMJ_MACROS_DEF.ACTION_AN_GANG:
              playersData[i].anGangCards.push(eventInfo.curMahJongValue);
            }
          }
        }
        var sysnData = {
          nextPushCardUid: this.tableLogic.getUserIdBySeat(gameStationGameInfo.byNowOutStation),
          roomOverResult: null,
          gameOverResult: null,
          players: playersData
        };
        GameEvent.emit("onSync", sysnData);
        if (gameStationGameInfo.byNowOutStation == G_INVALID_BYTE_VALUE) {
          this.turnCenterBar(true, 0);
          this.setChuPaiEnabled(-1);
        }
      },
      userResponseEvent: function userResponseEvent(responseInfoData) {
        this.tableLogic.userResponse(responseInfoData);
      },
      SendChoosedChi: function SendChoosedChi() {
        this.tableLogic.SendChoosedChi();
      },
      waitUserResponse: function waitUserResponse(responseInfo) {
        this.turnCenterBar(true, responseInfo.eventSendPlayerViewSeatNO, 15);
        this.setChuPaiEnabled(responseInfo.eventSendPlayerViewSeatNO);
        if (0 != responseInfo.eventSendPlayerViewSeatNO) return;
        var isIncludeGang = responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_GANG);
        var userOperateData = {
          isGuo: responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_PASS),
          isPeng: responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_PENG),
          isTing: responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_TING_PAI),
          isChi: responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_CHI),
          isGang: isIncludeGang,
          isBuGang: isIncludeGang,
          isAnGang: isIncludeGang,
          isHu: responseInfo.eventTypeList.includes(HZMJ_MACROS_DEF.ACTION_HU),
          isZiMo: false,
          gangUion: responseInfo.gangUion,
          chiUion: responseInfo.chiUion,
          byMJCardType: this.m_byMJCardType
        };
        cc.mj.Data.isGetedCards ? this.ctrlBtns.show(userOperateData, this) : cc.mj.Data.ctrlOperateData = userOperateData;
      },
      eventHu: function eventHu(eventSendPlayerViewSeatNO, eventRecvPlayerViewSeatNO, filePath) {
        this.playGameVoice(eventSendPlayerViewSeatNO, "hu");
        this.players[eventSendPlayerViewSeatNO] && this.players[eventSendPlayerViewSeatNO].showCardType(3);
        for (var i = 0; i < 4; i++) this.players[i].setHideCurChuPai(true);
      },
      eventFanCai: function eventFanCai(eventSendPlayerViewSeatNO, eventRecvPlayerViewSeatNO, filePath) {
        this.playGameVoice(eventSendPlayerViewSeatNO, "qiangganghu");
        this.players[eventSendPlayerViewSeatNO] && this.players[eventSendPlayerViewSeatNO].showGangHuType(3);
        for (var i = 0; i < 4; i++) this.players[i].setHideCurChuPai(true);
      },
      eventGngKai: function eventGngKai(eventSendPlayerViewSeatNO, eventRecvPlayerViewSeatNO, filePath) {
        this.playGameVoice(eventSendPlayerViewSeatNO, "gangshanghua");
        this.players[eventSendPlayerViewSeatNO] && this.players[eventSendPlayerViewSeatNO].showGangHuType(3);
        for (var i = 0; i < 4; i++) this.players[i].setHideCurChuPai(true);
      },
      eventTing: function eventTing(viewSeatNO) {
        this.playGameVoice(viewSeatNO, "ting");
        this.players[viewSeatNO] && this.players[viewSeatNO].showCardType(5);
      },
      addPlayerBaiscInfo: function addPlayerBaiscInfo(resultInfo) {
        resultInfo.userName = this.tableLogic.getUserNameList();
        resultInfo.userID = this.tableLogic.getUserIdList();
        resultInfo.usersHeadUrl = this.tableLogic.getHeadURLList();
        return resultInfo;
      },
      setAllResultData: function setAllResultData(resultInfo) {
        resultInfo = this.addPlayerBaiscInfo(resultInfo);
        this._allResultInfo = cloneObject(resultInfo);
        console.log(">>>>resultInfo" + JSON.stringify(resultInfo));
        GameEvent.emit("onRoomOver", this._allResultInfo);
      },
      showAllResult: function showAllResult(data) {
        GameEvent.emit("showRoomOver", data);
      },
      showResult: function showResult(resultInfo) {},
      eventChiPengGangUI: function eventChiPengGangUI(eventInfo, eventName) {
        for (var i = 0; i < 4; i++) this.players[i].setHideCurChuPai(true);
        if (!eventName) return;
        switch (eventName) {
         case "chi":
          var ViewSeatNO1 = eventInfo.byStation;
          var uidd = 0;
          var uid = 0;
          if (this.uiInfo && this.uiInfo.playInfo) {
            uidd = this.tableLogic.getUserdwUserIDBySeat(ViewSeatNO1);
            uid = this.tableLogic.logicToViewSeatNo(ViewSeatNO1);
          } else uid = this.tableLogic.getUserIdBySeat(ViewSeatNO1);
          var chiData = {
            uid: uid,
            uidd: uidd,
            chiCard: eventInfo.resultList,
            curMahJongValue: eventInfo.curMahJongValue,
            isBack: false,
            viewSeatNoBeChi: eventInfo.eventRecvPlayerViewSeatNO,
            handCount: eventInfo.handCount,
            handList: eventInfo.handList
          };
          this.chiEvent(chiData);
          break;

         case "peng":
          var ViewSeatNO2 = eventInfo.byStation;
          var uid = 0;
          var uidd = 0;
          if (this.uiInfo && this.uiInfo.playInfo) {
            uidd = this.tableLogic.getUserdwUserIDBySeat(ViewSeatNO2);
            uid = this.tableLogic.logicToViewSeatNo(ViewSeatNO2);
          } else uid = this.tableLogic.getUserIdBySeat(ViewSeatNO2);
          var pengData = {
            uid: uid,
            uidd: uidd,
            pengCard: eventInfo.curMahJongValue,
            isBack: false,
            viewSeatNoBePeng: eventInfo.eventRecvPlayerViewSeatNO
          };
          this.pengEvent(pengData);
          0 != eventInfo.eventSendPlayerViewSeatNO && this.getCard(ViewSeatNO2, 255, 15);
          break;

         case "gang":
          var ViewSeatNO3 = eventInfo.byStation;
          var uid = 0;
          var uidd = 0;
          uid = this.uiInfo && this.uiInfo.playInfo ? this.tableLogic.logicToViewSeatNo(ViewSeatNO3) : this.tableLogic.getUserIdBySeat(ViewSeatNO3);
          var gangData = {
            uid: uid,
            card: eventInfo.curMahJongValue,
            type: eventInfo.gangType,
            isBack: false,
            viewSeatNoBeGang: eventInfo.eventRecvPlayerViewSeatNO
          };
          this.gangEvent(gangData);
        }
      },
      eventChiPengGang: function eventChiPengGang(eventInfo) {
        var eventName = "";
        if (HZMJ_MACROS_DEF.ACTION_CHI == eventInfo.eventType) eventName = "chi"; else if (HZMJ_MACROS_DEF.ACTION_PENG == eventInfo.eventType) eventName = "peng"; else if (HZMJ_MACROS_DEF.ACTION_AN_GANG == eventInfo.eventType || HZMJ_MACROS_DEF.ACTION_BU_GANG == eventInfo.eventType || HZMJ_MACROS_DEF.ACTION_MING_GANG == eventInfo.eventType) {
          var gangType = 1;
          switch (eventInfo.eventType) {
           case HZMJ_MACROS_DEF.ACTION_AN_GANG:
            gangType = 3;
            break;

           case HZMJ_MACROS_DEF.ACTION_BU_GANG:
            gangType = 2;
            break;

           case HZMJ_MACROS_DEF.ACTION_MING_GANG:
            gangType = 1;
          }
          eventInfo.gangType = gangType;
          eventName = (true == eventInfo.bAnGang, "gang");
        }
        this.playGameVoice(eventInfo.eventSendPlayerViewSeatNO, eventName);
        "anGang" != eventName && "mingGang" != eventName || (eventName = "gang");
        this.eventChiPengGangUI(eventInfo, eventName);
        if (this.uiInfo.playInfo) ; else {
          this.turnCenterBar(true, this.tableLogic.logicToViewSeatNo(eventInfo.byStation), 15);
          this.setChuPaiEnabled(this.tableLogic.logicToViewSeatNo(eventInfo.byStation));
        }
      },
      onGameBeginMessage: function onGameBeginMessage(beginInfo) {
        GameEvent.emit("hideOverLayout");
        this.setBaoPai(true, beginInfo.byBaoCard);
        this.setHandCard();
        if (!this._playInfo) {
          this.turnCenterBar(true, beginInfo.bankerViewSeat);
          this.setChuPaiEnabled(beginInfo.bankerViewSeat);
        }
      },
      showRestNum: function showRestNum(ifShow, nums) {
        if ("undefined" == typeof nums) return;
        this.playInfo.active = ifShow;
        var playCard = this.playInfo.getChildByName("zhangshu").children[0].getComponent(cc.Label);
        playCard.string = "" + (nums || 0);
      },
      closeCard: function closeCard() {
        GameEvent.emit("closeCard");
      },
      dealCards: function dealCards(viewSeatNO, handCount, handList, isGetHandCard, GetCardValue) {
        var _this5 = this;
        cc.mj.Data.isGetedCards = true;
        var handData = {
          drawCard: null,
          handCards: []
        };
        if (14 === handCount) {
          handData.drawCard = handList[13];
          for (var i = 0; i < handCount - 1; i++) handData.handCards.push(handList[i]);
        } else for (var _i2 = 0; _i2 < handCount; _i2++) handData.handCards.push(handList[_i2]);
        this.players[viewSeatNO].showHandCard(handData);
        cc.mj.Data.ctrlOperateData && !cc.mj.Data.isWatchMode && this.scheduleOnce(function() {
          _this5.ctrlBtns.show(cc.mj.Data.ctrlOperateData, _this5);
        }, .3);
      },
      setBaoPai: function setBaoPai(bShow, mjBaoGen) {
        mjBaoGen == G_INVALID_BYTE_VALUE && (bShow = false);
        this.baoPaiBox.active = bShow;
        if (bShow) {
          cc.mj.Data.ghostCard = [];
          if (mjBaoGen != G_INVALID_BYTE_VALUE) {
            this._baoPaiValue = mjBaoGen;
            cc.mj.Data.ghostCard.push(mjBaoGen);
            this.baoPaiBox.children[0].getComponent("MJCommon_Card").init(mjBaoGen, false, false, "outCard", 0);
          }
        }
      },
      setHandCard: function setHandCard() {
        var handArrData = this.tableLogic.getHandArrData();
        var handArrCount = this.tableLogic.getHandArrCount();
        for (var i = 0; i <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; i++) {
          var viewSeatNO = this.tableLogic.logicToViewSeatNo(i);
          if (viewSeatNO === G_INVALID_BYTE_VALUE) continue;
          this.dealCards(viewSeatNO, handArrCount[i], handArrData[i]);
        }
      },
      syncEvent: function syncEvent(event) {
        var _this6 = this;
        var data = event;
        cc.mj.Data.showCtrlBtns = false;
        cc.mj.Data.onSync(data);
        cc.mj.Data.isGaming = true;
        cc.mj.Data.uid = this.tableLogic.getMyID();
        "undefined" != typeof data.nextPushCardUid && (cc.mj.Data.isGaming = true);
        var _loop = function _loop(user) {
          var viewSeat = _this6.tableLogic.getViewSeatByID(_this6.tableLogic.getUserIdBySeat(user));
          if (null == viewSeat) return "break";
          var p = _this6.players[viewSeat];
          p.data.hasSendCards = data.players[user].hasSendCards;
          p.data.chiCards = data.players[user].chiCards;
          p.data.pengCards = data.players[user].pengCards;
          p.data.gangCards = data.players[user].gangCards;
          p.data.anGangCards = data.players[user].anGangCards;
          p.data.viewSeatNoBeChis = data.players[user].viewSeatNoBeChi;
          p.data.viewSeatNoBePengs = data.players[user].viewSeatNoBePeng;
          p.data.viewSeatNoBeGangs = data.players[user].viewSeatNoBeGang;
          p.data.chiCards.forEach(function(c, i) {
            if (3 == p.data.chiCards.length) 0 == i && _this6.players[viewSeat].setChiPengGang(p.data.chiCards, 3, 5, false, p.data.viewSeatNoBeChis[i], true, data.players[user].BeChiCard[0]); else if (6 == p.data.chiCards.length) {
              if (0 == i) {
                var datas = [];
                for (var index = 0; index < 3; index++) datas.push(p.data.chiCards[index]);
                _this6.players[viewSeat].setChiPengGang(datas, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[0]);
              }
              if (4 == i) {
                var _datas = [];
                for (var _index = 3; _index < 6; _index++) _datas.push(p.data.chiCards[_index]);
                _this6.players[viewSeat].setChiPengGang(_datas, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[1]);
              }
            } else if (9 == p.data.chiCards.length) {
              if (0 == i) {
                var _datas2 = [];
                for (var _index2 = 0; _index2 < 3; _index2++) _datas2.push(p.data.chiCards[_index2]);
                _this6.players[viewSeat].setChiPengGang(_datas2, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[0]);
              }
              if (3 == i) {
                var _datas3 = [];
                for (var _index3 = 3; _index3 < 6; _index3++) _datas3.push(p.data.chiCards[_index3]);
                _this6.players[viewSeat].setChiPengGang(_datas3, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[1]);
              }
              if (6 == i) {
                var _datas4 = [];
                for (var _index4 = 6; _index4 < 9; _index4++) _datas4.push(p.data.chiCards[_index4]);
                _this6.players[viewSeat].setChiPengGang(_datas4, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[2]);
              }
            } else if (12 == p.data.chiCards.length) {
              if (0 == i) {
                var _datas5 = [];
                for (var _index5 = 0; _index5 < 3; _index5++) _datas5.push(p.data.chiCards[_index5]);
                _this6.players[viewSeat].setChiPengGang(_datas5, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[0]);
              }
              if (3 == i) {
                var _datas6 = [];
                for (var _index6 = 3; _index6 < 6; _index6++) _datas6.push(p.data.chiCards[_index6]);
                _this6.players[viewSeat].setChiPengGang(_datas6, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[1]);
              }
              if (6 == i) {
                var _datas7 = [];
                for (var _index7 = 6; _index7 < 9; _index7++) _datas7.push(p.data.chiCards[_index7]);
                _this6.players[viewSeat].setChiPengGang(_datas7, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[2]);
              }
              if (9 == i) {
                var _datas8 = [];
                for (var _index8 = 9; _index8 < 12; _index8++) _datas8.push(p.data.chiCards[_index8]);
                _this6.players[viewSeat].setChiPengGang(_datas8, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[3]);
              }
            } else if (15 == p.data.chiCards.length) {
              if (0 == i) {
                var _datas9 = [];
                for (var _index9 = 0; _index9 < 3; _index9++) _datas9.push(p.data.chiCards[_index9]);
                _this6.players[viewSeat].setChiPengGang(_datas9, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[0]);
              }
              if (3 == i) {
                var _datas10 = [];
                for (var _index10 = 3; _index10 < 6; _index10++) _datas10.push(p.data.chiCards[_index10]);
                _this6.players[viewSeat].setChiPengGang(_datas10, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[1]);
              }
              if (6 == i) {
                var _datas11 = [];
                for (var _index11 = 6; _index11 < 9; _index11++) _datas11.push(p.data.chiCards[_index11]);
                _this6.players[viewSeat].setChiPengGang(_datas11, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[2]);
              }
              if (9 == i) {
                var _datas12 = [];
                for (var _index12 = 9; _index12 < 12; _index12++) _datas12.push(p.data.chiCards[_index12]);
                _this6.players[viewSeat].setChiPengGang(_datas12, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[3]);
              }
              if (12 == i) {
                var _datas13 = [];
                for (var _index13 = 12; _index13 < 15; _index13++) _datas13.push(p.data.chiCards[_index13]);
                _this6.players[viewSeat].setChiPengGang(_datas13, 3, 5, false, p.data.viewSeatNoBeChis[0], true, data.players[user].BeChiCard[4]);
              }
            }
            p.data.chiCards[i] = c;
          });
          p.data.pengCards.forEach(function(c, i) {
            _this6.players[viewSeat].setChiPengGang(c, 3, 1, false, p.data.viewSeatNoBePengs[i]);
            p.data.pengCards[i] = c;
          });
          p.data.gangCards.forEach(function(c, i) {
            _this6.players[viewSeat].setChiPengGang(c, 4, 1, false, p.data.viewSeatNoBeGangs[i]);
            p.data.gangCards[i] = c;
          });
          p.data.anGangCards.forEach(function(c, i) {
            _this6.players[viewSeat].setChiPengGang(c, 4, 3);
            p.data.anGangCards[i] = c;
          });
          _this6.players[viewSeat].data.chiCards = p.data.chiCards;
          _this6.players[viewSeat].data.pengCards = p.data.pengCards;
          _this6.players[viewSeat].data.gangCards = p.data.gangCards;
          _this6.players[viewSeat].data.anGangCards = p.data.anGangCards;
          if (p.data.uid === data.nextPushCardUid && p.data.uid === cc.mj.Data.uid) {
            var mMoPai = 255;
            for (var i = _this6.players[viewSeat].data.handCards.length - 1; i >= 0; i--) if (255 != _this6.players[viewSeat].data.handCards[i]) {
              mMoPai = _this6.players[viewSeat].data.handCards[i];
              _this6.players[viewSeat].data.handCards.splice(i, 1);
              break;
            }
            _this6.players[viewSeat].initHandCards();
            255 != mMoPai && _this6.players[viewSeat].getCardInTurn(mMoPai);
          } else {
            _this6.players[viewSeat].initHandCards();
            0 != data.nextPushCardUid && viewSeat == _this6.tableLogic.logicToViewSeatNo(_this6.tableLogic.getSeatByID(data.nextPushCardUid)) && _this6.players[viewSeat].getCardInTurn(255);
          }
          p.data.hasSendCards.forEach(function(c) {
            _this6.players[viewSeat].chupaiAction(c, true);
          });
          data.nextPushCardUid === cc.mj.Data.uid && (cc.mj.Data.notcanPutCard = false);
        };
        for (var user = 0; user <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; user++) {
          var _ret = _loop(user);
          if ("break" === _ret) break;
        }
        "undefined" != typeof data.nextPushCardUid && GameEvent.emit("onNextPushUid", {
          uid: data.nextPushCardUid,
          deskStation: this.tableLogic.getSeatByID(data.nextPushCardUid),
          time: 5
        });
        if (this.tableLogic.isBarrierMatchRoom()) return;
        data.roomOverResult && data.roomOverResult.length && GameEvent.emit("onRoomOver", {
          data: data.roomOverResult
        });
        data.gameOverResult && data.gameOverResult.length && 0 === cc.mj.Data.getPlayerData().state ? GameEvent.emit("onGameOver", {
          data: data.gameOverResult,
          noDelayTime: true
        }) : GameEvent.emit("hideOverLayout");
      },
      ShowMyHandCard: function ShowMyHandCard(viewSeat, byhandCards) {
        this.players && this.players[viewSeat] && this.players[viewSeat].setHandCard(byhandCards);
      },
      ShowflowerCard: function ShowflowerCard(viewSeat, byflowerCardData, byHuaCardCount, byWildHuaCardCount) {
        this.players && this.players[viewSeat] && this.players[viewSeat].setflowerCard(viewSeat, byflowerCardData, byHuaCardCount, byWildHuaCardCount);
      },
      setChuPaiEnabled: function setChuPaiEnabled(viewSeat) {
        this.players && this.players[0] && (0 == viewSeat ? this.players[0].setChuPaiEnabled(false) : this.players[0].setChuPaiEnabled(true));
      },
      checkhandCardList: function checkhandCardList(viewSeat, cardValue) {
        this.players && this.players[viewSeat] && this.players[viewSeat].checkhandCardList(cardValue);
      },
      showTingsanjiao: function showTingsanjiao(viewSeat, cardValue) {
        this.players && this.players[viewSeat] && (-1 == cardValue ? this.players[viewSeat].showTingsanjiao(cardValue, false) : this.players[viewSeat].showTingsanjiao(cardValue));
      },
      CanlehandCardColor: function CanlehandCardColor(viewSeat) {
        this.players && this.players[viewSeat] && this.players[viewSeat].CanlehandCardColor();
      },
      ShowPlayHandCard: function ShowPlayHandCard(viewSeat, byArHandPai, byArHandPaiCount, byDianPao, byPs) {
        this.players && this.players[viewSeat] && this.players[viewSeat].ShowPlayHandCard(byArHandPai, byArHandPaiCount, byDianPao, byPs);
      },
      ShowZSYpopup: function ShowZSYpopup() {
        var btnName1 = "\u505a\u751f\u610f";
        var btnName2 = "\u53d6  \u6d88";
        var msgCallback = function(btnName) {
          btnName == btnName1 ? this.tableLogic.SendDataZSY(true) : this.tableLogic.SendDataZSY(false);
        }.bind(this);
        var msgObj = {};
        msgObj.msg = "\u662f\u5426\u505a\u751f\u610f";
        msgObj.btn1 = btnName1;
        msgObj.btn2 = btnName2;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      ShowChiPengGangtips: function ShowChiPengGangtips(tips) {
        this.playTipsAmition(this.Text_Metips, tips);
      },
      playTipsAmition: function playTipsAmition(node, tips, time) {
        node.active = true;
        tips && (node.getChildByName("text").getComponent(cc.Label).string = tips + "");
        var moveEnd = function() {
          node.active = false;
        }.bind(this);
        var m_time = time || 3;
        var callFunc = cc.callFunc(moveEnd);
        var a1 = cc.delayTime(m_time);
        node.runAction(cc.sequence(a1, callFunc));
      },
      doButtonTipClick: function doButtonTipClick(event, tag) {},
      onCurMatchComeSoon: function onCurMatchComeSoon() {
        this.setShowPlaytips(true);
      },
      setShowPlaytips: function setShowPlaytips(isShow) {
        var _this7 = this;
        void 0 === isShow && (isShow = false);
        this.Text_Playtips.active = isShow;
        true == isShow && this.scheduleOnce(function() {
          _this7.Text_Playtips.active = false;
        }, 5);
      },
      setMyHandCard: function setMyHandCard(handCount, handList) {},
      backToLobby: function backToLobby() {
        console.log("\u8fd4\u56de\u5927\u5385");
        this.tableLogic.backLobby();
      },
      initEvent: function initEvent() {
        GameEvent.on("onSync", this.syncEvent, this);
        GameEvent.on("onStartCountdown", this.startCountdownEvent, this);
        GameEvent.on("onConfirmBanker", this.showBankerEvent, this);
        GameEvent.on("onSendCard", this.sendCardEvent, this);
        GameEvent.on("onReSendCard", this.reSendCardEvent, this);
        GameEvent.on("onDrawCard", this.drawCardEvent, this);
        GameEvent.on("onNextPushUid", this.nextPushUidEvent, this);
        GameEvent.on("onPeng", this.pengEvent, this);
        GameEvent.on("onGang", this.gangEvent, this);
        GameEvent.on("onHu", this.huEvent, this);
        GameEvent.on("movePoint", this.movePointNode, this);
        GameEvent.on("reSendPutPai", this.sendPutPai, this);
        GameEvent.on("reSetGame", this.reSetGame, this);
        GameEvent.on("onGameOver", this.gameOverEvent, this);
        GameEvent.on("onRoomOver", this.roomOverEvent, this);
        GameEvent.on("sendStartGame", this.sendStartGame, this);
        GameEvent.on("onBackToLobby", this.backToLobby, this);
        GameEvent.on("onclosebtn", this.onclosebtn, this);
      },
      closeEvent: function closeEvent() {
        GameEvent.off("onSync", this.syncEvent, this);
        GameEvent.off("onStartCountdown", this.startCountdownEvent, this);
        GameEvent.off("onConfirmBanker", this.showBankerEvent, this);
        GameEvent.off("onSendCard", this.sendCardEvent, this);
        GameEvent.off("onReSendCard", this.reSendCardEvent, this);
        GameEvent.off("onDrawCard", this.drawCardEvent, this);
        GameEvent.off("onNextPushUid", this.nextPushUidEvent, this);
        GameEvent.off("onPeng", this.pengEvent, this);
        GameEvent.off("onGang", this.gangEvent, this);
        GameEvent.off("onHu", this.huEvent, this);
        GameEvent.off("movePoint", this.movePointNode, this);
        GameEvent.off("reSendPutPai", this.sendPutPai, this);
        GameEvent.off("reSetGame", this.reSetGame, this);
        GameEvent.off("onGameOver", this.gameOverEvent, this);
        GameEvent.off("onRoomOver", this.roomOverEvent, this);
        GameEvent.off("sendStartGame", this.sendStartGame, this);
        GameEvent.off("onBackToLobby", this.backToLobby, this);
        GameEvent.off("onclosebtn", this.onclosebtn, this);
      },
      showBankerEvent: function showBankerEvent(event) {
        var data = event.getUserData().data;
        cc.mj.Data.zhuangUid = data.BankerUid;
        var userData = cc.mj.Data.getPlayerByKeyValue("uid", data.BankerUid);
        if (userData && this.players[userData.localId]) {
          this.players[userData.localId].showZhuangInfo(data.BankerCount);
          this.turnCenterBar(true, userData.localId);
          this.setChuPaiEnabled(userData.localId);
        }
      },
      showUserBankerbShow: function showUserBankerbShow(viewSeatNO, bShow) {
        for (var i = 0; i < this.uiInfo.seatCount; i++) this.BankNode_Node[i] && (this.BankNode_Node[i].active = false);
        this.BankNode_Node[viewSeatNO] && (this.BankNode_Node[viewSeatNO].active = bShow);
      },
      onclosebtn: function onclosebtn() {
        this.btn_Start.active = false;
      },
      sendCardEvent: function sendCardEvent(event) {
        var data = event;
        this.reSendLength = 0;
        var play;
        play = this.uiInfo && this.uiInfo.playInfo ? this.getPlayer(data.deskStation) : this.getPlayer(data.uid);
        if (data.uid !== this.tableLogic.getMyID() || cc.mj.Data.isPlayback) GameEvent.emit("chupai", {
          uid: data.uid,
          card: data.card,
          isBack: data.isBack,
          handList: data.handList,
          handCount: data.handCount
        }); else {
          this.uiInfo && this.uiInfo.playInfo ? GameEvent.emit("chupai", {
            uid: data.uid,
            card: data.card,
            isBack: data.isBack,
            handList: data.handList,
            handCount: data.handCount
          }) : GameEvent.emit("chupai", {
            uid: data.uid,
            card: data.card,
            isBack: data.isBack
          });
          GameEvent.emit("selectPai", {
            isShow: false
          });
          cc.mj.Data.notcanPutCard = true;
        }
        play && (play.chupaied = false);
      },
      reSendCardEvent: function reSendCardEvent(event) {
        var data = event.getUserData().data;
        GameEvent.emit("initHandTouch");
      },
      playSkelenAnimation: function playSkelenAnimation(fileName, isLoop, callBack, parentNode, skin) {
        isLoop = isLoop || false;
        var node = new cc.Node();
        var Skeleton = node.addComponent(sp.Skeleton);
        var SkeletonIndex = 0;
        "xiaojiesuan" == fileName && (SkeletonIndex = 1);
        Skeleton.skeletonData = this.Skeleton[SkeletonIndex];
        Skeleton.premultipliedAlpha = false;
        Skeleton.loop = isLoop;
        Skeleton.animation = "animation";
        Skeleton.timeScale = 1;
        skin && this.scheduleOnce(function() {
          Skeleton.setSkin(skin);
        }, .1);
        parentNode ? parentNode.addChild(node) : this.node.addChild(node);
        node.setScale(1.5, 1.5);
        node.name = fileName;
        Skeleton.setCompleteListener(function() {
          callBack && callBack();
          var tmpDelay = function tmpDelay() {
            node.destroy();
          };
          this.scheduleOnce(tmpDelay, .25);
        }.bind(this));
      },
      setSuperLookResult: function setSuperLookResult(info) {
        if (null == this._superClientLayer) {
          var callback = function callback(m_info) {
            this.tableLogic.userResponse(m_info);
          };
          this._superClientLayer = this.addLayer(this.studio.layout, "SXTDH/src/SuperClient", info, callback);
          this._superClientLayer.setLocalZOrder(G_PLAYERUI_ZORDER_TAG + 1);
        } else {
          this._superClientLayer.setIsVisible(true);
          this._superClientLayer.updateAllData(info);
        }
      },
      showCurCanHUCard: function showCurCanHUCard(canHuCardList) {
        var _this8 = this;
        var cardArray = [];
        for (var i in canHuCardList) {
          var cardValue = canHuCardList[i];
          null != cardValue && cardValue != G_INVALID_BYTE_VALUE && cardArray.push(cardValue);
        }
        if (cardArray.length > 0) {
          var ting_card = Number(cc.sys.localStorage.getItem(G_TING_CARD) || 0);
          this.HuPaiLayer.active = 0 == ting_card;
          var HuPaiLayerContent = this.HuPaiLayer.children[0];
          HuPaiLayerContent.children.forEach(function(node, index) {
            node.destroy();
          });
          cardArray.forEach(function(cardValue) {
            var cardItem = cc.instantiate(_this8.HuPaiLayerPrefab);
            cardItem.setScale(1.3, 1.3);
            HuPaiLayerContent.addChild(cardItem);
            cardItem.getComponent("MJCommon_Card").init(cardValue, true, false, "outCard", 0, true);
          });
        } else this.HuPaiLayer.active = false;
      },
      setBackground: function setBackground() {
        var roomInfo = {};
        roomInfo = RoomListManager.getRoomInfo();
        if (20161004 == roomInfo.gameID) {
          this.background_1.active = false;
          this.background_2.active = true;
        } else if (20211004 == roomInfo.gameID) {
          this.background_1.active = true;
          this.background_2.active = false;
        }
      },
      StartTimeschedule: function StartTimeschedule(Time, visible) {
        var _this9 = this;
        var jsonStr;
        if (this.tableLogic.isGoldRoom() || this.tableLogic.isMatchRoom() || this.tableLogic.isBarrierMatchRoom()) {
          jsonStr = {};
          jsonStr.count = 20;
        } else {
          var szGameRulesRs = RoomListManager.getCurRuleInfo();
          jsonStr = JSON.parse(szGameRulesRs);
        }
        if (8 == jsonStr.count || 16 == jsonStr.count) ; else {
          this.RoomTime = Time;
          this.timePlay && this.unschedule(this.timePlay);
          this.timePlay = function() {
            _this9.RoomTime--;
            if (_this9.RoomTime < 0) {
              _this9.unschedule(_this9.timePlay);
              _this9.tableLogic.getGameStatus() == HZMJ_GameStation.GS_STATUS_PLAYING ? cc.log("*****************************************\u6e38\u620f\u72b6\u6001**********************************************") : visible && (_this9.tableLogic.isMeWatching() ? _this9.tableLogic.doLeftRoom() : _this9.tableLogic.sendDismissRoom());
            } else {
              var minute = Math.floor(_this9.RoomTime / 60);
              var left = _this9.RoomTime % 60;
              var minStr = "";
              var leftStr = "";
              minStr = minute < 10 ? "0" + minute : minute;
              leftStr = left < 10 ? "0" + left : left;
              _this9.Text_GameName.getComponent(cc.Label).string = minStr + ":" + leftStr;
              if (visible) {
                var Mine = Number(minStr);
                _this9.Text_GameTime.getComponent(cc.Label).string = Mine <= 0 ? leftStr + " \u79d2\u672a\u5f00\u5c40\u623f\u95f4\u5c06\u89e3\u6563" : minStr + ":" + leftStr + " \u672a\u5f00\u5c40\u623f\u95f4\u5c06\u89e3\u6563";
              }
            }
          };
          this.schedule(this.timePlay, 1);
        }
      },
      ShowNetWork: function ShowNetWork(isEnable) {},
      TimeUnschedule: function TimeUnschedule() {
        this.unschedule(this.timePlay);
        this.Text_GameName.getComponent(cc.Label).string = "00:00";
        this.Text_GameTime.getComponent(cc.Label).string = " ";
      },
      setRoomPswText: function setRoomPswText(iPlayintCount, byQuanFeng) {
        var roomStr = "";
        if (this.roomInfor) {
          roomStr = roomStr + tools.stringFormat("\u623f\u53f7: {0}", this.roomInfor.deskPasswd) + "         ";
          this.Text_Homeowner.getComponent(cc.Label).string = "\u623f\u4e3b\uff1a" + this.roomInfor.masterName;
        }
        this.uiInfo && this.uiInfo.playInfo ? roomStr += "                " : roomStr = roomStr + tools.stringFormat("\u7b2c{0}\u8f6e", iPlayintCount) + "         ";
        this.roomPswText.active = true;
        this.roomPswText.getComponent(cc.Label).string = roomStr;
        this.Text_time.active = false;
        if (this.uiInfo && this.uiInfo.playInfo) {
          this.Text_time.active = false;
          this.Text_GameTime.active = false;
        }
      },
      doOtherThings: function doOtherThings(info) {
        this.roomInfor = info;
      },
      getGameRulesRs: function getGameRulesRs() {
        if (this.tableLogic.isGoldRoom() || this.tableLogic.isMatchRoom() || this.tableLogic.isBarrierMatchRoom()) {
          if (this.tableLogic.isBarrierMatchRoom()) return 2;
          return this.tableLogic.playCount;
        }
        var szGameRulesRs = RoomListManager.getCurRuleInfo();
        var jsonStr = JSON.parse(szGameRulesRs);
        return jsonStr.rs;
      },
      getGameWanfa: function getGameWanfa() {
        var gameRules = {};
        if (this.tableLogic.isGoldRoom()) return "";
        gameRules = RoomListManager.getCurRuleInfo();
        var jsonStr = {};
        jsonStr = JSON.parse(gameRules);
        var wanfa = "";
        15 == jsonStr.count ? wanfa += "\u672c\u5c40\u65f6\u957f\uff1a15\u5206\u949f " : 24 == jsonStr.count ? wanfa += "\u672c\u5c40\u65f6\u957f\uff1a24\u5206\u949f " : 30 == jsonStr.count ? wanfa += "\u672c\u5c40\u65f6\u957f\uff1a30\u5206\u949f " : 60 == jsonStr.count ? wanfa += "\u672c\u5c40\u65f6\u957f\uff1a30\u5206\u949f " : 8 == jsonStr.count ? wanfa += "\u672c\u5c40\u603b\u5c40\uff1a8\u5c40 " : 16 == jsonStr.count && (wanfa += "\u672c\u5c40\u603b\u5c40\uff1a16\u5c40 ");
        return wanfa;
      },
      onGameBeginClearUI: function onGameBeginClearUI() {
        this.clearUI();
      },
      clearUI: function clearUI() {
        this.resetAllViewToGame();
      },
      cleanSendPai: function cleanSendPai() {},
      drawCardEvent: function drawCardEvent(event) {
        var data = event;
        var play = this.getPlayer(data.uid);
        play && play.getCardInTurn(data.card, null, null, data.isBack, data.HandCard);
      },
      nextPushUidEvent: function nextPushUidEvent(event) {
        var data = event;
        0 === cc.mj.Data.turnFlag && data.uid == cc.mj.Data.uid && (cc.mj.Data.notcanPutCard = false);
        var userData = cc.mj.Data.getPlayerByKeyValue("uid", data.uid);
        var nextLocalSeatId = this.tableLogic.logicToViewSeatNo(data.deskStation);
        if (userData && this.players[nextLocalSeatId]) {
          this.turnCenterBar(true, nextLocalSeatId, data.time);
          this.setChuPaiEnabled(nextLocalSeatId);
          data.uid === cc.mj.Data.uid || cc.mj.Data.isPlayback || (cc.mj.Data.notcanPutCard = false);
        }
        GameEvent.emit("hideOverLayout");
      },
      chiEvent: function chiEvent(event) {
        var data = event;
        var play = this.getPlayer(data.uid);
        play && (this.uiInfo && this.uiInfo.playInfo ? play.chi(data.chiCard, data.curMahJongValue, data.uidd === cc.mj.Data.uid, data.isBack, data.viewSeatNoBeChi, data.handCount, data.handList) : play.chi(data.chiCard, data.curMahJongValue, data.uid === cc.mj.Data.uid, data.isBack, data.viewSeatNoBeChi, data.handCount, data.handList));
      },
      pengEvent: function pengEvent(event) {
        var data = event;
        var play = this.getPlayer(data.uid);
        play && (this.uiInfo && this.uiInfo.playInfo ? play.peng(data.pengCard, data.uidd === cc.mj.Data.uid, data.isBack, data.viewSeatNoBePeng) : play.peng(data.pengCard, data.uid === cc.mj.Data.uid, data.isBack, data.viewSeatNoBePeng));
      },
      gangEvent: function gangEvent(event) {
        var data = event;
        var play = this.getPlayer(data.uid);
        play && play.gang(data);
      },
      huEvent: function huEvent(event) {
        var data = event;
        var play = this.getPlayer(data.uid);
        var type = 3;
        data.huPaiResult && data.huPaiResult.isZiMo && (type = 4);
        var delayTime = 0;
        this.scheduleOnce(function() {
          play && play.showCardType(type);
        }, delayTime);
      },
      gameOverEvent: function gameOverEvent(event) {
        var _this10 = this;
        var data = event;
        cc.mj.Data.isGaming = false;
        for (var i = 0; i < 4; i++) this.showUserAuto(i, false);
        this.turnCenterBar(true, -1);
        this.showRestNum(true, 0);
        GameEvent.emit("onHideCtrlBtn");
        var delayTime = 0;
        event.noDelayTime && (delayTime = 0);
        this.turnCenterBar(true, 0, 60);
        this.scheduleOnce(function() {
          var goldRoom = _this10.tableLogic.isGoldRoom();
          data.mySeatNo = _this10.tableLogic.getMySeatNO();
          data.goldRoom = goldRoom;
          data.isBarrierMatchRoom = _this10.tableLogic.isBarrierMatchRoom();
          data.byMJCardType = _this10.m_byMJCardType;
          data = _this10.addPlayerBaiscInfo(data);
          _this10.showResult(data);
          _this10.showRestNum(false, 0);
          GameEvent.emit("showGameOver", data);
        }, delayTime);
      },
      roomOverEvent: function roomOverEvent(event) {
        var data = event;
        cc.mj.Data.roomResult = data;
      },
      sendStartGame: function sendStartGame() {
        for (var i = 0; i < 4; i++) this.players[i].flowerCardsdestroy();
        this.btn_Start.active = false;
        this.tableLogic.sendAgreeGame();
        this.m_bNotPrompt;
      },
      setbNotPrompt: function setbNotPrompt(isShow) {
        this.m_bNotPrompt = isShow;
      },
      reSetGame: function reSetGame() {
        cc.mj.Data.zhuangUid = null;
        cc.mj.Data.isGetedCards = false;
        cc.mj.Data.ctrlOperateData = null;
        cc.mj.Data.ghostCard = null;
        cc.mj.Data.roomResult = null;
        cc.mj.Data.isGaming = false;
        cc.mj.Data.isPlayback = false;
        cc.mj.Data.playbackData = null;
        cc.mj.Data.playbackNum = 0;
        cc.mj.Data.showCtrlBtns = null;
        cc.mj.Data.selectedCard = null;
        cc.mj.Data.notcanPutCard = null;
        cc.mj.Data.moveFlag = null;
        cc.mj.Data.isDingZhuang = null;
        cc.mj.Data.turnFlag = null;
        cc.mj.Data.showRoomOverFlag = false;
        cc.mj.Data.curPutCard = null;
        cc.mj.Data.mopaiAction = false;
        this.pointNode.active = false;
        this.players.forEach(function(p) {
          return p.reset();
        });
        GameEvent.emit("onHideCtrlBtn");
        this.btn_Start.active = false;
        this.showCurCanHUCard({});
      },
      hidehideOverLayout: function hidehideOverLayout() {
        this.overGameNode && this.overGameNode.active && GameEvent.emit("hideOverLayout");
      },
      resetAllViewToGame: function resetAllViewToGame() {
        GameEvent.emit("hideOverLayout");
        this.overGameMaskNode.active = false;
        this.showRestNum(false, 0);
        this.reSetGame();
      },
      showGameBackColor: function showGameBackColor(index) {
        0 == index ? this.back_node.color = new cc.Color(48, 110, 90) : 1 == index ? this.back_node.color = new cc.Color(38, 75, 48) : 2 == index ? this.back_node.color = new cc.Color(40, 75, 113) : 3 == index && (this.back_node.color = new cc.Color(45, 93, 90));
      },
      dealNotifyDeskUserLogonORoutRoom: function dealNotifyDeskUserLogonORoutRoom(gameMsg) {
        this.gameInforArry.push(gameMsg);
        this.playTipsAmition(this.Text_Infortips, gameMsg);
      },
      dealNotifyDeskUserIsTourist: function dealNotifyDeskUserIsTourist(info) {
        var user = info.user;
        var bTourist = info.bTourist;
        if (bTourist) {
          var isEnable = false;
          for (var index = 0; index < this.TouristInforArry.length; index++) {
            var element = this.TouristInforArry[index];
            if (element && element.userID == user.userID) {
              isEnable = true;
              break;
            }
          }
          false == isEnable && this.TouristInforArry.push(user);
        } else for (var _index14 = 0; _index14 < this.TouristInforArry.length; _index14++) {
          var _element = this.TouristInforArry[_index14];
          if (_element && _element.userID == user.userID) {
            this.TouristInforArry.splice(_index14, 1);
            break;
          }
        }
      },
      btnShareImage: function btnShareImage() {
        var userInfoList = this.tableLogic.getUserInfoListOfViewSeat();
        var layerName = "prefab/GameCreaterImage";
        this.simpleAddLayer(layerName, this.getGameRulesRs(), userInfoList);
      },
      btnGameLocation: function btnGameLocation() {
        if (!this._playInfo) {
          var userInfoList = this.tableLogic.getUserInfoListOfViewSeat();
          var layerName = "prefab/GameLocation";
          this.simpleAddLayer(layerName, this.getGameRulesRs(), userInfoList);
        }
      },
      btnGameInfor: function btnGameInfor() {
        !this._playInfo;
      },
      btnGameRuler: function btnGameRuler() {
        this.initGameRuler();
      },
      initGameRuler: function initGameRuler() {},
      requestSystemNotice: function requestSystemNotice() {
        var _this11 = this;
        var systemNoticeList = NoticeManager.getNormalNoticeList();
        var LobbyLogic = new (require("LobbyLogic"))();
        if (tableIsEmpty(systemNoticeList)) {
          var callback = function callback(result) {
            result ? _this11.startSystemNotice() : cc.log("\u83b7\u53d6\u7cfb\u7edf\u516c\u544a\u5931\u8d25.........");
          };
          LobbyLogic.requestSystemNotice(callback);
        } else this.startSystemNotice();
      },
      startSystemNotice: function startSystemNotice() {
        var systemNoticeList = NoticeManager.getNormalNoticeList();
        for (var i in systemNoticeList) {
          var a = systemNoticeList[i];
          var tempNotice = _extends({}, a);
          var NoticeContent = this.makeNoticeContent(tempNotice);
          tempNotice.content = NoticeContent.newContent;
          tempNotice.Headurl = NoticeContent.Headurl;
          if (tempNotice.type && 1 == tempNotice.type) this.noticeList.push(tempNotice); else if (tempNotice.type && 100 == tempNotice.type) {
            this.noticeList = [];
            this.noticeListSpec = [];
            this.noticeList.push(tempNotice);
            this.isShowStopSvr = true;
          } else this.noticeListSpec.push(tempNotice);
        }
        this.showNotice();
      },
      showNotice: function showNotice() {
        var _this12 = this;
        if (this.isShowNotice) return;
        var that = this;
        this.isShowNotice = true;
        var labelMove = function labelMove() {
          var noticeInfo = {};
          if (that.noticeListSpec.length > 0) noticeInfo = that.noticeListSpec[0]; else {
            if (0 == that.noticeList.length) {
              that.isShowNotice = false;
              return;
            }
            that.nPlayIndex = Math.floor(Math.random() * that.noticeList.length);
            noticeInfo = that.noticeList[that.nPlayIndex];
          }
          var Image_Bg_Notice = that.LabelNoticeNode.getChildByName("Image_Bg_Notice").getChildByName("mask");
          var LabelNoticeNode = Image_Bg_Notice.getChildByName("txt");
          that.curPlayingNode = LabelNoticeNode;
          that.curPlayingNotice = noticeInfo;
          LabelNoticeNode.getComponent(cc.RichText).string = noticeInfo.content;
          var Avata_Node = LabelNoticeNode.getChildByName("Avata_Node");
          Avata_Node.active = false;
          _this12.makeNoticePlayHead(Avata_Node, noticeInfo);
          LabelNoticeNode.getComponent(cc.RichText)._updateRichText();
          var moveX = LabelNoticeNode.width + LabelNoticeNode.parent.width + 10;
          var t_move = moveX / 128;
          var x = LabelNoticeNode.x;
          LabelNoticeNode.runAction(cc.sequence(cc.moveBy(t_move, -moveX, 0), cc.callFunc(function() {
            LabelNoticeNode.x = x;
            0 == that.curPlayingNotice.type && that.noticeListSpec.splice(0, 1);
            labelMove();
          })));
        };
        labelMove();
      },
      makeNoticeContent: function makeNoticeContent(info) {
        if ("object" != typeof info) return "";
        var nTag = info.tag;
        var newContent = info.content;
        var Headurl = "";
        var str = "        ";
        var arrContent = newContent.split("#");
        if (arrContent.length >= 1 && nTag && nTag >= 1) {
          var strName = decodeURI(arrContent[0]);
          if (nTag && 1 == nTag) if (arrContent[1]) {
            Headurl = arrContent[1];
            newContent = "\u6b22\u8fce\u7528\u6237" + str + "<color=#00FF00> " + strName + " </color>\u7684\u5230\u6765,\u8ba9\u6211\u4eec\u4e00\u8d77\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01";
          } else newContent = "\u6b22\u8fce\u7528\u6237<color=#00FF00> " + strName + " </color>\u7684\u5230\u6765,\u8ba9\u6211\u4eec\u4e00\u8d77\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01"; else if (nTag && 2 == nTag) if (arrContent[3]) {
            Headurl = arrContent[3];
            newContent = "\u606d\u559c\u7528\u6237" + str + "<color=#00FF00> " + strName + " </color>\u5728<color=#00FF00> " + arrContent[1] + " </color>\u4e2d\u8d62\u5f97<color=#00FF00> " + arrContent[2] + " </color>";
          } else newContent = "\u606d\u559c\u7528\u6237<color=#00FF00> " + strName + " </color>\u5728<color=#00FF00> " + arrContent[1] + " </color>\u4e2d\u8d62\u5f97<color=#00FF00> " + arrContent[2] + " </color>"; else if (nTag && 3 == nTag) if (arrContent[3]) {
            Headurl = arrContent[3];
            newContent = "\u606d\u559c\u7528\u6237" + str + "<color=#00FF00> " + strName + " </color>\u5728<color=#00FF00> " + arrContent[1] + " </color>\u4e2d<color=#00FF00> " + arrContent[2] + " </color>";
          } else newContent = "\u606d\u559c\u7528\u6237<color=#00FF00> " + strName + " </color>\u5728<color=#00FF00> " + arrContent[1] + " </color>\u4e2d<color=#00FF00> " + arrContent[2] + " </color>"; else if (nTag && 4 == nTag) if (arrContent[2]) {
            Headurl = arrContent[2];
            newContent = "\u7528\u6237" + str + "<color=#00FF00> " + strName + " </color>\u62a5\u540d\u4e86<color=#00FF00> " + arrContent[1] + " </color>";
          } else newContent = "\u7528\u6237<color=#00FF00> " + strName + " </color>\u62a5\u540d\u4e86<color=#00FF00> " + arrContent[1] + " </color>"; else if (nTag && 5 == nTag) if (arrContent[2]) {
            Headurl = arrContent[2];
            newContent = "\u7528\u6237" + str + "<color=#00FF00> " + strName + " </color>\u9886\u53d6\u4e86<color=#00FF00> " + arrContent[1] + " </color>";
          } else newContent = "\u7528\u6237<color=#00FF00> " + strName + " </color>\u9886\u53d6\u4e86<color=#00FF00> " + arrContent[1] + " </color>";
        }
        var NoticeContent = {};
        NoticeContent.newContent = newContent;
        NoticeContent.Headurl = Headurl;
        return NoticeContent;
      },
      makeNoticePlayHead: function makeNoticePlayHead(Avata_Node, noticeInfo) {
        var Image_Avata = Avata_Node.getChildByName("Image_Avata").getComponent(cc.Sprite);
        var nTag = noticeInfo.tag;
        var Headurl = noticeInfo.Headurl;
        if (nTag && Avata_Node && "" != Headurl) {
          if (1 == nTag || 2 == nTag || 3 == nTag) {
            Avata_Node.active = true;
            Avata_Node.x = 120;
          } else if (4 == nTag || 5 == nTag) {
            Avata_Node.active = true;
            Avata_Node.x = 75;
          }
          cc.loader.load({
            url: Headurl,
            type: "png"
          }, function(err, res) {
            if (err) {
              console.error("load remote spriteframe res failed url:" + url, err.message || err);
              return;
            }
            var sf = new cc.SpriteFrame(res);
            Image_Avata.node && cc.isValid(Image_Avata.node) && (Image_Avata.spriteFrame = sf);
          });
        }
      },
      onNormalNotice: function onNormalNotice(info) {
        if (this.isShowStopSvr) return;
        var newInfo = {};
        if ("object" != typeof info) {
          newInfo.content = info;
          newInfo.type = 1;
          this.noticeList.push(newInfo);
          this.showNotice();
          return;
        }
        newInfo = _extends({}, info);
        var NoticeContent = this.makeNoticeContent(newInfo);
        newInfo.content = NoticeContent.newContent;
        newInfo.Headurl = NoticeContent.Headurl;
        if (info.type && 1 == info.type) this.noticeList.push(newInfo); else if (info.type && 100 == info.type) {
          this.noticeList = [];
          this.noticeListSpec = [];
          this.noticeList.push(newInfo);
          this.isShowStopSvr = true;
        } else this.noticeListSpec.push(newInfo);
        this.showNotice();
      },
      showTableBtn: function showTableBtn(isViible) {
        this.btn_Table.active = false;
      },
      hideGameStatic: function hideGameStatic() {
        this.img_createrCard.active = false;
        this.loading_Start.active = false;
        this.btn_img.active = false;
        this.btn_Start.active = false;
      },
      btnGameTable: function btnGameTable() {
        var _this13 = this;
        if (!this._playInfo) {
          if (this.tableLogic.isGoldRoom()) {
            cc.log("\u91d1\u5e01\u573a\u6ca1\u6709\u6362\u684c");
            return;
          }
          var Callback = function Callback() {
            buyDesk;
            var roomInfo = RoomListManager.getRoomInfo();
            var gameID = roomInfo.gameID;
            var szGameRulesRs = RoomListManager.getCurRuleInfo();
            var jsonStr = JSON.parse(szGameRulesRs);
            var count = jsonStr.count;
            _this13.lobbyRoomLogic.buyDesk(gameID, count, szGameRulesRs);
          };
          this.tableLogic.requestCreaterDesk(Callback);
        }
      },
      setReplayUI: function setReplayUI() {
        for (var i = 0; i < this.tableLogic.playCount; i++) this.showUserReady(this.tableLogic.logicToViewSeatNo(i), false);
        this.Text_time.active = false;
        this.btn_Table.active = false;
        this.uiInfo.voiceBtn.active = false;
        this.uiInfo.voiceBtn.active = false;
        this.uiInfo.chatBtn.active = false;
      },
      onDestroy: function onDestroy() {
        this.closeEvent();
      },
      dealNotifyRandomChangeSeat: function dealNotifyRandomChangeSeat(info, Callback) {
        if (this._isInforChangeSeat) return;
        this._isInforChangeSeat = true;
        var userInfoList = this.tableLogic.getUserInfoListOfViewSeat();
        var userId = [];
        var rs = this.getGameRulesRs();
        if (2 == rs) return;
        if (4 == rs) for (var index = 0; index < this.tableLogic._logicInfo.seatCount; index++) {
          var viewSeat = this.tableLogic.logicToViewSeatNo(index);
          userId[viewSeat] = this.getUserByUserID(index, info);
        } else if (3 == rs) for (var _index15 = 0; _index15 < this.tableLogic._logicInfo.seatCount; _index15++) {
          var _viewSeat = this.tableLogic.logicToViewSeatNo(_index15);
          userId[_viewSeat] = this.getUserByUserID(_index15, info);
        }
        this.playTipsAmition(this.ChangeNode, null, 1);
        for (var i = 0; i < this.tableLogic._logicInfo.seatCount; i++) for (var j = 0; j < this.tableLogic._logicInfo.seatCount; j++) {
          var Userinfor;
          Userinfor = 3 == rs && 2 == i ? userInfoList[3] : userInfoList[i];
          var TagUserinfor;
          TagUserinfor = 3 == rs && 2 == j ? userId[3] : userId[j];
          if (Userinfor.userID == TagUserinfor.userID) {
            this.PlayMovePoint(Userinfor.deskStation, TagUserinfor.deskStation, rs);
            break;
          }
        }
        this.scheduleOnce(function() {
          Callback && Callback(info);
        }, 1);
      },
      getUserByUserID: function getUserByUserID(deskStation, info) {
        for (var i = 0; i < info.length; i++) {
          var v = info[i];
          if (v.deskStation == deskStation) return v;
        }
        return null;
      },
      PlayMovePoint: function PlayMovePoint(StartviewSeat, EndviewSeat, rs) {
        if (3 == rs) {
          2 == StartviewSeat && (StartviewSeat = 3);
          2 == EndviewSeat && (EndviewSeat = 3);
        }
        var PlayNode = this.setup_Node[StartviewSeat];
        var PlayPos = this.playPOS[EndviewSeat];
        PlayNode.runAction(cc.moveTo(.5, PlayPos.x, PlayPos.y));
      },
      playVoiceH5: function playVoiceH5(serverId) {
        this.Voice_Node.active = true;
        G_SHOW_GAME_VOICE = true;
        var callBackHide = function callfunc(localId) {
          this.Voice_Node.active = false;
          G_SHOW_GAME_VOICE = false;
        }.bind(this);
        var callBack = function callfunc(localId) {
          wx.playVoice({
            localId: localId
          });
          wx.onVoicePlayEnd({
            success: function success(res) {
              var localId = res.localId;
              callBackHide && callBackHide(localId);
            }
          });
        }.bind(this);
        wx.downloadVoice({
          serverId: serverId,
          isShowProgressTips: 0,
          success: function success(res) {
            var localId2 = res.localId;
            callBack && callBack(localId2);
          }
        });
      },
      InitWXvoiceconfig: function InitWXvoiceconfig() {
        var LobbyLogic = new (require("LobbyLogic"))();
        var userID = LobbyLogic.getUserID();
        var callback = function(data) {
          var CryptoJS = CryptoJS || function(e, m) {
            var p = {}, j = p.lib = {}, l = function l() {}, f = j.Base = {
              extend: function extend(a) {
                l.prototype = this;
                var c = new l();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function() {
                  c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
              },
              create: function create() {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
              },
              init: function init() {},
              mixIn: function mixIn(a) {
                for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
              },
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            }, n = j.WordArray = f.extend({
              init: function init(a, c) {
                a = this.words = a || [];
                this.sigBytes = c != m ? c : 4 * a.length;
              },
              toString: function toString(a) {
                return (a || h).stringify(this);
              },
              concat: function concat(a) {
                var c = this.words, q = a.words, d = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (d + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
                this.sigBytes += a;
                return this;
              },
              clamp: function clamp() {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
                a.length = e.ceil(c / 4);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a.words = this.words.slice(0);
                return a;
              },
              random: function random(a) {
                for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
                return new n.init(c, a);
              }
            }), b = p.enc = {}, h = b.Hex = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) {
                  var f = c[d >>> 2] >>> 24 - d % 4 * 8 & 255;
                  b.push((f >>> 4).toString(16));
                  b.push((15 & f).toString(16));
                }
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
                return new n.init(b, c / 2);
              }
            }, g = b.Latin1 = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - d % 4 * 8 & 255));
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (255 & a.charCodeAt(d)) << 24 - d % 4 * 8;
                return new n.init(b, c);
              }
            }, r = b.Utf8 = {
              stringify: function stringify(a) {
                try {
                  return decodeURIComponent(escape(g.stringify(a)));
                } catch (c) {
                  throw Error("Malformed UTF-8 data");
                }
              },
              parse: function parse(a) {
                return g.parse(unescape(encodeURIComponent(a)));
              }
            }, k = j.BufferedBlockAlgorithm = f.extend({
              reset: function reset() {
                this._data = new n.init();
                this._nDataBytes = 0;
              },
              _append: function _append(a) {
                "string" == typeof a && (a = r.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
              },
              _process: function _process(a) {
                var c = this._data, b = c.words, d = c.sigBytes, f = this.blockSize, h = d / (4 * f), h = a ? e.ceil(h) : e.max((0 | h) - this._minBufferSize, 0);
                a = h * f;
                d = e.min(4 * a, d);
                if (a) {
                  for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
                  g = b.splice(0, a);
                  c.sigBytes -= d;
                }
                return new n.init(g, d);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a._data = this._data.clone();
                return a;
              },
              _minBufferSize: 0
            });
            j.Hasher = k.extend({
              cfg: f.extend(),
              init: function init(a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
              },
              reset: function reset() {
                k.reset.call(this);
                this._doReset();
              },
              update: function update(a) {
                this._append(a);
                this._process();
                return this;
              },
              finalize: function finalize(a) {
                a && this._append(a);
                return this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function _createHelper(a) {
                return function(c, b) {
                  return new a.init(b).finalize(c);
                };
              },
              _createHmacHelper: function _createHmacHelper(a) {
                return function(b, f) {
                  return new s.HMAC.init(a, f).finalize(b);
                };
              }
            });
            var s = p.algo = {};
            return p;
          }(Math);
          (function() {
            var e = CryptoJS, m = e.lib, p = m.WordArray, j = m.Hasher, l = [], m = e.algo.SHA1 = j.extend({
              _doReset: function _doReset() {
                this._hash = new p.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
              },
              _doProcessBlock: function _doProcessBlock(f, n) {
                for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                  if (16 > a) l[a] = 0 | f[n + a]; else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
                    l[a] = c << 1 | c >>> 31;
                  }
                  c = (h << 5 | h >>> 27) + j + l[a];
                  c = 20 > a ? c + (1518500249 + (g & e | ~g & k)) : 40 > a ? c + (1859775393 + (g ^ e ^ k)) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);
                  j = k;
                  k = e;
                  e = g << 30 | g >>> 2;
                  g = h;
                  h = c;
                }
                b[0] = b[0] + h | 0;
                b[1] = b[1] + g | 0;
                b[2] = b[2] + e | 0;
                b[3] = b[3] + k | 0;
                b[4] = b[4] + j | 0;
              },
              _doFinalize: function _doFinalize() {
                var f = this._data, e = f.words, b = 8 * this._nDataBytes, h = 8 * f.sigBytes;
                e[h >>> 5] |= 128 << 24 - h % 32;
                e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
                e[15 + (h + 64 >>> 9 << 4)] = b;
                f.sigBytes = 4 * e.length;
                this._process();
                return this._hash;
              },
              clone: function clone() {
                var e = j.clone.call(this);
                e._hash = this._hash.clone();
                return e;
              }
            });
            e.SHA1 = j._createHelper(m);
            e.HmacSHA1 = j._createHmacHelper(m);
          })();
          var appId = WechatAppID;
          var timestamp = new Date().getTime().toString();
          var nonceStr = (1e3 * Math.random()).toString();
          var ticket = data.jsapi_ticket;
          var url = location.href.split("#")[0];
          var string = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timestamp + "&url=" + url;
          var signature = CryptoJS.SHA1(string, {
            string: true
          }).toString();
          wx.config({
            debug: false,
            appId: appId,
            timestamp: timestamp,
            nonceStr: nonceStr,
            signature: signature,
            jsApiList: [ "startRecord", "stopRecord", "playVoice", "uploadVoice", "downloadVoice", "onVoicePlayEnd", "translateVoice", "updateAppMessageShareData", "updateTimelineShareData" ]
          });
          wx.ready(function() {});
        }.bind(this);
        ConfigDataManager.getWXjsapi_ticket(userID, callback);
      },
      scheduleNETWork: function scheduleNETWork() {}
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    GameViewBase: "GameViewBase",
    HZMJ_CtrlBtns: "HZMJ_CtrlBtns",
    HZMJ_Data: "HZMJ_Data",
    HZMJ_User: "HZMJ_User",
    LobbyLogic: "LobbyLogic"
  } ],
  HZMJ_OverLayout: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bdb6TSp7tHKKDCx8JpLnCo", "HZMJ_OverLayout");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        bgMask: cc.Node,
        overView: cc.Node,
        startBtn: cc.Node,
        changeBtn: cc.Node,
        gameOver: require("HZMJ_GameOver"),
        roomOver: require("HZMJ_RoomOver")
      },
      onLoad: function onLoad() {
        GameEvent.on("showGameOver", this.initGameOver, this);
        GameEvent.on("showRoomOver", this.initRoomOver, this);
        GameEvent.on("onReady", this.readyHide, this);
        GameEvent.on("onStart", this.hide, this);
        GameEvent.on("onDealCards", this.hide, this);
        GameEvent.on("hideOverLayout", this.hide, this);
        GameEvent.on("closeGameOver", this.btnClick, this);
        GameEvent.on("shareRecord", this.shareRecord, this);
      },
      getHuType: function getHuType(hutypeInfo, idx) {
        var roomInfo = RoomListManager.getRoomInfo();
        var huInfo = "";
        if (1 == hutypeInfo) huInfo = "\u5e73\u80e11\u53f0 "; else if (2 == hutypeInfo) huInfo = "\u8fb9\u50121\u53f0 "; else if (3 == hutypeInfo) huInfo = "\u5bf9\u50121\u53f0 "; else if (4 == hutypeInfo) huInfo = "\u5d4c\u50121\u53f0 "; else if (5 == hutypeInfo) huInfo = "\u5355\u540a1\u53f0 "; else if (6 == hutypeInfo) huInfo = "\u95e8\u6e051\u53f0 "; else if (7 == hutypeInfo) huInfo = "\u81ea\u64781\u53f0 "; else if (8 == hutypeInfo) huInfo = "\u5927\u540a" + this.getGameScore(2) + " "; else if (9 == hutypeInfo) huInfo = "\u5bf9\u5bf9\u80e1" + this.getGameScore(2) + " "; else if (10 == hutypeInfo) huInfo = "\u6760\u5f001\u53f0 "; else if (11 == hutypeInfo) huInfo = "\u9001\u67601\u53f0 "; else if (12 == hutypeInfo) huInfo = "\u62c9\u67601\u53f0\u3001 "; else if (13 == hutypeInfo) {
          if (20161004 == roomInfo.gameID) return "\u5929\u80e113\u53f0";
          20211004 == roomInfo.gameID && (huInfo = "\u5929\u80e124\u53f0 ");
        } else if (14 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u5730\u80e113\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u5730\u80e112\u53f0 "); else if (15 == hutypeInfo) huInfo = "\u6e05\u4e00\u8272" + this.getGameScore(1) + " "; else if (16 == hutypeInfo) huInfo = "\u6df7\u4e00\u8272" + this.getGameScore(2) + " "; else if (17 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u5b57\u4e00\u827220\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u5b57\u4e00\u827240\u53f0 "); else if (18 == hutypeInfo) huInfo = "\u6d77\u5e95\u635e\u67081\u53f0 "; else if (19 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u4e1c\u5357\u897f\u531720\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u4e1c\u5357\u897f\u531750\u53f0 "); else if (20 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u516b\u82b113\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u516b\u82b125\u53f0 "); else if (21 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u56db\u82b18\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u56db\u82b112\u53f0 "); else if (22 == hutypeInfo) huInfo = "\u7ea2\u4e2d1\u53f0 "; else if (23 == hutypeInfo) huInfo = "\u53d1\u8d221\u53f0 "; else if (24 == hutypeInfo) huInfo = "\u767d\u677f1\u53f0 "; else if (25 == hutypeInfo) 20161004 == roomInfo.gameID ? huInfo = "\u4e2d\u53d1\u767d10\u53f0 " : 20211004 == roomInfo.gameID && (huInfo = "\u4e2d\u53d1\u767d25\u53f0 "); else if (26 == hutypeInfo) huInfo = "\u6b63\u98ce1\u53f0 "; else if (27 == hutypeInfo) huInfo = "\u5708\u98ce1\u53f0 "; else if (28 == hutypeInfo) {
          var count = 2 * this.byHuaCardCount[idx];
          huInfo = "\u6b63\u82b1" + count + "\u53f0 ";
        } else if (29 == hutypeInfo) {
          var _count = 1 * this.byWildHuaCardCount[idx];
          huInfo = "\u91ce\u82b1" + _count + "\u53f0 ";
        } else 30 == hutypeInfo ? huInfo = "\u65ad\u5e7a\u4e5d2\u53f0 " : 31 == hutypeInfo ? huInfo = "\u677f\u9ad86\u53f0 " : 32 == hutypeInfo ? huInfo = "\u592a\u677f\u9ad825\u53f0 " : 33 == hutypeInfo ? huInfo = "\u592a\u592a\u677f\u9ad850\u53f0 " : 34 == hutypeInfo ? huInfo = "\u53cc\u677f\u9ad815\u53f0 " : 35 == hutypeInfo ? huInfo = "" : 36 == hutypeInfo && (huInfo = "\u677f\u9ad812\u53f0");
        return huInfo;
      },
      getGameScore: function getGameScore(type) {
        var Infostr = "";
        var szGameRulesRs = RoomListManager.getCurRuleInfo();
        if ("" == szGameRulesRs) return Infostr;
        var jsonStr = JSON.parse(szGameRulesRs);
        var GameType = jsonStr.model;
        1 == type ? 7 == GameType ? Infostr = "10\u53f0" : 8 == GameType ? Infostr = "12\u53f0" : 9 == GameType ? Infostr = "12\u53f0" : 10 == GameType ? Infostr = "14\u53f0" : 11 == GameType ? Infostr = "16\u53f0" : 12 == GameType && (Infostr = "18\u53f0") : 2 == type && (7 == GameType ? Infostr = "8\u53f0" : 8 == GameType ? Infostr = "8\u53f0" : 9 == GameType ? Infostr = "10\u53f0" : 10 == GameType ? Infostr = "12\u53f0" : 11 == GameType ? Infostr = "14\u53f0" : 12 == GameType && (Infostr = "16\u53f0"));
        return Infostr;
      },
      genCPGData: function genCPGData(playData, userGCPData) {
        if (!userGCPData) return;
        for (var i = 0; i <= 4; i++) {
          if (!userGCPData[i]) continue;
          if (G_INVALID_BYTE_VALUE == userGCPData.byType) break;
          var bAnGang = false;
          HZMJ_MACROS_DEF.ACTION_AN_GANG == userGCPData.byType && (bAnGang = true);
          if (bAnGang) for (var k = 0; k <= 3; k++) userGCPData[i].byData[k] = userGCPData[i].byData[3];
          var pengGangValue = void 0;
          var pengGangCount = 0;
          for (var j = 0; j <= 3; j++) if (G_INVALID_BYTE_VALUE != userGCPData[i].byData[j] && 0 != userGCPData[i].byData[j]) {
            0 == j && (pengGangValue = userGCPData[i].byData[j]);
            pengGangCount++;
          }
          if (3 == pengGangCount) if (HZMJ_MACROS_DEF.ACTION_CHI == userGCPData[i].byType) for (var _j = 0; _j < 3; _j++) {
            var ChiValue = userGCPData[i].byData[_j];
            playData.ChiCards.push(ChiValue);
          } else playData.pengCards.push(pengGangValue); else 4 == pengGangCount && (bAnGang ? playData.anGangCards.push(pengGangValue) : playData.gangCards.push(pengGangValue));
        }
      },
      initGameOver: function initGameOver(event, isReplay) {
        var _this = this;
        console.log("\u724c\u5c40\u65e5\u5fd7\uff1a\u5c0f\u7ed3\u7b97\u6570\u636e\u5c55\u793a", event, isReplay);
        if (!event) return;
        var resultInfo = {
          isReplay: isReplay || false,
          mySeatNo: event.mySeatNo,
          resultType: 0,
          isGoldRoom: event.goldRoom,
          isBarrierMatchRoom: event.isBarrierMatchRoom,
          byMJCardType: event.byMJCardType,
          playsData: [],
          rewardGiftCard: event.rewardGiftCard
        };
        for (var idx = 0; idx <= HZMJ_MACROS_DEF.PLAY_COUNT - 1; idx++) {
          var resultType = event.bIsLiuJu ? 0 : event.byDianPao[idx] ? 1 : 2;
          idx == event.mySeatNo && (resultInfo.resultType = resultType);
          var playData = {
            userID: event.userID[idx],
            name: event.userName[idx],
            avatar: event.usersHeadUrl[idx],
            score: event.llGameScore[idx],
            isBanker: idx == event.byNtStation,
            byHuMode: 255,
            resultType: resultType,
            handCards: [],
            ChiCards: [],
            pengCards: [],
            gangCards: [],
            anGangCards: [],
            gangCount: 0,
            buGangCount: 0,
            anGangCount: 0,
            byTaiCount: event.byTaiCount,
            handCardCount: event.byArHandPaiCount[idx],
            byPs: event.byDianPao[idx] ? event.byPs : 255,
            byHuDouble: event.byHuDouble[idx],
            iFanCount: event.iFanCount[idx],
            iHuFen: event.iHuFen[idx],
            bycountGangFen: event.bycountGangFen[idx],
            iJiZhuangTimes: 1 == resultType ? event.iJiZhuangTimes : 255,
            byMJCardType: event.byMJCardType
          };
          for (var i = 0; i <= event.byArHandPaiCount[idx] - 1; i++) playData.handCards.push(event.byArHandPai[idx][i]);
          this.genCPGData(playData, event.UserGCPData[idx]);
          resultInfo.playsData.push(playData);
        }
        if (resultInfo.isBarrierMatchRoom) window.gameResultInfo = resultInfo; else {
          if (this.gameOver) this.gameOver.show(resultInfo); else {
            var resUrl = "HZMJ/gameOver";
            cc.loader.loadRes(resUrl, function(err, prefab) {
              if (err) {
                cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
                return;
              }
              var gameOverNode = cc.instantiate(prefab);
              gameOverNode.parent = _this.overView;
              _this.gameOver = gameOverNode.getComponent("HZMJ_GameOver");
              _this.gameOver.show(resultInfo);
            });
          }
          this.bgMask.active = true;
          this.overView.active = true;
        }
      },
      changeIndex: function changeIndex(changeData) {
        var tmp = [];
        for (var i = 0; i < changeData.length; i++) changeData[i] != G_INVALID_BYTE_VALUE && tmp.push(changeData[i]);
        return tmp;
      },
      backToHall: function backToHall() {
        console.log("\u8fd4\u56de\u5927\u5385\u8fd4\u56de\u5927\u5385");
        GameEvent.emit("onBackToLobby");
      },
      shareRecord: function shareRecord(deskPasswd, userInfoList) {
        var gameRules = RoomListManager.getCurRuleInfo();
        if ("" == gameRules) return;
        var gameID = RoomListManager.getRoomInfo().gameID;
        var layerName = "prefab/GameZhanjiCreaterImage";
        this.simpleAddLayer(layerName, gameID, deskPasswd, gameRules, userInfoList);
      },
      initRoomOver: function initRoomOver() {
        var _this2 = this;
        GameEvent.emit("hideChatDialog");
        cc.mj.Data.showRoomOverFlag = true;
        var data = cc.mj.Data.roomResult;
        this.changeType(2);
        var bigWin = {
          index: -1,
          llGameScore: 0
        };
        var playsData = [];
        var playData;
        for (var i = 0; i < HZMJ_MACROS_DEF.PLAY_COUNT; i++) {
          playData = {
            avatar: "",
            uid: "",
            nickname: "",
            llGameScore: 0,
            iHuCount: 0,
            iMingGangCount: 0,
            iAnGangCount: 0
          };
          playData.uid = data.userID[i];
          playData.nickname = data.userName[i];
          playData.avatar = data.usersHeadUrl[i];
          playData.llGameScore = data.llGameScore[i];
          playData.iHuCount = data.iHuCount[i];
          playData.iMingGangCount = data.iDianGang[i] + data.iBuGang[i];
          playData.iAnGangCount = data.iAnGangCount[i];
          playsData.push(playData);
        }
        if (this.roomOver) this.roomOver.show(data, playsData, bigWin); else {
          var resUrl = "HZMJ/roomOver";
          cc.loader.loadRes(resUrl, function(err, prefab) {
            if (err) {
              cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
              return;
            }
            var roomOverNode = cc.instantiate(prefab);
            roomOverNode.parent = _this2.overView;
            _this2.roomOver = roomOverNode.getComponent("HZMJ_RoomOver");
            _this2.roomOver.show(data, playsData, bigWin);
          });
        }
        this.bgMask.active = true;
        this.overView.active = true;
      },
      changeType: function changeType(flag) {
        this.typeFlag = flag;
        1 !== flag && this.gameOver && this.gameOver.hide();
        2 !== flag && this.roomOver && this.roomOver.hide();
      },
      btnClick: function btnClick() {
        if (cc.mj.Data.roomResult) return this.initRoomOver();
        GameEvent.emit("reSetGame");
        GameEvent.emit("sendStartGame");
        this.gameOver && this.gameOver.hide();
        this.bgMask.active = false;
        this.startBtn.active = true;
      },
      backToHome: function backToHome() {
        GameEvent.emit("onDismiss");
      },
      readyHide: function readyHide(event) {
        var data = event.getUserData().data;
        data.uid === cc.mj.Data.uid && this.hide();
      },
      hide: function hide() {
        this.bgMask.active = false;
        this.overView.active = false;
      },
      onDestroy: function onDestroy() {
        GameEvent.off("showGameOver", this.initGameOver, this);
        GameEvent.off("showRoomOver", this.initRoomOver, this);
        GameEvent.off("onReady", this.readyHide, this);
        GameEvent.off("onStart", this.hide, this);
        GameEvent.off("onDealCards", this.hide, this);
        GameEvent.off("hideOverLayout", this.hide, this);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    HZMJ_GameOver: "HZMJ_GameOver",
    HZMJ_RoomOver: "HZMJ_RoomOver"
  } ],
  HZMJ_RoomOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f258Zyh81Kgpk6Xn+5zpYj", "HZMJ_RoomOver");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        roomOverItemPre: cc.Prefab,
        roomOverPlayers: cc.Node,
        timeText: cc.Label,
        wanfaText: cc.Label,
        sumCountText: cc.Label,
        roomPswText: cc.Label
      },
      show: function show(data, playsData, bigWin) {
        var _this = this;
        this.node.active = true;
        this.roomOverPlayers.children.forEach(function(node) {
          return node.active = false;
        });
        this.userInfoList = [];
        var n_Node = this;
        playsData.forEach(function(d, i) {
          if (0 == d.uid) return;
          var node = _this.roomOverPlayers.children[i];
          if (!node) {
            node = cc.instantiate(_this.roomOverItemPre);
            _this.roomOverPlayers.addChild(node);
          }
          var userInfo = {
            name: "",
            face: "",
            score: 0
          };
          userInfo.name = d.nickname;
          userInfo.face = d.avatar;
          userInfo.score = d.llGameScore;
          n_Node.userInfoList.push(userInfo);
          if (cc.winSize.width / 1280 < 1) {
            _this.roomOverPlayers.getComponent(cc.Layout).spacingX = -70;
            _this.roomOverPlayers.getComponent(cc.Layout).paddingLeft = -40;
            node.setScale(.78);
          }
          node.getComponent("HZMJ_roomOverItem").initData(d, data.roomMastId);
          node.active = true;
          d.llGameScore > bigWin.llGameScore && (bigWin = {
            index: i,
            llGameScore: d.llGameScore
          });
        });
        -1 !== bigWin.index && this.roomOverPlayers.getComponentsInChildren("HZMJ_roomOverItem")[bigWin.index].setBigWin();
        this.timeText.string = tools.getCurTime();
        this.sumCountText.string = "\u5c40\u6570:" + data.sumCount[1];
        this.roomPswText.string = "\u623f\u95f4\u53f7:" + data.roomPsw;
        this.deskPasswd = data.roomPsw;
      },
      hide: function hide() {
        this.node.active = false;
      },
      onShareBtnClick: function onShareBtnClick() {
        GameEvent.emit("shareRecord", deskPasswd, this.userInfoList);
      },
      onBackBtnClick: function onBackBtnClick() {
        console.log("\u8fd4\u56de\u5927\u5385\u8fd4\u56de\u5927\u5385");
        GameEvent.emit("onBackToLobby");
      }
    });
    cc._RF.pop();
  }, {} ],
  HZMJ_TingTipsCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "412e1MgffxHTo5GcM7A44J0", "HZMJ_TingTipsCard");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardComponent: require("MJCommon_Card"),
        beiLvLabel: cc.Label
      },
      setViewData: function setViewData(cardValue, beiLvValue) {
        this.beiLvLabel.string = "x " + beiLvValue;
        this.cardComponent.init(cardValue, false, false, "outCard", 0);
      }
    });
    cc._RF.pop();
  }, {
    MJCommon_Card: "MJCommon_Card"
  } ],
  HZMJ_User: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0bd3c9bcmVHpZqg8m/mJ7xH", "HZMJ_User");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sitIndex: 0,
        handCards: cc.Node,
        showHandCards: cc.Node,
        pushCards: cc.Node,
        chuPai: cc.Node,
        showCurChuPai: cc.Node,
        cardType: cc.Node,
        pengGangs: cc.Node,
        pengGangsPre: cc.Prefab,
        flowerCards: cc.Node,
        flowerCardsPre: cc.Prefab,
        flowerNumber: cc.Node,
        flowerNumberPre: cc.Prefab,
        flowerCardSprite: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        this.node.active = false;
        GameEvent.on("chupai", this.chupaiEvent, this);
        GameEvent.on("initHandTouch", this.initHandTouch, this);
        if (cc.winSize.width / 1280 < 1) {
          0 != this.sitIndex ? this.handCards.setScale(.9) : this.handCards.setScale(.775);
          this.pushCards.setScale(.9);
          this.pengGangs.setScale(.9);
        }
        var frameSize = cc.view.getFrameSize();
        frameSize.width / frameSize.height > 2 && 0 == this.sitIndex && this.handCards.setScale(1.1);
      },
      onDestroy: function onDestroy() {
        GameEvent.off("chupai", this.chupaiEvent, this);
        GameEvent.off("initHandTouch", this.initHandTouch, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
      },
      initShow: function initShow(uid, byMJCardType, targetComponent) {
        this.data || (this.data = {});
        this.data.uid = uid;
        this.byMJCardType = byMJCardType;
        this.reset();
        this.node.active = true;
        this.targetComponent = targetComponent;
      },
      remove: function remove() {
        this.data = null;
        this.node.active = false;
      },
      showHandCard: function showHandCard(data) {
        var _this = this;
        if (!data || !this.data) return;
        var byMJCardType = this.byMJCardType;
        this.data.handCards = [].concat(data.handCards) || [];
        if (0 === this.sitIndex && data || cc.mj.Data.isPlayback) {
          var handCards = this.handCards.getComponentsInChildren("MJCommon_Card");
          cc.mj.Data.isPlayback && 0 !== this.sitIndex && (handCards = this.showHandCards.getComponentsInChildren("MJCommon_Card"));
          3 === this.sitIndex && (handCards = handCards.reverse());
          data.handCards.forEach(function(d, i) {
            if (handCards[i]) {
              handCards[i].init(d, false, true, "handCard", _this.sitIndex, byMJCardType);
              handCards[i].index = i;
              handCards[i].sitIndex = 0;
            }
          });
          data.drawCard && 0 !== data.drawCard && this.getCardInTurn(data.drawCard);
        } else {
          this.handCards.active = true;
          this.handCards.children.forEach(function(c, i) {
            c.active = true;
            if (1 == byMJCardType) {
              var back = c.getChildByName("bg");
              back.active = true;
            } else {
              var back = c.getChildByName("bg");
              back.active = false;
            }
          });
          3 === this.sitIndex ? this.handCards.children[0].active = false : this.handCards.children[13].active = false;
        }
      },
      getCardInTurn: function getCardInTurn(card, noAdd, fn, isBack, HandCard) {
        if (isBack) {
          3 === this.sitIndex ? this.showHandCards.children[0].active = false : 0 === this.sitIndex ? this.handCards.children[13].active = false : this.showHandCards.children[13].active = false;
          this.data.handCards = [].concat(this.lastHandCards);
        }
        var cardNode = null;
        if (0 === this.sitIndex) {
          HandCard ? this.copyCard(HandCard) : this.addCard(card);
          cardNode = this.handCards.children[13].getComponent("MJCommon_Card");
          cardNode.init(card, false, true, "handCard", this.sitIndex, this.byMJCardType);
          cardNode.index = 13;
          cardNode.sitIndex = this.sitIndex;
        } else {
          var handCard = this.handCards;
          if (cc.mj.Data.isPlayback) {
            handCard = this.showHandCards;
            HandCard ? this.copyCard(HandCard) : this.addCard(card);
          }
          switch (this.sitIndex) {
           case 3:
            cardNode = handCard.children[0].getComponent("MJCommon_Card");
            cardNode.node.active = true;
            cc.mj.Data.isPlayback && cardNode.init(card, false, false, "handCard", this.sitIndex, this.byMJCardType);
            cardNode.node.y += 20;
            break;

           case 2:
            cardNode = handCard.children[13].getComponent("MJCommon_Card");
            cardNode.node.active = true;
            cc.mj.Data.isPlayback && cardNode.init(card, false, false, "handCard", this.sitIndex, this.byMJCardType);
            cardNode.node.x -= 20;
            break;

           case 1:
            cardNode = handCard.children[13].getComponent("MJCommon_Card");
            cardNode.node.active = true;
            cc.mj.Data.isPlayback && cardNode.init(card, false, false, "handCard", this.sitIndex, this.byMJCardType);
            cardNode.node.y -= 20;
          }
          cardNode.sitIndex = this.sitIndex;
        }
        this.currMoPai = cardNode;
      },
      addCard: function addCard(card) {
        this.lastHandCards = [].concat(this.data.handCards);
        this.data.handCards.push(card);
      },
      copyCard: function copyCard(card) {
        this.lastHandCards = [].concat(this.data.handCards);
        this.data.handCards = [];
        for (var i = 0; i < 14; i++) this.data.handCards.push(card[i]);
      },
      chupaiEvent: function chupaiEvent(event) {
        var data = event;
        if (this.data && data.uid === this.data.uid) {
          cc.log("\u76f8\u540c");
          if (!this.curChupaiEventTime || new Date().getTime() - this.curChupaiEventTime > 500) {
            this.chupaied = false;
            this.setChupai(data.card, data.isBack, data.handList);
            this.curChupaiEventTime = new Date().getTime();
          }
        } else cc.log("\u4e0d\u76f8\u540c");
      },
      setChupai: function setChupai(pai, isBack, handList) {
        if (isBack) return this.chupaiAction(pai, true, isBack);
        if (this.chupaied) return;
        this.chupaied = true;
        cc.mj.Data.curPlayer = this;
        this.chupaiAction(pai, null, null, handList);
        0 === this.sitIndex || cc.mj.Data.isPlayback || this.initHandCards();
      },
      serverChupai: function serverChupai(pai) {
        var curChupai = this.curChupai.getComponent("MJCommon_Card");
        if (curChupai && curChupai.id !== pai) {
          this.chuPai && (this.chuPai.active = false);
          this.initHandCards();
          curChupai.init(pai);
        }
      },
      setHandCard: function setHandCard(byhandCards) {
        this.data.handCards = [];
        for (var i = 0; i < 14; i++) this.data.handCards.push(byhandCards[i]);
        this.initHandCards();
      },
      chupaiAction: function chupaiAction(pai, noAction, isBack, handList) {
        if (isBack) {
          this.lastPutCard && (this.pushCards.children[this.lastPutCard].active = false);
          this.data.handCards = [].concat(this.lastHandCards);
          return;
        }
        var putCard = null;
        var PCNodes = this.pushCards.children;
        var roomPName = 4;
        var szGameRulesRs = RoomListManager.getCurRuleInfo();
        if ("" !== szGameRulesRs) {
          var jsonStr = JSON.parse(szGameRulesRs);
          roomPName = jsonStr.rs;
        }
        var sa = [];
        var aFlag = true;
        if (0 == this.sitIndex) 2 == roomPName ? sa = [ [ 0, 19 ], [ 20, 39 ], [ 40, 54 ] ] : 3 == roomPName ? sa = [ [ 5, 14 ], [ 25, 34 ], [ 45, 54 ] ] : 4 == roomPName && (sa = [ [ 5, 14 ], [ 25, 34 ], [ 45, 54 ] ]); else if (1 == this.sitIndex) sa = 3 == roomPName ? [ [ 1, 10 ], [ 13, 22 ], [ 25, 34 ] ] : [ [ 1, 10 ], [ 13, 22 ], [ 28, 33 ] ]; else if (2 == this.sitIndex) {
          aFlag = false;
          2 == roomPName ? sa = [ [ 54, 35 ], [ 34, 15 ], [ 14, 0 ] ] : 3 == roomPName ? sa = [ [ 49, 40 ], [ 29, 20 ], [ 9, 0 ] ] : 4 == roomPName && (sa = [ [ 49, 40 ], [ 29, 20 ], [ 9, 0 ] ]);
        } else if (3 == this.sitIndex) {
          aFlag = false;
          sa = (3 == roomPName, [ [ 33, 24 ], [ 21, 12 ], [ 9, 1 ] ]);
        }
        for (var i = 0; i < sa.length; i++) {
          if (putCard) break;
          if (aFlag) {
            for (var j = sa[i][0]; j <= sa[i][1]; j++) if (!PCNodes[j].active) {
              putCard = PCNodes[j];
              this.lastPutCard = j;
              break;
            }
          } else for (var _j = sa[i][0]; _j >= sa[i][1]; _j--) if (!PCNodes[_j].active) {
            putCard = PCNodes[_j];
            this.lastPutCard = _j;
            break;
          }
        }
        if (putCard) {
          this.curChupai = putCard;
          putCard.getComponent("MJCommon_Card").init(pai, true, false, "outCard", this.sitIndex, this.byMJCardType);
        }
        if (!noAction) {
          this.curChupai && (this.curChupai.active = false);
          this.chuPai.oldPos || (this.chuPai.oldPos = this.chuPai.getPosition());
          this.chuPai.getComponentInChildren("MJCommon_Card").init(pai, false, false, "handCard", 0, this.byMJCardType);
          this.showCurChuPai.getComponentInChildren("MJCommon_Card").init(pai, false, false, "handCard", 0, this.byMJCardType);
          this.chuPai && (this.chuPai.active = true);
          var worldPos = cc.v2(0, 0);
          if (0 === this.sitIndex) {
            var target = cc.mj.Data.selectedCard;
            if (target && pai === target.id) target = cc.mj.Data.selectedCard.node; else {
              var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
              target = cards.find(function(c) {
                return c.id >= pai;
              });
              target ? target = target.node : this.currMoPai && (target = this.currMoPai.node);
            }
            this.lastHandCards = [].concat(this.data.handCards);
            worldPos = target.convertToWorldSpaceAR(cc.v2(0, 0));
            cc.mj.Data.isWatchMode ? this.removeHandCard(255) : this.removeHandCard(pai);
            this.moveHand();
          } else {
            this.currMoPai && (worldPos = this.currMoPai.node.convertToWorldSpaceAR(cc.v2(0, 0)));
            if (cc.mj.Data.isPlayback) {
              this.lastHandCards = [].concat(this.data.handCards);
              this.removeHandCard(pai);
              this.moveHand();
            }
          }
          this.moveCardToPut();
        }
      },
      setHideCurChuPai: function setHideCurChuPai(isHide) {
        void 0 === isHide && (isHide = true);
        this.showCurChuPai.active && (this.showCurChuPai.active = false);
      },
      moveCardToPut: function moveCardToPut() {
        var _this2 = this;
        if (this.chuPai && this.curChupai) {
          this.showCurChuPai.active = false;
          var Node = this.showCurChuPai;
          var moveEnd = function() {
            Node.active = false;
          }.bind(this);
          var m_time = .1;
          var callFunc = cc.callFunc(moveEnd);
          var a1 = cc.delayTime(m_time);
          Node.runAction(cc.sequence(a1, callFunc));
          var worldPos = this.curChupai.convertToWorldSpaceAR(cc.v2(0, 0));
          var startPos = this.chuPai.parent.convertToNodeSpaceAR(worldPos);
          this.chuPai.runAction(cc.sequence(cc.moveTo(.15, startPos), cc.scaleTo(.06, .5), cc.callFunc(function() {
            _this2.chuPai.active = false;
            _this2.curChupai && (_this2.curChupai.active = true);
            GameEvent.emit("movePoint", {
              flag: true,
              worldPos: _this2.curChupai.convertToWorldSpaceAR(cc.v2(0, 0)),
              deviation: _this2.sitIndex
            });
          })));
        }
      },
      removeHandCard: function removeHandCard(id) {
        if (cc.mj.Data.curPutCard && cc.mj.Data.curPutCard.id === id) cc.mj.Data.curPutCard.hide(); else {
          var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
          cc.mj.Data.isPlayback && 0 !== this.sitIndex && (cards = this.showHandCards.getComponentsInChildren("MJCommon_Card"));
          for (var i = 0; i < cards.length; i++) if (cards[i].id === id) {
            cards[i].hide();
            break;
          }
        }
        for (var _i = 0; _i < this.data.handCards.length; _i++) if (this.data.handCards[_i] === id) return this.data.handCards.splice(_i, 1);
      },
      moveHand: function moveHand() {
        var _this3 = this;
        if (cc.mj.Data.isPlayback) return this.initHandCards();
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        var card = cards[cards.length - 1];
        1 === this.sitIndex && (card = cards[0]);
        if (!card.node.active) return this.initHandCards(this.data.handCards);
        var putCard = cc.mj.Data.curPutCard;
        putCard && !putCard.num && (putCard.num = cards.indexOf(putCard));
        if (!putCard) return this.initHandCards();
        var index = cards.indexOf(cards.find(function(c) {
          return c.id >= card.id;
        }));
        var target = cards[index];
        if (index > putCard.num) {
          if (card.id < target.id) {
            index -= 1;
            target = cards[index];
          }
          cards.forEach(function(c, i) {
            i > putCard.num && i <= index && c.node.runAction(cc.moveTo(.12, c.node.x - c.node.width, c.node.y));
          });
        } else index < putCard.num && cards.forEach(function(c, i) {
          i >= index && i < putCard.num && c.node.runAction(cc.moveTo(.12, c.node.x + c.node.width, c.node.y));
        });
        13 === index || putCard.num <= 12 && 12 === index ? card.node.runAction(cc.sequence(cc.moveTo(.12, target.oldPos.x, 0), cc.callFunc(function() {
          cards.forEach(function(card) {
            card.oldPos && card.node.setPosition(card.oldPos);
          });
          _this3.initHandCards();
        }))) : card.node.runAction(cc.sequence(cc.spawn(cc.moveTo(.1, card.node.x, 120), cc.rotateBy(.01, 15)), cc.moveTo(.12, target.oldPos.x, 120), cc.spawn(cc.moveTo(.1, target.oldPos.x, 0), cc.rotateBy(.01, 0)), cc.callFunc(function() {
          cards.forEach(function(card) {
            card.oldPos && card.node.setPosition(card.oldPos);
          });
          _this3.initHandCards();
        })));
        this.initHandTouch();
      },
      initHandTouch: function initHandTouch() {
        if (0 !== this.sitIndex) return;
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        cards.forEach(function(card) {
          if (card.isUnEnabled) cc.log("\u9650\u5236\u51fa\u724c"); else {
            card.isSelected = false;
            card.node.y = 0;
            card.node.color = cc.Color.WHITE;
          }
        });
      },
      setChuPaiEnabled: function setChuPaiEnabled(isEnable) {
        if (0 !== this.sitIndex) return;
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        for (var i = 0; i < cards.length; i++) cards[i].setChuPaiEnabled(isEnable);
      },
      showTingsanjiao: function showTingsanjiao(cardValue, isEnable) {
        void 0 === isEnable && (isEnable = true);
        if (0 !== this.sitIndex) return;
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        for (var i = 0; i < cards.length; i++) isEnable ? cards[i].id === cardValue && cards[i].showTingsanjiao(true) : cards[i].showTingsanjiao(false);
      },
      checkhandCardList: function checkhandCardList(cardValue) {
        if (0 !== this.sitIndex) return;
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        for (var i = 0; i < cards.length; i++) cards[i].id === cardValue && cards[i].setPaiEnabled(false);
      },
      CanlehandCardColor: function CanlehandCardColor() {
        if (0 !== this.sitIndex) return;
        var cards = this.handCards.getComponentsInChildren("MJCommon_Card");
        for (var i = 0; i < cards.length; i++) cards[i].setPaiEnabled(true);
      },
      setShowAllPengGang: function setShowAllPengGang(isShow) {
        void 0 === isShow && (isShow = false);
        this.pengGangs.active = isShow;
      },
      initHandCards: function initHandCards(cards, isHide) {
        var _this4 = this;
        cards = cards || this.data.handCards;
        this.handCards.active = true;
        var data = this.data;
        cards && 0 === this.sitIndex && (data.handCards = cards.sort(function(a, b) {
          return a - b;
        }));
        cc.mj.Data.isPlayback && 0 !== this.sitIndex && (data.handCards = cards.sort(function(a, b) {
          return a - b;
        }));
        var holds = data.handCards;
        var lackingNum = 3 * (data.pengCards.length + data.anGangCards.length + data.gangCards.length) + data.chiCards.length;
        var myCards;
        myCards = cc.mj.Data.isPlayback && 0 !== this.sitIndex ? this.showHandCards.getComponentsInChildren("MJCommon_Card") : this.handCards.getComponentsInChildren("MJCommon_Card");
        myCards.forEach(function(card) {
          card.reset();
          card.sitIndex = _this4.sitIndex;
        });
        if (0 === this.sitIndex || cc.mj.Data.isPlayback) {
          3 === this.sitIndex && (myCards = myCards.reverse());
          var byMJCardType = this.byMJCardType;
          holds.forEach(function(id, i) {
            var card = myCards[i + lackingNum];
            if (card) {
              card.init(id, false, true, "handCard", _this4.sitIndex, byMJCardType);
              card.index = i;
              card.sitIndex = _this4.sitIndex;
              isHide && card.hide();
            }
          });
          lackingNum > 13 && (cc, log("ERROR"));
          var cardWordP = myCards[lackingNum].node.convertToWorldSpaceAR(cc.v2(0, 0));
          var cardNodeP = this.pengGangs.parent.convertToNodeSpaceAR(cardWordP);
          0 == this.sitIndex ? this.pengGangs.x = cardNodeP.x - 70 : 3 === this.sitIndex ? (cc.mj.Data.isPlayback, 
          this.pengGangs.y = cardNodeP.y - 40) : 2 === this.sitIndex ? this.pengGangs.x = cardNodeP.x + 30 : this.pengGangs.y = cardNodeP.y + 40;
        } else {
          var handCards = myCards;
          3 === this.sitIndex && (handCards = myCards.reverse());
          if (!(handCards && handCards.length && handCards[lackingNum])) return;
          var _cardWordP = handCards[lackingNum].node.convertToWorldSpaceAR(cc.v2(0, 0));
          var _cardNodeP = this.pengGangs.parent.convertToNodeSpaceAR(_cardWordP);
          3 === this.sitIndex ? this.pengGangs.y = _cardNodeP.y - 40 : 2 === this.sitIndex ? this.pengGangs.x = _cardNodeP.x + 30 : this.pengGangs.y = _cardNodeP.y + 40;
          for (var i = lackingNum; i < handCards.length - 1; i++) {
            var card = handCards[i];
            card.index = i;
            card.oldPos && card.node.setPosition(card.oldPos);
            card.node.active = true;
            isHide && card.hide();
          }
        }
      },
      ShowPlayHandCard: function ShowPlayHandCard(byArHandPai, byArHandPaiCount, byDianPao, byPs) {
        console.log("ShowPlayHandCard " + this.node.name + " " + this.sitIndex, byArHandPai, byArHandPaiCount);
        var m_byArHandPaiCount = 0;
        var handCards;
        if (byDianPao) {
          var m_handCards = [];
          for (var i = 0; i < 14; i++) 255 != byArHandPai[i] && m_handCards.push(byArHandPai[i]);
          m_handCards.push(byPs);
          m_byArHandPaiCount = byArHandPaiCount + 1;
          handCards = m_handCards;
        } else {
          m_byArHandPaiCount = byArHandPaiCount;
          handCards = byArHandPai;
        }
        var data = this.data;
        var lackingNum = 3 * (data.pengCards.length + data.anGangCards.length + data.gangCards.length) + data.chiCards.length;
        var cards;
        if (0 == this.sitIndex) cards = this.handCards.getComponentsInChildren("MJCommon_Card"); else {
          cards = this.showHandCards.getComponentsInChildren("MJCommon_Card");
          3 === this.sitIndex && (cards = cards.reverse());
          this.handCards.active = false;
          this.showHandCards && (this.showHandCards.active = true);
        }
        var byMJCardType = this.byMJCardType;
        var m_sitIndex = this.sitIndex;
        handCards.forEach(function(id, i) {
          if (i + 1 > m_byArHandPaiCount) return;
          var index = i + lackingNum;
          var card = cards[index];
          if (card) {
            card.init(id, false, true, "handCard", m_sitIndex, byMJCardType);
            card.index = index;
            card.sitIndex = m_sitIndex;
            i + 1 == m_byArHandPaiCount && true == byDianPao && (1 === m_sitIndex ? card.node.y -= 20 : 2 === m_sitIndex ? card.node.x -= 20 : 3 === m_sitIndex && (card.node.y += 20));
            console.log("\u663e\u793a\u660e\u724c", m_sitIndex, lackingNum, index, id);
          }
        });
      },
      playGameAudio: function playGameAudio(type) {
        this.targetComponent.playGameVoice(this.sitIndex, type);
      },
      showCardType: function showCardType(type) {
        var typeName = "peng";
        switch (type) {
         case 0:
          typeName = "Chi";
          break;

         case 1:
          typeName = "Peng";
          break;

         case 2:
          typeName = "Gang";
          break;

         case 3:
          typeName = "Hu";
          break;

         case 4:
          typeName = "ZiMo";
          break;

         case 5:
          typeName = "Ting";
        }
        this.playGameAudio(typeName);
        this.targetComponent.playSkelenAnimation(typeName, false, null, this.cardType, typeName);
      },
      showGangHuType: function showGangHuType(type) {
        var typeName = "Peng";
        switch (type) {
         case 0:
          typeName = "Chi";
          break;

         case 1:
          typeName = "Peng";
          break;

         case 2:
          typeName = "Gang";
          break;

         case 3:
          typeName = "Hu";
          break;

         case 4:
          typeName = "ZiMo";
          break;

         case 5:
          typeName = "Ting";
        }
        this.targetComponent.playSkelenAnimation(typeName, false, null, this.cardType, typeName);
      },
      setChiPengGang: function setChiPengGang(pai, count, type, isBack, viewSeatNoBePengGang, isChi, curMahJongValue) {
        var _this5 = this;
        void 0 === isBack && (isBack = false);
        var nodes = this.pengGangs.children.find(function(node) {
          return node.pai == pai;
        });
        nodes || (nodes = this.pengGangs.children.find(function(node) {
          return !node.active;
        }));
        if (isBack && nodes) {
          2 === type ? nodes.getChildByName("topCard").active = false : nodes.active = false;
          return;
        }
        if (!nodes) {
          nodes = cc.instantiate(this.pengGangsPre);
          this.pengGangs.addChild(nodes);
        }
        nodes.active = true;
        nodes.pai = pai;
        var cards = nodes.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        cards.push(nodes.getChildByName("topCard").getComponent("MJCommon_Card"));
        var byMJCardType = this.byMJCardType;
        cards.forEach(function(card, i) {
          card.node.active = false;
          if (i + 1 > count) return;
          0 == _this5.sitIndex ? isChi ? card.init(pai[i], true, false, "daoCard", _this5.sitIndex, byMJCardType) : card.init(pai, true, false, "daoCard", _this5.sitIndex, byMJCardType) : isChi ? card.init(pai[i], false, false, "daoCard", _this5.sitIndex, byMJCardType) : card.init(pai, false, false, "daoCard", _this5.sitIndex, byMJCardType);
          3 == count && 1 == type ? 1 == i && _this5.setCardColor(card, viewSeatNoBePengGang) : 3 == count && 5 == type ? pai[i] == curMahJongValue && _this5.setCardColor(card, viewSeatNoBePengGang) : 4 == count && 1 == type && 3 == i && _this5.setCardColor(card, viewSeatNoBePengGang);
        });
        nodes.getChildByName("backCards").active = false;
        nodes.getChildByName("backCards2").active = false;
        if (3 == type) {
          nodes.getChildByName("backCards").active = true;
          1 == this.byMJCardType ? nodes.getChildByName("backCards2").active = true : nodes.getChildByName("backCards2").active = false;
        }
      },
      setCardColor: function setCardColor(card, viewSeatNoBePengGang) {
        0 == this.sitIndex ? card.node.color = cc.color(180, 180, 180) : card.node.color = cc.color(130, 130, 130);
        0 == this.sitIndex ? 1 == viewSeatNoBePengGang ? card.setImageTag(true, 0) : 2 == viewSeatNoBePengGang ? card.setImageTag(true, 90) : 3 == viewSeatNoBePengGang && card.setImageTag(true, 180) : 1 == this.sitIndex ? 0 == viewSeatNoBePengGang ? card.setImageTag(true, 270) : 2 == viewSeatNoBePengGang ? card.setImageTag(true, 90) : 3 == viewSeatNoBePengGang && card.setImageTag(true, 180) : 2 == this.sitIndex ? 0 == viewSeatNoBePengGang ? card.setImageTag(true, 270) : 1 == viewSeatNoBePengGang ? card.setImageTag(true, 0) : 3 == viewSeatNoBePengGang && card.setImageTag(true, 180) : 3 == this.sitIndex && (0 == viewSeatNoBePengGang ? card.setImageTag(true, 270) : 1 == viewSeatNoBePengGang ? card.setImageTag(true, 0) : 2 == viewSeatNoBePengGang && card.setImageTag(true, 90));
      },
      setflowerCard: function setflowerCard(viewSeat, pai, byHuaCardCount, byWildHuaCardCount, isBack) {
        void 0 === isBack && (isBack = false);
        var count = byHuaCardCount + byWildHuaCardCount;
        var nodes = this.flowerCards.children.find(function(node) {
          return node.pai == pai;
        });
        nodes || (nodes = this.flowerCards.children.find(function(node) {
          return !node.active;
        }));
        this.flowerCards.children.forEach(function(node, index) {
          node.destroy();
        });
        var flowerNode = this.flowerNumber.children.find(function(node) {
          return node.pai == pai;
        });
        flowerNode || (flowerNode = this.flowerNumber.children.find(function(node) {
          return !node.active;
        }));
        this.flowerNumber.children.forEach(function(node, index) {
          node.destroy();
        });
        if (!nodes) {
          nodes = cc.instantiate(this.flowerCardsPre);
          this.flowerCards.addChild(nodes);
        }
        if (!flowerNode) {
          flowerNode = cc.instantiate(this.flowerNumberPre);
          this.flowerNumber.addChild(flowerNode);
        }
        nodes.active = true;
        nodes.pai = pai;
        flowerNode.active = true;
        flowerNode.pai = pai;
        var image_just = flowerNode.getChildByName("image_just");
        image_just.active = false;
        var image_wild = flowerNode.getChildByName("image_wild");
        image_wild.active = false;
        if (byHuaCardCount > 0) {
          image_just.active = true;
          image_just.getChildByName("num").getComponent(cc.Sprite).spriteFrame = this.flowerCardSprite[byHuaCardCount];
        }
        if (byWildHuaCardCount > 0) {
          image_wild.active = true;
          image_wild.getChildByName("num").getComponent(cc.Sprite).spriteFrame = this.flowerCardSprite[byWildHuaCardCount];
        }
        if (3 === this.sitIndex) {
          var _cards = nodes.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
          _cards.forEach(function(card, i) {
            card.node.zIndex = 100 - i;
          });
        }
        var byMJCardType = this.byMJCardType;
        var cards = nodes.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        cards.forEach(function(card, i) {
          card.node.active = false;
          if (i + 1 > count) return;
          0 == viewSeat ? card.init(pai[i], true, false, "outCard", viewSeat, byMJCardType) : card.init(pai[i], false, false, "outCard", viewSeat, byMJCardType);
        });
      },
      chi: function chi(pai, curMahJongValue, isMe, isBack, viewSeatNoBeChi, handCount, handList) {
        if (isMe || cc.mj.Data.isPlayback && !isBack) {
          this.lastHandCards = [].concat(this.data.handCards);
          for (var i = 0; i < 3; i++) pai[i] != curMahJongValue && this._removeArrayChi(this.data.handCards, pai[i]);
        }
        if (isBack) {
          this.data.handCards = [].concat(this.lastHandCards);
          this.data.chiCards = [].concat(this.lastChiCards);
        } else for (var _i2 = 0; _i2 < pai.length - 1; _i2++) {
          this.lastChiCards = [].concat(this.data.chiCards);
          this.data.chiCards.push(pai[_i2]);
        }
        this.setChiPengGang(pai, 3, 5, isBack, viewSeatNoBeChi, true, curMahJongValue);
        this.initHandCards();
        if (isBack) return;
        if (0 === this.sitIndex) {
          var handCards = this.handCards.children;
          for (var _i3 = handCards.length - 1; _i3 >= 0; _i3--) if (handCards[_i3].active) {
            handCards[_i3].x -= 20;
            handCards[_i3].getComponent("MJCommon_Card").index = 13;
            break;
          }
        }
        this.showCardType(0);
        GameEvent.emit("movePoint", {
          flag: false
        });
        if (cc.mj.Data.curPlayer && cc.mj.Data.curPlayer.curChupai) {
          cc.mj.Data.curPlayer.curChupai.active = false;
          cc.mj.Data.curPlayer.curChupai = null;
        }
      },
      peng: function peng(pai, isMe, isBack, viewSeatNoBePeng) {
        if (isMe || cc.mj.Data.isPlayback && !isBack) {
          var count = {};
          this.data.handCards.forEach(function(item) {
            count[item] ? count[item]++ : count[item] = 1;
          });
          this.lastHandCards = [].concat(this.data.handCards);
          this._removeArray(this.data.handCards, pai);
          3 === count[pai + ""] && this.data.handCards.push(pai);
        }
        if (isBack) {
          this.data.handCards = [].concat(this.lastHandCards);
          this.data.pengCards = [].concat(this.lastPengCards);
        } else {
          this._removeArray(this.data.pengCards, pai);
          this.lastPengCards = [].concat(this.data.pengCards);
          this.data.pengCards.push(pai);
        }
        this.setChiPengGang(pai, 3, 1, isBack, viewSeatNoBePeng, false);
        this.initHandCards();
        if (isBack) return;
        if (0 === this.sitIndex) {
          var handCards = this.handCards.children;
          for (var i = handCards.length - 1; i >= 0; i--) if (handCards[i].active) {
            handCards[i].getComponent("MJCommon_Card").index = 13;
            break;
          }
        }
        this.showCardType(1);
        GameEvent.emit("movePoint", {
          flag: false
        });
        if (cc.mj.Data.curPlayer && cc.mj.Data.curPlayer.curChupai) {
          cc.mj.Data.curPlayer.curChupai.active = false;
          cc.mj.Data.curPlayer.curChupai = null;
        }
      },
      gang: function gang(data) {
        var type = data.type;
        var pai = data.card || data.pengCard;
        var isBack = data.isBack;
        var viewSeatNoBeGang = data.viewSeatNoBeGang;
        if (!isBack) if (3 === type) {
          this._removeArray(this.data.anGangCards, pai);
          this.lastAnGangCards = [].concat(this.data.anGangCards);
          this.data.anGangCards.push(pai);
        } else {
          this._removeArray(this.data.gangCards, pai);
          this.lastGangCards = [].concat(this.data.gangCards);
          this.data.gangCards.push(pai);
        }
        this.setChiPengGang(pai, 4, type, isBack, viewSeatNoBeGang, false);
        if (isBack) {
          this.data.pengCards = [].concat(this.lastPengCards);
          this.data.anGangCards = [].concat(this.lastAnGangCards);
          this.data.gangCards = [].concat(this.lastGangCards);
          this.data.handCards = [].concat(this.lastHandCards);
        } else {
          this.lastPengCards = [].concat(this.data.pengCards);
          this._removeArray(this.data.pengCards, pai);
          this.lastHandCards = [].concat(this.data.handCards);
          this._removeArray(this.data.handCards, pai);
        }
        this.initHandCards();
        if (isBack) return;
        this.showCardType(2);
        GameEvent.emit("movePoint", {
          flag: false
        });
        if (cc.mj.Data.curPlayer && cc.mj.Data.curPlayer.curChupai && 2 !== type && 3 !== type) {
          cc.mj.Data.curPlayer.curChupai.active = false;
          cc.mj.Data.curPlayer.curChupai = null;
        }
      },
      _removeArray: function _removeArray(array, id) {
        if (!array || !array.length) return;
        while (true) {
          var indexFlag = false;
          for (var i = 0; i < array.length; i++) if (array[i] === id) {
            indexFlag = true;
            array.splice(i, 1);
            break;
          }
          if (!indexFlag) break;
        }
      },
      _removeArrayChi: function _removeArrayChi(array, id) {
        if (!array || !array.length) return;
        for (var i = 0; i < array.length; i++) if (array[i] === id) {
          array.splice(i, 1);
          return;
        }
      },
      flowerCardsdestroy: function flowerCardsdestroy() {
        this.flowerCards && this.flowerCards.children.forEach(function(node, index) {
          node.destroy();
        });
        this.flowerNumber && this.flowerNumber.children.forEach(function(node, index) {
          node.destroy();
        });
      },
      reset: function reset() {
        this.handCards.children.forEach(function(c) {
          return c.active = false;
        });
        this.showHandCards && this.showHandCards.children.forEach(function(c) {
          return c.active = false;
        });
        this.pushCards.children.forEach(function(c) {
          return c.active = false;
        });
        this.pengGangs.children.forEach(function(c) {
          return c.active = false;
        });
        if (this.data) {
          this.data.handCards = [];
          this.data.pengCards = [];
          this.data.chiCards = [];
          this.data.gangCards = [];
          this.data.anGangCards = [];
        }
        this.lastHandCards = null;
        this.lastPutCard = null;
        this.lastPengCards = null;
        this.lastChiCards = null;
        this.lastGangCards = null;
        this.lastAnGangCards = null;
        this.chuPai && (this.chuPai.active = false);
        this.showCurChuPai && (this.showCurChuPai.active = false);
        this.curChupai = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  HZMJ_gameOverItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a37159RSc5KOpr3D4nK10sZ", "HZMJ_gameOverItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ruleLabel: cc.Label,
        cardsNode: cc.Node,
        penGangPre: cc.Prefab,
        countLabel: cc.Label
      },
      initData: function initData(data) {
        var _this = this;
        var pengCards = this.cardsNode.getChildByName("penGangs");
        var showCards = this.cardsNode.getChildByName("showCards");
        this.byMJCardType = data.byMJCardType;
        pengCards.children.forEach(function(c) {
          return c.active = false;
        });
        showCards.children.forEach(function(c) {
          return c.active = false;
        });
        var gangLength = 0;
        data.anGangCards.forEach(function(g, i) {
          _this.addPenGang(gangLength, 3, g, pengCards);
          gangLength += 1;
        });
        data.gangCards.forEach(function(g, i) {
          _this.addPenGang(gangLength, 2, g, pengCards);
          gangLength += 1;
        });
        data.pengCards.forEach(function(g, i) {
          _this.addPenGang(gangLength, 1, g, pengCards);
          gangLength += 1;
        });
        data.ChiCards.forEach(function(g, i) {
          if (3 == data.ChiCards.length) {
            if (0 == i) {
              var datas = [];
              for (var index = 0; index < 3; index++) datas.push(data.ChiCards[index]);
              _this.addChi(gangLength, 1, datas, pengCards);
              gangLength += 1;
            }
          } else if (6 == data.ChiCards.length) {
            if (0 == i) {
              var _datas = [];
              for (var _index = 0; _index < 3; _index++) _datas.push(data.ChiCards[_index]);
              _this.addChi(gangLength, 1, _datas, pengCards);
              gangLength += 1;
            }
            if (4 == i) {
              var _datas2 = [];
              for (var _index2 = 3; _index2 < 6; _index2++) _datas2.push(data.ChiCards[_index2]);
              _this.addChi(gangLength, 1, _datas2, pengCards);
              gangLength += 1;
            }
          } else if (9 == data.ChiCards.length) {
            if (0 == i) {
              var _datas3 = [];
              for (var _index3 = 0; _index3 < 3; _index3++) _datas3.push(data.ChiCards[_index3]);
              _this.addChi(gangLength, 1, _datas3, pengCards);
              gangLength += 1;
            }
            if (3 == i) {
              var _datas4 = [];
              for (var _index4 = 3; _index4 < 6; _index4++) _datas4.push(data.ChiCards[_index4]);
              _this.addChi(gangLength, 1, _datas4, pengCards);
              gangLength += 1;
            }
            if (6 == i) {
              var _datas5 = [];
              for (var _index5 = 6; _index5 < 9; _index5++) _datas5.push(data.ChiCards[_index5]);
              _this.addChi(gangLength, 1, _datas5, pengCards);
              gangLength += 1;
            }
          } else if (12 == data.ChiCards.length) {
            if (0 == i) {
              var _datas6 = [];
              for (var _index6 = 0; _index6 < 3; _index6++) _datas6.push(data.ChiCards[_index6]);
              _this.addChi(gangLength, 1, _datas6, pengCards);
              gangLength += 1;
            }
            if (3 == i) {
              var _datas7 = [];
              for (var _index7 = 3; _index7 < 6; _index7++) _datas7.push(data.ChiCards[_index7]);
              _this.addChi(gangLength, 1, _datas7, pengCards);
              gangLength += 1;
            }
            if (6 == i) {
              var _datas8 = [];
              for (var _index8 = 6; _index8 < 9; _index8++) _datas8.push(data.ChiCards[_index8]);
              _this.addChi(gangLength, 1, _datas8, pengCards);
              gangLength += 1;
            }
            if (9 == i) {
              var _datas9 = [];
              for (var _index9 = 9; _index9 < 12; _index9++) _datas9.push(data.ChiCards[_index9]);
              _this.addChi(gangLength, 1, _datas9, pengCards);
              gangLength += 1;
            }
          } else if (15 == data.ChiCards.length) {
            if (0 == i) {
              var _datas10 = [];
              for (var _index10 = 0; _index10 < 3; _index10++) _datas10.push(data.ChiCards[_index10]);
              _this.addChi(gangLength, 1, _datas10, pengCards);
              gangLength += 1;
            }
            if (3 == i) {
              var _datas11 = [];
              for (var _index11 = 3; _index11 < 6; _index11++) _datas11.push(data.ChiCards[_index11]);
              _this.addChi(gangLength, 1, _datas11, pengCards);
              gangLength += 1;
            }
            if (6 == i) {
              var _datas12 = [];
              for (var _index12 = 6; _index12 < 9; _index12++) _datas12.push(data.ChiCards[_index12]);
              _this.addChi(gangLength, 1, _datas12, pengCards);
              gangLength += 1;
            }
            if (9 == i) {
              var _datas13 = [];
              for (var _index13 = 9; _index13 < 12; _index13++) _datas13.push(data.ChiCards[_index13]);
              _this.addChi(gangLength, 1, _datas13, pengCards);
              gangLength += 1;
            }
            if (12 == i) {
              var _datas14 = [];
              for (var _index14 = 12; _index14 < 15; _index14++) _datas14.push(data.ChiCards[_index14]);
              _this.addChi(gangLength, 1, _datas14, pengCards);
              gangLength += 1;
            }
          }
        });
        var byMJCardType = this.byMJCardType;
        var handCardCount = data.handCardCount;
        data.handCards.forEach(function(c, i) {
          var node = showCards.children[i];
          node.active = true;
          node.getComponent("MJCommon_Card").init(c, false, false, "outCard", 0, byMJCardType);
          i >= handCardCount && (node.x += 10);
        });
        data.isBanker;
        var ruleStr = "";
        var fanStr = "";
        if (1 == data.resultType) {
          fanStr = "\u500d\u6570:" + data.iFanCount + "\u500d";
          var paixing = "";
          var s = HZMJ_HUTYPE_NAME_DEF[1];
          for (var index = 0; index < 4; index++) 255 != data.byHuDouble[index] && (paixing = paixing + " " + HZMJ_HUTYPE_NAME_DEF[data.byHuDouble[index]]);
          var a = "  ";
          var gangfen = "\u6760\u5206\u6570:" + data.bycountGangFen + "\u5206";
          var hu = "\u80e1\u724c\u5206\u6570:" + data.iHuFen + "\u5206";
          var jizhuan = "";
          2 == data.iJiZhuangTimes && (jizhuan = " \u6025\u8f6c");
          ruleStr = a + "\u724c\u578b:" + paixing + a + gangfen + a + hu + jizhuan;
        }
        this.countLabel.string = fanStr;
        this.ruleLabel.string = ruleStr;
      },
      addPenGang: function addPenGang(index, type, pai, pengCards) {
        var node = pengCards.children[index];
        if (!node) {
          node = cc.instantiate(this.penGangPre);
          pengCards.addChild(node);
        }
        node.active = true;
        var cards = node.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        var backCards = node.getChildByName("backCards");
        var backCards2 = node.getChildByName("backCards2");
        var topCard = node.getChildByName("topCard");
        cards.push(topCard.getComponent("MJCommon_Card"));
        var byMJCardType = this.byMJCardType;
        cards.forEach(function(card) {
          card.node.active = false;
          card.init(pai, false, false, "outCard", 0, byMJCardType);
        });
        backCards.active = false;
        backCards2.active = false;
        if (3 == type) {
          backCards.active = true;
          1 == this.byMJCardType ? backCards2.active = true : backCards2.active = false;
        }
        topCard.active = 1 !== type;
      },
      addChi: function addChi(index, type, pai, pengCards) {
        var node = pengCards.children[index];
        if (!node) {
          node = cc.instantiate(this.penGangPre);
          pengCards.addChild(node);
        }
        node.active = true;
        var cards = node.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        var backCards = node.getChildByName("backCards");
        var backCards2 = node.getChildByName("backCards2");
        var topCard = node.getChildByName("topCard");
        cards.push(topCard.getComponent("MJCommon_Card"));
        var byMJCardType = this.byMJCardType;
        cards.forEach(function(card, i) {
          card.node.active = false;
          card.init(pai[i], false, false, "outCard", 0, byMJCardType);
        });
        backCards.active = 3 === type;
        backCards2.active = false;
        topCard.active = 1 !== type;
      }
    });
    cc._RF.pop();
  }, {} ],
  HZMJ_roomOverItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "766fep8R51I0ISA+b5e64zS", "HZMJ_roomOverItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        infoNodes: [ cc.Node ],
        resultNodes: cc.Node
      },
      initData: function initData(data, roomMastId) {
        this.infoNodes.forEach(function(i) {
          return i.active = false;
        });
        var infoNode = this.infoNodes[0];
        var headerImg = infoNode.getChildByName("header").children[0].children[0].getComponent(cc.Sprite);
        var nameLabel = infoNode.getChildByName("nickName").getComponent(cc.Label);
        var idLabel = infoNode.getChildByName("id").getComponent(cc.Label);
        var hpLabel = infoNode.getChildByName("hp").getComponent(cc.Label);
        var mgLabel = infoNode.getChildByName("mg").getComponent(cc.Label);
        var agLabel = infoNode.getChildByName("ag").getComponent(cc.Label);
        var scoreLabel = infoNode.getChildByName("scoreLabel").getComponent(cc.Label);
        var roomMasterNode = infoNode.getChildByName("roomMaster");
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          headerImg && (headerImg.spriteFrame = avataRes);
        });
        nameLabel.string = data.nickname;
        idLabel.string = "ID:" + data.uid;
        hpLabel.string = "" + data.iHuCount;
        mgLabel.string = "" + data.iMingGangCount;
        agLabel.string = "" + data.iAnGangCount;
        var roomInfo = RoomListManager.getRoomInfo();
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? scoreLabel.string = F_GetMoneyDisplay(data.llGameScore, 2) : scoreLabel.string = data.llGameScore;
        data.totalScore > 0 && (scoreLabel.string = "+" + scoreLabel.string);
        infoNode.active = true;
        this.resultNodes.children.forEach(function(r) {
          return r.active = false;
        });
        data.uid == roomMastId ? roomMasterNode.active = true : roomMasterNode.active = false;
      },
      setBigWin: function setBigWin() {
        this.resultNodes.getChildByName("icon_winner").active = true;
      }
    });
    cc._RF.pop();
  }, {} ],
  HisRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf5108tAGNOw5frKzKyeGoA", "HisRecord");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        panel_record: cc.ScrollView,
        prefab_record: cc.Prefab,
        page_text: cc.Label,
        buttonPre: cc.Button,
        buttonNext: cc.Button,
        node_jiangjin: cc.Node,
        node_lishi: cc.Node
      },
      init: function init(tag) {
        if ("lishi" == tag) {
          this.node_jiangjin.active = false;
          this.node_lishi.active = true;
        } else {
          this.node_jiangjin.active = true;
          this.node_lishi.active = false;
        }
        this.panleRecordContent = this.panel_record.content;
        this.PAGE_COUNT_Record = 8;
        this.curPage_Record = 0;
        this.maxPage_Record = 0;
        this.setPageInfo();
      },
      setPageInfo: function setPageInfo() {
        var Text_Page = this.page_text;
        var Button_Pre = this.buttonPre;
        var Button_Next = this.buttonNext;
        var curPage = this.curPage_Record;
        var maxPage = this.maxPage_Record;
        Text_Page.string = curPage + " / " + maxPage;
        Button_Pre.interactable = !(curPage <= 1);
        Button_Next.interactable = !(curPage >= maxPage);
      },
      onButtonPre: function onButtonPre() {
        this.curPage_Record = this.curPage_Record - 1;
        this.curPage_Record <= 0 && (this.curPage_Record = 1);
        this.requestInfo();
      },
      onButtonNext: function onButtonNext() {
        this.curPage_Record = this.curPage_Record + 1;
        this.curPage_Record > this.maxPage_Record && (this.curPage_Record = this.maxPage_Record);
        this.requestInfo();
      },
      start: function start() {},
      requestInfo: function requestInfo() {
        var _this = this;
        MatchManager.requestMatchRankRecordList(this.curPage_Record, this.PAGE_COUNT_Record, function(info) {
          var rankList = info.data;
          if (void 0 == info.page) {
            _this.buttonPre.active = false;
            _this.buttonNext.active = false;
            _this.page_text.active = false;
          } else {
            _this.buttonPre.active = true;
            _this.buttonNext.active = true;
            _this.page_text.active = true;
            _this.curPage_Record = Number(info.page || 1);
            _this.maxPage_Record = Number(info.totalPage || 1);
            if (0 == info.totalPage) {
              info.page = 0;
              _this.curPage_Record = 0;
              _this.maxPage_Record = 0;
            }
            _this.setPageInfo();
          }
          _this.panleRecordContent.children.forEach(function(node) {
            node.destroy();
          });
          for (var i = 0; i < rankList.length; i++) {
            var matchRank = cc.instantiate(_this.prefab_record);
            _this.panleRecordContent.addChild(matchRank);
            matchRank.getComponent("Item_DuanWei_Record").setData(rankList[i]);
          }
        });
      },
      onEnable: function onEnable() {
        this.requestInfo();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  HttpConst: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0b53cWcOpFSbwQ3DYPoYyX", "HttpConst");
    "use strict";
    var HttpConst = {
      web: "http://192.168.1.227",
      GameInfoAddress: "/API/index.php?action=GetGameInfo",
      RoomInfoAddress: "/API/index.php?action=GetRoomInfo"
    };
    module.exports = HttpConst;
    cc._RF.pop();
  }, {} ],
  HttpHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8bd56djgO9E6YhmaKQNO4BX", "HttpHelper");
    "use strict";
    var HttpHelper = {
      get: function get(url, params, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", url + params, true);
        xhr.onreadystatechange = function(request) {
          if (2 == xhr.readyState || 3 == xhr.readyState) ; else if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207) {
            var httpStatus = xhr.statusText;
            var response = xhr.responseText;
            callback(false, response);
          } else callback(true, response);
        };
        xhr.send();
      },
      post: function post(url, params, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("POST", url);
        var err = false;
        xhr.onreadystatechange = function() {
          2 == xhr.readyState || 3 == xhr.readyState || (err = !(4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207));
          var response = xhr.responseText;
          callback(err, response);
        };
        xhr.send(params);
      }
    };
    module.exports = HttpHelper;
    cc._RF.pop();
  }, {} ],
  InviteCodeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a71fpc2wBJnonWuf+AKI3f", "InviteCodeManager");
    "use strict";
    var API = "agent";
    var InviteCodeManager = cc.Class({
      ctor: function ctor() {
        this.InviteCodeInfo = {};
      },
      getInviteCodeInfo: function getInviteCodeInfo(userID, callback) {
        var _this = this;
        if (!this.InviteCodeInfo) return callback(true);
        var actionName = "bindInviteInfo";
        var fCallback = function fCallback() {
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            console.log(">>>>>InviteCodeInfoInviteCodeInfoInviteCodeInfo>");
            _this.InviteCodeInfo = jsonData.data;
            callback && callback(true);
          } else createTips(jsonData.msg);
        };
        var args = [];
        args.params = {
          api: API,
          action: actionName,
          userID: userID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.requestDesc = "\u83b7\u53d6\u9080\u8bf7\u7801\u4fe1\u606f";
        MyHttpRequest.doRequest(args);
      },
      bindInviteCode: function bindInviteCode(userID, inviteCode, callback) {
        var _this2 = this;
        if (this.InviteCodeInfo && "undefined" != typeof this.InviteCodeInfo.agentID && "" != this.InviteCodeInfo.agentID) {
          createTips("\u5df2\u7ecf\u7ed1\u5b9a\u9080\u8bf7\u7801");
          callback(false);
          return;
        }
        var actionName = "bindInviteCode";
        var fCallback = function fCallback() {
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            console.log(">>>>>>>>>>this.InviteCodeInfo" + JSON.stringify(_this2.InviteCodeInfo));
            console.log(">>>>>>>>>>this.InviteCodeInfo" + inviteCode);
            _this2.InviteCodeInfo.agentID = inviteCode;
            callback(true);
          } else createTips(jsonData.msg);
        };
        var args = [];
        args.params = {
          api: API,
          action: actionName,
          userID: userID,
          inviteCode: inviteCode
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.requestDesc = "\u8bf7\u6c42\u7ed1\u5b9a\u9080\u8bf7\u7801";
        MyHttpRequest.doRequest(args);
      },
      getMyInviteCodeInfo: function getMyInviteCodeInfo() {
        console.log(">>>>>>>>>>>>>>>>>>>>>this.InviteCodeInfothis.InviteCodeInfothis.InviteCodeInfo" + this.InviteCodeInfo);
        console.log(">>>>>>>>>>>>>>>>>>>>>this.InviteCodeInfothis.InviteCodeInfothis.InviteCodeInfo" + JSON.stringify(this.InviteCodeInfo));
        return this.InviteCodeInfo;
      }
    });
    module.exports = InviteCodeManager;
    cc._RF.pop();
  }, {} ],
  InviteFriendDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "398b56OzM1I76kDGMD/+UPV", "InviteFriendDialog");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  InviteLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7461MMDIZBPaJsx22Ml82A", "InviteLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        editBox: cc.EditBox,
        btnBind: cc.Node,
        tipRichText: cc.RichText,
        editText: cc.Label
      },
      initUIData: function initUIData() {
        var _this = this;
        var getInviteCodeInfoCallback = function getInviteCodeInfoCallback(result) {
          result && _this.showInviteCodeInfo();
        };
        this.InviteLogic.getInviteCodeInfo(getInviteCodeInfoCallback);
      },
      onEnable: function onEnable() {
        this.initUIData();
      },
      onLoad: function onLoad() {
        this.InviteLogic = new (require("InviteLogic"))();
      },
      closeBtn: function closeBtn() {
        this.node.destroy();
      },
      touchButton: function touchButton() {
        var _this2 = this;
        var input = this.editBox.string;
        if ("" == input) return createTips("\u8bf7\u8f93\u5165\u9080\u8bf7\u7801");
        var bindInviteCodeCallback = function bindInviteCodeCallback(result) {
          _this2.onCloseBtn();
          result && _this2.showInviteCodeInfo();
        };
        this.InviteLogic.bindInviteCode(input, bindInviteCodeCallback);
      },
      showInviteCodeInfo: function showInviteCodeInfo() {
        var InviteCodeInfo = this.InviteLogic.getMyInviteCodeInfo();
        var jewels = ConfigDataManager.getConfigDataByKey("bind_agentID_send_jewels", 10);
        if (this.tipRichText) {
          var tipStr = "<color=#B05919>\u8d60\u9001</c>";
          jewels > 0 && (tipStr += "<color=#FF3333>" + jewels + "</color><color=#B05919>\u9897\u94bb\u77f3</c>");
          this.tipRichText.string = tipStr;
        }
        if (InviteCodeInfo.agentID) {
          this.btnBind.getComponent(cc.Button).interactable = false;
          this.editBox.string = InviteCodeInfo.agentID + "";
          this.editBox.node.active = false;
          this.editText && (this.editText.string = InviteCodeInfo.agentID + "");
        } else {
          this.btnBind.getComponent(cc.Button).interactable = true;
          this.editBox.node.active = true;
          this.editText && (this.editText.string = "");
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    InviteLogic: "InviteLogic"
  } ],
  InviteLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8fd125gz75G95g8Md+EEzyJ", "InviteLogic");
    "use strict";
    cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {},
      getInviteCodeInfo: function getInviteCodeInfo(callback) {
        InviteCodeManager.getInviteCodeInfo(this.getUserID(), callback);
      },
      bindInviteCode: function bindInviteCode(inviteCode, callback) {
        InviteCodeManager.bindInviteCode(this.getUserID(), inviteCode, callback);
      },
      getMyInviteCodeInfo: function getMyInviteCodeInfo() {
        return InviteCodeManager.getMyInviteCodeInfo();
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  ItemListManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1563airacxEqKAsLIVJrpya", "ItemListManager");
    "use strict";
    var API = "pay";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      properties: {},
      ctor: function ctor() {
        this.diamondItemList = [];
        this.goldItemList = [];
        this.propItemList = [];
        this.substanceList = [];
      },
      getItemById: function getItemById(shopId) {
        var item = this.getDiamondItemById(shopId);
        item || (item = this.getGoldItemById(shopId));
        item || (item = this.getPropItemById(shopId));
        item || (item = this.getSubstanceItemById(shopId));
        return item;
      },
      getDiamondItemById: function getDiamondItemById(shopId) {
        for (var k in this.diamondItemList) {
          var v = this.diamondItemList[k];
          if (v.itemId == shopId) return tools.copyTable(v);
        }
        return null;
      },
      getGoldItemById: function getGoldItemById(shopId) {
        for (var k in this.goldItemList) {
          var v = this.goldItemList[k];
          if (v.itemId == shopId) return v;
        }
        return null;
      },
      getPropItemById: function getPropItemById(shopId) {
        for (var k in this.propItemList) {
          var v = this.propItemList[k];
          if (v.itemId == shopId) return v;
        }
        return null;
      },
      getSubstanceItemById: function getSubstanceItemById(shopId) {
        for (var k in this.substanceList) {
          var v = this.substanceList[k];
          if (v.itemId == shopId) return v;
        }
        return null;
      },
      requestDiamondItemList: function requestDiamondItemList(callback) {
        var _this = this;
        if (0 == this.diamondItemList.length) {
          var actionName = "goodsList";
          var fCallback = function fCallback() {
            createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
          };
          var sCallback = function sCallback(jsonData) {
            if (0 == jsonData.status) {
              _this.diamondItemList = jsonData.data;
              callback && callback(_this.diamondItemList);
            } else createTips(jsonData.msg);
          };
          var args = {};
          args.params = {
            api: API,
            action: actionName,
            goodsType: E_ItemType.DIAMOND,
            userID: UserInfoManager.getMyInfo().userID
          };
          args.fCallback = fCallback;
          args.sCallback = sCallback;
          MyHttpRequest.doRequest(args);
        } else callback(this.diamondItemList);
      },
      requestGoldItemList: function requestGoldItemList(callback) {
        var _this2 = this;
        if (0 == this.goldItemList.length) {
          var actionName = "goodsList";
          var fCallback = function fCallback() {
            createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
          };
          var sCallback = function sCallback(jsonData) {
            if (0 == jsonData.status) {
              _this2.goldItemList = jsonData.data;
              callback && callback(_this2.goldItemList);
            } else createTips(jsonData.msg);
          };
          var args = {};
          args.params = {
            api: API,
            action: actionName,
            goodsType: E_ItemType.GOLD,
            userID: UserInfoManager.getMyInfo().userID
          };
          args.fCallback = fCallback;
          args.sCallback = sCallback;
          MyHttpRequest.doRequest(args);
        } else callback(this.goldItemList);
      },
      requestPropItemList: function requestPropItemList(callback) {
        var _this3 = this;
        if (0 == this.propItemList.length) {
          var actionName = "goodsList";
          var fCallback = function fCallback() {
            createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
          };
          var sCallback = function sCallback(jsonData) {
            if (0 == jsonData.status) {
              _this3.propItemList = jsonData.data;
              callback && callback(_this3.propItemList);
            } else createTips(jsonData.msg);
          };
          var args = {};
          args.params = {
            api: API,
            action: actionName,
            goodsType: E_ItemType.PROP,
            userID: UserInfoManager.getMyInfo().userID
          };
          args.fCallback = fCallback;
          args.sCallback = sCallback;
          MyHttpRequest.doRequest(args);
        } else callback(this.propItemList);
      },
      requestSubstanceItemList: function requestSubstanceItemList(callback) {
        var _this4 = this;
        if (0 == this.substanceList.length) {
          var actionName = "goodsList";
          var fCallback = function fCallback() {
            createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
          };
          var sCallback = function sCallback(jsonData) {
            if (0 == jsonData.status) {
              _this4.substanceList = jsonData.data;
              callback && callback(_this4.substanceList);
            } else createTips(jsonData.msg);
          };
          var args = {};
          args.params = {
            api: API,
            action: actionName,
            goodsType: E_ItemType.SUBSTANCE,
            userID: UserInfoManager.getMyInfo().userID
          };
          args.fCallback = fCallback;
          args.sCallback = sCallback;
          MyHttpRequest.doRequest(args);
        } else callback(this.substanceList);
      },
      getGoldPicIndexByNum: function getGoldPicIndexByNum(num) {
        var index = 6;
        var goldList = [ 1e3, 2e3, 5e3, 1e4, 5e4 ];
        for (var i = 1; i <= goldList.length; i++) {
          var min = goldList[i - 1] || 0;
          var max = goldList[i];
          if (num > min && num <= max) {
            index = i;
            break;
          }
        }
        return index;
      },
      getCardPicIndexByNum: function getCardPicIndexByNum(num) {
        var index = 6;
        var cardList = [ 1, 2, 5, 10, 50 ];
        for (var i = 1; i <= cardList.length; i++) {
          var min = cardList[i - 1] || 0;
          var max = cardList[i];
          if (num > min && num <= max) {
            index = i;
            break;
          }
        }
        return index;
      },
      clear: function clear() {
        this.diamondItemList = [];
        this.goldItemList = [];
        this.propItemList = [];
        this.substanceList = [];
        instance = null;
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  Item_ChuangGuan_Award: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2af5bwUBC1NWLYKhTwGGKx4", "Item_ChuangGuan_Award");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        guanqiaIndex: cc.Label,
        guanqiaChu: cc.Label,
        guanqiaZhong: cc.Label,
        guanqiaGao: cc.Label,
        guanqiaZhizun: cc.Label
      },
      setData: function setData(infoData) {
        if (1 == infoData.level) {
          this.guanqiaChu.string = infoData.money + "";
          this.guanqiaIndex.string = "\u521d\u7ea7\u7b2c" + infoData.checkpoint + "\u5173";
        }
        if (2 == infoData.level) {
          this.guanqiaZhong.string = infoData.money + "";
          this.guanqiaIndex.string = "\u4e2d\u7ea7\u7b2c" + infoData.checkpoint + "\u5173";
        }
        if (3 == infoData.level) {
          this.guanqiaGao.string = infoData.money + "";
          this.guanqiaIndex.string = "\u9ad8\u7ea7\u7b2c" + infoData.checkpoint + "\u5173";
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Item_DuanWei_Award: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0b05ggBtRKursftOYqnv6A", "Item_DuanWei_Award");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankLevelName: cc.Label,
        rankLevelImage: cc.Sprite,
        rankImages: [ cc.SpriteFrame ],
        rankState: cc.Label,
        rankAward: cc.Label
      },
      setData: function setData(infoData) {
        this.rankLevelName.string = infoData.remark + "";
        this.rankLevelImage.spriteFrame = this.rankImages[parseInt(infoData.level / 5)];
        this.rankAward.string = infoData.award;
        var userLevel = UserInfoManager.getMyInfo().UserLevel;
        userLevel >= infoData.level + 1 ? this.rankState.string = curFinishState[1] : this.rankState.string = curFinishState[0];
      }
    });
    cc._RF.pop();
  }, {} ],
  Item_DuanWei_Rank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "152ebBHfxxJAJVmm+H7qUA6", "Item_DuanWei_Rank");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        rankIndex: cc.Label,
        rankName: cc.Label,
        rankAvata: cc.Sprite,
        rankLevelName: cc.Label,
        rankLevelImage: cc.Sprite,
        rankImages: [ cc.SpriteFrame ],
        awardText: cc.Label,
        gameExpText: cc.Label
      },
      setData: function setData(infoData, rankIndex) {
        this.rankIndex.string = rankIndex + "";
        this.rankName.string = infoData.name + "";
        this.rankLevelName.string = infoData.levelName + "";
        this.awardText.string = infoData.award + "";
        this.gameExpText.string = infoData.gameExp + "";
        var onGetHeadRes = function(avataRes) {
          this.rankAvata && (this.rankAvata.spriteFrame = avataRes);
        }.bind(this);
        AvatarManager.requestHeadRes(infoData.headURL, infoData.userID, onGetHeadRes, null);
        this.rankLevelImage.spriteFrame = this.rankImages[parseInt(infoData.level / 5)];
      }
    });
    cc._RF.pop();
  }, {} ],
  Item_DuanWei_Record: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d1ffEVautDpIKCAKvvZxdT", "Item_DuanWei_Record");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        recordSaiJi: cc.Label,
        recordDuanWei: cc.Label,
        recordAward: cc.Label,
        recordTime: cc.Label
      },
      setData: function setData(infoData) {
        this.recordSaiJi.string = infoData.sequence;
        this.recordDuanWei.string = infoData.levelName + "";
        this.recordAward.string = infoData.money + "";
        this.recordTime.string = infoData.receive_time + "";
      }
    });
    cc._RF.pop();
  }, {} ],
  JoinRoomDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c1636vFeqZI+KhtT1o30jZB", "JoinRoomDialog");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        nums: [ cc.Label ],
        annimetions: cc.Node
      },
      onLoad: function onLoad() {
        this.onClear();
      },
      start: function start() {
        var _this = this;
        setTimeout(function() {
          _this.annimetions && cc.isValid(_this.annimetions) && (_this.annimetions.active = true);
        }, 2500);
      },
      init: function init() {},
      onNumClick: function onNumClick(event, data) {
        var code = "";
        console.log("\u65e5\u5fd7:" + data);
        for (var i = 0; i < this.nums.length; i++) {
          code += this.nums[i].string;
          if ("" == this.nums[i].string) {
            this.nums[i].string = data;
            code += this.nums[i].string;
            5 == i && this.sendJoinRoom(code);
            break;
          }
        }
      },
      sendJoinRoom: function sendJoinRoom(input) {
        cc.log("JoinRoomLayer:sendJoinRoom[input = {0}]", input);
        var callback = function callback() {
          loadsceneRes("Texture", function() {});
        };
        this.LobbyRoomLogic = new (require("LobbyRoomLogic"))();
        this.LobbyRoomLogic.joinRoom(input, callback);
      },
      onClear: function onClear() {
        for (var i = this.nums.length - 1; i >= 0; i--) this.nums[i].string = "";
      },
      onBack: function onBack() {
        for (var i = this.nums.length - 1; i >= 0; i--) if ("" != this.nums[i].string) {
          this.nums[i].string = "";
          return;
        }
      },
      onButtonClick: function onButtonClick(event, param) {
        switch (param) {
         case "Button_Num_1":
         case "Button_Num_2":
         case "Button_Num_3":
         case "Button_Num_4":
         case "Button_Num_5":
         case "Button_Num_6":
         case "Button_Num_7":
         case "Button_Num_8":
         case "Button_Num_9":
         case "Button_Num_0":
         case "Button_Reset":
         case "Button_Del":
         case "Button_Bg_Box":
          break;

         case "Button_Bg":
          this.node.parent = null;
        }
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyRoomLogic: "LobbyRoomLogic"
  } ],
  JsbMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "266365pGwlACIeh2WYHNvE4", "JsbMgr");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        magicWindowRoomId: 0
      },
      getNetState: function getNetState() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var code = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getNetState", "()I");
          return 0 == code;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          var result = jsb.reflection.callStaticMethod("NativeJSForOC", "getNetState");
          return "2" != result;
        }
        return true;
      },
      getNetType: function getNetType() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var code = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getNetWorkType", "()Ljava/lang/String;");
          if ("4" == code) return "wifi";
          if ("0" == code) return "null";
          if ("1" == code || "2" == code) return "2G";
          if ("3" == code) return "3G";
          return "4G";
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          var result = jsb.reflection.callStaticMethod("NativeJSForOC", "getNetState");
          if ("2" == result) return "null";
          if ("0" == result) return "wifi";
          if ("1" == result) return "4G";
        }
        return "wifi";
      },
      getIsWifi: function getIsWifi() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var code = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "isWifi", "()Ljava/lang/String;");
          return code;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          var result = jsb.reflection.callStaticMethod("NativeJSForOC", "getNetState");
          return "0" == result ? "1" : "0";
        }
      },
      setLocalStorageToNative: function setLocalStorageToNative(key, value) {
        if (cc.sys.OS_ANDROID == cc.sys.os) try {
          jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "jsToSetLocalStorageData", "(Ljava/lang/String;Ljava/lang/String;)V", key, value);
        } catch (e) {} else if (cc.sys.os == cc.sys.OS_IOS) try {
          jsb.reflection.callStaticMethod("AppController", "jsToSetLocalStorageData:value:", key + "", value + "");
        } catch (e) {}
      },
      getBatteryPercent: function getBatteryPercent() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var result = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getBatteryPercent", "()I");
          return result;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          var batteryPer = jsb.reflection.callStaticMethod("NativeJSForOC", "getBatteryPercent");
          if (null != batteryPer && batteryPer.length > 0) return parseInt(batteryPer);
        }
        return 80;
      },
      getPingNum: function getPingNum() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var result = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getPingNum", "(Ljava/lang/String;)I", cc.wsfp.serverUrl);
          return result >= 3 ? 20 : 2 == result ? 100 : 200;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          var _result = jsb.reflection.callStaticMethod("NativeJSForOC", "getSignalStrengthVoid");
          if (null != _result && _result.length > 0) {
            _result = parseInt(_result);
            return _result >= 3 ? 20 : 2 == _result ? 100 : 200;
          }
          return 20;
        }
        return 100;
      },
      getStrFromClipboard: function getStrFromClipboard() {
        if (cc.sys.OS_ANDROID == cc.sys.os) return jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getStrFromClipboard", "()Ljava/lang/String;");
        if (cc.sys.os == cc.sys.OS_IOS) return jsb.reflection.callStaticMethod("NativeJSForOC", "getStrFromClipboard");
        return "";
      },
      clearClipboard: function clearClipboard() {
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "clearClipboard", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeJSForOC", "clearClipboard");
      },
      copyToClipboard: function copyToClipboard(strData) {
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "copyToClipboard", "(Ljava/lang/String;)V", strData) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeJSForOC", "copyToClipboard:", strData + "");
      },
      getIp: function getIp() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          var result = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "getIp", "()Ljava/lang/String;");
          return result;
        }
        if (cc.sys.os == cc.sys.OS_IOS) return jsb.reflection.callStaticMethod("NativeJSForOC", "getIp");
        return "127.0.0.1";
      },
      wxLogin: function wxLogin() {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "wxLogin", "()V");
          return;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          jsb.reflection.callStaticMethod("NativeJSForOC", "wxLogin");
          return;
        }
      },
      shareText: function shareText(text, type) {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "wxShareText", "(Ljava/lang/String;I)V", text, type);
          return;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          jsb.reflection.callStaticMethod("NativeJSForOC", "wxShareText:shareType:", text + "", type + "");
          return;
        }
      },
      shareUrl: function shareUrl(url, title, desc, type) {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "wxShareUrl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", url, title, desc, type);
          return;
        }
        if (cc.sys.os == cc.sys.OS_IOS) {
          jsb.reflection.callStaticMethod("NativeJSForOC", "wxShareRoom:shareTitle:shareDescription:shareType:", url, title, desc, type + "");
          return;
        }
      },
      shareImg: function shareImg(imagePath, type) {
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "wxShareImg", "(Ljava/lang/String;I)V", imagePath, type);
          return;
        }
        if (cc.sys.os == cc.sys.OS_IOS) try {
          jsb.reflection.callStaticMethod("NativeJSForOC", "wxShareImg:shareType:", imagePath + "", type + "");
          return;
        } catch (e) {}
      },
      setScreenDirection: function setScreenDirection(code) {
        cc.log(">><<\u8bbe\u7f6e\u5b89\u5353activity\u7684\u5c4f\u5e55\u65b9\u5411\u8bbe\u7f6e\u5b89\u5353activity\u7684\u5c4f\u5e55\u65b9\u5411\u8bbe\u7f6e\u5b89\u5353activity\u7684\u5c4f\u5e55\u65b9\u5411<" + code);
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "setOpritation", "(I)V", code) : cc.sys.os == cc.sys.OS_IOS;
      },
      toastToJava: function toastToJava(msg, isSuccess) {
        void 0 === isSuccess && (isSuccess = false);
        cc.log("\u5ba2\u6237\u7aeftoast>" + msg);
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "jsToast", "(Ljava/lang/String;)V", msg) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeJSForOC", "jsToast:isSuccess:", msg, isSuccess);
      },
      debugToast: function debugToast(msg) {
        cc.log(msg);
      },
      javaLogE: function javaLogE(msg) {
        cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/JsbService", "javaLogE", "(Ljava/lang/String;)V", "js-Msg :" + msg) : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeJSForOC", "iosLogE:", "js-Msg :" + msg);
      },
      exit: function exit() {
        cc.game.end();
      },
      wxLoginSuccessed: function wxLoginSuccessed(Jstr) {
        if (Jstr.indexOf("access_token") >= 0 && Jstr.indexOf("openid") >= 0) var wxToken = JSON.parse(Jstr);
      },
      wxShareSuccessed: function wxShareSuccessed() {},
      wxGetInfoSuccess: function wxGetInfoSuccess(Jstr) {
        var wxInfo = JSON.parse(Jstr);
        wxInfo.unionid && cc.sys.OS_ANDROID == cc.sys.os;
      },
      magicWindowJoinGame: function magicWindowJoinGame(roomId) {
        this.magicWindowRoomId = roomId;
      }
    });
    cc._RF.pop();
  }, {} ],
  KeFuItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9ab7GXTx9KEoFojBrPpO4Q", "KeFuItem");
    "use strict";
    var index = 0;
    cc.Class({
      extends: cc.Component,
      properties: {
        XiangQing: cc.Node,
        item: cc.Prefab,
        wenben: cc.Prefab,
        shanchu: cc.Node,
        xin: cc.Node,
        yidu: cc.Node,
        weidu: cc.Node
      },
      start: function start() {},
      init: function init(id, read_type, ItemNode) {
        this.ItemNode = ItemNode;
        this.id = id;
        this.xin.active = 1 == read_type;
        var FeedbackLogic = new (require("FeedbackLogic"))();
        var call = function call(data) {
          cc.log(data);
        };
        FeedbackLogic.getFeedbackDetails(id, call);
      },
      isDianKai: function isDianKai() {
        var _this = this;
        this.xin.active = false;
        this.yidu.active = true;
        this.weidu.active = false;
        var item = cc.instantiate(this.item);
        var time = this.node.getComponent(cc.Component).node.children[0].children[3]._components[0].string;
        var kefu = item.getComponent("KeFuNode");
        kefu.id = this.id;
        var arr = time.split("");
        for (var i = 0; i < arr.length; i++) " " == arr[i] && arr.splice(i, 1, "\n");
        var times = arr.join("");
        item.children[2].children[2]._components[0].string = times;
        if (true == this.shanchu.active) {
          item.children[2].children[3].children[0].children[3].children[1].active = true;
          item.children[2].children[3].children[0].children[4].children[1].active = true;
          item.children[2].children[1]._components[1].interactable = false;
          item.children[2].children[6].active = true;
        }
        this.ItemNode.addChild(item);
        this.WenItem = item.children[2].children[4].children[1].children[0].children[0];
        var FeedbackLogic = new (require("FeedbackLogic"))();
        var wenben = cc.instantiate(this.wenben);
        wenben.children[0].children[1]._components[0].string = this.node.getComponent(cc.Component).node.children[0].children[3]._components[0].string;
        var neirong = this.node.children[0].children[2]._components[0].string;
        var brr = neirong.split("");
        for (var j = 0; j < brr.length; j++) {
          19 == j && brr.splice(j, 0, "\n");
          39 == j && brr.splice(j, 0, "\n");
          59 == j && brr.splice(j, 0, "\n");
          79 == j && brr.splice(j, 0, "\n");
          if (brr.length < 20) {
            wenben.children[0].children[2].width = 40 * brr.length + 20;
            wenben.children[0].children[2].height = 65;
          } else if (brr.length < 40 && brr.length > 20) {
            wenben.children[0].children[2].width = 820;
            wenben.children[0].children[2].height = 110;
          } else if (brr.length < 60 && brr.length > 40) {
            wenben.children[0].children[2].width = 820;
            wenben.children[0].children[2].height = 155;
          } else if (brr.length < 80 && brr.length > 60) {
            wenben.children[0].children[2].width = 820;
            wenben.children[0].children[2].heighty = 200;
          } else if (brr.length > 80) {
            wenben.children[0].children[2].width = 820;
            wenben.children[0].children[2].height = 245;
          }
        }
        var xiangxi = brr.join("");
        wenben.children[0].children[2].children[0]._components[0].string = xiangxi;
        this.WenItem.addChild(wenben);
        index = 0;
        var callback = function callback(josnDate) {
          if (0 != josnDate.length || "" != josnDate.length) for (var z = 0; z < josnDate.length; z++) {
            var _wenben = cc.instantiate(_this.wenben);
            _wenben.children[0].children[1]._components[0].string = F_GetDateStringByTime(josnDate[z].c_time);
            var _neirong = josnDate[z].c_content;
            var _brr = _neirong.split("");
            for (var _j = 0; _j < _brr.length; _j++) {
              19 == _j && _brr.splice(_j, 0, "\n");
              39 == _j && _brr.splice(_j, 0, "\n");
              59 == _j && _brr.splice(_j, 0, "\n");
              79 == _j && _brr.splice(_j, 0, "\n");
              if (_brr.length < 20) {
                _wenben.children[0].children[2].width = 40 * _brr.length + 20;
                _wenben.children[0].children[2].height = 65;
              } else if (_brr.length < 40 && _brr.length > 20) {
                _wenben.children[0].children[2].width = 820;
                _wenben.children[0].children[2].height = 110;
              } else if (_brr.length < 60 && _brr.length > 40) {
                _wenben.children[0].children[2].width = 820;
                _wenben.children[0].children[2].height = 155;
              } else if (_brr.length < 80 && _brr.length > 60) {
                _wenben.children[0].children[2].width = 820;
                _wenben.children[0].children[2].heighty = 200;
              } else if (_brr.length > 80) {
                _wenben.children[0].children[2].width = 820;
                _wenben.children[0].children[2].height = 245;
              }
              if (1 == josnDate[z].c_type) {
                _wenben.children[0].children[3].active = true;
                _wenben.children[0].children[4].active = true;
                _wenben.children[0].children[0].active = false;
                _wenben.children[0].children[1].active = false;
                _wenben.children[0].children[4]._components[0].string = F_GetDateStringByTime(josnDate[z].c_time);
                item.children[2].children[3].children[0].children[1].children[1].active = true;
                item.children[2].children[3].children[0].children[2].children[1].active = true;
                item.children[2].children[5].active = true;
                var ssttr = F_GetDateStringByTime(josnDate[z].c_time);
                var wrr = ssttr.split("");
                for (var h = 0; h < wrr.length; h++) " " == wrr[h] && wrr.splice(h, 1, "\n");
                var times1 = wrr.join("");
                item.children[2].children[5]._components[0].string = times1;
                true == item.children[2].children[6].active && (item.children[2].children[6]._components[0].string = times1);
              } else {
                _wenben.children[0].children[3].active = false;
                _wenben.children[0].children[4].active = false;
                _wenben.children[0].children[0].active = true;
                _wenben.children[0].children[1].active = true;
              }
            }
            var _xiangxi = _brr.join("");
            _wenben.children[0].children[2].children[0]._components[0].string = _xiangxi;
            _this.WenItem.addChild(_wenben);
            z == josnDate.length - 1 && (index = 1);
          }
        };
        FeedbackLogic.getFeedbackDetails(this.id, callback);
      },
      isShanChu: function isShanChu() {
        var _this2 = this;
        var FeedbackLogic = new (require("FeedbackLogic"))();
        var callback = function callback(result) {
          if (result) {
            createTips("\u5220\u9664\u6210\u529f");
            _this2.node.active = false;
          }
        };
        FeedbackLogic.deleteFeedback(this.id, callback);
      }
    });
    cc._RF.pop();
  }, {
    FeedbackLogic: "FeedbackLogic"
  } ],
  KeFuNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd292bdIv9PFro4GIyAd/+x", "KeFuNode");
    "use strict";
    var thisid = 0;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Eidbox: cc.EditBox,
        item: cc.Prefab,
        itemScr: cc.Node,
        fankuiJieShu: cc.Node,
        fankuiJieShuShu: cc.Node,
        fasongBTN: cc.Button,
        time3Lab: cc.Node
      },
      start: function start() {
        cc.winSize.width / 1280 < 1 && this.node.setScale(cc.winSize.width / 1280);
      },
      init: function init(id) {
        this.id = id;
      },
      isFaSong: function isFaSong(a) {
        var _this = this;
        if ("" != this.Eidbox.string) {
          var FeedbackLogic = new (require("FeedbackLogic"))();
          var FeedbackManager = new (require("FeedbackManager"))();
          var list = FeedbackManager.getFeedbackList();
          var callback = function callback(_boolean) {
            if (true == _boolean) {
              var item = cc.instantiate(_this.item);
              var myDate = new Date();
              var time = myDate.toLocaleString();
              var arr = time.split("");
              for (var i = 0; i < arr.length; i++) if ("\u4e0a" == arr[i]) arr.splice(i, 2); else if ("\u4e0b" == arr[i]) {
                var times = String(Number(arr[i + 2]) + 12);
                arr.splice(i + 2, 1, times);
                arr.splice(i, 2);
              }
              var str = arr.join("");
              item.children[0].children[1]._components[0].string = str;
              var brr = _this.Eidbox.string.split("");
              for (var j = 0; j < brr.length; j++) {
                19 == j && brr.splice(j, 0, "\n");
                39 == j && brr.splice(j, 0, "\n");
                59 == j && brr.splice(j, 0, "\n");
                79 == j && brr.splice(j, 0, "\n");
                if (brr.length < 20) {
                  item.children[0].children[2].width = 40 * brr.length + 20;
                  item.children[0].children[2].height = 65;
                } else if (brr.length < 40 && brr.length > 20) {
                  item.children[0].children[2].width = 820;
                  item.children[0].children[2].height = 110;
                } else if (brr.length < 60 && brr.length > 40) {
                  item.children[0].children[2].width = 820;
                  item.children[0].children[2].height = 155;
                } else if (brr.length < 80 && brr.length > 60) {
                  item.children[0].children[2].width = 820;
                  item.children[0].children[2].heighty = 200;
                } else if (brr.length > 80) {
                  item.children[0].children[2].width = 820;
                  item.children[0].children[2].height = 245;
                }
              }
              var xiangxi = brr.join("");
              item.children[0].children[2].children[0]._components[0].string = xiangxi;
              _this.itemScr.addChild(item);
            } else {
              _this.fankuiJieShu.active = true;
              _this.fankuiJieShuShu.active = true;
              _this.fasongBTN.interactable = false;
            }
          };
          FeedbackLogic.sendFeedbackCallback(this.id, this.Eidbox.string, callback);
        } else createTips("\u8bf7\u8f93\u5165\u8981\u53cd\u9988\u7684\u5185\u5bb9");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    FeedbackLogic: "FeedbackLogic",
    FeedbackManager: "FeedbackManager"
  } ],
  KefuLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c314eZITY1PMYGtjvlMV1l+", "KefuLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        wxLabel: cc.Label
      },
      onBtnCopyWx: function onBtnCopyWx() {
        if (this.wxLabel) {
          var wxStr = this.wxLabel.string;
          wxStr && tools.copyTextFun(wxStr) ? createTips("\u590d\u5236\u6210\u529f:" + this.wxLabel.string) : createTips("\u590d\u5236\u5931\u8d25\uff01");
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  LayerGameRules: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "27ccb29005LgZTA54sDF898", "LayerGameRules");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        gameRuleSprite: cc.Sprite,
        gameRuleScrollView: cc.ScrollView
      },
      onLoad: function onLoad() {
        cc.winSize.width / 1280 < 1 && this.node.setScale(.85, .85);
        this.setGameRuleImg(null, "njj");
      },
      setGameRuleImg: function setGameRuleImg(event, gamePicPath) {
        var _this = this;
        cc.loader.loadRes("lobby/ui/GameRule/Rule/" + gamePicPath, cc.SpriteFrame, function(err, sf) {
          if (err) {
            cc.log("\u6ca1\u6709\u627e\u5230\u5f53\u524d\u7684\u5b50\u6e38\u620f\u89c4\u5219\u56fe", gamePicPath);
            _this.gameRuleSprite.spriteFrame = null;
          } else {
            _this.gameRuleSprite.node.opacity = 0;
            _this.gameRuleSprite.spriteFrame = sf;
            _this.scheduleOnce(function() {
              _this.gameRuleScrollView.scrollToTop();
              _this.gameRuleSprite.node.opacity = 255;
            }, .35);
          }
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LayerMask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eafe96mOvNIdK0qPpH+fWRD", "LayerMask");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        maskOpacity: {
          type: cc.Integer,
          default: 150
        },
        customColor: {
          default: new cc.Color()
        },
        clickToClose: true,
        clickToHide: false
      },
      clickCallback: null,
      start: function start() {
        this.maskWidth = null;
        this.maskHeight = null;
      },
      onLoad: function onLoad() {
        var _this = this;
        var node = new cc.Node();
        node.zIndex = -1;
        var sprite = node.addComponent(cc.Sprite);
        sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
        node.width = this.maskWidth || 2e3;
        node.height = this.maskHeight || 2e3;
        if (this.customColor) {
          cc.loader.loadRes("lobby/image_bg_white", cc.SpriteFrame, function(err, sf) {
            sprite && (sprite.spriteFrame = sf);
          });
          node.color = this.customColor;
        } else {
          cc.loader.loadRes("lobby/image_bg_black", cc.SpriteFrame, function(err, sf) {
            sprite && (sprite.spriteFrame = sf);
          });
          this.customColor && (node.color = this.customColor);
        }
        node.opacity = this.maskOpacity;
        this.LayerMaskButton = new cc.Node();
        this.LayerMaskButton.width = node.width;
        this.LayerMaskButton.height = node.height;
        this.LayerMaskButton.addComponent(cc.Button);
        node.addChild(this.LayerMaskButton);
        this.clickToClose && this.LayerMaskButton.on("click", function() {
          _this.clickCallback && _this.clickCallback();
          _this.node.destroy();
        });
        this.clickToHide && this.LayerMaskButton.on("click", function() {
          _this.clickCallback && _this.clickCallback();
          _this.node.active = false;
        });
        this.mask = node;
        this.node.addChild(node);
      },
      setLayerMaskButton: function setLayerMaskButton(isCanClickMask) {
        isCanClickMask && this.LayerMaskButton && this.LayerMaskButton.destroy();
      },
      setLayerClickCallback: function setLayerClickCallback(callback) {
        this.clickCallback = callback;
      },
      update: function update() {},
      onCloseBtn: function onCloseBtn() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  LayoutActivity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4697OXur5KmJKWN6nbbyCQ", "LayoutActivity");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: cc.Component,
      properties: {
        rollViewleft: cc.Node,
        rollViewRight: cc.Node,
        rollContentLeft: cc.Node,
        Demoleft: cc.Node,
        rollContentRight: cc.Node,
        DemoRight: cc.Node,
        annimetions: cc.Node,
        MyName: cc.Label,
        MyNumbers: cc.Label,
        MyRanking: cc.Label,
        MyAvatar: cc.Node,
        ownNode: cc.Node
      },
      onLoad: function onLoad() {
        this.currentContent = 0;
        this.RightBtnData = false;
        this.RoomListManager = new (require("RankManager"))();
        this.requestRight();
      },
      start: function start() {},
      onToggleContainerClick: function onToggleContainerClick(toggle) {
        switch (toggle.node.name) {
         case "toggle1":
          this.btnLeftClick(0);
          break;

         case "toggle2":
          this.btnLeftClick(1);
          break;

         case "toggle3":
          this.btnLeftClick(2);
          break;

         case "toggle4":
          this.btnLeftClick(3);
        }
      },
      requestRight: function requestRight() {
        var thisnode = this;
        var callback = function callback(dataInfo) {
          thisnode.RightBtnData = dataInfo;
          thisnode.initRight(dataInfo);
        };
        var params = {};
        this.RoomListManager.requestRankingInformation(callback, this.currentContent, params);
      },
      initRight: function initRight(dataRight) {
        var _this = this;
        void 0 == dataRight.list && (dataRight.list = dataRight);
        var dataArrs = dataRight.list;
        this.MyName.string = decodeURI(dataRight.my.name);
        -1 == dataRight.my.giftCard && (dataRight.my.giftCard = 0);
        -1 == dataRight.my.rank && (dataRight.my.giftCard = "0");
        void 0 == dataRight.my.giftCard && (dataRight.my.giftCard = dataRight.my.score);
        this.MyNumbers.string = dataRight.my.giftCard;
        this.MyRanking.string = dataRight.my.rank + 1;
        var onGetHeadRes = function(avataRes) {
          this.MyAvatar && cc.isValid(this.MyAvatar) && (this.MyAvatar.getComponent(cc.Sprite).spriteFrame = avataRes);
        }.bind(this);
        AvatarManager.requestHeadRes(dataRight.my.headURL, dataRight.my.userID, onGetHeadRes, null);
        this.ownNode.active = true;
        this.addVedioTouch(this.ownNode, dataRight.my.userID);
        for (var index = 0; index < dataArrs.length; index++) {
          var element = dataArrs[index];
          var ListDemos = cc.instantiate(this.DemoRight);
          0 == index && (ListDemos.getComponent(cc.Sprite).SpriteFrame = "");
          if (0 <= index && index <= 2) {
            cc.find("ranking", ListDemos).getComponent(cc.Label).string = "";
            switch (index) {
             case 0:
              cc.find("ranking", ListDemos).getChildByName("ranking1").active = true;
              break;

             case 1:
              cc.find("ranking", ListDemos).getChildByName("ranking2").active = true;
              break;

             case 2:
              cc.find("ranking", ListDemos).getChildByName("ranking3").active = true;
            }
          }
          if (!element) return;
          var nameinfo;
          (function() {
            void 0 == element.giftCard && (element.giftCard = element.score);
            nameinfo = decodeURI(element.name);
            nameinfo.length > 8 ? cc.find("name", ListDemos).getComponent(cc.Label).string = nameinfo.substring(0, 8) + ".." : cc.find("name", ListDemos).getComponent(cc.Label).string = nameinfo;
            cc.find("numbers", ListDemos).getComponent(cc.Label).string = element.giftCard;
            cc.find("ranking", ListDemos).getComponent(cc.Label).string = index + 1;
            var imgHead = cc.find("avatar/head", ListDemos);
            var onGetHeadRes = function(avataRes) {
              imgHead && cc.isValid(imgHead) && (imgHead.getComponent(cc.Sprite).spriteFrame = avataRes);
            }.bind(_this);
            AvatarManager.requestHeadRes(element.headURL, element.userID, onGetHeadRes, null);
          })();
          ListDemos.active = true;
          ListDemos.parent = this.rollContentRight;
          this.addVedioTouch(ListDemos, element.userID);
        }
      },
      addVedioTouch: function addVedioTouch(rankNode, userID) {
        var onTouchCallback = function(eventTouch) {
          VideoManager.instance.requestUserVideoList(userID, function(data) {
            data.length > 0 && (window["tempVedioList"] = data);
            GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
          });
        }.bind(this);
        rankNode.on("touchend", onTouchCallback);
      },
      btnLeftClick: function btnLeftClick(index) {
        this.currentContent = index;
        this.rollContentRight.children.forEach(function(element) {
          element.destroy();
        });
        this.requestRight();
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    RankManager: "RankManager",
    VideoManager: "VideoManager"
  } ],
  LayoutChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9fee4+P/1M76dWsjU3wMhJ", "LayoutChat");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        ScrollrollChat: cc.ScrollView,
        rollContentChat: cc.Node,
        DemoChatL: cc.Node,
        DemoChatR: cc.Node,
        edtChat: cc.EditBox,
        voiceNodePref: cc.Prefab,
        faceChatNode: cc.Node,
        faceChatNodeScroll: cc.ScrollView,
        voiceChatNode: cc.Node
      },
      dataArrsLen: 0,
      nLastSendTime: 0,
      onLoad: function onLoad() {
        DataNotify.addListener(this);
        this.InitWXvoiceconfig();
        this.dataArrsLen = 0;
        this.initChatList();
      },
      start: function start() {},
      onDisable: function onDisable() {
        DataNotify.removeListener(this);
      },
      onLogonNewMsgComing2: function onLogonNewMsgComing2(msgData) {
        this.onChatMsgComing(msgData);
      },
      onChatMsgComing: function onChatMsgComing(chatData) {
        var _this = this;
        if (chatData) {
          this.addOneChatData(chatData, false);
          this.dataArrsLen = this.dataArrsLen + 1;
          var scrollOffset = this.ScrollrollChat.getScrollOffset();
          (0 == scrollOffset.y || scrollOffset.y >= 100 * (this.dataArrsLen - 7)) && this.scheduleOnce(function() {
            _this.ScrollrollChat.scrollToBottom(0);
          }, 0);
        }
      },
      onBtnClick: function onBtnClick(Event) {
        switch (Event.target._name) {
         case "btnFace":
          this.onShowFaceClick();
          break;

         case "btnSound":
          this.onShowSoundClick();
          break;

         case "btnSend":
          this.btnSendMsgClick();
        }
      },
      initChatList: function initChatList() {
        var _this2 = this;
        var dataArrs = window.G_chatList;
        this.rollContentChat.removeAllChildren();
        var dataArrsLen = Object.keys(dataArrs).length;
        for (var i in dataArrs) {
          var element = dataArrs[i];
          this.addOneChatData(element, true);
        }
        this.dataArrsLen = dataArrsLen;
        this.scheduleOnce(function() {
          _this2.ScrollrollChat.scrollToBottom(0);
        }, 0);
      },
      addOneChatData: function addOneChatData(element, bInit) {
        var userID = UserInfoManager.getMyInfo().userID;
        if (!!element) {
          var ListDemos = null;
          ListDemos = element.userID == userID ? cc.instantiate(this.DemoChatR) : cc.instantiate(this.DemoChatL);
          cc.find("name", ListDemos).getComponent(cc.Label).string = decodeURI(element.name);
          var chatContent = element.chatContent;
          if (0 == element.tag) if (chatContent.length < 10) {
            var typeItem = cc.find("type2", ListDemos);
            typeItem.active = true;
            var lbTxt1 = cc.find("txt1", typeItem);
            lbTxt1.getComponent(cc.Label).string = chatContent;
          } else if (chatContent.length >= 10 && chatContent.length < 15) {
            var _typeItem = cc.find("type1", ListDemos);
            _typeItem.active = true;
            var _lbTxt = cc.find("txt1", _typeItem);
            _lbTxt.active = true;
            _lbTxt.getComponent(cc.Label).string = chatContent;
            _lbTxt.y = 0;
          } else {
            var _typeItem2 = cc.find("type1", ListDemos);
            _typeItem2.active = true;
            var _lbTxt2 = cc.find("txt1", _typeItem2);
            _lbTxt2.active = true;
            _lbTxt2.getComponent(cc.Label).string = chatContent;
          } else if (1 == element.tag) {
            var faceImg = cc.find("faceImg", ListDemos);
            faceImg.active = true;
            faceImg && cc.isValid(faceImg) && "im" == chatContent.substring(0, 2) && cc.loader.loadRes("Emoticons/" + chatContent, cc.SpriteFrame, function(err, spriteFrame) {
              null == err && (faceImg.getComponent(cc.Sprite).spriteFrame = spriteFrame);
            }.bind(this));
          } else if (2 == element.tag) {
            var _typeItem3 = cc.find("type2", ListDemos);
            _typeItem3.active = true;
            var _lbTxt3 = cc.find("txt1", _typeItem3);
            _lbTxt3.active = false;
            var bg = cc.find("bg", _typeItem3);
            element.userID == userID ? bg.setScale(cc.v2(-1, 1.4)) : bg.setScale(cc.v2(1, 1.4));
            var spVoice = cc.find("spVoice", _typeItem3);
            spVoice.name = "" + element.chatContent;
            spVoice.active = true;
            bInit || this.playVoiceH5(element.chatContent, spVoice, null);
          }
          var imgHead = cc.find("avatar/head", ListDemos);
          var onGetHeadRes = function(avataRes) {
            imgHead && cc.isValid(imgHead) && (imgHead.getComponent(cc.Sprite).spriteFrame = avataRes);
          }.bind(this);
          AvatarManager.requestHeadRes(element.headURL, element.userID, onGetHeadRes, null);
          ListDemos.active = true;
          ListDemos.parent = this.rollContentChat;
          var contentSize = this.rollContentChat.getContentSize();
          contentSize.height += ListDemos.getContentSize().height;
          this.rollContentChat.setContentSize(contentSize);
        }
      },
      onShowFaceClick: function onShowFaceClick() {
        this.faceChatNode.active = true;
      },
      onShowSoundClick: function onShowSoundClick() {
        var nowTime = new Date().getTime();
        if (nowTime - this.nLastSendTime < 4e3) {
          createTips("\u4e0d\u80fd\u9891\u7e41\u53d1\u9001\u804a\u5929\u6d88\u606f");
          return;
        }
        this.nLastSendTime = nowTime;
        var voiceNodePref = cc.instantiate(this.voiceChatNode);
        voiceNodePref.parent = this.node;
        voiceNodePref.active = true;
      },
      btnSendMsgClick: function btnSendMsgClick() {
        var chatContent = this.edtChat.string;
        cc.log("btnSendMsgClick 1");
        if (chatContent.length <= 0) return;
        cc.log("btnSendMsgClick 2");
        var nowTime = new Date().getTime();
        if (nowTime - this.nLastSendTime < 4e3) {
          createTips("\u4e0d\u80fd\u9891\u7e41\u53d1\u9001\u804a\u5929\u6d88\u606f");
          return;
        }
        cc.log("btnSendMsgClick 3");
        this.nLastSendTime = nowTime;
        this.edtChat.string = "";
        LobbySocket.sendChat(0, chatContent, 0, 0);
      },
      btnPlayVoiceClick: function btnPlayVoiceClick(event, param) {
        var voiceID = event.target.name;
        voiceID && "0" != voiceID && this.playVoiceH5(voiceID, event.target, null);
      },
      onTouchNode: function onTouchNode(event, param) {
        this.faceChatNode.active = false;
      },
      onTouchImg: function onTouchImg(event, param) {
        var nowTime = new Date().getTime();
        if (nowTime - this.nLastSendTime < 4e3) {
          createTips("\u4e0d\u80fd\u9891\u7e41\u53d1\u9001\u804a\u5929\u6d88\u606f");
          return;
        }
        this.nLastSendTime = nowTime;
        this.faceChatNode.active = false;
        LobbySocket.sendChat(0, param, 1, 0);
      },
      playVoiceH5: function playVoiceH5(serverId, spVoice, callBackEnd) {
        var spVoiceAni = spVoice.getComponent(cc.Animation);
        var callBackEnd = function callfunc(localId) {}.bind(this);
        var callBack = function callfunc(localId) {
          spVoiceAni.play(0);
          wx.playVoice({
            localId: localId
          });
          wx.onVoicePlayEnd({
            success: function success(res) {
              spVoiceAni.stop();
              var localId = res.localId;
              callBackEnd && callBackEnd(localId);
            }
          });
        }.bind(this);
        wx.downloadVoice({
          serverId: serverId,
          isShowProgressTips: 0,
          success: function success(res) {
            var localId2 = res.localId;
            callBack && callBack(localId2);
          }
        });
      },
      InitWXvoiceconfig: function InitWXvoiceconfig() {
        var bDebug = false;
        var LobbyLogic = new (require("LobbyLogic"))();
        var userID = LobbyLogic.getUserID();
        var callback = function(data) {
          var CryptoJS = CryptoJS || function(e, m) {
            var p = {}, j = p.lib = {}, l = function l() {}, f = j.Base = {
              extend: function extend(a) {
                l.prototype = this;
                var c = new l();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function() {
                  c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
              },
              create: function create() {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
              },
              init: function init() {},
              mixIn: function mixIn(a) {
                for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
              },
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            }, n = j.WordArray = f.extend({
              init: function init(a, c) {
                a = this.words = a || [];
                this.sigBytes = c != m ? c : 4 * a.length;
              },
              toString: function toString(a) {
                return (a || h).stringify(this);
              },
              concat: function concat(a) {
                var c = this.words, q = a.words, d = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (d + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
                this.sigBytes += a;
                return this;
              },
              clamp: function clamp() {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
                a.length = e.ceil(c / 4);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a.words = this.words.slice(0);
                return a;
              },
              random: function random(a) {
                for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
                return new n.init(c, a);
              }
            }), b = p.enc = {}, h = b.Hex = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) {
                  var f = c[d >>> 2] >>> 24 - d % 4 * 8 & 255;
                  b.push((f >>> 4).toString(16));
                  b.push((15 & f).toString(16));
                }
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
                return new n.init(b, c / 2);
              }
            }, g = b.Latin1 = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - d % 4 * 8 & 255));
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (255 & a.charCodeAt(d)) << 24 - d % 4 * 8;
                return new n.init(b, c);
              }
            }, r = b.Utf8 = {
              stringify: function stringify(a) {
                try {
                  return decodeURIComponent(escape(g.stringify(a)));
                } catch (c) {
                  throw Error("Malformed UTF-8 data");
                }
              },
              parse: function parse(a) {
                return g.parse(unescape(encodeURIComponent(a)));
              }
            }, k = j.BufferedBlockAlgorithm = f.extend({
              reset: function reset() {
                this._data = new n.init();
                this._nDataBytes = 0;
              },
              _append: function _append(a) {
                "string" == typeof a && (a = r.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
              },
              _process: function _process(a) {
                var c = this._data, b = c.words, d = c.sigBytes, f = this.blockSize, h = d / (4 * f), h = a ? e.ceil(h) : e.max((0 | h) - this._minBufferSize, 0);
                a = h * f;
                d = e.min(4 * a, d);
                if (a) {
                  for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
                  g = b.splice(0, a);
                  c.sigBytes -= d;
                }
                return new n.init(g, d);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a._data = this._data.clone();
                return a;
              },
              _minBufferSize: 0
            });
            j.Hasher = k.extend({
              cfg: f.extend(),
              init: function init(a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
              },
              reset: function reset() {
                k.reset.call(this);
                this._doReset();
              },
              update: function update(a) {
                this._append(a);
                this._process();
                return this;
              },
              finalize: function finalize(a) {
                a && this._append(a);
                return this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function _createHelper(a) {
                return function(c, b) {
                  return new a.init(b).finalize(c);
                };
              },
              _createHmacHelper: function _createHmacHelper(a) {
                return function(b, f) {
                  return new s.HMAC.init(a, f).finalize(b);
                };
              }
            });
            var s = p.algo = {};
            return p;
          }(Math);
          (function() {
            var e = CryptoJS, m = e.lib, p = m.WordArray, j = m.Hasher, l = [], m = e.algo.SHA1 = j.extend({
              _doReset: function _doReset() {
                this._hash = new p.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
              },
              _doProcessBlock: function _doProcessBlock(f, n) {
                for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                  if (16 > a) l[a] = 0 | f[n + a]; else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
                    l[a] = c << 1 | c >>> 31;
                  }
                  c = (h << 5 | h >>> 27) + j + l[a];
                  c = 20 > a ? c + (1518500249 + (g & e | ~g & k)) : 40 > a ? c + (1859775393 + (g ^ e ^ k)) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);
                  j = k;
                  k = e;
                  e = g << 30 | g >>> 2;
                  g = h;
                  h = c;
                }
                b[0] = b[0] + h | 0;
                b[1] = b[1] + g | 0;
                b[2] = b[2] + e | 0;
                b[3] = b[3] + k | 0;
                b[4] = b[4] + j | 0;
              },
              _doFinalize: function _doFinalize() {
                var f = this._data, e = f.words, b = 8 * this._nDataBytes, h = 8 * f.sigBytes;
                e[h >>> 5] |= 128 << 24 - h % 32;
                e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
                e[15 + (h + 64 >>> 9 << 4)] = b;
                f.sigBytes = 4 * e.length;
                this._process();
                return this._hash;
              },
              clone: function clone() {
                var e = j.clone.call(this);
                e._hash = this._hash.clone();
                return e;
              }
            });
            e.SHA1 = j._createHelper(m);
            e.HmacSHA1 = j._createHmacHelper(m);
          })();
          var appId = WechatAppID;
          var timestamp = new Date().getTime().toString();
          var nonceStr = (1e3 * Math.random()).toString();
          var ticket = data.jsapi_ticket;
          var url = location.href.split("#")[0];
          var string = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timestamp + "&url=" + url;
          var signature = CryptoJS.SHA1(string, {
            string: true
          }).toString();
          wx.config({
            debug: bDebug,
            appId: appId,
            timestamp: timestamp,
            nonceStr: nonceStr,
            signature: signature,
            jsApiList: [ "startRecord", "stopRecord", "playVoice", "uploadVoice", "downloadVoice", "onVoicePlayEnd", "translateVoice", "updateAppMessageShareData", "updateTimelineShareData" ]
          });
          wx.ready(function() {});
        }.bind(this);
        ConfigDataManager.getWXjsapi_ticket(userID, callback);
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LobbyBaseLayer: "LobbyBaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  LayoutExchange: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "15264EqLq1F1asYPL63PN0S", "LayoutExchange");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var tools = require("Tools");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EXCHANG_CONFIG = [ {
      numer: 1
    }, {
      numer: 50
    }, {
      numer: 200
    } ];
    var TOGGLE_INDEX = {
      toggle1: 0,
      toggle2: 1,
      toggle3: 2
    };
    var LayoutExchange = function(_super) {
      __extends(LayoutExchange, _super);
      function LayoutExchange() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.annimetion = null;
        _this.ShartNode = null;
        _this.LayoutExchangeNode = null;
        _this.newHandNode = null;
        _this._index = 0;
        _this.LobbyLogic = new (require("LobbyLogic"))();
        return _this;
      }
      LayoutExchange.prototype.start = function() {
        if (tools.getCurScreen()) {
          var TopLayout1 = this.ShartNode.getChildByName("topLayout");
          var tips_1 = TopLayout1.getChildByName("tips_1");
          var tips_2 = TopLayout1.getChildByName("tips_2");
          var tips_3 = TopLayout1.getChildByName("tips_3");
          var tips_4 = TopLayout1.getChildByName("tips_4");
          var Bottom1 = this.ShartNode.getChildByName("img_read");
          tips_1.y -= 10;
          tips_2.y -= 20;
          tips_3.y -= 30;
          tips_4.y -= 40;
          TopLayout1.y -= 20;
          Bottom1.y -= 115;
          var ExchangeLayout = this.LayoutExchangeNode.getChildByName("topLayout");
          var btn_ex_1 = this.LayoutExchangeNode.getChildByName("btn_ex_1");
          var btn_ex_2 = this.LayoutExchangeNode.getChildByName("btn_ex_2");
          var btn_ex_3 = this.LayoutExchangeNode.getChildByName("btn_ex_3");
          ExchangeLayout.y -= 20;
          btn_ex_1.y -= 80;
          btn_ex_2.y -= 95;
          btn_ex_3.y -= 110;
        }
      };
      LayoutExchange.prototype.onToggleContainerClick = function(toggle) {
        this._index = TOGGLE_INDEX[toggle.node.name];
        console.log("\u89e6\u53d1\u4e86 ToggleContainer \u4e8b\u4ef6\uff0c\u70b9\u4e86" + toggle.node.name + "\u7684 Toggle index:" + this._index);
        if (0 == this._index) {
          this.ShartNode.active = true;
          this.LayoutExchangeNode.active = false;
          this.newHandNode.active = false;
        } else if (1 == this._index) {
          this.ShartNode.active = false;
          this.LayoutExchangeNode.active = true;
          this.newHandNode.active = false;
        } else if (2 == this._index) {
          this.ShartNode.active = false;
          this.LayoutExchangeNode.active = false;
          this.newHandNode.active = true;
        }
      };
      LayoutExchange.prototype.onBtnExchangeClick = function(event, value) {
        var roomIndex = Number(value);
        var numer = EXCHANG_CONFIG[roomIndex].numer;
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var that = this;
        var msgCallback = function(btnName) {
          if (btnName == btnName1) {
            var callback = function(result) {};
            that.LobbyLogic.requestExchangeRead(callback, numer);
          }
        };
        var COUNT = 200 * numer;
        var msg = "\u662f\u5426\u8981\u7528" + numer + "\u793c\u5238\u5151\u6362" + COUNT + "\u5076One\u8c46";
        var msgObj = {
          msg: msg,
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      LayoutExchange.prototype.onBtnShartClick = function(event, value) {
        switch (value) {
         case "btn_imgShart":
          globalThis.LobbyCreaterImage();
          break;

         case "btn_urlShart":
          globalThis.LobbyurlShart();
        }
      };
      LayoutExchange.prototype.onBtnCloseClick = function() {
        var _this = this;
        var gameDiv = document.getElementById("lobbyQRCode");
        gameDiv && gameDiv.remove();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.Node) ], LayoutExchange.prototype, "annimetion", void 0);
      __decorate([ property(cc.Node) ], LayoutExchange.prototype, "ShartNode", void 0);
      __decorate([ property(cc.Node) ], LayoutExchange.prototype, "LayoutExchangeNode", void 0);
      __decorate([ property(cc.Node) ], LayoutExchange.prototype, "newHandNode", void 0);
      LayoutExchange = __decorate([ ccclass ], LayoutExchange);
      return LayoutExchange;
    }(cc.Component);
    exports.default = LayoutExchange;
    cc._RF.pop();
  }, {
    LobbyLogic: "LobbyLogic",
    Tools: "Tools"
  } ],
  LayoutGoldArena: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "468513i6apH5Zshut9K0hVm", "LayoutGoldArena");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var SpriteArray_1 = require("../ui/SpriteArray");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ARENA_CONFIG = [ {
      people: 2,
      roomids: [ 7, 8, 9, 10, 11 ]
    }, {
      people: 3,
      roomids: [ 12, 13, 14, 15, 16 ]
    }, {
      people: 4,
      roomids: [ 2, 3, 4, 5, 6 ]
    } ];
    var TOGGLE_INDEX = {
      toggle1: 0,
      toggle2: 1,
      toggle3: 2,
      toggle4: 3
    };
    var LayoutGoldArena = function(_super) {
      __extends(LayoutGoldArena, _super);
      function LayoutGoldArena() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.arenas = null;
        _this.annimetion = null;
        _this.LayoutGoldArenaNode = null;
        _this.newHandNode = null;
        _this._index = 0;
        _this.LobbyLogic = new (require("LobbyLogic"))();
        return _this;
      }
      LayoutGoldArena.prototype.start = function() {};
      LayoutGoldArena.prototype.onToggleContainerClick = function(toggle) {
        var _this = this;
        this._index = TOGGLE_INDEX[toggle.node.name];
        console.log("\u89e6\u53d1\u4e86 ToggleContainer \u4e8b\u4ef6\uff0c\u70b9\u4e86" + toggle.node.name + "\u7684 Toggle index:" + this._index);
        if (3 == this._index) {
          this.LayoutGoldArenaNode.active = false;
          this.newHandNode.active = true;
        } else {
          this.LayoutGoldArenaNode.active = true;
          this.newHandNode.active = false;
          this.arenas.children.forEach(function(node, index) {
            node.getChildByName("Background").getComponent(SpriteArray_1.default).index = _this._index;
          });
        }
      };
      LayoutGoldArena.prototype.onBtnJoinRoomClick = function(event, value) {
        var _this = this;
        var callback = function(result) {
          var roomIndex = Number(value);
          var roomID = ARENA_CONFIG[_this._index].roomids[roomIndex];
          0 == roomID && (roomID = Math.floor(5 * Math.random() + 2));
          console.log("\u91d1\u5e01\u573a \u8bf7\u6c42\u52a0\u5165\u623f\u95f4 pepole:" + ARENA_CONFIG[_this._index].people + " roomID:" + roomID);
          _this.LobbyLogic.enterGame(roomID);
        };
        this.LobbyLogic.requestLoaderCheckLogon(callback);
      };
      LayoutGoldArena.prototype.onBtnCloseClick = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.Node) ], LayoutGoldArena.prototype, "arenas", void 0);
      __decorate([ property(cc.Node) ], LayoutGoldArena.prototype, "annimetion", void 0);
      __decorate([ property(cc.Node) ], LayoutGoldArena.prototype, "LayoutGoldArenaNode", void 0);
      __decorate([ property(cc.Node) ], LayoutGoldArena.prototype, "newHandNode", void 0);
      LayoutGoldArena = __decorate([ ccclass ], LayoutGoldArena);
      return LayoutGoldArena;
    }(cc.Component);
    exports.default = LayoutGoldArena;
    cc._RF.pop();
  }, {
    "../ui/SpriteArray": "SpriteArray",
    LobbyLogic: "LobbyLogic"
  } ],
  LayoutHallVideo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d3bbP5JqdDv6VSqgJMiIWF", "LayoutHallVideo");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var g_showFrom = "Button_Me";
    cc.Class({
      extends: require("LayoutVideo"),
      properties: {
        mask: cc.Node,
        btnBack: cc.Node,
        LayOutContent: cc.Node,
        BottomLayOutContent: cc.Node,
        topNodePrefab: cc.Prefab,
        bottomNodePrefab: cc.Prefab,
        userviewPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        GlobalEvent.instance.on("click_user_video", this.onEventClickUserVideo, this);
      },
      onDestroy: function onDestroy() {
        this.close();
        GlobalEvent.instance.off("click_user_video", this.onEventClickUserVideo, this);
      },
      start: function start() {
        var _this = this;
        window.vedioFileId = null;
        if (window.personVedio && window.personVedio.list) {
          this.initVideo(window.personVedio.startIdx, window.personVedio.list, false);
          window.personVedio = {};
          this.btnBack.active = true;
          g_showFrom = "Button_Me";
        } else if (window.tempVedioList) {
          this.initVideo(0, window.tempVedioList, true);
          this.btnBack.active = false;
          window.tempVedioList = null;
        } else {
          var list = VideoManager.instance.getVideoList();
          if (list.length > 0) {
            this.initVideo(0, list, true);
            this.btnBack.active = false;
          } else VideoManager.instance.refreshVideo(function(list) {
            _this.initVideo(0, list, true);
            _this.btnBack.active = false;
          });
        }
        var bottomNode = cc.instantiate(this.bottomNodePrefab);
        bottomNode.zIndex = 100;
        this.node.addChild(bottomNode);
        bottomNode.getComponent("LobbyBottomPanel").setParentNodeProxy(this, "livebroadcast");
      },
      showPersonVedios: function showPersonVedios(startIdx, listVedio) {
        this.initVideo(startIdx, listVedio, false);
        this.btnBack.active = true;
        g_showFrom = "Button_Person";
      },
      onEventClickUserVideo: function onEventClickUserVideo(data) {
        console.log("onEventClickUserVideo =", data);
        var userVideoNode = cc.instantiate(this.userviewPrefab);
        userVideoNode.name = "userVideoCenter";
        this.node.addChild(userVideoNode);
        userVideoNode.getComponent("personVideoView").init(data, this);
        this.userVideoNode = userVideoNode;
      },
      doButton_Close: function doButton_Close() {
        this.node && ("Button_Me" == g_showFrom ? GlobalEvent.instance.emit("switch_page_msg", "Button_Me") : this.userVideoNode && (this.userVideoNode.active = true));
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LayoutVideo: "LayoutVideo",
    VideoManager: "VideoManager"
  } ],
  LayoutLobby: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae17cswHMZKGJIciDVyLtaz", "LayoutLobby");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        PeoplecountLabel: cc.Node
      },
      onLoad: function onLoad() {
        this._super();
        this.callback = null;
        this.onLogonGamePeoplecountChange(UserInfoManager.getMyInfo().peopleCount);
      },
      onEnable: function onEnable() {
        DataNotify.addListener(this);
      },
      onDisable: function onDisable() {
        DataNotify.removeListener(this);
      },
      init: function init(callback) {
        this.callback = callback;
      },
      onLogonGamePeoplecountChange: function onLogonGamePeoplecountChange(Peoplecount) {
        this.PeoplecountLabel && (this.PeoplecountLabel.getComponent(cc.Label).string = Peoplecount + "\u4eba\u5728\u73a9");
      },
      onButtonClick: function onButtonClick(event, param) {
        this.callback && this.callback(param);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LayoutMyHome: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2dce0Udla5Hb7/QuvjJ/RXO", "LayoutMyHome");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DEFAULT_MIN_GIVE_NUM = 1;
    var DEFAULT_MIN_HOLD_NUM = 5;
    var LayoutMyHome = function(_super) {
      __extends(LayoutMyHome, _super);
      function LayoutMyHome() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.annimetion = null;
        return _this;
      }
      LayoutMyHome.prototype.start = function() {};
      LayoutMyHome.prototype.onEnable = function() {
        this.init();
      };
      LayoutMyHome.prototype.init = function() {};
      LayoutMyHome.prototype.onToggleContainerClick = function(toggle) {
        toggle.node.name;
      };
      LayoutMyHome.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.Node) ], LayoutMyHome.prototype, "annimetion", void 0);
      LayoutMyHome = __decorate([ ccclass ], LayoutMyHome);
      return LayoutMyHome;
    }(cc.Component);
    exports.default = LayoutMyHome;
    cc._RF.pop();
  }, {} ],
  LayoutNotice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38408uVkGxCk7HzbixiuPZe", "LayoutNotice");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TOGGLE_INDEX = {
      toggle1: 0,
      toggle2: 1,
      toggle3: 2
    };
    var LayoutNotice = function(_super) {
      __extends(LayoutNotice, _super);
      function LayoutNotice() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.btnSFS = new Array();
        _this.NoticeNode = null;
        _this.annimetion = null;
        _this.HaveNode = null;
        _this.statementNode = null;
        return _this;
      }
      LayoutNotice.prototype.onLoad = function() {};
      LayoutNotice.prototype.start = function() {};
      LayoutNotice.prototype.onToggleContainerClick = function(toggle) {
        switch (toggle.node.name) {
         case "toggle1":
          this.doButton_Notice();
          break;

         case "toggle2":
          this.doButton_statement();
          break;

         case "toggle3":
          this.doButton_have();
        }
      };
      LayoutNotice.prototype.doButton_Notice = function() {
        this.NoticeNode.active = true;
        this.HaveNode.active = false;
        this.statementNode.active = false;
      };
      LayoutNotice.prototype.doButton_have = function() {
        this.NoticeNode.active = false;
        this.HaveNode.active = true;
        this.statementNode.active = false;
      };
      LayoutNotice.prototype.doButton_statement = function() {
        this.NoticeNode.active = false;
        this.HaveNode.active = false;
        this.statementNode.active = true;
      };
      LayoutNotice.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property([ cc.SpriteFrame ]) ], LayoutNotice.prototype, "btnSFS", void 0);
      __decorate([ property(cc.Node) ], LayoutNotice.prototype, "NoticeNode", void 0);
      __decorate([ property(cc.Node) ], LayoutNotice.prototype, "annimetion", void 0);
      __decorate([ property(cc.Node) ], LayoutNotice.prototype, "HaveNode", void 0);
      __decorate([ property(cc.Node) ], LayoutNotice.prototype, "statementNode", void 0);
      LayoutNotice = __decorate([ ccclass ], LayoutNotice);
      return LayoutNotice;
    }(cc.Component);
    exports.default = LayoutNotice;
    cc._RF.pop();
  }, {} ],
  LayoutShop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "415eb7W7eVIypFE/wd6uNAd", "LayoutShop");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PoolMgr_1 = require("../../framework/PoolMgr");
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var tools = require("Tools");
    var TOGGLE_INDEX = {
      toggle1: 0,
      toggle2: 1,
      toggle3: 2,
      toggle4: 3,
      toggle5: 4
    };
    var ShopItem = function(_super) {
      __extends(ShopItem, _super);
      function ShopItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.clickBtn = null;
        _this.costLabel = null;
        _this.stockLabel = null;
        _this.iconSp = null;
        _this._goodsID = 0;
        _this._costNum = 0;
        _this._stockNum = 100;
        _this._maxBuyNum = 0;
        _this.callBack = null;
        return _this;
      }
      ShopItem.prototype.init = function(data, index, callBack) {
        var _this = this;
        this.callBack = callBack;
        var img_nort = this.node.getChildByName("img_nort");
        img_nort.active = false;
        var icon_mask = this.node.getChildByName("icon_mask");
        icon_mask.active = true;
        var num_bg = this.node.getChildByName("num_bg");
        num_bg.active = true;
        var num = num_bg.getChildByName("num");
        num.active = true;
        var img_giftcard = num_bg.getChildByName("img_giftcard");
        img_giftcard.active = true;
        var num_not = num_bg.getChildByName("num_not");
        num_not.active = false;
        var img_surplus = this.node.getChildByName("img_surplus");
        img_surplus.active = true;
        this.node.getChildByName("btn").active = true;
        this.clickBtn = this.node.getChildByName("btn").getComponent(cc.Button);
        this.clickBtn.interactable = true;
        var img_title_1 = this.node.getChildByName("img_title_1");
        var img_title_2 = this.node.getChildByName("img_title_2");
        img_title_1.active = false;
        img_title_2.active = false;
        2 == data.bargain_goods ? img_title_1.active = true : 3 == data.bargain_goods && (img_title_2.active = true);
        if (data.original_cost > 0) {
          num_not.active = true;
          var curNum = data.original_cost.toFixed(1);
          num_not.getComponent(cc.Label).string = "\xa5" + curNum;
        }
        this.costLabel = this.node.getChildByName("num_bg").getChildByName("num").getComponent(cc.Label);
        this.iconSp = this.node.getChildByName("icon_mask").getChildByName("img").getComponent(cc.Sprite);
        var imgsw = this.node.getChildByName("imgsw");
        imgsw.active = 0 == data.buyNum;
        this.clickBtn.interactable = 0 != data.buyNum;
        this.stockLabel = img_surplus.getChildByName("txt").getComponent(cc.Label);
        this._goodsID = data.goodsID;
        this._stockNum = data.buyNum;
        this._costNum = data.consumeNum;
        this._maxBuyNum = data.countGoodsNum;
        this.costLabel["_forceUpdateRenderData"](true);
        this.costLabel.string = data.consumeNum + "";
        this.costLabel["_forceUpdateRenderData"](true);
        this.stockLabel.string = this._stockNum + " / " + this._maxBuyNum;
        img_giftcard.x = this.costLabel.node.width + this.costLabel.node.x + 5;
        var url = "https://" + globalThis.NetConfig.getPHP_IP() + data.goods_img;
        cc.loader.load({
          url: url,
          type: "png"
        }, function(err, res) {
          if (err) {
            console.error("load remote spriteframe res failed url:" + url, err.message || err);
            return;
          }
          var sf = new cc.SpriteFrame(res);
          _this.iconSp.node && cc.isValid(_this.iconSp.node) && (_this.iconSp.spriteFrame = sf);
        });
        this.clickBtn.node.on("click", this.But_ExchangeClick, this);
        var onTouchCallback = function(eventTouch) {
          data.fileID ? VideoManager.instance.requestVedioByFileId(data.fileID, function(data) {
            data.length > 0 && (window["tempVedioList"] = data);
            GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
          }) : GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
        }.bind(this);
        this.iconSp.node.on("touchend", onTouchCallback);
      };
      ShopItem.prototype.But_ExchangeClick = function() {
        var _this = this;
        var LobbyLogic = new (require("LobbyLogic"))();
        var nowPhone = LobbyLogic.getPhone();
        if ("" == nowPhone) {
          globalThis.createTips("\u8bf7\u5230\u201c\u6211\u7684\u201d\u754c\u9762\u586b\u5145\u7535\u8bdd\u53f7\u7801\u4fe1\u606f");
          return;
        }
        var nowaddress = LobbyLogic.getGoodsAddress();
        if ("" == nowaddress) {
          globalThis.createTips("\u8bf7\u5230\u201c\u6211\u7684\u201d\u754c\u9762\u586b\u5145\u5b8c\u5584\u8be6\u7ec6\u7684\u90ae\u653f\u5730\u5740");
          return;
        }
        if (this._stockNum <= 0) {
          globalThis.createTips("\u8be5\u7269\u54c1\u5df2\u552e\u7f44\u6362");
          return;
        }
        var giftCard = LobbyLogic.getWalletGiftCard();
        if (giftCard < this._costNum) {
          globalThis.createTips("\u60a8\u62e5\u6709\u7684\u793c\u5238\u4e0d\u8db3\uff0c\u8bf7\u7ee7\u7eed\u52aa\u529b");
          return;
        }
        var Transfernum = LobbyLogic.getTransferNum();
        var realName = LobbyLogic.getRealName();
        var idCard = LobbyLogic.getIDCard();
        if ("" == realName && "" == idCard && Transfernum <= 0) {
          var btnName1_1 = "\u8ba4\u8bc1";
          var btnName2_1 = "\u53d6\u6d88";
          var that_1 = this;
          var msgCallback_1 = function(btnName) {
            btnName == btnName1_1 && that_1.callBack && that_1.callBack();
          };
          var msgObj_1 = {
            btn1: btnName1_1,
            btn2: btnName2_1,
            callbackFun: msgCallback_1
          };
          globalThis.createPersonRealNameMsgBox(msgObj_1);
          return;
        }
        if (Transfernum <= 0) {
          globalThis.createTips("\u5f53\u6708\u5151\u6362\u6b21\u6570\u5df2\u7528\u5b8c,\u8bf7\u6765\u6708\u5151\u6362!");
          return;
        }
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var that = this;
        var msgCallback = function(btnName) {
          btnName == btnName1 && globalThis.RankManager.requestpurchaseInfo(that._goodsID, function(data) {
            that._stockNum = data.buyNum || 0;
            var DataNotify = new (require("DataNotify"))();
            _this.stockLabel.string = that._stockNum + " / " + that._maxBuyNum;
            DataNotify.onTransfernumChanged(Number(data.userBuyNum));
          });
        };
        var msgObj = {
          msg: "\u662f\u5426\u786e\u8ba4\u5151\u6362\uff1f",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      ShopItem.prototype.NoBut_ExchangeClick = function() {
        globalThis.createTips("\u5546\u54c1\u5e93\u5b58\u4e0d\u8db3");
      };
      ShopItem.prototype.But_ForSaleClick = function() {
        globalThis.createTips("\u6b63\u5728\u51c6\u5907\u5546\u54c1");
      };
      __decorate([ property(cc.Button) ], ShopItem.prototype, "clickBtn", void 0);
      __decorate([ property(cc.Label) ], ShopItem.prototype, "costLabel", void 0);
      __decorate([ property(cc.Label) ], ShopItem.prototype, "stockLabel", void 0);
      __decorate([ property(cc.Sprite) ], ShopItem.prototype, "iconSp", void 0);
      return ShopItem;
    }(cc.Component);
    var LayoutShop = function(_super) {
      __extends(LayoutShop, _super);
      function LayoutShop() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.listNode = new Array();
        _this.LayoutShopNode = null;
        _this.newHandNode = null;
        _this.ExChangeNode = null;
        _this.ExChangelistNode = null;
        _this.ExChangeItem = null;
        _this.annimetion = null;
        _this.ExchangeList = new Array();
        _this.callBack = null;
        return _this;
      }
      LayoutShop.prototype.start = function() {};
      LayoutShop.prototype.onEnable = function() {};
      LayoutShop.prototype.onDisable = function() {};
      LayoutShop.prototype.initcallBack = function(callBack) {
        this.callBack = callBack;
        this._refreshGoodsList(1);
      };
      LayoutShop.prototype.onToggleContainerbtn = function(toggle) {
        var _index = TOGGLE_INDEX[toggle.node.name];
        console.log("\u89e6\u53d1\u4e86 ToggleContainer \u4e8b\u4ef6\uff0c\u70b9\u4e86" + toggle.node.name);
        if (4 == _index) {
          this.LayoutShopNode.active = false;
          this.newHandNode.active = true;
          this.ExChangeNode.active = false;
        } else if (3 == _index) {
          this.LayoutShopNode.active = false;
          this.newHandNode.active = false;
          this.ExChangeNode.active = true;
          var detailsNode = this.ExChangeNode.getChildByName("detailsNode");
          detailsNode.active = false;
          this._refreshExchangeList();
        } else {
          this.LayoutShopNode.active = true;
          this.newHandNode.active = false;
          this.ExChangeNode.active = false;
          this._refreshGoodsList(_index + 1);
        }
      };
      LayoutShop.prototype._refreshGoodsList = function(goods_category) {
        var _this = this;
        this.recyle();
        globalThis.RankManager.requestProductlistInfo(function(data) {
          for (var i = 0; i < data.length; i++) {
            var itemData = data[i];
            var node = _this.listNode[i];
            if (null == node) continue;
            node.active = true;
            var comp = node.getComponent(ShopItem);
            null == comp && (comp = node.addComponent(ShopItem));
            comp.init(itemData, i, _this.callBack);
          }
        }, goods_category);
      };
      LayoutShop.prototype._refreshExchangeList = function() {
        var _this = this;
        this.deleterecyle();
        var that = this;
        this.ExchangeList = [];
        globalThis.RankManager.requestExchangeList(function(data) {
          var exchangeScrollView = that.ExChangeNode.getChildByName("exchangeScrollView");
          var Noexchange = that.ExChangeNode.getChildByName("Noexchange");
          exchangeScrollView.active = 0 != data.length;
          Noexchange.active = 0 == data.length;
          for (var i = 0; i < data.length; i++) {
            var itemData = data[i];
            _this.ExchangeList[i] = data[i];
            var item = PoolMgr_1.PoolMgr.instance.getNode(that.ExChangeItem, that.ExChangelistNode);
            that._initItemUI(item, itemData, i);
          }
        }, 1);
      };
      LayoutShop.prototype._initItemUI = function(item, itemData, index) {
        var date = new Date(itemData.create_time);
        var dayta1 = date.getFullYear();
        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        var Hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
        var Minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        var Seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
        var currentdate = dayta1 + "." + month + "." + strDate + "   " + Hours + ":" + Minutes + ":" + Seconds;
        item.getChildByName("buyTIps").getComponent(cc.Label).string = "" + itemData.content;
        item.getChildByName("TIps").getComponent(cc.Label).string = "" + itemData.goodsStatus;
        item.getChildByName("time").getComponent(cc.Label).string = currentdate;
        var actionBtn = item.getChildByName("btn");
        var button = actionBtn.getComponent(cc.Button);
        var clickEventHandler = new cc.Component.EventHandler();
        clickEventHandler.target = this.node;
        clickEventHandler.component = "LayoutShop";
        clickEventHandler.handler = "onActionBtnClick";
        clickEventHandler.customEventData = String(index);
        button.clickEvents = [];
        button.clickEvents.push(clickEventHandler);
      };
      LayoutShop.prototype.onActionBtnClick = function(event, customEventData) {
        var exchangeScrollView = this.ExChangeNode.getChildByName("exchangeScrollView");
        exchangeScrollView.active = false;
        var detailsNode = this.ExChangeNode.getChildByName("detailsNode");
        detailsNode.active = true;
        var exId = Number(customEventData);
        var info = this.ExchangeList[exId];
        if (info) {
          var date = new Date(info.create_time);
          var dayta1 = date.getFullYear();
          var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
          var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
          detailsNode.getChildByName("TIps_2").getComponent(cc.Label).string = "\u2460 \u60a8\u4e8e" + dayta1 + "\u5e74" + month + "\u6708" + strDate + "\u65e5\u5728\u201c\u5076one\u5546\u57ce\u201d";
          detailsNode.getChildByName("TIps_3").getComponent(cc.Label).string = " " + info.content + "\u3002";
          detailsNode.getChildByName("TIps_8").getComponent(cc.Label).string = dayta1 + "." + month + "." + strDate;
        }
      };
      LayoutShop.prototype.onExChangeCloseClick = function(event, customEventData) {
        var exchangeScrollView = this.ExChangeNode.getChildByName("exchangeScrollView");
        exchangeScrollView.active = true;
        var Noexchange = this.ExChangeNode.getChildByName("Noexchange");
        Noexchange.active = false;
        var detailsNode = this.ExChangeNode.getChildByName("detailsNode");
        detailsNode.active = false;
      };
      LayoutShop.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      LayoutShop.prototype.initListItem = function(node, data) {};
      LayoutShop.prototype.recyle = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.ScrollrollShop.scrollToTop(0);
        }, 0);
        this.listNode.forEach(function(item, index) {
          item.active = true;
          var img_nort = item.getChildByName("img_nort");
          img_nort.active = true;
          var icon_mask = item.getChildByName("icon_mask");
          icon_mask.active = false;
          var imgsw = item.getChildByName("imgsw");
          imgsw.active = false;
          var num_bg = item.getChildByName("num_bg");
          num_bg.active = true;
          var img_title_1 = item.getChildByName("img_title_1");
          img_title_1.active = false;
          var img_title_2 = item.getChildByName("img_title_2");
          img_title_2.active = false;
          var num = num_bg.getChildByName("num");
          num.active = false;
          var img_giftcard = num_bg.getChildByName("img_giftcard");
          img_giftcard.active = false;
          var num_not = num_bg.getChildByName("num_not");
          num_not.active = false;
          var img_surplus = item.getChildByName("img_surplus");
          img_surplus.active = false;
          var btn = item.getChildByName("btn").getComponent(cc.Button);
          btn.interactable = false;
        });
      };
      LayoutShop.prototype.deleterecyle = function() {
        for (var _i = 0, _a = this.ExChangelistNode.children; _i < _a.length; _i++) {
          var node = _a[_i];
          PoolMgr_1.PoolMgr.instance.putNode(node);
        }
        this.ExChangelistNode.removeAllChildren();
      };
      __decorate([ property(cc.ScrollView) ], LayoutShop.prototype, "ScrollrollShop", void 0);
      __decorate([ property([ cc.Node ]) ], LayoutShop.prototype, "listNode", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "LayoutShopNode", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "newHandNode", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "ExChangeNode", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "ExChangelistNode", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "ExChangeItem", void 0);
      __decorate([ property(cc.Node) ], LayoutShop.prototype, "annimetion", void 0);
      LayoutShop = __decorate([ ccclass ], LayoutShop);
      return LayoutShop;
    }(cc.Component);
    exports.default = LayoutShop;
    cc._RF.pop();
  }, {
    "../../framework/PoolMgr": "PoolMgr",
    DataNotify: "DataNotify",
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic",
    Tools: "Tools",
    VideoManager: "VideoManager"
  } ],
  LayoutUserVideo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c58b6DGKG5IwrrtE4L+vISz", "LayoutUserVideo");
    "use strict";
    cc.Class({
      extends: require("LayoutVideo"),
      properties: {
        mask: cc.Node,
        annimetions: cc.Node
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {
        this.close();
      },
      init: function init(startIdx, dlist) {
        this.initVideo(startIdx, dlist);
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
          this.doButton_GotoBack("Button_Me");
        }
      },
      doButton_GotoBack: function doButton_GotoBack(tag) {
        switch (tag) {
         case "Button_Me":
          layerNameurl = "prefab/lobby/LayoutPersonalInformation";
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "btn_Notice":
          layerNameurl = "prefab/lobby/LayoutNotice";
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "livebroadcast":
          layerNameurl = "prefab/lobby/LayoutVideo";
          MYAudioEngine.setMusicStatus(false);
          MYAudioEngine.pauseMusic();
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 0);
          break;

         case "btn_Action":
          layerNameurl = "prefab/lobby/LayoutActivity";
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "LayoutLobby":
          LOOBBY_STATIC = true;
          layerNameurl = "prefab/lobby/LayoutLobby";
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        }
        console.log("tag====>", tag);
        cc.resources.load("prefab/lobby/LayoutHall", cc.Prefab, function(err, prefab2) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          var node2 = cc.instantiate(prefab2);
          node2.name = "lobby";
          node2.parent = window["LobbyCanvas"].node;
          cc.resources.load(layerNameurl, cc.Prefab, function(err, prefab) {
            if (err) {
              cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
              return;
            }
            var node = cc.instantiate(prefab);
            node.name = tag;
            node.parent = node2.getComponent("LobbyScene").BottomLayOutContent;
            if ("Button_Me" == tag) {
              var tipScript = node.getComponent("PersonalInformation");
              tipScript.init(1);
            }
          });
        });
      }
    });
    cc._RF.pop();
  }, {
    LayoutVideo: "LayoutVideo"
  } ],
  LayoutVideo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88fdfycC+BKnbsPfn8m8pan", "LayoutVideo");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: cc.Component,
      properties: {
        pageView: cc.Node,
        itemPrefab: cc.Prefab,
        touchNode: cc.Node,
        curVideoData: []
      },
      onLoad: function onLoad() {},
      close: function close() {
        window["LobbyVideo"] = null;
        console.warn("\u9000\u51fa\u70b9\u64ad...");
        VideoManager.instance.requestVideoState(0, function(data) {});
      },
      initVideo: function initVideo(startIdx, dlist, bEnableTouch) {
        var _this = this;
        this.curVideoData = [];
        this.m_data = dlist;
        this.pageIndex = startIdx;
        window["LobbyVideo"] = this;
        console.warn("\u8fdb\u5165\u70b9\u64ad...", dlist.length);
        VideoManager.instance.requestVideoState(1, function(data) {});
        cc.director.setClearColor(new cc.Color(0, 0, 0, 0));
        var self = this;
        this.isMoveing = false;
        this.touchNode.on(cc.Node.EventType.TOUCH_START, function(e) {
          self.beginPos = e.getLocation();
        });
        this.touchNode.on(cc.Node.EventType.TOUCH_MOVE, function(e) {});
        this.touchNode.on(cc.Node.EventType.TOUCH_END, function(e) {
          self.endPos = e.getLocation();
          var endX = self.beginPos.x - self.endPos.x;
          var endY = self.beginPos.y - self.endPos.y;
          if (Math.abs(endX) <= 20 || Math.abs(endY) <= 20) {
            var page = "page" + _this.pageIndex;
            console.log("\u70b9\u51fb\u4e86", page);
            for (var index = 0; index < _this.m_list.length; index++) {
              var element = _this.m_list[index];
              var video = element.getComponent("CiveVideoLayer");
              var p = element.convertToNodeSpaceAR(cc.v2(self.endPos));
              if (video.starNode.getBoundingBox().contains(p)) {
                if (element.name == page) {
                  bEnableTouch && video.onBtnStar();
                  break;
                }
              } else if (video.headNode.getBoundingBox().contains(p)) {
                if (element.name == page) {
                  bEnableTouch && self.gotoUserVideo(video);
                  break;
                }
              } else if (video.shareBtn.getBoundingBox().contains(p)) {
                if (element.name == page) {
                  self.shareVedioToFriend();
                  break;
                }
              } else if (element.name == page) {
                video.onBtnPlay();
                break;
              }
            }
          } else if (Math.abs(endX) > Math.abs(endY)) endX > 0 ? console.log("left") : console.log("right"); else if (endY > 0) {
            console.log("down");
            self.switchVideoPlay(1);
          } else {
            console.log("up");
            self.switchVideoPlay(2);
          }
        });
        this.m_list = [];
        var list = [];
        list.push(this.m_data.length - 1);
        list.push(this.pageIndex);
        list.push(this.pageIndex + 1);
        this.initVideoList(list);
      },
      gotoUserVideo: function gotoUserVideo(video) {
        console.log("\u8df3\u8f6c\u7528\u6237\u89c6\u9891", video);
        GlobalEvent.instance.emit("click_user_video", video.videoData);
      },
      initVideoList: function initVideoList(list) {
        for (var index = 0; index < this.m_list.length; index++) {
          var element = this.m_list[index];
          element.destroy();
        }
        this.m_list = [];
        var pos = [ 1334, 0, -1334 ];
        for (var _index = 0; _index < list.length; _index++) {
          var _element = this.m_data[list[_index]];
          if (_element) {
            var tmp = cc.instantiate(this.itemPrefab);
            tmp.name = "page" + list[_index];
            tmp.parent = this.pageView;
            tmp.position = cc.v2(0, pos[_index]);
            tmp.getComponent("CiveVideoLayer").init(list[_index], _element);
            this.m_list.push(tmp);
            0 == list[_index] && (this.curVideoData = _element);
          }
        }
        this.test();
        this.setShareVedioToFriendData();
        this.initShareVedioToFriend();
      },
      removeVideoToList: function removeVideoToList(removeIdx) {
        console.log("\u5f53\u524d\u5220\u9664\u89c6\u9891\u4f4d\u7f6e\uff1a", removeIdx);
        for (var index = 0; index < this.m_list.length; index++) {
          var element = this.m_list[index];
          if (index == removeIdx) {
            this.m_list.splice(index, 1);
            element.destroy();
            break;
          }
        }
        this.adjustVideoPos();
      },
      addVideoToList: function addVideoToList(flag, pageIdx, addPos) {
        console.log("\u5f53\u524d\u6dfb\u52a0\u89c6\u9891\u4f4d\u7f6e\uff1a", addPos);
        var tmp = cc.instantiate(this.itemPrefab);
        tmp.name = "page" + pageIdx;
        tmp.parent = this.pageView;
        tmp.position = cc.v2(0, addPos);
        tmp.getComponent("CiveVideoLayer").init(pageIdx, this.m_data[pageIdx]);
        1 == flag ? this.m_list.unshift(tmp) : this.m_list.push(tmp);
      },
      adjustVideoPos: function adjustVideoPos() {
        var pos = [ 1334, 0, -1334 ];
        for (var index = 0; index < this.m_list.length; index++) {
          var element = this.m_list[index];
          element.y = pos[index];
        }
        this.isMoveing = false;
        this.test();
      },
      switchVideoPlay: function switchVideoPlay(dir) {
        var _this2 = this;
        if (this.isMoveing) return;
        this.isMoveing = true;
        for (var index = 0; index < this.m_list.length; index++) {
          var element = this.m_list[index];
          element.getComponent("CiveVideoLayer").stopPlay();
        }
        if (2 === dir) {
          this.pageIndex++;
          this.pageIndex > this.m_data.length - 1 && (this.pageIndex = 0);
          var nextPage = this.pageIndex + 1;
          nextPage > this.m_data.length - 1 && (nextPage = 0);
          console.log("\u4e0b\u4e00\u9875\u6570\uff1a", this.pageIndex, nextPage);
          this.addVideoToList(2, nextPage, this.m_list[this.m_list.length - 1].y - 1334);
          var _loop = function _loop(_index2) {
            var element = _this2.m_list[_index2];
            element.runAction(cc.sequence(cc.moveTo(.2, cc.v2(0, element.y + 1334)), cc.callFunc(function() {
              _this2.curVideoData = element;
              _this2.setShareVedioToFriendData();
              _index2 == _this2.m_list.length - 1 && _this2.removeVideoToList(0);
            })));
          };
          for (var _index2 = 0; _index2 < this.m_list.length; _index2++) _loop(_index2);
        } else if (1 === dir) {
          this.pageIndex--;
          this.pageIndex < 0 && (this.pageIndex = this.m_data.length - 1);
          var _nextPage = this.pageIndex - 1;
          _nextPage < 0 && (_nextPage = this.m_data.length - 1);
          console.log("\u4e0b\u4e00\u9875\u6570\uff1a", this.pageIndex, _nextPage);
          this.addVideoToList(1, _nextPage, this.m_list[0].y + 1334);
          var _loop2 = function _loop2(_index3) {
            var element = _this2.m_list[_index3];
            element.runAction(cc.sequence(cc.moveTo(.2, cc.v2(0, element.y - 1334)), cc.callFunc(function() {
              _this2.curVideoData = element;
              _this2.setShareVedioToFriendData();
              _index3 == _this2.m_list.length - 1 && _this2.removeVideoToList(_this2.m_list.length - 1);
            })));
          };
          for (var _index3 = 0; _index3 < this.m_list.length; _index3++) _loop2(_index3);
        }
      },
      test: function test() {
        for (var index = 0; index < this.m_list.length; index++) {
          var element = this.m_list[index];
          console.log("\u9875\u9762\u4f4d\u7f6e\uff1a", index, element.name, element.y);
        }
      },
      shareVedioToFriend: function shareVedioToFriend() {
        globalThis.LobbyurlShart();
      },
      setShareVedioToFriendData: function setShareVedioToFriendData() {
        this.share_sTitle = "\u5076ONE\u9189\u7f8e\u57ce";
        this.curVideoData && this.curVideoData.upLoadName && (this.share_sTitle = this.curVideoData.upLoadName);
        this.share_SDescTitle = "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u6253\u9020\u5bb6\u4e61\u6e38\u620f\u77ed\u89c6\u9891\u76f4\u64ad\u5e73\u53f0\uff0c\u4e3a\u5bb6\u4e61\u7684\u597d\u4ea7\u54c1\u63d0\u4f9b\u76f4\u9500\u6e20\u9053\uff0c\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01";
        this.curVideoData && this.curVideoData.desc && (this.share_SDescTitle = this.curVideoData.desc);
        this.share_sImg = wxShareAdvIMG;
        this.curVideoData && this.curVideoData.CoverUrl && (this.share_sImg = this.curVideoData.CoverUrl);
        this.share_sWxShareURL = wxShareURL;
        this.curVideoData && this.curVideoData.fileID && (this.share_sWxShareURL = wxShareURL + "?fileID=" + this.curVideoData.fileID);
      },
      initShareVedioToFriend: function initShareVedioToFriend() {
        var self = this;
        var bDebug = false;
        var LobbyLogic = new (require("LobbyLogic"))();
        var myID = LobbyLogic.getUserID();
        123363 != myID && 124624 != myID || (bDebug = true);
        var callback = function(data) {
          var CryptoJS = CryptoJS || function(e, m) {
            var p = {}, j = p.lib = {}, l = function l() {}, f = j.Base = {
              extend: function extend(a) {
                l.prototype = this;
                var c = new l();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function() {
                  c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
              },
              create: function create() {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
              },
              init: function init() {},
              mixIn: function mixIn(a) {
                for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
              },
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            }, n = j.WordArray = f.extend({
              init: function init(a, c) {
                a = this.words = a || [];
                this.sigBytes = c != m ? c : 4 * a.length;
              },
              toString: function toString(a) {
                return (a || h).stringify(this);
              },
              concat: function concat(a) {
                var c = this.words, q = a.words, d = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (d + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
                this.sigBytes += a;
                return this;
              },
              clamp: function clamp() {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
                a.length = e.ceil(c / 4);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a.words = this.words.slice(0);
                return a;
              },
              random: function random(a) {
                for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
                return new n.init(c, a);
              }
            }), b = p.enc = {}, h = b.Hex = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) {
                  var f = c[d >>> 2] >>> 24 - d % 4 * 8 & 255;
                  b.push((f >>> 4).toString(16));
                  b.push((15 & f).toString(16));
                }
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
                return new n.init(b, c / 2);
              }
            }, g = b.Latin1 = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - d % 4 * 8 & 255));
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (255 & a.charCodeAt(d)) << 24 - d % 4 * 8;
                return new n.init(b, c);
              }
            }, r = b.Utf8 = {
              stringify: function stringify(a) {
                try {
                  return decodeURIComponent(escape(g.stringify(a)));
                } catch (c) {
                  throw Error("Malformed UTF-8 data");
                }
              },
              parse: function parse(a) {
                return g.parse(unescape(encodeURIComponent(a)));
              }
            }, k = j.BufferedBlockAlgorithm = f.extend({
              reset: function reset() {
                this._data = new n.init();
                this._nDataBytes = 0;
              },
              _append: function _append(a) {
                "string" == typeof a && (a = r.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
              },
              _process: function _process(a) {
                var c = this._data, b = c.words, d = c.sigBytes, f = this.blockSize, h = d / (4 * f), h = a ? e.ceil(h) : e.max((0 | h) - this._minBufferSize, 0);
                a = h * f;
                d = e.min(4 * a, d);
                if (a) {
                  for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
                  g = b.splice(0, a);
                  c.sigBytes -= d;
                }
                return new n.init(g, d);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a._data = this._data.clone();
                return a;
              },
              _minBufferSize: 0
            });
            j.Hasher = k.extend({
              cfg: f.extend(),
              init: function init(a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
              },
              reset: function reset() {
                k.reset.call(this);
                this._doReset();
              },
              update: function update(a) {
                this._append(a);
                this._process();
                return this;
              },
              finalize: function finalize(a) {
                a && this._append(a);
                return this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function _createHelper(a) {
                return function(c, b) {
                  return new a.init(b).finalize(c);
                };
              },
              _createHmacHelper: function _createHmacHelper(a) {
                return function(b, f) {
                  return new s.HMAC.init(a, f).finalize(b);
                };
              }
            });
            var s = p.algo = {};
            return p;
          }(Math);
          (function() {
            var e = CryptoJS, m = e.lib, p = m.WordArray, j = m.Hasher, l = [], m = e.algo.SHA1 = j.extend({
              _doReset: function _doReset() {
                this._hash = new p.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
              },
              _doProcessBlock: function _doProcessBlock(f, n) {
                for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                  if (16 > a) l[a] = 0 | f[n + a]; else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
                    l[a] = c << 1 | c >>> 31;
                  }
                  c = (h << 5 | h >>> 27) + j + l[a];
                  c = 20 > a ? c + (1518500249 + (g & e | ~g & k)) : 40 > a ? c + (1859775393 + (g ^ e ^ k)) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);
                  j = k;
                  k = e;
                  e = g << 30 | g >>> 2;
                  g = h;
                  h = c;
                }
                b[0] = b[0] + h | 0;
                b[1] = b[1] + g | 0;
                b[2] = b[2] + e | 0;
                b[3] = b[3] + k | 0;
                b[4] = b[4] + j | 0;
              },
              _doFinalize: function _doFinalize() {
                var f = this._data, e = f.words, b = 8 * this._nDataBytes, h = 8 * f.sigBytes;
                e[h >>> 5] |= 128 << 24 - h % 32;
                e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
                e[15 + (h + 64 >>> 9 << 4)] = b;
                f.sigBytes = 4 * e.length;
                this._process();
                return this._hash;
              },
              clone: function clone() {
                var e = j.clone.call(this);
                e._hash = this._hash.clone();
                return e;
              }
            });
            e.SHA1 = j._createHelper(m);
            e.HmacSHA1 = j._createHmacHelper(m);
          })();
          var appId = WechatAppID;
          var timestamp = new Date().getTime().toString();
          var nonceStr = (1e3 * Math.random()).toString();
          var ticket = data.jsapi_ticket;
          var url = location.href.split("#")[0];
          var string = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timestamp + "&url=" + url;
          var signature = CryptoJS.SHA1(string, {
            string: true
          }).toString();
          wx.config({
            debug: bDebug,
            appId: appId,
            timestamp: timestamp,
            nonceStr: nonceStr,
            signature: signature,
            jsApiList: [ "updateAppMessageShareData", "updateTimelineShareData" ]
          });
          wx.ready(function() {
            wx.updateAppMessageShareData({
              title: self.share_sTitle,
              desc: self.share_SDescTitle,
              link: self.share_sWxShareURL,
              imgUrl: self.share_sImg,
              success: function success(res) {},
              cancel: function cancel(res) {},
              fail: function fail(res) {}
            });
            wx.updateTimelineShareData({
              title: self.share_sTitle,
              desc: self.share_SDescTitle,
              link: self.share_sWxShareURL,
              imgUrl: self.share_sImg,
              success: function success(res) {},
              cancel: function cancel(res) {},
              fail: function fail(res) {}
            });
          });
        }.bind(this);
        ConfigDataManager.getWXjsapi_ticket(myID, callback);
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic",
    VideoManager: "VideoManager"
  } ],
  LoadingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82658423bBAw5v7kU/2AJ9g", "LoadingLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        message: cc.Label,
        outTime: {
          default: 10,
          type: cc.Integer
        },
        offset: {
          default: 30,
          type: cc.Integer
        },
        otherThing: {
          default: null,
          type: cc.Node
        },
        loadingTextBgNode: cc.Node
      },
      start: function start() {},
      init: function init(msg, outTime, haveBg) {
        var _this = this;
        this.message.string = msg;
        this.message._forceUpdateRenderData(true);
        this.loadingTextBgNode.width = this.message.node.width + 2 * this.offset + (this.otherThing ? this.otherThing.width : 0);
        outTime = outTime || this.outTime;
        this.scheduleOnce(function() {
          _this.node.parent = null;
        }, outTime);
        if (haveBg) {
          var mask = this.getComponent("LayerMask");
          this.getComponent("LayerMask").enabled = true;
        }
      },
      onDestroy: function onDestroy() {
        this.node.stopAllActions();
        this.unscheduleAllCallbacks();
      },
      onDisable: function onDisable() {
        this.node.stopAllActions();
        this.unscheduleAllCallbacks();
      }
    });
    window.loadingLayer = null;
    window.loadingLayerPrefab = null;
    window.createLoading = function(msg, outTime, haveBg) {
      var scene = cc.director.getScene();
      outTime = outTime || G_COMMON_LOADING_TIME;
      removeLoading(msg);
      if (loadingLayerPrefab) {
        var layer = cc.instantiate(loadingLayerPrefab);
        layer.msg = msg;
        layer.zIndex = G_LOADING_ZORDER_TAG;
        layer.name = "LoadingLayer";
        if (scene) {
          scene.addChild(layer);
          window.loadingLayer = layer;
          var script = layer.getComponent("LoadingLayer");
          script.init(msg, outTime, haveBg);
        }
      } else cc.loader.loadRes("prefab/LoadingLayer", function(err, prefab) {
        var layer = cc.instantiate(prefab);
        layer.msg = msg;
        layer.zIndex = G_LOADING_ZORDER_TAG;
        layer.name = "LoadingLayer";
        if (scene) {
          scene.addChild(layer);
          window.loadingLayer = layer;
          loadingLayerPrefab = prefab;
          var _script = layer.getComponent("LoadingLayer");
          _script.init(msg, outTime, haveBg);
        }
      });
    };
    window.removeLoading = function(msg) {
      var scene = cc.director.getScene();
      if (loadingLayer) {
        loadingLayer.parent = null;
        loadingLayer = null;
      }
    };
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LoadingPrefab: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e302dS5AyFPn4FZqxTtkO+b", "LoadingPrefab");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        progressBar: cc.ProgressBar,
        BG: cc.Sprite
      },
      onLoad: function onLoad() {},
      start: function start() {},
      init: function init() {
        this.progressBar.progress = 0;
        this.node.width = this.maskWidth || cc.view.getVisibleSize().width;
        this.node.height = this.maskHeight || cc.view.getVisibleSize().height;
      }
    });
    window.loadsceneRes = function(url, callback) {
      removeLoading();
      callback();
    };
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LobbyBaseLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9f87KWruJEOJeRkUmAHeLM", "LobbyBaseLayer");
    "use strict";
    module.exports = cc.Class({
      extends: require("BaseLayer"),
      ctor: function ctor() {},
      onLoad: function onLoad() {
        this._super();
      },
      onDiamondChanged: function onDiamondChanged(diamond) {},
      onMoneyChanged: function onMoneyChanged(money) {},
      onGiftCardChanged: function onGiftCardChanged(giftCard) {},
      onTransfernumChanged: function onTransfernumChanged(Transfernum) {},
      onLogonGamePeoplecountChange: function onLogonGamePeoplecountChange(peopleCount) {},
      onLogonNewMsgComing1: function onLogonNewMsgComing1(msgData) {},
      onLogonNewMsgComing2: function onLogonNewMsgComing2(msgData) {},
      onScoreChanged: function onScoreChanged(score) {},
      onPointChanged: function onPointChanged(point) {},
      onBgChanged: function onBgChanged(bgId) {},
      onMapChanged: function onMapChanged(mapName) {},
      onOpenRoomChanged: function onOpenRoomChanged() {},
      onLobbyLayoutTypeChanged: function onLobbyLayoutTypeChanged(lobbyLayoutType) {},
      onBankMoneyChanged: function onBankMoneyChanged(bankMoney) {},
      onFriendNotifyAdd: function onFriendNotifyAdd(friendNotify) {},
      onFriendNotifyDel: function onFriendNotifyDel(notifyID) {},
      onFriendAdd: function onFriendAdd(friend) {},
      onFriendDel: function onFriendDel(friendID) {},
      onBuyDeskInfoDel: function onBuyDeskInfoDel(passwd) {},
      onBuyDeskInfoUpdate: function onBuyDeskInfoUpdate(data) {},
      onFriendOnlineStatusChange: function onFriendOnlineStatusChange(friendID, onlineStatus) {},
      onDeskUserSit: function onDeskUserSit(userID) {},
      onDeskUserUp: function onDeskUserUp(userID) {},
      onFriendRedSpotChange: function onFriendRedSpotChange(info) {},
      onMailRedSpot: function onMailRedSpot(info) {},
      onFriendsGroupAdd: function onFriendsGroupAdd(friendsGroup) {},
      onFriendsGroupDel: function onFriendsGroupDel(friendsGroupID) {},
      onFriendsGroupNotifyAdd: function onFriendsGroupNotifyAdd(notify) {},
      onFriendsGroupNotifyDel: function onFriendsGroupNotifyDel(notifyID) {},
      onFriendsGroupMemberAdd: function onFriendsGroupMemberAdd(friendsGroupID, member) {},
      onFriendsGroupMemberDel: function onFriendsGroupMemberDel(friendsGroupID, userID) {},
      onFriendsGroupRoomMsgAdd: function onFriendsGroupRoomMsgAdd(friendsGroupID, roomMsgID) {},
      onFriendsGroupRoomMsgDel: function onFriendsGroupRoomMsgDel(friendsGroupID, roomMsgID) {},
      onFriendsGroupRoomMsgUpdate: function onFriendsGroupRoomMsgUpdate(friendsGroupID, accoMsgID) {},
      onFriendsGroupAccoMsgAdd: function onFriendsGroupAccoMsgAdd(friendsGroupID, accoMsg) {},
      onFriendsGroupAccoMsgDel: function onFriendsGroupAccoMsgDel(friendsGroupID, accoMsgID) {},
      onFriendsGroupNameChange: function onFriendsGroupNameChange(friendsGroupID, name) {},
      onFriendsGroupRedSpotChange: function onFriendsGroupRedSpotChange(info) {},
      onFriendsGroupNoticeChange: function onFriendsGroupNoticeChange(friendsGroupID, notice) {},
      onFriendsGroupWechatChange: function onFriendsGroupWechatChange(friendsGroupID, wechat) {},
      onFriendsGroupScoreChange: function onFriendsGroupScoreChange(friendsGroupID, userID, score) {},
      onFriendsGroupDeskAdd: function onFriendsGroupDeskAdd(friendsGroupID, desk) {},
      onFriendsGroupDeskChange: function onFriendsGroupDeskChange(friendsGroupID, desk) {},
      onFriendsGroupDeskDel: function onFriendsGroupDeskDel(friendsGroupID, desk) {},
      onFriendsGroupVIPDeskAdd: function onFriendsGroupVIPDeskAdd(friendsGroupID, desk) {},
      onFriendsGroupVIPDeskChange: function onFriendsGroupVIPDeskChange(friendsGroupID, desk) {},
      onFriendsGroupVIPDeskDel: function onFriendsGroupVIPDeskDel(friendsGroupID, desk) {},
      onFriendsGroupStatusChange: function onFriendsGroupStatusChange(friendsGroupID, userID, status) {},
      onFriendsGroupPowerChange: function onFriendsGroupPowerChange(friendsGroupID, userID, power) {},
      onFriendsGroupMemberFireCoinChange: function onFriendsGroupMemberFireCoinChange(friendsGroupID, userID, fireCoin) {},
      onCurMatchStart: function onCurMatchStart(info) {},
      onCurMatchChange: function onCurMatchChange(info) {},
      onCurMatchFail: function onCurMatchFail(info) {},
      onCurMatchComeSoon: function onCurMatchComeSoon(info) {},
      onCurMatchResult: function onCurMatchResult(info) {},
      showMatchGameDeskInfo: function showMatchGameDeskInfo() {},
      onDestroy: function onDestroy() {
        this._super();
      },
      onEnable: function onEnable() {
        DataNotify.addListener(this);
      },
      onDisable: function onDisable() {
        DataNotify.removeListener(this);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LobbyBottomPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f9d0sakvFHEJilyRABqpdT", "LobbyBottomPanel");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var SpriteArray = require("SpriteArray")["default"];
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        ShopItem: cc.Prefab,
        zhanjiItem: cc.Prefab,
        animationDesk: [ sp.Skeleton ],
        bottomSpriteBtns: [ SpriteArray ],
        bgTop: cc.Node,
        LayoutChat: cc.Prefab,
        chatingNode: cc.Node
      },
      onEnable: function onEnable() {
        this._super();
        DataNotify.addListener(this);
        GlobalEvent.instance.on("SWITCH_LOBBY_BUTTONS_STATE", this.setBottomButtonStatus, this);
        GlobalEvent.instance.on("switch_page_msg", this.onSwitchPageMsg, this);
        this.setBottomButtonStatus(0);
        window.vedioFileId && 0 != window.vedioFileId && this.onSwitchPageMsg("livebroadcast");
      },
      onDisable: function onDisable() {
        this._super();
        DataNotify.removeListener(this);
        GlobalEvent.instance.off("SWITCH_LOBBY_BUTTONS_STATE", this.setBottomButtonStatus, this);
        GlobalEvent.instance.off("switch_page_msg", this.onSwitchPageMsg, this);
      },
      onLoad: function onLoad() {
        window["LobbyBottom"] = this;
        this.curTag = null;
        this.callback = null;
        this.defaultMsg = {
          tag: 0,
          tagExt: "fixed",
          chatContent: "\u5c0f\u5076\uff1a\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u4e3a\u5bb6\u4e61\u4ee3\u8a00"
        };
        this.curChatMsg = {};
        this.arrChatMsg = [];
        this.onPlayChatMsgComing(this.defaultMsg);
        window.G_bGetChatList || this.requestChatListFromPHP();
      },
      onSwitchPageMsg: function onSwitchPageMsg(keyPage) {
        console.log("onSwitchPageMsg =", keyPage);
        this.CreateRoomGameConfig(null, keyPage);
      },
      handleAnnimation: function handleAnnimation() {},
      closeAnimation: function closeAnimation() {
        for (var index = 0; index < 3; index++) {
          var element = this.animationDesk[index];
          element.clearTracks();
        }
      },
      onDestroy: function onDestroy() {
        this._super();
        this.node.stopAllActions();
      },
      setBottomButtonStatus: function setBottomButtonStatus(index) {
        void 0 === index && (index = 0);
        for (var i = 0; i < this.bottomSpriteBtns.length; i++) this.bottomSpriteBtns[i].index = 0;
        index >= 0 && index < this.bottomSpriteBtns.length && (this.bottomSpriteBtns[index].index = 1);
      },
      setBottomButton_Me: function setBottomButton_Me() {
        window.backBtnTag = 2;
        this.CreateRoomGameConfig(null, "Button_Me");
      },
      CreateRoomGameConfig: function CreateRoomGameConfig(event, tag) {
        var _this = this;
        var layerNameurl = "";
        var selectIndex = -1;
        MYAudioEngine.setMusicStatus(true);
        MYAudioEngine.resumeMusic();
        switch (tag) {
         case "Button_Me":
          layerNameurl = "prefab/lobby/LayoutPersonalInformation";
          selectIndex = 4;
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "btn_Notice":
          layerNameurl = "prefab/lobby/LayoutNotice";
          selectIndex = 2;
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "livebroadcast":
          layerNameurl = "prefab/lobby/LayoutVideo";
          selectIndex = 1;
          MYAudioEngine.setMusicStatus(false);
          MYAudioEngine.pauseMusic();
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 0);
          break;

         case "btn_Action":
          layerNameurl = "prefab/lobby/LayoutActivity";
          selectIndex = 3;
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
          break;

         case "LayoutLobby":
          LOOBBY_STATIC = true;
          layerNameurl = "prefab/lobby/LayoutLobby";
          selectIndex = 0;
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        }
        if ("LayoutLobby" == tag && null == this.callback) {
          tag = "lobby";
          LOOBBY_STATIC = true;
          layerNameurl = "prefab/lobby/LayoutHall";
          selectIndex = 0;
          cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        }
        if ("livebroadcast" == this.curTag && "livebroadcast" == tag) {
          createTips("\u5df2\u5728\u89c6\u9891\u9875");
          return;
        }
        if ("" == layerNameurl) {
          createTips("\u656c\u8bf7\u671f\u5f85");
          return;
        }
        this.setBottomButtonStatus(selectIndex);
        if (this.parentNodeProxy) {
          this.parentNodeProxy.BottomLayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          this.parentNodeProxy.BottomLayOutContent.removeAllChildren();
        }
        var layout = window["LobbyCanvas"].node.getChildByName(tag);
        layout && layout.destroy();
        "livebroadcast" == this.curTag && "livebroadcast" != tag ? cc.resources.load("prefab/lobby/LayoutHall", cc.Prefab, function(err, prefab2) {
          var layout = window["LobbyCanvas"].node.getChildByName("livebroadcast");
          layout && layout.destroy();
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          if ("lobby" == tag) {
            var node = cc.instantiate(prefab2);
            var _layout = window["LobbyCanvas"].node.getChildByName("livebroadcast");
            _layout && _layout.destroy();
            node.parent = window["LobbyCanvas"].node;
            node.name = tag;
            _this.curTag = tag;
            return;
          }
          var node2 = cc.instantiate(prefab2);
          node2.name = "lobby";
          node2.parent = window["LobbyCanvas"].node;
          cc.resources.load(layerNameurl, cc.Prefab, function(err, prefab) {
            if (err) {
              cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
              return;
            }
            var node = cc.instantiate(prefab);
            node.name = tag;
            node.parent = node2.getComponent("LobbyScene").BottomLayOutContent;
            _this.curTag = tag;
            if ("Button_Me" == tag) {
              var tipScript = node.getComponent("PersonalInformation");
              if (window.backBtnTag) {
                tipScript.init(window.backBtnTag);
                window.backBtnTag = null;
              } else tipScript.init(0);
            }
          });
        }) : cc.resources.load(layerNameurl, cc.Prefab, function(err, prefab) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          var node = cc.instantiate(prefab);
          if ("livebroadcast" == tag || "lobby" == tag) {
            if ("livebroadcast" == tag) {
              var _layout2 = window["LobbyCanvas"].node.getChildByName("lobby");
              _layout2 && _layout2.destroy();
            } else if ("lobby" == tag) {
              var _layout3 = window["LobbyCanvas"].node.getChildByName("livebroadcast");
              _layout3 && _layout3.destroy();
            }
            node.parent = window["LobbyCanvas"].node;
          } else node.parent = _this.parentNodeProxy.BottomLayOutContent;
          node.name = tag;
          _this.curTag = tag;
          if ("LayoutLobby" == tag) {
            var tipScript = node.getComponent("LayoutLobby");
            tipScript.init(_this.callback);
          }
          if ("Button_Me" == tag) {
            var _tipScript = node.getComponent("PersonalInformation");
            if (window.backBtnTag) {
              _tipScript.init(window.backBtnTag);
              window.backBtnTag = null;
            } else _tipScript.init(0);
          }
        });
        this.handleAnnimation();
      },
      showChatView: function showChatView() {
        var layout = window["LobbyCanvas"].node.getChildByName("LayoutChat");
        layout && layout.removeFromParent();
        var LayoutChat = cc.instantiate(this.LayoutChat);
        LayoutChat.parent = window["LobbyCanvas"].node;
      },
      setParentNodeProxy: function setParentNodeProxy(scene, tag, callBack) {
        this.parentNodeProxy = scene;
        this.curTag = tag;
        this.callback = callBack;
      },
      setParentbgTop: function setParentbgTop() {
        this.bgTop.active = true;
      },
      onLogonNewMsgComing1: function onLogonNewMsgComing1(msgData) {
        this.onPlayChatMsgComing(msgData);
      },
      onPlayChatMsgComing: function onPlayChatMsgComing(chatData) {
        if (chatData && 0 != chatData.tag) return;
        if (!chatData.tagExt) {
          this.arrChatMsg.push(chatData);
          return;
        }
        if (this.isShowNotice) return;
        this.isShowNotice = true;
        var that = this;
        var newChatData = this.defaultMsg;
        if (this.arrChatMsg.length > 0) {
          newChatData = this.arrChatMsg[0];
          this.arrChatMsg.splice(0, 1);
        }
        this.curChatMsg = newChatData;
        var lbChating = this.chatingNode.getChildByName("mask").getChildByName("lbChating");
        var labelMove = function labelMove() {
          lbChating.getComponent(cc.RichText).string = that.curChatMsg.chatContent;
          var moveX = 600;
          var tmove = moveX / 128;
          lbChating.x = 200;
          lbChating.runAction(cc.sequence(cc.moveBy(tmove, -moveX, 0), cc.callFunc(function() {
            lbChating.x = 200;
            that.isShowNotice = false;
            that.onPlayChatMsgComing(that.defaultMsg);
          })));
        };
        labelMove();
      },
      requestChatListFromPHP: function requestChatListFromPHP() {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            window.G_bGetChatList = true;
            window.G_chatList = jsonData.data;
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          typeSort: 0
        };
        args.url = "https://" + G_PHP_IP + "/api/v1/User/userWorldchatInfo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LobbyBaseLayer: "LobbyBaseLayer",
    SpriteArray: "SpriteArray"
  } ],
  LobbyCanvas: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3585zCyWhEr5ZwgzxHfE3r", "LobbyCanvas");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var VideoManager = require("VideoManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        hallNodePrefab: cc.Prefab,
        userVideoPrefab: cc.Prefab,
        conNetNodePrefab: cc.Prefab,
        Image_Bg: cc.Node,
        livePrefab: cc.Prefab,
        _liveNode: cc.Node
      },
      onLoad: function onLoad() {
        window["LobbyCanvas"] = this;
        var frameSize = cc.view.getFrameSize();
        cc.view.setOrientation(cc.macro.ORIENTATION_PORTRAIT);
        frameSize.width > frameSize.height && cc.view.setFrameSize(frameSize.height, frameSize.width);
        this.resetSize(this.node);
        VideoManager.instance.refreshVideo();
        if (!this.node.getChildByName("lobby")) {
          this.Image_Bg.active = true;
          var hallNode = cc.instantiate(this.hallNodePrefab);
          hallNode.name = "lobby";
          this.node.addChild(hallNode);
          LOOBBY_STATIC = false;
        }
      },
      onDestroy: function onDestroy() {},
      resetSize: function resetSize(cav) {
        var canvas = cc.Canvas.instance;
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          canvas.fitHeight = true;
          canvas.fitWidth = false;
          console.log("\u9002\u914d\u9ad8\u5ea6");
        } else {
          canvas.fitHeight = false;
          canvas.fitWidth = true;
          console.log("\u9002\u914d\u5bbd\u5ea6");
        }
        this.fitScreen(cav, designSize);
      },
      fitScreen: function fitScreen(canvasnode, designSize) {
        var scaleW = canvasnode.width / designSize.width;
        var scaleH = canvasnode.height / designSize.height;
        var bgNode = canvasnode.getChildByName("Image_Bg_1");
        var bgScale = canvasnode.height / bgNode.height;
        bgNode.width *= bgScale;
        bgNode.height *= bgScale;
        if (scaleW > scaleH) {
          bgScale = canvasnode.width / bgNode.width;
          bgNode.width *= bgScale;
          bgNode.height *= bgScale;
        }
      },
      showLiveView: function showLiveView() {
        if (null == this._liveNode) {
          this._liveNode = cc.instantiate(this.livePrefab);
          this._liveNode.parent = this.node;
        }
        this._liveNode.active = true;
      },
      hideLiveView: function hideLiveView() {
        null != this._liveNode && (this._liveNode.active = false);
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    VideoManager: "VideoManager"
  } ],
  LobbyCreaterImage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd37arJmU5C554apvlnS+Eb", "LobbyCreaterImage");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {
        var lobbyDiv = document.getElementById("lobbyQRCode");
        lobbyDiv && lobbyDiv.remove();
        cc.log("*********************\u751f\u6210\u56fe\u7247\uff08\u5927\u5385\u5206\u4eab\uff09*********************");
        this.LobbyLogic = new (require("LobbyLogic"))();
        var myInfo = this.LobbyLogic.getMyInfo();
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        var scaleW = frameSize.width / designSize.width;
        var scaleH = frameSize.height / designSize.height;
        var _width = 596 * scaleW;
        var _height = 683 * scaleH;
        var url = "https://ouwan.hmzb.top/image/share/play?";
        var gameIDName = "\u5076ONE\u6700\u7f8e\u57ce\uff0c\u4e3a\u5bb6\u4e61\u4ee3\u8a00";
        var gameName = "gameName=" + gameIDName;
        url += gameName;
        var headUrl = "&headUrl=" + myInfo.headURL;
        url += headUrl;
        var userID = "&userID=" + myInfo.userID;
        url += userID;
        var userName = "&userName=" + myInfo.name;
        url += userName;
        var shareUrl = "&shareUrl=" + wxShareURL + "?state=" + userID;
        url += shareUrl;
        console.log("GameDesk share image url", url);
        var gameDiv = document.getElementById("Cocos2dGameContainer");
        var background = document.createElement("img");
        background.id = "lobbyQRCode";
        background.src = url;
        background.alt = "bigImg";
        background.width = _width;
        background.height = _height;
        background.style.position = "absolute";
        background.style.top = parseInt(gameDiv.style.height.replace(/px/, "")) / 2 - background.height / 2 + "px";
        background.style.left = parseInt(gameDiv.style.width.replace(/px/, "")) / 2 - background.width / 2 + "px";
        gameDiv.appendChild(background);
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        var lobbyDiv = document.getElementById("lobbyQRCode");
        lobbyDiv && lobbyDiv.remove();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  LobbyLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fefcSvgyxN8qszBQRZ+jh1", "LobbyLogic");
    "use strict";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {
        this.LoginRoomLogic = new (require("LoginRoomLogic"))();
        this.LobbyRoomLogic = new (require("LobbyRoomLogic"))();
        this.SystemNoticeLogic = new (require("SystemNoticeLogic"))();
      },
      enterGame: function enterGame(roomID, checkPointsNum, costType) {
        cc.log("LobbyLogic.enterGame[roomID = {0}]" + roomID);
        var roomInfo = RoomListManager.getRoomByRoomID(roomID);
        cc.log(JSON.stringify(roomInfo) + "roomInfo>>>>>>>>>>>>>>>>>>>>>>>");
        this.LoginRoomLogic.enterRoom(roomInfo, this.getUserID(), this.getUserToken(), checkPointsNum, costType);
      },
      requestFriendsGroupList: function requestFriendsGroupList(callback) {},
      getMyFeedback: function getMyFeedback(callback) {
        this.FeedbackLogic.getMyFeedback(callback);
      },
      requestSystemNotice: function requestSystemNotice(buyNum, consumeNum, callback) {
        this.SystemNoticeLogic.requestSystemNotice(buyNum, consumeNum, callback);
      },
      requestPayPrepayID: function requestPayPrepayID(buyNum, consumeNum, goodsID, callback) {
        this.SystemNoticeLogic.requestPayPrepayID(buyNum, consumeNum, goodsID, callback);
      },
      requestShopMommodity: function requestShopMommodity(callback) {
        this.SystemNoticeLogic.requestShopMommodity(callback);
      },
      requestPaijuList: function requestPaijuList(callback) {
        this.SystemNoticeLogic.requestPaijuList(callback);
      },
      requestZhanjiList: function requestZhanjiList(gameID, callback) {
        this.SystemNoticeLogic.requestZhanjiList(gameID, callback);
      },
      requestZhanjiDetailsList: function requestZhanjiDetailsList(gradeID, callback) {
        this.SystemNoticeLogic.requestZhanjiDetailsList(gradeID, callback);
      },
      requesSmalltZhanjiDetailsList: function requesSmalltZhanjiDetailsList(gradeID, callback) {
        this.SystemNoticeLogic.requesSmalltZhanjiDetailsList(gradeID, callback);
      },
      requestGongGaoMommodity: function requestGongGaoMommodity(callback) {
        this.SystemNoticeLogic.requestGongGaoMommodity(callback);
      },
      requestShartReward: function requestShartReward(ShartuserID) {
        this.SystemNoticeLogic.requestShartReward(ShartuserID);
      },
      requestQualifyingCount: function requestQualifyingCount(callback) {
        this.LobbyRoomLogic.requestQualifyingCount(callback);
      },
      requestLoaderCheckLogon: function requestLoaderCheckLogon(callback) {
        this.LobbyRoomLogic.requestLoaderCheckLogon(callback);
      },
      requestExchangeRead: function requestExchangeRead(callback, value) {
        this.LobbyRoomLogic.requestExchangeRead(callback, value);
      },
      requestCheckPointConfig: function requestCheckPointConfig(callback) {
        this.LobbyRoomLogic.requestCheckPointConfig(callback);
      },
      requestRoomRecord: function requestRoomRecord(callback) {
        this.RoomRecordLogic.requestRoomRecord(callback);
      },
      joinRoom: function joinRoom(roomNumber) {
        this.LobbyRoomLogic.joinRoom(roomNumber);
      },
      requestGameList: function requestGameList(callback) {
        GameSocket.requestGameList(callback);
      },
      requestWinRankList: function requestWinRankList(callback, rankType) {
        RankManager.requestWinRankList(callback, rankType);
      },
      requestRichRankList: function requestRichRankList(richType, callback, rankType) {
        RankManager.requestRichRankList(richType, callback, rankType);
      },
      requestMailList: function requestMailList(callback) {
        MailManager.requestIsMailDate(callback);
      },
      requestAllRoomList: function requestAllRoomList(callback) {
        RoomListManager.requestAllRoomList(callback);
      },
      requestRoomListByGameID: function requestRoomListByGameID(gameID, callback) {
        RoomListManager.requestRoomListByGameID(gameID, callback);
      },
      requestUserInfoByUserID: function requestUserInfoByUserID(userID, callback) {
        UserInfoManager.requestUserInfoByUserID(userID, callback);
      },
      getMyInfo: function getMyInfo() {
        return UserInfoManager.getMyInfo();
      },
      sendHornMessage: function sendHornMessage(message) {
        LobbySocket.requestHorn(message);
      },
      requestIsUseSign: function requestIsUseSign(userID, callback) {
        SignInfoManager.requestIsUseSign(userID, callback);
      },
      requestIsUseTurntable: function requestIsUseTurntable(userID, callback) {
        SignInfoManager.requestIsUseTurntable(userID, callback);
      },
      requestAgentConfig: function requestAgentConfig(callback) {
        LobbySocket.requestAgentConfig(callback);
      },
      requestMyResource: function requestMyResource() {
        setTimeout(function() {
          LobbySocket.requestMyResource();
        }, 200);
        var netMsg = this.createNetMsg(0, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_USERINFO_FLUSH);
        this.sendData(netMsg, function(netMsg) {
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var info = {};
            info.jewels = netMsg.popINT();
            info.money = netMsg.popLONGLONG();
            cc.log(info, "_Resolve_LogonUserInfoFlush");
          }
        });
      },
      requestLogonUserinfoFlush: function requestLogonUserinfoFlush(type, callback) {
        LobbySocket.requestLogonUserinfoFlush(type, callback);
      },
      requestDissmissDesk: function requestDissmissDesk(passwd) {
        LobbySocket.requestDissmissDesk(passwd);
      },
      requestUserBuyRoomList: function requestUserBuyRoomList(callback) {
        var actionName = "userBuyRoomList";
        var args = {};
        args.params = {
          api: "lobby",
          action: actionName,
          userID: LobbySocket.getMyInfo().userID
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            cc.log("\u83b7\u53d6\u623f\u95f4\u5217\u8868");
            cc.log(jsonData.data);
            RoomRecordManager.setRoomRecordList(jsonData.data);
            callback && callback(RoomRecordManager.getRoomRecordList());
          } else createTips(jsonData.msg);
        };
        MyHttpRequest.doRequest(args);
      },
      requestDissmissRoom: function requestDissmissRoom(passwd) {
        var actionName = "dismissRoom";
        var args = {};
        args.params = {
          api: "lobby",
          action: actionName,
          userID: LobbySocket.getMyInfo().userID,
          passwd: passwd
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          0 == jsonData.status || createTips(jsonData.msg);
        };
        args.requestDesc = "\u89e3\u6563\u623f\u95f4...";
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LobbyRoomLogic: "LobbyRoomLogic",
    LogicBasis: "LogicBasis",
    LoginRoomLogic: "LoginRoomLogic",
    SystemNoticeLogic: "SystemNoticeLogic"
  } ],
  LobbyMoneyFieldItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87e6c0VxwFNj6qvOYWvUnZn", "LobbyMoneyFieldItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        game1: cc.Sprite,
        game2: cc.Sprite,
        anim1: sp.Skeleton,
        anim2: sp.Skeleton,
        loading1: cc.Sprite,
        loading2: cc.Sprite,
        callBack: null
      },
      onLoad: function onLoad() {
        this.spriteFrameSession = null;
        this._onLoadCompleteHandler = null;
        this.loadComplete = false;
        this.playAnim = true;
        this.lastPlay = 0;
        this.random = 3 + 3 * Math.random();
        this.loading1.node.runAction(cc.repeatForever(cc.rotateBy(1, 360)));
        this.loading2.node.runAction(cc.repeatForever(cc.rotateBy(1, 360)));
      },
      onEnable: function onEnable() {
        this.game1.node.on(cc.Node.EventType.TOUCH_END, this._onClick1, this);
        this.game2.node.on(cc.Node.EventType.TOUCH_END, this._onClick2, this);
      },
      onDisable: function onDisable() {
        this.game1.node.off(cc.Node.EventType.TOUCH_END, this._onClick1, this);
        this.game2.node.off(cc.Node.EventType.TOUCH_END, this._onClick2, this);
      },
      onDestroy: function onDestroy() {
        this.callBack = null;
        if (this.spriteFrameSession) {
          this.spriteFrameSession.dispose();
          this.spriteFrameSession = null;
        }
        this._onLoadCompleteHandler = null;
      },
      start: function start() {},
      _playAnimation: function _playAnimation() {
        this.lastPlay = 0;
        this.playAnim ? this.anim1.setAnimation(0, "animation") : this.anim2.setAnimation(0, "animation");
        this.playAnim = !this.playAnim;
      },
      _onClick1: function _onClick1() {
        this.callBack(this.id1, "playtype");
      },
      _onClick2: function _onClick2() {
        this.callBack(this.id2, "playtype");
      },
      updateData: function updateData(id1, id2) {
        id1 || (id1 = 0);
        id2 || (id2 = 0);
        this.id1 = id1;
        this.id2 = id2;
        this._onLoadCompleteHandler = this.onLoadComplete.bind(this);
      },
      onLoadComplete: function onLoadComplete() {
        this.loading1.node.active = false;
        this.loading1.node.pauseAllActions();
        this.loading2.node.active = false;
        this.loading2.node.pauseAllActions();
        this.loadComplete = true;
        this._onLoadCompleteHandler = null;
        this.game1.getComponent(cc.Sprite).spriteFrame = this.spriteFrameSession.getTaskContent(0);
        this.game2.getComponent(cc.Sprite).spriteFrame = this.spriteFrameSession.getTaskContent(1);
        this._playAnimation();
      },
      update: function update(dt) {
        if (!this.loadComplete) return;
        this.lastPlay += dt;
        if (this.lastPlay > this.random) {
          this.random = 3 + 3 * Math.random();
          this._playAnimation();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  LobbyMoneyFieldList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b316cxGKFLsp7NThbnWmgC", "LobbyMoneyFieldList");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        lobbyAnimaton: {
          default: null,
          type: cc.Animation
        },
        listView: {
          type: cc.ScrollView,
          default: null
        },
        rankItem: cc.Prefab,
        callBack: null
      },
      onLoad: function onLoad() {
        var db = Global.Res.GameData;
        var item;
        var itemCom;
        for (var id in db) {
          item = cc.instantiate(this.rankItem);
          itemCom = item.getComponent("LobbyMoneyFieldItem");
          itemCom.callBack = this.callBack;
          this.listView.content.addChild(item);
          itemCom.updateData(id, 0);
        }
      },
      onDestroy: function onDestroy() {
        this.callBack = null;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  LobbyPlayTypeItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32023xpzplByKnfmjqc0iIO", "LobbyPlayTypeItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        texture: [ cc.SpriteFrame ],
        bg: cc.Sprite,
        nameLable: cc.Label,
        baseZhu: cc.Label,
        baseZhuStatic: cc.Label,
        baseMoney: cc.Label,
        baseMoneyStatic: cc.Node
      },
      start: function start() {},
      updateData: function updateData(id, num) {
        this.id = id;
        this.index = num + 1;
        this.bg.node.getComponent(cc.Sprite).spriteFrame = this.texture[num];
        var db = Global.Res.RoomData[10 * id + num + 1];
        if (db) {
          this.baseZhu.node.active = true;
          this.baseZhuStatic.node.active = true;
          this.baseMoney.node.active = true;
          this.baseMoneyStatic.active = true;
          this.nameLable.string = db.describe;
          this.baseZhu.string = db.basepoint;
          this.baseMoney.string = db.basemoney;
        } else {
          this.nameLable.string = Global.Strings.COMMON[1];
          this.baseZhu.node.active = false;
          this.baseZhuStatic.node.active = false;
          this.baseMoney.node.active = false;
          this.baseMoneyStatic.active = false;
        }
      },
      onClick: function onClick() {
        0 != this.id;
      }
    });
    cc._RF.pop();
  }, {} ],
  LobbyPlayTypeList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "350d5r0SZBAM4IWbb9BYRp9", "LobbyPlayTypeList");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        listView: {
          type: cc.ScrollView,
          default: null
        },
        rankItem: cc.Prefab,
        itemList: null
      },
      onLoad: function onLoad() {
        this.itemList = [];
      },
      start: function start() {},
      updateShow: function updateShow(id) {
        this.id = id;
        var item;
        for (var i = 0; i < 3; i++) {
          item = this.itemList[i];
          if (null == item) {
            item = cc.instantiate(this.rankItem);
            this.itemList[i] = item;
            this.listView.content.addChild(item);
          }
          item.getComponent("LobbyPlayTypeItem").updateData(id, i);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  LobbyProtocolId: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7950bWY/vBJgpenLnW1bkRg", "LobbyProtocolId");
    "use strict";
    window.MSG_MAIN_LOGON_REGISTER = 100;
    window.MSG_ASS_LOGON_REGISTER_NORMAL = 1;
    window.MSG_ASS_LOGON_REGISTER_TENCENT = 2;
    window.MSG_MAIN_LOGON_LOGON = 101;
    window.MSG_ASS_LOGON_LOGON_BY_NAME = 1;
    window.MSG_MAIN_LOGON_DESK = 102;
    window.MSG_ASS_LOGON_BUY_DESK = 1;
    window.MSG_ASS_LOGON_ENTER_DESK = 2;
    window.MSG_MAIN_LOADER_LOGON = 500;
    window.MSG_ASS_LOADER_LOGON = 1;
    window.MSG_ADD_LOADER_LOGOUT = 2;
    window.MSG_MAIN_LOGON_NOTIFY = 103;
    window.MSG_NTF_LOGON_USER_SQUEEZE = 1;
    window.MSG_NTF_LOGON_NOTICE = 2;
    window.MSG_NTF_LOGON_HORN = 3;
    window.MSG_NTF_LOGON_USER_EXIST = 4;
    window.MSG_NTF_LOGON_RESOURCE_CHANGE = 5;
    window.MSG_NTF_LOGON_SUPPORT_INFO = 6;
    window.MSG_NTF_LOGON_USERCOUNT_CHANGE = 7;
    window.MSG_NTF_LOGON_FRIEND_NOTIFY = 8;
    window.MSG_NTF_LOGON_FRIEND_ADDOK = 9;
    window.MSG_NTF_LOGON_FRIEND_DELOK = 10;
    window.MSG_NTF_LOGON_FRIEND_DELNOTIFY = 11;
    window.MSG_NTF_LOGON_FRIEND_LOGINOROUT = 12;
    window.MSG_NTF_LOGON_FRIEND_REDSPOT = 13;
    window.MSG_NTF_LOGON_CLOSE_SERVER = 14;
    window.MSG_NTF_LOGON_EMAIL_REDSPOT = 15;
    window.MSG_NTF_LOGON_GAME_PEOPLECOUNT_CHANGE = 20;
    window.MSG_NTF_LOGON_WORLD_CHAT = 21;
    window.MSG_NTF_LOGON_REWARD_NEW_USER = 22;
    window.MSG_MAIN_LOGON_OTHER = 104;
    window.MSG_ASS_LOGON_OTHER_SEND_HORN = 1;
    window.MSG_ASS_LOGON_OTHER_SEND_GIFT = 2;
    window.MSG_ASS_LOGON_OTHER_SEND_GRADE = 3;
    window.MSG_ASS_LOGON_OTHER_SEND_ROOMOPENED = 4;
    window.MSG_ASS_LOGON_OTHER_USERINFO_FLUSH = 5;
    window.MSG_ASS_LOGON_OTHER_EMAIL_LIST = 6;
    window.MSG_ASS_LOGON_OTHER_EMAIL_INFO = 7;
    window.MSG_ASS_LOGON_OTHER_EMAIL_DELETE = 8;
    window.MSG_ADD_LOGON_OTHER_REQ_SUPPORT = 9;
    window.MSG_ASS_LOGON_OTHER_ROBOT_TAKEMONEY = 10;
    window.MSG_ASS_LOGON_OTHER_REQ_SIMPLE_GRADELIST = 11;
    window.MSG_ASS_LOGON_OTHER_REQ_SIMPLE_GRADEINFO = 12;
    window.MSG_ASS_LOGON_OTHER_REQ_GRADELIST = 13;
    window.MSG_ASS_LOGON_OTHER_REQ_GRADEINFO = 14;
    window.MSG_ASS_LOGON_OTHER_REQ_USERINFO = 15;
    window.MSG_ASS_LOGON_OTHER_REQ_DISSMISS_DESK = 16;
    window.MSG_ASS_LOGON_OTHER_REQ_SAVE_POSITION = 17;
    window.MSG_ASS_LOGON_OTHER_REQ_ENTERTHEGAMEROOM = 18;
    window.MSG_ASS_LOGON_OTHER_JOIN_MATCH_SCENE = 19;
    window.MSG_ASS_LOGON_OTHER_EXIT_MATCH_SCENE = 20;
    window.MSG_ASS_LOGON_OTHER_GET_WORLD_CHAT = 26;
    window.MSG_ASS_LOGON_OTHER_SEND_WORLD_CHAT = 27;
    window.MSG_ASS_LOGON_OTHER_REWARD_NEW_USER = 28;
    window.MSG_ASS_LOGON_OTHER_REQ_ENTER_OR_LEAVE_THE_GAMERO = 18;
    window.MSG_MAIN_LOGON_BANK = 105;
    window.MSG_ASS_LOGON_BANK_SAVE_MONEY = 1;
    window.MSG_ASS_LOGON_BANK_TAKE_MONEY = 2;
    window.MSG_ASS_LOGON_BANK_TRANSFER = 3;
    window.MSG_ASS_LOGON_BANK_SETPASSWD = 4;
    window.MSG_ASS_LOGON_BANK_RESETPASSWD = 5;
    window.MSG_ASS_LOGON_BANK_RECORD = 6;
    window.MSG_ASS_LOGON_BANK_MOENY_FOR_JEWELS = 7;
    window.MSG_MAIN_LOGON_FRIEND = 106;
    window.MSG_ASS_LOGON_FRIEND_LIST = 1;
    window.MSG_ASS_LOGON_FRIEND_ADD = 2;
    window.MSG_ASS_LOGON_FRIEND_ANSWER_ADD = 3;
    window.MSG_ASS_LOGON_FRIEND_DEL = 4;
    window.MSG_ASS_LOGON_FRIEND_REWARD = 5;
    window.MSG_ASS_LOGON_FRIEND_TAKEREWARD = 6;
    window.MSG_ASS_LOGON_FRIEND_SERACH = 7;
    window.MSG_ASS_LOGON_FRIEND_CHANGEBATCH = 8;
    window.MSG_ASS_LOGON_FRIEND_NOTIFYLIST = 9;
    window.MSG_ASS_LOGON_FRIEND_DELNOTIFY = 10;
    window.MSG_ASS_LOGON_FRIEND_INVITEPLAY = 11;
    window.MSG_ASS_LOGON_FRIEND_DEL_REDSPOT = 12;
    window.MSG_ASS_LOGON_FRIEND_ERROR = 13;
    window.MSG_MAIN_LOGON_FRIENDSGROUP = 107;
    window.MSG_ASS_LOGON_FRIENDSGROUP_LIST = 1;
    window.MSG_ASS_LOGON_FRIENDSGROUP_MEMBER = 2;
    window.MSG_ASS_LOGON_FRIENDSGROUP_ALL_NOTIFY_MSG = 3;
    window.MSG_ASS_LOGON_FRIENDSGROUP_ALL_ROOM_MSG = 4;
    window.MSG_ASS_LOGON_FRIENDSGROUP_ALL_ACCO_MSG = 5;
    window.MSG_ASS_LOGON_FRIENDSGROUP_CREATE = 6;
    window.MSG_ASS_LOGON_FRIENDSGROUP_REQ_JOIN = 7;
    window.MSG_ASS_LOGON_FRIENDSGROUP_INVITE = 8;
    window.MSG_ASS_LOGON_FRIENDSGROUP_ANSWER_OPER = 9;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DEL_MEMBER = 10;
    window.MSG_ASS_LOGON_FRIENDSGROUP_QUIT = 11;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DISMISS = 12;
    window.MSG_ASS_LOGON_FRIENDSGROUP_CHANGE_NAME = 13;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DEL_NOTIFY_MSG = 14;
    window.MSG_ASS_LOGON_FRIENDSGROUP_SIMPLE_INFO = 15;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DEL_REDSPOT = 16;
    window.MSG_ASS_LOGON_FRIENDSGROUP_SEND_NOTICE = 17;
    window.MSG_ASS_LOGON_FRIENDSGROUP_QUERY_ACCO = 18;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DESK_LIST_MSG = 19;
    window.MSG_ASS_LOGON_FRIENDSGROUP_DELETE_DESK_INFO = 20;
    window.MSG_ASS_LOGON_FRIENDSGROUP_QUERY_DESK_ACCO = 21;
    window.MSG_ASS_LOGON_FRIENDSGROUP_REQ_TRANSFER = 22;
    window.MSG_ASS_LOGON_FRIENDSGROUP_REQ_AUTH_MEM = 23;
    window.MSG_ASS_LOGON_FRIENDSGROUP_MODIFY_WECHAT = 24;
    window.MSG_ASS_LOGON_FRIENDSGROUP_MODIFY_POWER = 25;
    window.MSG_ASS_LOGON_FRIENDSGROUP_CHANGE_FIRECOIN = 26;
    window.MSG_MAIN_FRIENDSGROUP_NOTIFY = 108;
    window.MSG_NTF_LOGON_FRIENDSGROUP_NOTIFY_MSG = 1;
    window.MSG_NTF_LOGON_FRIENDSGROUP_ROOM_MSG = 2;
    window.MSG_NTF_LOGON_FRIENDSGROUP_ACCO_MSG = 3;
    window.MSG_NTF_LOGON_FRIENDSGROUP_REDSPOT = 4;
    window.MSG_NTF_LOGON_FRIENDSGROUP_MSG_HAVE_CHANGE = 5;
    window.MSG_NTF_LOGON_FRIENDSGROUP_CREATE_FG = 6;
    window.MSG_NTF_LOGON_FRIENDSGROUP_NAME_CHANGE = 7;
    window.MSG_NTF_LOGON_FRIENDSGROUP_PEOPLE_CHANGE = 8;
    window.MSG_NTF_LOGON_FRIENDSGROUP_DISMISS = 9;
    window.MSG_NTF_LOGON_FRIENDSGROUP_NOTICE_CHANGE = 10;
    window.MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_MSG = 11;
    window.MSG_NTF_LOGON_FRIENDSGROUP_DESK_INFO_CHANGE = 12;
    window.MSG_NTF_LOGON_FRIENDSGROUP_STATUS_CHANGE = 13;
    window.MSG_NTF_LOGON_FRIENDSGROUP_WECHAT_CHANGE = 14;
    window.MSG_NTF_LOGON_FRIENDSGROUP_POWER_CHANGE = 15;
    window.MSG_NTF_LOGON_FRIENDSGROUP_NEW_VIPROOM_MSG = 16;
    window.MSG_NTF_LOGON_FRIENDSGROUP_VIPROOM_CHANGE = 17;
    window.MSG_NTF_LOGON_FRIENDSGROUP_FIRECOIN_CHANGE = 18;
    window.MSG_MAIN_MATCH_NOTIFY = 109;
    window.MSG_NTF_LOGON_MATCH_NOTIFY_SIGNUP_CHANGE = 1;
    window.MSG_NTF_LOGON_MATCH_NOTIFY_START_MATCH = 2;
    window.MSG_NTF_LOGON_MATCH_NOTIFY_START_CHANGE_TIME = 3;
    window.MSG_NTF_LOGON_MATCH_NOTIFY_START_CHANGE_FAIL = 4;
    window.MSG_NTF_LOGON_MATCH_NOTIFY_START_MATCH_RIGHTAWAY = 5;
    cc._RF.pop();
  }, {} ],
  LobbyRankItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fbd9dcc+FGL5cgS6hHUAJX", "LobbyRankItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nameLabel: cc.Label,
        rankImage: cc.Sprite,
        rankLabel: cc.Label,
        headImage: cc.Sprite,
        recodeLabel: cc.Label,
        rankImageList: null
      },
      updateData: function updateData(type, count, data) {
        if (this.rankImageList[count]) {
          this.rankLabel.node.active = false;
          this.rankImage.node.active = true;
          this.rankImage.spriteFrame = this.rankImageList[count];
        } else {
          this.rankLabel.node.active = true;
          this.rankImage.node.active = false;
          this.rankLabel.string = count + 1 + "";
        }
        this.nameLabel.string = data.name;
      }
    });
    cc._RF.pop();
  }, {} ],
  LobbyRankList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ad438Y9vjlB/oAf2YhD2ObM", "LobbyRankList");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        listView: {
          type: cc.ScrollView,
          default: null
        },
        rankItem: cc.Prefab,
        noroom: cc.Sprite,
        rankImageList: {
          type: cc.SpriteFrame,
          default: []
        }
      },
      onLoad: function onLoad() {
        this.itemArray = [];
        this.onClick(null, "1");
      },
      start: function start() {},
      onClick: function onClick(event, type) {
        var rank;
        type;
        var item;
        var itemname = "LobbyRankItem";
        var length = rank.length;
        for (var i = 0; i < length; i++) {
          item = this.itemArray[i];
          if (null == item) {
            item = cc.instantiate(this.rankItem);
            this.itemArray[i] = item;
            item.getComponent(itemname).rankImageList = this.rankImageList;
            this.listView.content.addChild(item);
          } else null == item.parent && this.listView.content.addChild(item);
          item.getComponent(itemname).updateData(type, i, rank[i]);
        }
        if (0 == i) {
          this.noroom.node.active = true;
          this.listView.node.active = false;
        } else {
          this.noroom.node.active = false;
          this.listView.node.active = true;
          var length = this.itemArray.length;
          for (;i < length; i++) {
            item = this.itemArray[i];
            item.parent = null;
          }
          this.listView.scrollToTop(.5);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  LobbyRoomLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9555cCFVJZJyqTbIXl7Kg6z", "LobbyRoomLogic");
    "use strict";
    var API = "lobby";
    cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {
        this.LoginRoomLogic = new (require("LoginRoomLogic"))();
      },
      buyDesk: function buyDesk(gameID, count, jsonStr, callback) {
        cc.log("buyDesk info:  ");
        cc.log("gameID = ", gameID);
        cc.log("count = ", count);
        cc.log("jsonStr = ", jsonStr);
        var p = Package.buildWritePack(282);
        p.writeBegin(MSG_MAIN_LOGON_DESK, MSG_ASS_LOGON_BUY_DESK);
        p.writeInt(this.getUserID());
        p.writeInt(1);
        p.writeInt(gameID);
        p.writeInt(count);
        p.writeByte(0);
        p.writeString(jsonStr, 256);
        p.writeByte(0);
        p.writeInt(0);
        p.writeInt(0);
        var onNetCallback = function(p) {
          var _Resolve_LogonRequestBuyDesk = function _Resolve_LogonRequestBuyDesk(p) {
            var struct = {};
            struct.userID = p.readInt();
            struct.roomID = p.readInt();
            struct.deskIdx = p.readInt();
            struct.passwd = p.readString(20);
            struct.passwdLen = p.readInt();
            struct.jewels = p.readInt();
            struct.byMasterNotPlay = p.readByte();
            window.testModule && cc.sys.localStorage.setItem("roomNo", struct.passwd);
            return struct;
          };
          if (p.bHandleCode === G_HANDLE_CODE_OK) {
            var info = _Resolve_LogonRequestBuyDesk(p);
            cc.log("=====================\u521b\u5efa\u623f\u95f4\u6210\u529f\n", info);
            this.joinRoom(info.passwd);
            DataNotify.onOpenRoomChanged();
            callback && callback();
          } else if (GlobalError.ERROR_CANNOT_BUYDESK_INROOM == p.bHandleCode) {
            var _info = _Resolve_LogonRequestBuyDesk(p);
            var scene = cc.director.getScene();
            var canvas = scene.getChildByName("Canvas").getChildByName("Hall_Node");
            var LobbyScene = null;
            canvas && (LobbyScene = canvas.getComponent("LobbyScene"));
            if (null == LobbyScene) {
              cc.log("LobbyRoomLogic LobbyScene == null ");
              return;
            }
            var tmpDelay = function() {
              LobbyScene.unschedule(tmpDelay);
              if (LobbyScene && LobbyScene.enterGameByRoomID) {
                cc.log("LobbyScene.enterGameByRoomID()");
                LobbyScene.enterGameByRoomID(_info.roomID);
              }
            }.bind(this);
            var gameName = RoomListManager.getRoomNameByRoomID(_info.roomID);
            createLoading(tools.stringFormat("\u60a8\u5df2\u7ecf\u5728{0}\u6e38\u620f\u4e2d", gameName));
            cc.log("\u5df2\u7ecf\u5728\u623f\u95f4\u91cc\u9762");
            LobbyScene.schedule(tmpDelay, 1, true);
          }
        }.bind(this);
        LobbySocket.send(p, onNetCallback, "\u8bf7\u6c42\u521b\u5efa\u623f\u95f4...");
      },
      getBuyConfig: function getBuyConfig(gameID, roomType, callback, gameIDInfo) {
        var data = GameBuyConfigManager.getGameBuyConfigByGameID(gameID, roomType);
        if (!(0 === data.length)) {
          callback && callback(data);
          return;
        }
        var actionName = "buyDeskList";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 === jsonData.status) {
            for (var i = 0; i < jsonData.data.length; i++) {
              var itemData = jsonData.data[i];
              itemData.sort(function(a, b) {
                return a.count - b.count;
              });
              GameBuyConfigManager.push(itemData[0].gameID, itemData);
            }
            var _data = GameBuyConfigManager.getGameBuyConfigByGameID(gameID, roomType);
            callback && callback(_data);
          } else {
            createTips(jsonData.msg);
            callback && callback({});
          }
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          gameID: null,
          userID: UserInfoManager.getMyInfo().userID,
          gameIDInfo: gameIDInfo
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      joinRoom: function joinRoom(roomPsw, callback) {
        var bMainID = MSG_MAIN_LOGON_DESK, bAssistantID = MSG_ASS_LOGON_ENTER_DESK;
        var cNetMsg = this.createNetMsg(28, bMainID, bAssistantID);
        cNetMsg.pushINT(this.getUserID());
        cNetMsg.pushINT(6);
        cNetMsg.pushNCHAR(roomPsw, 20);
        var onNetCallback = function(netMsg) {
          var _Resolve_LogonResponseEnterDesk = function _Resolve_LogonResponseEnterDesk(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.roomID = netMsg.popINT();
            struct.deskIdx = netMsg.popINT();
            return struct;
          };
          if (netMsg.bHandleCode === G_HANDLE_CODE_OK) {
            var info = _Resolve_LogonResponseEnterDesk(netMsg);
            this.enterGame(info.roomID, info.deskIdx);
            callback && callback();
          } else if (GlobalError.ERROR_CANNOT_ENTERDESK_INROOM == netMsg.bHandleCode) {
            var _info2 = _Resolve_LogonResponseEnterDesk(netMsg);
            var scene = cc.director.getScene();
            var canvas = scene.getChildByName("Canvas").getChildByName("Hall_Node");
            var LobbyScene = null;
            canvas && (LobbyScene = canvas.getComponent("LobbyScene"));
            if (null == LobbyScene) {
              cc.log("LobbyRoomLogic LobbyScene == null ");
              return;
            }
            var tmpDelay = function() {
              LobbyScene.unschedule(tmpDelay);
              if (LobbyScene && LobbyScene.enterGameByRoomID) {
                cc.log("LobbyScene.enterGameByRoomID()");
                LobbyScene.enterGameByRoomID(_info2.roomID);
              }
            }.bind(this);
            var gameName = RoomListManager.getRoomNameByRoomID(_info2.roomID);
            createLoading(tools.stringFormat("\u60a8\u5df2\u7ecf\u5728{0}\u6e38\u620f\u4e2d", gameName));
            console.log("\u5df2\u7ecf\u5728\u623f\u95f4\u7684\u903b\u8f91\u5df2\u7ecf\u5728\u623f\u95f4\u7684\u903b\u8f91\u5df2\u7ecf\u5728\u623f\u95f4\u7684\u903b\u8f91");
            LobbyScene.schedule(tmpDelay, 1, true);
          }
        }.bind(this);
        this.sendData(cNetMsg, onNetCallback, "\u6b63\u5728\u52a0\u5165\u623f\u95f4...");
      },
      enterGame: function enterGame(roomID) {
        cc.log("enterGame beg");
        var roomInfo = RoomListManager.getRoomByRoomID(roomID);
        this.LoginRoomLogic.enterRoom(roomInfo, this.getUserID(), this.getUserToken());
      },
      requestQualifyingCount: function requestQualifyingCount(callback) {
        var actionName = "qualifyingCount";
        var api = "lobby";
        if (window.rankInfoArr.length > 0) return callback && callback();
        var fCallback = function fCallback() {};
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.code) {
            if (callback) {
              window.rankInfoArr = jsonData.data;
              window.rankInfoData = jsonData.info;
              callback();
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: api,
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestCheckPointConfig: function requestCheckPointConfig(callback) {
        var actionName = "getCheckpointConfig";
        var api = "Checkpoint";
        if (window.CheckPointInfoArr.length > 0) return callback && callback(window.CheckPointInfoArr);
        var fCallback = function fCallback() {};
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (callback) {
              window.CheckPointInfoArr = jsonData.data;
              callback(window.CheckPointInfoArr);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: api,
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestEnterGoldRoom: function requestEnterGoldRoom(roomid) {
        if (roomid < 0 || roomid > 6 || !roomid) {
          console.error("\u623f\u95f4\u7c7b\u578b\u9519\u8bef\uff01\uff01\uff01", roomid);
          return;
        }
        var bMainID = MSG_MAIN_LOADER_LOGON, bAssistantID = MSG_ASS_LOADER_LOGON;
        var cNetMsg = this.createNetMsg(4, bMainID, bAssistantID);
        cNetMsg.pushINT(roomid);
        var onNetCallback = function onNetCallback(netMsg) {
          console.log("\u65e5\u5fd7: \u63a5\u6536\u5230\u767b\u5165\u4fe1\u606f");
        };
        this.sendData(cNetMsg, onNetCallback, "\u767b\u5165\u623f\u95f4...");
      },
      requestLoaderCheckLogon: function requestLoaderCheckLogon(Callback) {
        var actionName = "isAccessGame";
        var api = "match";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? Callback && Callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: api,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestExchangeRead: function requestExchangeRead(Callback, value) {
        var actionName = "giftBuyFortunella";
        var api = "Resource";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            Callback && Callback();
            createTips(jsonData.msg);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: api,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          giftCard: value
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis",
    LoginRoomLogic: "LoginRoomLogic"
  } ],
  LobbyScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc5c4gJvUVHG4sJg1UgHGEH", "LobbyScene");
    "use strict";
    var LobbyRoomLogic = require("LobbyRoomLogic");
    var VideoManager = require("VideoManager");
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        bgMusic: {
          type: cc.AudioClip,
          default: null
        },
        centerNode: cc.Node,
        img_bg: cc.Node,
        LayoutAdverNode: cc.Node,
        LayoutGameNode: cc.Node,
        LayOutContent: cc.Node,
        BottomLayOutContent: cc.Node,
        PeoplecountLabel: cc.Node,
        topNodePrefab: cc.Prefab,
        bottomNodePrefab: cc.Prefab
      },
      onEnable: function onEnable() {
        this._super();
      },
      onDisable: function onDisable() {
        this._super();
      },
      ctor: function ctor() {
        window.GameManager = new (require("GameManager"))();
        this.callBackPerson = null;
      },
      onLoad: function onLoad() {
        var _this = this;
        window["LobbyScene"] = this;
        VideoManager.instance.refreshVideo();
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        frameSize.width / frameSize.height > designSize.width / designSize.height && (this.centerNode.width = this.centerNode.height * (designSize.width / designSize.height));
        this.LobbyRoomLogic = new LobbyRoomLogic();
        cc.game.setFrameRate(45);
        cc.log("lobby scene on load");
        this.inMoneyfield = false;
        this.inCreatorRoom = false;
        this.inPlayType = false;
        this.gameID = null;
        cc.debug.setDisplayStats(false);
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.initUI();
        GameSocket.setIsSendLogoutRoom(false);
        this.delayRequest();
        this.scheduleOnce(function() {
          UserInfoManager.requestChangeUserName(_this.LobbyLogic.getNickName(), null);
        }, .15);
        document.title = G_APP_NAME_CH;
        if (!cc.checkIsFrontBack) {
          cc.checkIsFrontBack = true;
          this.checkIsFrontStage();
        }
        this._playBGMusic();
        this.img_bg.active = true;
        this.LayoutAdverNode.active = true;
        this.LayoutGameNode.active = true;
        cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        var gameType = E_ROOM_TYPE.PRIVATE;
        var gameIDInfo = "";
        for (var item in G_REGIST_GAME_LIST) {
          var game = G_REGIST_GAME_LIST[item];
          game.id && (gameIDInfo += game.id + ",");
        }
        var m_frameSize = cc.view.getFrameSize();
        if (m_frameSize.height / m_frameSize.width > 2) for (var index = 1; index <= this.LayoutGameNode.length; index++) {
          var NmaeNode = "game_" + index;
          var GameNOde = this.LayoutGameNode.getChildByName(NmaeNode);
          GameNOde.y += 32;
        }
        tools.setCurScreen();
        var lobbDiv = document.getElementById("lobbyQRCode");
        lobbDiv && lobbDiv.remove();
        var gameDiv = document.getElementById("GAMEQRCode");
        gameDiv && gameDiv.remove();
        var GameZhanji = document.getElementById("GameZhanjiQRCode");
        GameZhanji && GameZhanji.remove();
        gameIDInfo.lastIndexOf(",") == gameIDInfo.length - 1 && (gameIDInfo = gameIDInfo.substring(0, gameIDInfo.lastIndexOf(",")));
        this.LobbyRoomLogic.getBuyConfig(null, gameType, null, gameIDInfo);
        window.ShartuserID = null;
        this.onLogonGamePeoplecountChange(UserInfoManager.getMyInfo().peopleCount);
        window.ShartuserID = null;
        cc.sys.localStorage.setItem(G_SHARE_USERID, 0);
        this.InitWXvoiceconfig(this.LobbyLogic.getUserID());
      },
      onLogonGamePeoplecountChange: function onLogonGamePeoplecountChange(Peoplecount) {
        this.PeoplecountLabel && (this.PeoplecountLabel.getComponent(cc.Label).string = Peoplecount + "\u4eba\u5728\u73a9");
      },
      _playBGMusic: function _playBGMusic() {
        var _this2 = this;
        if (!LOOBBY_STATIC) {
          MYAudioEngine.stopMusic();
          if (this.bgMusic) {
            MYAudioEngine.playMusic(this.bgMusic);
            console.log("play game bgmusic");
          } else cc.loader.loadRes("sound/lobby/lobby_bg_1", cc.AudioClip, function(err, res) {
            if (err) {
              console.error(err);
              return;
            }
            _this2.bgMusic = res;
            MYAudioEngine.playMusic(_this2.bgMusic);
            console.log("play game bgmusic async");
          });
        }
      },
      requestShopList: function requestShopList() {
        var _this3 = this;
        this.ShopScroview.content.removeAllChildren();
        var ShopMommodityList = NoticeManager.getShopMommodityList();
        if (tableIsEmpty(ShopMommodityList)) {
          var callback = function callback(result) {
            result ? _this3.startShopMommodity() : cc.log("\u83b7\u53d6\u5546\u57ce\u5217\u8868\u5931\u8d25.........");
          };
          this.LobbyLogic.requestShopMommodity(callback);
        } else this.startShopMommodity();
      },
      requestGongGaoList: function requestGongGaoList() {
        var _this4 = this;
        var GongGaoMommodityList = NoticeManager.getGongGaoMommodityList();
        if (tableIsEmpty(GongGaoMommodityList)) {
          var callback = function callback(result) {
            result ? _this4.startGongGaoMommodity() : cc.log("\u83b7\u53d6\u516c\u544a\u5931\u8d25.........");
          };
          this.LobbyLogic.requestGongGaoMommodity(callback);
        } else this.startGongGaoMommodity();
      },
      paycallback: function paycallback(event, customEventData) {
        var _this5 = this;
        var callback = function callback(result) {
          result && _this5.onBridgeReady(result.prepay_id);
        };
        this.LobbyLogic.requestPayPrepayID(customEventData.buyNum, customEventData.consumeNum, customEventData.goodsID, callback);
      },
      onGiveGiftCardClick: function onGiveGiftCardClick() {
        var layerName = "prefab/lobby/GiveGiftCard";
        this.simpleAddLayer(layerName);
      },
      startGongGaoMommodity: function startGongGaoMommodity() {
        var _this6 = this;
        var GongGaoMommodityList = NoticeManager.getGongGaoMommodityList();
        var GongGaoList = [];
        for (var index = 0; index < GongGaoMommodityList.length; index++) {
          var data = GongGaoMommodityList[index];
          1 == data.img_type && index < 6 && GongGaoList.push(data);
        }
        for (var _index = 0; _index < GongGaoMommodityList.length; _index++) {
          var _data = GongGaoMommodityList[_index];
          if (2 == _data.img_type) {
            GongGaoList.push(_data);
            break;
          }
        }
        GongGaoList.forEach(function(vaule, index) {
          if (1 == vaule.img_type && index < 6) {
            _this6.Text_GongGao[index].node.active = true;
            var item = _this6.Text_GongGao[index];
            var num = index + 1;
            item.getComponent(cc.Label).string = num + "\u3001" + vaule.text;
          }
          if (2 == vaule.img_type) {
            _this6.Image_code.active = true;
            var title = _this6.Image_code.getChildByName("title");
            var _num = index + 1;
            var img_code = _this6.Image_code.getChildByName("img");
            title.getComponent(cc.Label).string = _num + "\u3001";
            var remoteUrl = vaule.content;
            cc.loader.load(remoteUrl, function(err, texture) {
              if (err) console.log(err); else {
                var sprite = new cc.SpriteFrame(texture);
                img_code.getComponent(cc.Sprite).spriteFrame = sprite;
              }
            });
          }
        });
      },
      delayRequest: function delayRequest() {
        var _this7 = this;
        this.jumpToRoom();
        ConfigDataManager.getConfigData();
        this.scheduleOnce(function() {
          _this7.checkJoinRoomScene();
          _this7.updateUI();
        }, .01);
      },
      checkJoinRoomScene: function checkJoinRoomScene() {
        var _this8 = this;
        var scene = FriendsGroupManager.getJoinRoomScene();
        "FriendsGroup" == scene && this.LobbyLogic.requestFriendsGroupList(function(clubList) {
          var layerName = "prefab/Club/ClubIndexLayer";
          window.club = true;
          _this8.simpleAddLayer(layerName, clubList.length > 0);
        });
      },
      jumpToRoom: function jumpToRoom() {
        if (!window.code && !window.roomNo) return;
        if (1 == window.roomNo) return;
        cc.log("window.roomNo:", window.roomNo);
        if (!window.roomNo || "undefined" == window.roomNo || void 0 == window.roomNo) return;
        var onNetCallback = function onNetCallback() {
          window.roomNo = 0;
          loadsceneRes("Texture", function() {});
        };
        cc.log("lobby get roomNo:", window.roomNo);
        if (0 != window.roomNo) {
          this.LobbyRoomLogic.joinRoom(window.roomNo, onNetCallback);
          window.roomNo = 0;
        }
      },
      initUI: function initUI() {
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.view.getDesignResolutionSize();
        frameSize.width / frameSize.height > designSize.width / designSize.height && console.log("\u9002\u914d\u9ad8\u5ea6");
        var topNode = cc.instantiate(this.topNodePrefab);
        topNode.zIndex = 100;
        this.node.addChild(topNode);
        topNode.getComponent("LobbyTopPanel").setParentNodeProxy(this);
        var that = this;
        var callBack = function callBack(tag) {
          that.CreateRoomGameConfig(null, tag);
        };
        var bottomNode = cc.instantiate(this.bottomNodePrefab);
        bottomNode.zIndex = 100;
        this.node.addChild(bottomNode);
        bottomNode.getComponent("LobbyBottomPanel").setParentNodeProxy(this, "lobby", callBack);
        var callBackPerson = function callBackPerson() {
          bottomNode && bottomNode.getComponent("LobbyBottomPanel").setBottomButton_Me();
        };
        this.callBackPerson = callBackPerson;
      },
      onDestroy: function onDestroy() {
        this._super();
        window["LobbyScene"] = null;
        LobbySocket.clearPackageQueue();
        this.unscheduleAllCallbacks();
        this.node.stopAllActions();
      },
      getGameList: function getGameList() {
        var callback = function(gameList) {
          if (0 !== gameList.length) {
            cc.log("\u6e38\u620f\u5217\u8868\u4fe1\u606f\u83b7\u53d6\u5b8c\u6bd5,\u5f00\u59cb\u83b7\u53d6\u6240\u6709\u623f\u95f4\u5217\u8868\u4fe1\u606f");
            var roomListCallback = function(roomList) {
              cc.log(roomList);
            }.bind(this);
            RoomListManager.requestAllRoomList(roomListCallback);
          } else cc.log(" \u6e38\u620f\u5217\u8868\u83b7\u53d6\u5931\u8d25 ");
        }.bind(this);
        GameListManager.requestGameList(callback);
      },
      enterGame: function enterGame(gameTag) {
        var gameConfigData = RoomListManager.getGoldRoomListByGameID(GameManager.getGameIDByGameSceneName(gameTag));
        if (gameConfigData.length <= 0) return createTips("\u8be5\u6e38\u620f\u6ca1\u6709\u914d\u7f6e");
        var enterGameData = null;
        var enterGameLevel = window.G_BI_GOLD;
        var isXiaZhong = cc.sys.localStorage.getItem("xiaZhongServerTest");
        if (null == isXiaZhong) {
          cc.sys.localStorage.setItem("xiaZhongServerTest", "0");
          isXiaZhong = "0";
        }
        "0" != isXiaZhong && (enterGameLevel = isXiaZhong + "");
        for (var i = 0; i < gameConfigData.length; i++) if (gameConfigData[i].level == enterGameLevel) {
          enterGameData = gameConfigData[i];
          break;
        }
        if (!enterGameData) return;
        var walleMoney = this.LobbyLogic.getWalletMoney();
        if (walleMoney < enterGameData.minPoint) return createTips(string.format("\u60a8\u7684\u91d1\u5e01\u6570\u4e0d\u6ee1\u8db3\u8fdb\u5165\u623f\u95f4\u4e0b\u9650:%s", F_GetMoneyDisplay(enterGameData.minPoint)));
        if (0 != enterGameData.maxPoint && walleMoney > enterGameData.maxPoint) return createTips(string.format("\u60a8\u7684\u91d1\u5e01\u6570\u8d85\u8fc7\u8fdb\u5165\u623f\u95f4\u4e0a\u9650:%s", F_GetMoneyDisplay(enterGameData.maxPoint)));
        this.enterGameByRoomID(enterGameData.roomID);
      },
      CreateRoomGameConfig: function CreateRoomGameConfig(event, tag) {
        var _this9 = this;
        var layerNameurl = "";
        var selectIndex = -1;
        switch (tag) {
         case "game_1":
          layerNameurl = "prefab/lobby/LayoutVenueSelection";
          break;

         case "game_2":
          layerNameurl = "prefab/lobby/LayoutChongGuan";
          break;

         case "game_3":
          layerNameurl = "prefab/lobby/LayoutShop";
          break;

         case "game_4":
          layerNameurl = "prefab/lobby/LayoutMatch";
          break;

         case "game_5":
          layerNameurl = "prefab/lobby/LayoutExchange";
          break;

         case "game_6":
          layerNameurl = "prefab/lobby/LayoutMyHome";
        }
        if ("" == layerNameurl) {
          createTips("\u656c\u8bf7\u671f\u5f85");
          return;
        }
        window["LobbyBottom"].setBottomButtonStatus(selectIndex);
        if ("Button_lobby" == layerNameurl) {
          this.BottomLayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          this.LayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          this.BottomLayOutContent.removeAllChildren();
          this.LayOutContent.removeAllChildren();
          return;
        }
        cc.resources.load(layerNameurl, cc.Prefab, function(err, prefab) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          _this9.BottomLayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          _this9.LayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          _this9.BottomLayOutContent.removeAllChildren();
          _this9.LayOutContent.removeAllChildren();
          var node = cc.instantiate(prefab);
          var parentNode = _this9.BottomLayOutContent;
          "livebroadcast" == tag && (parentNode = _this9.LayOutContent);
          node.parent = parentNode;
          if ("game_3" == tag && _this9.callBackPerson) {
            var tipScript = node.getComponent("LayoutShop");
            tipScript.initcallBack(_this9.callBackPerson);
          }
        });
        window["LobbyBottom"].handleAnnimation();
      },
      ShartReward: function ShartReward(ShartuserID) {
        this.LobbyLogic.requestShartReward(ShartuserID);
      },
      directToScene: function directToScene(gameId) {
        var _this10 = this;
        var load_node = cc.director.getScene().getChildByName("loading_node");
        load_node.active = true;
        cc.director.preloadScene(GameManager.getRegistGameNameByGameID(gameId), null, function() {
          _this10.isLoadedScene = true;
          var gameConfigData = RoomListManager.getGoldRoomListByGameID(gameId);
          if (gameConfigData.length <= 0) return createTips("\u8be5\u6e38\u620f\u6ca1\u6709\u914d\u7f6e");
          var enterGameData = null;
          var enterGameSort = E_ROOM_SORT.RANKMATCH;
          for (var i = 0; i < gameConfigData.length; i++) if (gameConfigData[i].sort == enterGameSort) {
            enterGameData = gameConfigData[i];
            break;
          }
          if (!enterGameData) return;
          var walleMoney = _this10.LobbyLogic.getWalletMoney();
          if (walleMoney < enterGameData.minPoint) {
            load_node.active = false;
            window.gameId = null;
            return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u4e0d\u6ee1\u8db3\u8fdb\u5165\u623f\u95f4\u4e0b\u9650:{0}", F_GetMoneyDisplay(enterGameData.minPoint)));
          }
          if (0 != enterGameData.maxPoint && walleMoney > enterGameData.maxPoint) {
            load_node.active = false;
            window.gameId = null;
            return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u8d85\u8fc7\u8fdb\u5165\u623f\u95f4\u4e0a\u9650:{0}", F_GetMoneyDisplay(enterGameData.maxPoint)));
          }
          load_node.active = false;
          window.gameId = null;
          _this10.enterGameByRoomID(enterGameData.roomID);
        });
      },
      pre_enter_game: function pre_enter_game(name, tag) {
        var _this11 = this;
        var load_node = cc.director.getScene().getChildByName("loading_node");
        load_node.active = true;
        cc.director.preloadScene(name, null, function() {
          _this11.isLoadedScene = true;
          _this11.enterGame(tag);
          load_node.active = false;
        });
      },
      onArenaDay: function onArenaDay(data) {},
      onChuangguan: function onChuangguan(data) {},
      onChuangguanAward: function onChuangguanAward() {
        var layerName = "prefab/lobby/ChuangguanAward";
        this.simpleAddLayer(layerName, null, null, null, null, this.node);
      },
      showPanel: function showPanel(data) {
        var _this12 = this;
        switch (data) {
         case 1:
          var callBackRankMatch = function callBackRankMatch() {
            var layerName = "prefab/Qualifying/QualifyingNode";
            _this12.simpleAddLayer(layerName, _this12);
          };
          LobbySocket.sendRankMatchInfo(E_PAIWEI_INFO.Sign_ENTER, E_PAIWEI_INFO.LobbyID, callBackRankMatch);
          break;

         case 2:
          var layerName = "prefab/Arena/ArenaNode";
          this.simpleAddLayer(layerName, this);
        }
      },
      onBack: function onBack() {
        this.showPanel(0);
      },
      onTouchGame: function onTouchGame(event, param) {
        this.gameID = param;
      },
      onCreatRoom: function onCreatRoom() {
        var cityID = cc.sys.localStorage.getItem(G_CHOOSE_CITY);
        cityID || (cityID = 0);
        var cityName = CityListManager.getNameByCityID(cityID);
        var gameListGold = RoomListManager.getGameListHavePrivateRoom();
        if (0 === gameListGold.length) {
          createTips(tools.stringFormat("{0}\u8fd8\u6ca1\u6709\u91d1\u5e01\u623f", cityName));
          return;
        }
        var callback = function callback() {};
        var layerName = "prefab/CreateRoom/CreateRoomLayer";
        var roomType = E_ROOM_TYPE.NORMAL;
        var normalGameList = [];
        normalGameList.push(gameListGold);
        this.simpleAddLayer(layerName, roomType, normalGameList, null, null, null, callback, this.node);
      },
      onMenuButton: function onMenuButton(event, param) {},
      onBridgeReady: function onBridgeReady(prepayId) {
        var appId = WechatAppID;
        var timestamp = new Date().getTime().toString();
        var nonceStr = (1e3 * Math.random()).toString();
        var prepay_id = "prepay_id=" + prepayId;
        var signType = "MD5";
        var stringA = "appId=" + appId + "&nonceStr=" + nonceStr + "&package=" + prepay_id + "&signType=" + signType + "&timeStamp=" + timestamp;
        var stringSignTemp = stringA + "&key=Hntt123123andThinklove1231236688";
        var sign = hex_md5(stringSignTemp).toUpperCase();
        WeixinJSBridge.invoke("getBrandWCPayRequest", {
          appId: appId,
          timeStamp: timestamp,
          nonceStr: nonceStr,
          package: prepay_id,
          signType: signType,
          paySign: sign
        }, function(res) {
          "get_brand_wcpay_request:ok" == res.err_msg ? alert("\u5145\u503c\u6210\u529f") : "get_brand_wcpay_request:cancel" == res.err_msg ? alert("\u53d6\u6d88\u6210\u529f") : alert(res.err_msg);
        });
      },
      requestQualifyingCount: function requestQualifyingCount() {
        var callback = function callback(result) {};
        this.LobbyLogic.requestQualifyingCount(callback);
      },
      requestCheckPointConfig: function requestCheckPointConfig() {
        var callback = function callback(result) {};
        this.LobbyLogic.requestCheckPointConfig(callback);
      },
      enterGameByRoomID: function enterGameByRoomID(roomID) {
        cc.log("enterGameByRoomID beg");
        this.LobbyLogic.enterGame(roomID);
      },
      updateUI: function updateUI() {
        this.LobbyLogic.requestMyResource();
      },
      loadResult: function loadResult(err, result, preResourceKey) {
        if (err || !result) cc.error("\u672a\u5b9a\u4e49\u7684\u9884\u5236\u4f53\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u8d44\u6e90" + preResourceKey); else {
          "object" == typeof result && window.prefabMap.set(preResourceKey + "", result);
          ++cc.loadData.loadLobbyPreDataIndex;
          this.loadingFlag = false;
          cc.loadData.loadLobbyPreDataIndex >= cc.loadData.loadLobbyPreData.length && this.checkPreLoadScence();
        }
      },
      loadPre: function loadPre() {
        var _this13 = this;
        if (this.loadingFlag) return;
        this.loadingFlag = true;
        var preData = cc.loadData.loadLobbyPreData[cc.loadData.loadLobbyPreDataIndex];
        if (!preData) return;
        "Texture" == preData.preName ? cc.loader.loadResDir(preData.url, cc.SpriteFrame, function(completedCount, totalCount, item) {}, function() {
          _this13.loadResult(null, "Texture", preData.url);
        }) : "bitmapFont" == preData.preName ? cc.loader.loadRes(preData.url, cc.BitmapFont, function(err, font) {
          _this13.loadResult(null, font, "bitmapFont" + preData.url);
        }) : "json" == preData.preName ? cc.loader.loadRes(preData.url, cc.JsonAsset, function(err, json) {
          _this13.loadResult(null, json, "json" + preData.url);
        }) : cc.loader.loadRes(preData.url + preData.preName, function(err, result) {
          _this13.loadResult(err, result, preData.url + preData.preName);
        });
      },
      update: function update() {
        this.loadPre();
      },
      onBtnShareWx: function onBtnShareWx() {},
      onMailRedSpot: function onMailRedSpot(info) {},
      onCurMatchStart: function onCurMatchStart(info) {
        dump("onCurMatchStart", info);
        this.enterGameByRoomID(info.roomID);
      },
      onCurMatchChange: function onCurMatchChange(info) {
        dump("onCurMatchChange", info);
      },
      onCurMatchFail: function onCurMatchFail(info) {
        dump("onCurMatchFail", info);
        1 == info.reason ? createTips("\u4eba\u6570\u4e0d\u8db3,\u6bd4\u8d5b\u65e0\u6cd5\u5f00\u59cb") : 3 == info.reason && createTips("\u670d\u52a1\u5668\u5f02\u5e38,\u6bd4\u8d5b\u7ed3\u675f");
      },
      onCurMatchComeSoon: function onCurMatchComeSoon(info) {
        dump("onCurMatchComeSoon", info);
      },
      InitWXvoiceconfig: function InitWXvoiceconfig(userID) {
        var callback = function(data) {
          var CryptoJS = CryptoJS || function(e, m) {
            var p = {}, j = p.lib = {}, l = function l() {}, f = j.Base = {
              extend: function extend(a) {
                l.prototype = this;
                var c = new l();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function() {
                  c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
              },
              create: function create() {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
              },
              init: function init() {},
              mixIn: function mixIn(a) {
                for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
              },
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            }, n = j.WordArray = f.extend({
              init: function init(a, c) {
                a = this.words = a || [];
                this.sigBytes = c != m ? c : 4 * a.length;
              },
              toString: function toString(a) {
                return (a || h).stringify(this);
              },
              concat: function concat(a) {
                var c = this.words, q = a.words, d = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (d + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
                this.sigBytes += a;
                return this;
              },
              clamp: function clamp() {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
                a.length = e.ceil(c / 4);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a.words = this.words.slice(0);
                return a;
              },
              random: function random(a) {
                for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
                return new n.init(c, a);
              }
            }), b = p.enc = {}, h = b.Hex = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) {
                  var f = c[d >>> 2] >>> 24 - d % 4 * 8 & 255;
                  b.push((f >>> 4).toString(16));
                  b.push((15 & f).toString(16));
                }
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
                return new n.init(b, c / 2);
              }
            }, g = b.Latin1 = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - d % 4 * 8 & 255));
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (255 & a.charCodeAt(d)) << 24 - d % 4 * 8;
                return new n.init(b, c);
              }
            }, r = b.Utf8 = {
              stringify: function stringify(a) {
                try {
                  return decodeURIComponent(escape(g.stringify(a)));
                } catch (c) {
                  throw Error("Malformed UTF-8 data");
                }
              },
              parse: function parse(a) {
                return g.parse(unescape(encodeURIComponent(a)));
              }
            }, k = j.BufferedBlockAlgorithm = f.extend({
              reset: function reset() {
                this._data = new n.init();
                this._nDataBytes = 0;
              },
              _append: function _append(a) {
                "string" == typeof a && (a = r.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
              },
              _process: function _process(a) {
                var c = this._data, b = c.words, d = c.sigBytes, f = this.blockSize, h = d / (4 * f), h = a ? e.ceil(h) : e.max((0 | h) - this._minBufferSize, 0);
                a = h * f;
                d = e.min(4 * a, d);
                if (a) {
                  for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
                  g = b.splice(0, a);
                  c.sigBytes -= d;
                }
                return new n.init(g, d);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a._data = this._data.clone();
                return a;
              },
              _minBufferSize: 0
            });
            j.Hasher = k.extend({
              cfg: f.extend(),
              init: function init(a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
              },
              reset: function reset() {
                k.reset.call(this);
                this._doReset();
              },
              update: function update(a) {
                this._append(a);
                this._process();
                return this;
              },
              finalize: function finalize(a) {
                a && this._append(a);
                return this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function _createHelper(a) {
                return function(c, b) {
                  return new a.init(b).finalize(c);
                };
              },
              _createHmacHelper: function _createHmacHelper(a) {
                return function(b, f) {
                  return new s.HMAC.init(a, f).finalize(b);
                };
              }
            });
            var s = p.algo = {};
            return p;
          }(Math);
          (function() {
            var e = CryptoJS, m = e.lib, p = m.WordArray, j = m.Hasher, l = [], m = e.algo.SHA1 = j.extend({
              _doReset: function _doReset() {
                this._hash = new p.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
              },
              _doProcessBlock: function _doProcessBlock(f, n) {
                for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                  if (16 > a) l[a] = 0 | f[n + a]; else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
                    l[a] = c << 1 | c >>> 31;
                  }
                  c = (h << 5 | h >>> 27) + j + l[a];
                  c = 20 > a ? c + (1518500249 + (g & e | ~g & k)) : 40 > a ? c + (1859775393 + (g ^ e ^ k)) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);
                  j = k;
                  k = e;
                  e = g << 30 | g >>> 2;
                  g = h;
                  h = c;
                }
                b[0] = b[0] + h | 0;
                b[1] = b[1] + g | 0;
                b[2] = b[2] + e | 0;
                b[3] = b[3] + k | 0;
                b[4] = b[4] + j | 0;
              },
              _doFinalize: function _doFinalize() {
                var f = this._data, e = f.words, b = 8 * this._nDataBytes, h = 8 * f.sigBytes;
                e[h >>> 5] |= 128 << 24 - h % 32;
                e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
                e[15 + (h + 64 >>> 9 << 4)] = b;
                f.sigBytes = 4 * e.length;
                this._process();
                return this._hash;
              },
              clone: function clone() {
                var e = j.clone.call(this);
                e._hash = this._hash.clone();
                return e;
              }
            });
            e.SHA1 = j._createHelper(m);
            e.HmacSHA1 = j._createHmacHelper(m);
          })();
          var appId = WechatAppID;
          var timestamp = new Date().getTime().toString();
          var nonceStr = (1e3 * Math.random()).toString();
          var ticket = data.jsapi_ticket;
          var url = location.href.split("#")[0];
          var string = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timestamp + "&url=" + url;
          var signature = CryptoJS.SHA1(string, {
            string: true
          }).toString();
          wx.config({
            debug: false,
            appId: appId,
            timestamp: timestamp,
            nonceStr: nonceStr,
            signature: signature,
            jsApiList: [ "updateAppMessageShareData", "updateTimelineShareData" ]
          });
          wx.ready(function() {
            var Titles = window.sharedWords.length;
            var descTitle = "";
            Titles > 0 && (descTitle = window.sharedWords[Math.floor(Math.random() * (Titles - 1))]);
            wx.updateAppMessageShareData({
              title: "\u5076ONE\u9189\u7f8e\u57ce",
              desc: descTitle,
              link: wxShareURL + "?state=" + userID,
              imgUrl: wxShareAdvIMG,
              success: function success(res) {},
              cancel: function cancel(res) {},
              fail: function fail(res) {}
            });
            wx.updateTimelineShareData({
              title: "\u52a9\u529b\u4e61\u6751\u632f\u5174\uff0c\u7ed9\u5bb6\u4e61\u63d0\u4f9b\u4f18\u8d28\u76f4\u9500\u6e20\u9053\uff0c\u6253\u9020\u76f4\u64ad\u5356\u8d27\u5e73\u53f0\u3002\u65e0\u9700\u4e0b\u8f7d\uff0c\u968f\u65f6\u968f\u5730\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01\uff01",
              desc: "",
              link: wxShareURL + "?state=" + userID,
              imgUrl: wxShareAdvIMG,
              success: function success(res) {},
              cancel: function cancel(res) {},
              fail: function fail(res) {}
            });
          });
        }.bind(this);
        ConfigDataManager.getWXjsapi_ticket(userID, callback);
      }
    });
    cc._RF.pop();
  }, {
    GameManager: "GameManager",
    LobbyBaseLayer: "LobbyBaseLayer",
    LobbyLogic: "LobbyLogic",
    LobbyRoomLogic: "LobbyRoomLogic",
    VideoManager: "VideoManager"
  } ],
  LobbySocket: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "368b5Gn9npHSqR8X6nKKcji", "LobbySocket");
    "use strict";
    var RECONNECT_MAX_COUNT = (cc.sys.isNative, 20);
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var LobbySocket = cc.Class({
      extends: require("TcpClient"),
      properties: {},
      ctor: function ctor() {
        this.connectResult = null;
        this.loginDelegate = null;
        this.name = "LobbySocket";
        this.isReconnected = false;
        this.reconnectCount = 0;
        this.isSimulateLogin = false;
        this.isSqueeze = false;
        !NetConfig.isLocalServerAddress();
      },
      switchAccount: function switchAccount() {
        this.close();
        createLoading("\u6b63\u5728\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e..", 8, true);
        G_USER_PASSWORD = null;
        cc.sys.isNative ? cc.game.restart() : cc.director.loadScene("mLogin");
      },
      setTCPHeartCheckInterval: function setTCPHeartCheckInterval(heartCheckInterval) {
        this.setHeartCheckInterval(heartCheckInterval);
      },
      getMyInfo: function getMyInfo() {
        return UserInfoManager.getMyInfo();
      },
      connectService: function connectService(connectResult) {
        var _this = this;
        this.superConnectService = this._super;
        var callback = function callback(result) {
          var ip = NetConfig.getServerAddress();
          var port = NetConfig.getServerPort();
          var sendport = NetConfig.getSendPort();
          _this.connectResult = connectResult;
          _this.superConnectService(ip, port, sendport, _this.onSocketMsg.bind(_this));
        };
        if (connectResult) {
          this.connectResult = connectResult;
          this.getLogonServerInfo(callback);
        } else {
          this.connectResult = null;
          callback(true);
        }
        this.setHeartCheckInterval(15);
      },
      getLogonServerInfo: function getLogonServerInfo(callback) {
        var _this2 = this;
        var actionName = "getLogonServer";
        var fCallback = function fCallback() {
          createTips("\u767b\u5f55\u670d\u52a1\u5668IP\u548c\u7aef\u53e3\u83b7\u53d6\u5931\u8d25");
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (null == jsonData.data.ip || 0 == jsonData.data.port) {
              createTips("\u767b\u5f55\u670d\u52a1\u5668IP\u548c\u7aef\u53e3\u4fe1\u606f\u9519\u8bef");
              _this2.connectResult && _this2.connectResult(false);
              return;
            }
            NetConfig.setServerAddress(jsonData.data.ip);
            NetConfig.setServerPort(jsonData.data.port);
            callback(true);
          } else {
            createTips(jsonData.msg);
            _this2.connectResult && _this2.connectResult(false);
          }
        };
        var args = {};
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/server/getLogonServer";
        args.params = {};
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      onConnectMessage: function onConnectMessage(p) {
        this._super(p);
        if (this.isReconnected) {
          console.log("LobbySocket:onConnectMessage \u91cd\u65b0\u8fde\u63a5\u6210\u529f \u91cd\u8fde\u6b21\u6570 = " + this.reconnectCount);
          this.reconnectCount = 0;
          this.isReconnected = false;
          this.isSimulateLogin = true;
          this.getMyInfo() ? this.login(this.getMyInfo().userID, this.getMyInfo().userToken) : this.onLoginFailed();
        } else if (this.connectResult) {
          this.connectResult(true);
          this.connectResult = null;
        }
      },
      onLogonNotifyMessage: function onLogonNotifyMessage(netMsg) {
        MSG_NTF_LOGON_USER_SQUEEZE == netMsg.bAssistantID ? this.dealNotifyLogonUserSqueeze(netMsg) : MSG_NTF_LOGON_NOTICE == netMsg.bAssistantID ? this.dealNotifyLogonNotice(netMsg) : MSG_NTF_LOGON_HORN == netMsg.bAssistantID ? this.dealNotifyLogonHorn(netMsg) : MSG_NTF_LOGON_RESOURCE_CHANGE == netMsg.bAssistantID ? this.dealNotifyResourceChange(netMsg) : MSG_NTF_LOGON_SUPPORT_INFO == netMsg.bAssistantID ? this.dealNotifySupportInfo(netMsg) : MSG_NTF_LOGON_USERCOUNT_CHANGE == netMsg.bAssistantID ? RoomRecordManager.dealNotifyUserCountChange(netMsg) : MSG_NTF_LOGON_FRIEND_NOTIFY == netMsg.bAssistantID ? this.dealNotifyFriendNotify(netMsg) : MSG_NTF_LOGON_FRIEND_ADDOK == netMsg.bAssistantID ? this.dealNotifyFriendAdd(netMsg) : MSG_NTF_LOGON_FRIEND_DELOK == netMsg.bAssistantID ? this.dealNotifyFriendDel(netMsg) : MSG_NTF_LOGON_FRIEND_DELNOTIFY == netMsg.bAssistantID ? this.dealNotifyFriendNotifyDel(netMsg) : MSG_NTF_LOGON_FRIEND_LOGINOROUT == netMsg.bAssistantID ? this.dealNotifyFriendLoginOrOut(netMsg) : MSG_NTF_LOGON_FRIEND_REDSPOT == netMsg.bAssistantID ? this.dealNotifyFriendRedSpot(netMsg) : MSG_NTF_LOGON_CLOSE_SERVER == netMsg.bAssistantID ? this.dealNotifyCloseServer(netMsg) : MSG_NTF_LOGON_EMAIL_REDSPOT == netMsg.bAssistantID ? MailManager.dealMailRedSpot(netMsg) : MSG_NTF_LOGON_GAME_PEOPLECOUNT_CHANGE == netMsg.bAssistantID && this.dealLogonGamePeoplecountChange(netMsg);
      },
      login: function login(userID, userToken) {
        var p = Package.buildWritePack(156);
        p.writeBegin(MSG_MAIN_LOGON_LOGON, MSG_ASS_LOGON_LOGON_BY_NAME);
        p.writeString(tools.getMachineID(), 64);
        p.writeInt(userID);
        p.writeString(userToken, 64);
        var version = "0.0.0";
        p.writeString(version, 24);
        var onLoginCallback = function(data) {
          if (data.bHandleCode === G_HANDLE_CODE_OK) {
            var myInfo = {
              name: data.popNCHAR(MAX_USER_NAME_LEN),
              phone: data.popNCHAR(24),
              sex: data.popBYTE(),
              money: data.popLONGLONG(),
              jewels: data.popINT(),
              roomID: data.popINT(),
              deskIdx: data.popINT(),
              logonIP: data.popNCHAR(24),
              headURL: data.popNCHAR(256),
              bankMoney: data.popLONGLONG(),
              bankPasswd: data.popNCHAR(20),
              longitude: data.popNCHAR(12),
              latitude: data.popNCHAR(12),
              address: data.popNCHAR(64),
              motto: data.popNCHAR(128),
              visitor: data.popBYTE(),
              combineMatchID: data.popLONGLONG(),
              matchStatus: data.popBYTE(),
              gameExp: parseInt(F_GetMoneyDisplay(data.popLONGLONG())),
              UserLevel: data.popBYTE(),
              idCard: data.popNCHAR(24),
              realName: data.popNCHAR(64),
              giftCard: data.popLONGLONG(),
              checkPointsNum: data.popINT(),
              transferNum: data.popINT(),
              goodsPhone: data.popNCHAR(24),
              goodsAddress: data.popNCHAR(64),
              peopleCount: data.popINT()
            };
            myInfo.userID = userID;
            myInfo.userToken = userToken;
            UserInfoManager.setMyInfo(myInfo);
            this.startLocation(userID);
            this.onLoginSuccess(this.getMyInfo());
          }
        }.bind(this);
        this.send(p, onLoginCallback);
      },
      startLocation: function startLocation(userID) {
        var callback = function(data) {
          var CryptoJS = CryptoJS || function(e, m) {
            var p = {}, j = p.lib = {}, l = function l() {}, f = j.Base = {
              extend: function extend(a) {
                l.prototype = this;
                var c = new l();
                a && c.mixIn(a);
                c.hasOwnProperty("init") || (c.init = function() {
                  c.$super.init.apply(this, arguments);
                });
                c.init.prototype = c;
                c.$super = this;
                return c;
              },
              create: function create() {
                var a = this.extend();
                a.init.apply(a, arguments);
                return a;
              },
              init: function init() {},
              mixIn: function mixIn(a) {
                for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);
                a.hasOwnProperty("toString") && (this.toString = a.toString);
              },
              clone: function clone() {
                return this.init.prototype.extend(this);
              }
            }, n = j.WordArray = f.extend({
              init: function init(a, c) {
                a = this.words = a || [];
                this.sigBytes = c != m ? c : 4 * a.length;
              },
              toString: function toString(a) {
                return (a || h).stringify(this);
              },
              concat: function concat(a) {
                var c = this.words, q = a.words, d = this.sigBytes;
                a = a.sigBytes;
                this.clamp();
                if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - b % 4 * 8 & 255) << 24 - (d + b) % 4 * 8; else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2]; else c.push.apply(c, q);
                this.sigBytes += a;
                return this;
              },
              clamp: function clamp() {
                var a = this.words, c = this.sigBytes;
                a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
                a.length = e.ceil(c / 4);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a.words = this.words.slice(0);
                return a;
              },
              random: function random(a) {
                for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);
                return new n.init(c, a);
              }
            }), b = p.enc = {}, h = b.Hex = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) {
                  var f = c[d >>> 2] >>> 24 - d % 4 * 8 & 255;
                  b.push((f >>> 4).toString(16));
                  b.push((15 & f).toString(16));
                }
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
                return new n.init(b, c / 2);
              }
            }, g = b.Latin1 = {
              stringify: function stringify(a) {
                var c = a.words;
                a = a.sigBytes;
                for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - d % 4 * 8 & 255));
                return b.join("");
              },
              parse: function parse(a) {
                for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (255 & a.charCodeAt(d)) << 24 - d % 4 * 8;
                return new n.init(b, c);
              }
            }, r = b.Utf8 = {
              stringify: function stringify(a) {
                try {
                  return decodeURIComponent(escape(g.stringify(a)));
                } catch (c) {
                  throw Error("Malformed UTF-8 data");
                }
              },
              parse: function parse(a) {
                return g.parse(unescape(encodeURIComponent(a)));
              }
            }, k = j.BufferedBlockAlgorithm = f.extend({
              reset: function reset() {
                this._data = new n.init();
                this._nDataBytes = 0;
              },
              _append: function _append(a) {
                "string" == typeof a && (a = r.parse(a));
                this._data.concat(a);
                this._nDataBytes += a.sigBytes;
              },
              _process: function _process(a) {
                var c = this._data, b = c.words, d = c.sigBytes, f = this.blockSize, h = d / (4 * f), h = a ? e.ceil(h) : e.max((0 | h) - this._minBufferSize, 0);
                a = h * f;
                d = e.min(4 * a, d);
                if (a) {
                  for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);
                  g = b.splice(0, a);
                  c.sigBytes -= d;
                }
                return new n.init(g, d);
              },
              clone: function clone() {
                var a = f.clone.call(this);
                a._data = this._data.clone();
                return a;
              },
              _minBufferSize: 0
            });
            j.Hasher = k.extend({
              cfg: f.extend(),
              init: function init(a) {
                this.cfg = this.cfg.extend(a);
                this.reset();
              },
              reset: function reset() {
                k.reset.call(this);
                this._doReset();
              },
              update: function update(a) {
                this._append(a);
                this._process();
                return this;
              },
              finalize: function finalize(a) {
                a && this._append(a);
                return this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function _createHelper(a) {
                return function(c, b) {
                  return new a.init(b).finalize(c);
                };
              },
              _createHmacHelper: function _createHmacHelper(a) {
                return function(b, f) {
                  return new s.HMAC.init(a, f).finalize(b);
                };
              }
            });
            var s = p.algo = {};
            return p;
          }(Math);
          (function() {
            var e = CryptoJS, m = e.lib, p = m.WordArray, j = m.Hasher, l = [], m = e.algo.SHA1 = j.extend({
              _doReset: function _doReset() {
                this._hash = new p.init([ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ]);
              },
              _doProcessBlock: function _doProcessBlock(f, n) {
                for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                  if (16 > a) l[a] = 0 | f[n + a]; else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];
                    l[a] = c << 1 | c >>> 31;
                  }
                  c = (h << 5 | h >>> 27) + j + l[a];
                  c = 20 > a ? c + (1518500249 + (g & e | ~g & k)) : 40 > a ? c + (1859775393 + (g ^ e ^ k)) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);
                  j = k;
                  k = e;
                  e = g << 30 | g >>> 2;
                  g = h;
                  h = c;
                }
                b[0] = b[0] + h | 0;
                b[1] = b[1] + g | 0;
                b[2] = b[2] + e | 0;
                b[3] = b[3] + k | 0;
                b[4] = b[4] + j | 0;
              },
              _doFinalize: function _doFinalize() {
                var f = this._data, e = f.words, b = 8 * this._nDataBytes, h = 8 * f.sigBytes;
                e[h >>> 5] |= 128 << 24 - h % 32;
                e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296);
                e[15 + (h + 64 >>> 9 << 4)] = b;
                f.sigBytes = 4 * e.length;
                this._process();
                return this._hash;
              },
              clone: function clone() {
                var e = j.clone.call(this);
                e._hash = this._hash.clone();
                return e;
              }
            });
            e.SHA1 = j._createHelper(m);
            e.HmacSHA1 = j._createHmacHelper(m);
          })();
          var appId = WechatAppID;
          var timestamp = new Date().getTime().toString();
          var nonceStr = (1e3 * Math.random()).toString();
          var ticket = data.jsapi_ticket;
          var url = location.href.split("#")[0];
          var string = "jsapi_ticket=" + ticket + "&noncestr=" + nonceStr + "&timestamp=" + timestamp + "&url=" + url;
          var signature = CryptoJS.SHA1(string, {
            string: true
          }).toString();
          wx.config({
            debug: false,
            appId: appId,
            timestamp: timestamp,
            nonceStr: nonceStr,
            signature: signature,
            jsApiList: [ "getLocation" ]
          });
          wx.ready(function() {
            wx.getLocation({
              type: "wgs84",
              success: function success(res) {
                ConfigDataManager.saveUserAddress(res.longitude, res.latitude, userID);
              },
              fail: function fail(err) {},
              cancel: function cancel(res) {
                alert("\u7528\u6237\u62d2\u7edd\u6388\u6743\u83b7\u53d6\u5730\u7406\u4f4d\u7f6e");
              }
            });
          });
        }.bind(this);
        ConfigDataManager.getWXjsapi_ticket(userID, callback);
      },
      onLoginSuccess: function onLoginSuccess(myInfo) {
        console.log("lobby socket onLoginSuccess \u767b\u5f55\u6210\u529f", myInfo);
        if (!myInfo) return;
        if (!this.loginDelegate) return;
        if (0 == myInfo.roomID) {
          var scene = cc.director.getScene();
          var canvas = scene.getChildByName("Canvas");
          var lobby = canvas.getChildByName("lobby");
          var livebroadcast = canvas.getChildByName("livebroadcast");
          var LobbyScene = null;
          canvas && lobby && (LobbyScene = lobby.getComponent("LobbyScene"));
          this.loginDelegate.onLoginSuccess && this.loginDelegate.onLoginSuccess();
          if (livebroadcast) return;
          if (null == LobbyScene) {
            cc.log("lobby scnee == null load the lobby scene ");
            var _scene = cc.director.getScene();
            loadsceneRes("Texture", function() {
              LOOBBY_STATIC = false;
              cc.director.loadScene("lobby");
            });
            return;
          }
          LobbyScene.updateUI && LobbyScene.updateUI();
        } else {
          var doLoginRoom = function(roomInfo) {
            var LoginRoomLogic = new (require("LoginRoomLogic"))();
            LoginRoomLogic.enterRoom(roomInfo, myInfo.userID, myInfo.userToken);
            this.loginDelegate.onLoginSuccess && this.loginDelegate.onLoginSuccess();
          }.bind(this);
          var getAllRoomList = function() {
            var roomInfo = RoomListManager.getRoomByRoomID(myInfo.roomID);
            if (roomInfo) {
              window.roomNo = 0;
              loadsceneRes("Texture", function() {
                doLoginRoom(roomInfo);
              });
            } else {
              this.clear();
              this.onLoginFailed();
              this.loginDelegate = null;
            }
          }.bind(this);
          var roomInfo = GameSocket.getRoomInfo();
          if (roomInfo) doLoginRoom(roomInfo); else {
            var LobbyLogic = new (require("LobbyLogic"))();
            LobbyLogic.requestAllRoomList(getAllRoomList);
          }
        }
      },
      onLoginFailed: function onLoginFailed() {
        var btnName1 = "\u786e\u5b9a";
        var msgCallback = function(btnName) {
          if (cc.sys.isMobile) ; else {
            this.reconnectCount = 0;
            this.checkReconnect();
          }
        }.bind(this);
        var msgObj = {};
        msgObj.msg = "\n\u7f51\u7edc\u8fde\u63a5\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u7f51\u7edc";
        msgObj.btn1 = btnName1;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
        if (null != this.loginDelegate) {
          this.loginDelegate.onLoginFailed();
          this.loginDelegate = null;
        }
        this.isReconnected = false;
      },
      onDisconnect: function onDisconnect() {
        console.log(">>>>>>>onDisconnect lobby");
        var runningScene = cc.director.getScene();
        console.log(">>>>>>>onDisconnect \u5927\u5385\u5fc3\u8df3\u91cd\u8fdelobby");
        createRepeatConnectLayer(runningScene);
        console.log(">>>>>>>onDisconnect \u5927\u5385\u5fc3\u8df3\u91cd\u8fdelobby 2222");
        this.closeCallback && this.closeCallback();
      },
      requestMyResource: function requestMyResource() {
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_USERINFO_FLUSH);
        var onResourceCallback = function onResourceCallback(netMsg) {
          if (netMsg.bHandleCode == G_HANDLE_CODE_OK) {
            var info = {};
            info.jewels = netMsg.popINT();
            info.money = netMsg.popLONGLONG();
            info.giftCard = netMsg.popLONGLONG();
            info.Transfernum = netMsg.popINT();
            DataNotify.onMoneyChanged(info.money);
            DataNotify.onDiamondChanged(info.jewels);
            DataNotify.onGiftCardChanged(info.giftCard);
            DataNotify.onTransfernumChanged(info.Transfernum);
          }
        };
        this.sendData(cNetMsg, onResourceCallback);
      },
      setLoginDelegate: function setLoginDelegate(loginDelegate) {
        this.loginDelegate = loginDelegate;
      },
      clear: function clear() {
        this._super();
        this.isReconnected = false;
        this.reconnectCount = 0;
        this.isSimulateLogin = false;
        this.connectResult = null;
        this.loginDelegate = null;
        this.isSqueeze = false;
        this.removeAllNetCallback();
        GameSocket.clear();
        GameSocket.setIsSendLogoutRoom(false);
        this.close();
      },
      checkReconnect: function checkReconnect() {
        if (this.reconnectCount < RECONNECT_MAX_COUNT) {
          this.reconnectCount = this.reconnectCount + 1;
          console.log("LobbySocket:checkReconnect \u5f00\u59cb\u91cd\u65b0\u8fde\u63a5 \u91cd\u8fde\u6b21\u6570 = ", this.reconnectCount);
          this.connectService();
        } else {
          console.log("\u56de\u8c03\u91cd\u8fde\u5931\u8d25");
          this.reconnectCount = 0;
          this.isReconnected = false;
          this.onLoginFailed();
          this.loginDelegate = null;
        }
      },
      reconnecService: function reconnecService() {
        this.isReconnected = true;
        this.checkReconnect();
      },
      onConnectSuccess: function onConnectSuccess() {
        this._super();
      },
      onConnectFailed: function onConnectFailed() {
        this["super"]();
        if (this.isReconnected) this.checkReconnect(); else if (this.connectResult) {
          removeLoading();
          createTips(GlobalError.getErrorStr(GlobalError.ERROR_LOBBY_CONNECT_FAILED));
          this.connectResult(false);
          this.connectResult = null;
        }
      },
      dealNotifyLogonUserSqueeze: function dealNotifyLogonUserSqueeze(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var info = {};
          var callback = function() {
            this.backLogin();
          }.bind(this);
          var runningScene = cc.director.getScene();
          runningScene.getChildByName(G_REPEAT_CONNECT_LAYER_TAG) && runningScene.removeChildByTag(G_REPEAT_CONNECT_LAYER_TAG);
          this.isSqueeze = true;
          createClickTips("\u60a8\u7684\u8d26\u53f7\u5728\u5176\u4ed6\u8bbe\u5907\u767b\u9646", callback);
        }
      },
      getIsSqueeze: function getIsSqueeze() {
        return this.isSqueeze;
      },
      dealNotifyLogonNotice: function dealNotifyLogonNotice(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyNotice = function _Resolve_LogonNotifyNotice(netMsg) {
            var struct = {};
            struct.interval = netMsg.popINT();
            struct.times = netMsg.popINT();
            struct.type = netMsg.popINT();
            struct.tag = netMsg.popINT();
            struct.title = netMsg.popNCHAR(24);
            struct.sizeCount = netMsg.popINT();
            struct.content = netMsg.popNCHAR(struct.sizeCount);
            return struct;
          };
          var info = _Resolve_LogonNotifyNotice(netMsg);
          console.log(tools.getCurTime() + " #### \u516c\u544a LobbySocket:dealNotifyLogonNotice", info);
          var runningScene = C_Director.getScene();
          if (info.type == E_NoticeType.COMMON) {
            var lobby = runningScene.children[0];
            var message = info.content;
            ChatMessageManager.push(message);
            ChatMessageManager.pushCommonMsg(message);
            GlobalEvent.instance.emit("NORMAL_NOTICE", info);
          } else if (info.type == E_NoticeType.IMMEDIATELY) {
            var _message = info.content;
            ChatMessageManager.push(_message);
            ChatMessageManager.pushCommonMsg(_message);
            GlobalEvent.instance.emit("NORMAL_NOTICE", info);
          } else info.type == E_NoticeType.STOP_SVR_PRE_TIP && GlobalEvent.instance.emit("NORMAL_NOTICE", info);
        }
      },
      dealNotifyLogonHorn: function dealNotifyLogonHorn(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyHorn = function _Resolve_LogonNotifyHorn(netMsg) {
            var struct = {};
            struct.userID = netMsg.popINT();
            struct.userName = netMsg.popNCHAR(MAX_USER_NAME_LEN);
            struct.sizeCount = netMsg.popINT();
            struct.content = netMsg.popNCHAR(struct.sizeCount);
            return struct;
          };
          var info = _Resolve_LogonNotifyHorn(netMsg);
          cc.log(info, " LobbySocket:dealNotifyLogonHorn");
          var runningScene = C_Director.getScene();
          var lobby = runningScene.children[0];
          var message = info.userName + ": " + info.content;
          ChatMessageManager.push(message);
          cc.log(lobby, runningScene, C_Director);
          if (lobby.getChildByName("Panel_Notice")) {
            var lobbyScene = lobby.getComponent("LobbyScene");
            var notice = {};
            cc.log("+++++++");
            cc.log(message);
            notice.content = "\u5927\u91cf\u4ee3\u7406\u62db\u6210\u63d0\u6210\u767e\u5206\u4e4b30-70,\u6d3b\u52a8\u671f\u95f4\u516d\u4e2a\u7684\u5f00\u59cb\u6709\u5956\u52b1";
            notice.times = 1;
            notice.interval = 1;
            lobbyScene.pushNotice(notice);
          } else cc.loader.loadRes("prefab/NoticeLayer", function(err, prefab) {
            var NoticeLayer = cc.instantiate(prefab);
            var noticeLayerJS = NoticeLayer.getComponent("NoticeLayer");
            NoticeLayer.x = cc.winSize.width / 2;
            NoticeLayer.y = cc.winSize.height / 2;
            noticeLayerJS.init(message);
            cc.log(runningScene, " notice", message);
            lobby.addChild(NoticeLayer);
          });
        }
      },
      dealNotifyResourceChange: function dealNotifyResourceChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          cc.log("!!!!!!!!!!!!");
          var _Resolve_LogonNotifyResourceChange = function _Resolve_LogonNotifyResourceChange(netMsg) {
            var struct = {};
            struct.resourceType = netMsg.popINT();
            struct.value = netMsg.popLONGLONG();
            struct.reason = netMsg.popINT();
            struct.param1 = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyResourceChange(netMsg);
          var value = 0;
          var name = "";
          if (E_ResourceType.GOLD == info.resourceType) {
            value = info.value - this.getMyInfo().money;
            name = "\u91d1\u5e01";
          } else if (E_ResourceType.CARD == info.resourceType) {
            value = info.value - this.getMyInfo().jewels;
            name = "\u94bb\u77f3";
          } else if (E_ResourceType.BANK == info.resourceType) {
            value = info.value - this.getMyInfo().bankMoney;
            name = "\u94f6\u884c\u91d1\u5e01";
          } else if (E_ResourceType.GiftCard == info.resourceType) {
            value = info.value - this.getMyInfo().giftCard;
            name = "\u793c\u5238";
          } else if (E_ResourceType.TRANSFERNUM == info.resourceType) {
            value = info.value - this.getMyInfo().transferNum;
            name = "\u5151\u6362\u6b21\u6570";
          }
          if (E_ResourceChangeReason.PAY_RECHARE == info.reason) {
            var callback = function() {}.bind(this);
            var msgObj = {};
            msgObj.btn1 = "\u786e\u5b9a";
            msgObj.msg = String("\n\u652f\u4ed8\u6210\u529f\uff0c\u83b7\u5f97" + name + " x " + value / G_MULTI_NUM);
            msgObj.callbackFun = callback;
            createMsgBox(msgObj);
          } else if (E_ResourceChangeReason.BACK_RECHARE == info.reason) {
            var _callback = function() {}.bind(this);
            var _msgObj = {};
            _msgObj.btn1 = "\u786e\u5b9a";
            _msgObj.msg = String("\n\u540e\u53f0\u5145\u503c\uff0c\u83b7\u5f97" + name + " x " + value / G_MULTI_NUM);
            _msgObj.callbackFun = _callback;
            createMsgBox(_msgObj);
          } else if (E_ResourceChangeReason.FRIEND_REWARD == info.reason || E_ResourceChangeReason.SUPPORT == info.reason || E_ResourceChangeReason.SHARE == info.reason || E_ResourceChangeReason.BIND_PHONE == info.reason || E_ResourceChangeReason.BIND_AGENT == info.reason || E_ResourceChangeReason.INVITE_ENTER == info.reason || E_ResourceChangeReason.SYSTEM_MAIL == info.reason || E_ResourceChangeReason.MATCH_REWARDS == info.reason || E_ResourceChangeReason.ACHIEVEMENT_REWARDS == info.reason || E_ResourceChangeReason.USER_MAIL == info.reason) {
            cc.log(E_ResourceChangeReason.FRIEND_REWARD);
            cc.log(E_ResourceChangeReason.SUPPORT);
            cc.log(E_ResourceChangeReason.SHARE);
            cc.log(E_ResourceChangeReason.BIND_PHONE);
            cc.log(E_ResourceChangeReason.BIND_AGENT);
            cc.log(E_ResourceChangeReason.INVITE_ENTER);
            cc.log(E_ResourceChangeReason.SYSTEM_MAIL);
            cc.log(E_ResourceChangeReason.USER_MAIL);
            cc.log(info.reason);
            var _callback2 = function() {}.bind(this);
            var _msgObj2 = {};
            _msgObj2.btn1 = "\u786e\u5b9a";
            _msgObj2.msg = tools.stringFormat("\n\u5956\u52b1\u9886\u53d6\u6210\u529f\uff0c\u83b7\u5f97{0} x {1}", name, F_GetMoneyDisplay(value));
            _msgObj2.callbackFun = _callback2;
            createMsgBox(_msgObj2);
          }
          cc.log(E_ResourceType.GOLD == info.resourceType);
          cc.log(E_ResourceType.CARD == info.resourceType);
          cc.log(E_ResourceType.BANK == info.resourceType);
          E_ResourceType.GOLD == info.resourceType ? DataNotify.onMoneyChanged(info.value) : E_ResourceType.CARD == info.resourceType ? DataNotify.onDiamondChanged(info.value) : E_ResourceType.BANK == info.resourceType ? DataNotify.onBankMoneyChanged(info.value) : E_ResourceType.GiftCard == info.resourceType ? DataNotify.onGiftCardChanged(info.value) : E_ResourceType.TRANSFERNUM == info.resourceType && DataNotify.onTransfernumChanged(info.value);
        }
      },
      dealNotifySupportInfo: function dealNotifySupportInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifySupport = function _Resolve_LogonNotifySupport(netMsg) {
            var struct = {};
            struct.supportTimesEveryDay = netMsg.popINT();
            struct.supportMinLimitMoney = netMsg.popINT();
            struct.supportMoneyCount = netMsg.popINT();
            struct.leftSupportTimes = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifySupport(netMsg);
        }
      },
      dealNotifyFriendNotify: function dealNotifyFriendNotify(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonResponseFrendNotify = function _Resolve_LogonResponseFrendNotify(netMsg) {
            var struct = {};
            struct.friendNotify = FriendManager._Resolve_OneFriendNotify(netMsg);
            return struct;
          };
          var info = _Resolve_LogonResponseFrendNotify(netMsg);
          DataNotify.onFriendNotifyAdd(info.friendNotify);
        }
      },
      dealNotifyFriendAdd: function dealNotifyFriendAdd(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonResponseFrendAdd = function _Resolve_LogonResponseFrendAdd(netMsg) {
            var struct = {};
            struct.friend = FriendManager._Resolve_OneFriendInfo(netMsg);
            return struct;
          };
          var info = _Resolve_LogonResponseFrendAdd(netMsg);
          DataNotify.onFriendAdd(info.friend);
        }
      },
      dealNotifyFriendDel: function dealNotifyFriendDel(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyDelFriendOK = function _Resolve_LogonNotifyDelFriendOK(netMsg) {
            var struct = {};
            struct.friendID = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyDelFriendOK(netMsg);
          DataNotify.onFriendDel(info.friendID);
        }
      },
      dealNotifyFriendNotifyDel: function dealNotifyFriendNotifyDel(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyDelFriendNtfOK = function _Resolve_LogonNotifyDelFriendNtfOK(netMsg) {
            var struct = {};
            struct.notifyID = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyDelFriendNtfOK(netMsg);
          DataNotify.onFriendNotifyDel(info.notifyID);
        }
      },
      dealNotifyFriendLoginOrOut: function dealNotifyFriendLoginOrOut(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyFriendLoginorOut = function _Resolve_LogonNotifyFriendLoginorOut(netMsg) {
            var struct = {};
            struct.friendID = netMsg.popINT();
            struct.loginType = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyFriendLoginorOut(netMsg);
          1 == info.loginType ? info.onlineStatus = E_FriendOnlineStatus.ON : 2 == info.loginType && (info.onlineStatus = E_FriendOnlineStatus.OFF);
          DataNotify.onFriendOnlineStatusChange(info);
        }
      },
      dealNotifyFriendRedSpot: function dealNotifyFriendRedSpot(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyFriendRedSpot = function _Resolve_LogonNotifyFriendRedSpot(netMsg) {
            var struct = {};
            struct.friendListRedSpotCount = netMsg.popINT();
            struct.notifyListRedSpotCount = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyFriendRedSpot(netMsg);
          DataNotify.onFriendRedSpotChange(info);
        }
      },
      dealNotifyCloseServer: function dealNotifyCloseServer(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyCloseServer = function _Resolve_LogonNotifyCloseServer(netMsg) {
            var struct = {};
            struct.status = netMsg.popINT();
            struct.closeServerTime = netMsg.popLONGLONG();
            struct.openServerTime = netMsg.popLONGLONG();
            struct.count = netMsg.popINT();
            struct.param1 = netMsg.readString(64);
            struct.param2 = netMsg.readString(64);
            struct.param3 = netMsg.readString(64);
            struct.param4 = netMsg.readString(64);
            struct.param5 = netMsg.readString(64);
            struct.param6 = netMsg.readString(64);
            struct.param7 = netMsg.readString(64);
            struct.param8 = netMsg.readString(64);
            struct.param9 = netMsg.readString(64);
            struct.param10 = netMsg.readString(64);
            return struct;
          };
          var info = _Resolve_LogonNotifyCloseServer(netMsg);
          if (1 == info.status) {
            var runningScene = C_Director.getScene();
            for (var i in runningScene.children) runningScene.children[i].zIndex == G_SYSTEMNOTICE_ZORDER_TAG && runningScene.removeChild(runningScene.children[i]);
            var callback = function callback() {};
            cc.loader.loadRes("prefab/NoticeSystem", function(err, prefab) {
              var NoticeLayer = cc.instantiate(prefab);
              var noticeLayerJS = NoticeLayer.getComponent("NoticeSystem");
              NoticeLayer.x = cc.winSize.width / 2;
              NoticeLayer.y = cc.winSize.height / 2;
              noticeLayerJS.init(info, callback);
              runningScene.addChild(NoticeLayer, G_SYSTEMNOTICE_ZORDER_TAG);
            });
          }
        }
      },
      dealLogonGamePeoplecountChange: function dealLogonGamePeoplecountChange(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonGamePeoplecountChange = function _Resolve_LogonGamePeoplecountChange(netMsg) {
            var struct = {};
            struct.peopleCount = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonGamePeoplecountChange(netMsg);
          DataNotify.onLogonGamePeoplecountChange(info.peopleCount);
        }
      },
      dealLogonWorldChat: function dealLogonWorldChat(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonWorldChat = function _Resolve_LogonWorldChat(netMsg) {
            var struct = {};
            struct.type = netMsg.popBYTE();
            struct.userID = netMsg.popINT();
            struct.name = netMsg.popNCHAR(256);
            struct.headURL = netMsg.popNCHAR(MAX_USER_NAME_LEN);
            struct.address = netMsg.popNCHAR(64);
            struct.chatContent = netMsg.popNCHAR(100);
            struct.time = netMsg.popINT();
            struct.tag = netMsg.popINT();
            struct.videoID = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonWorldChat(netMsg);
          var myID = UserInfoManager.getMyInfo().userID;
          123363 != myID && 124624 != myID && 123071 != myID || createTips("\u6536\u5230\u6d88\u606f=" + info.chatContent);
          DataNotify.onLogonNewMsgComing2(info);
          DataNotify.onLogonNewMsgComing1(info);
          if (window.G_bGetChatList) {
            var dataArrsLen = Object.keys(window.G_chatList).length;
            if (dataArrsLen >= 1e3) for (var i = 2; i <= 1e3; i++) window.G_chatList[i - 1] = window.G_chatList[i];
            window.G_chatList[dataArrsLen + 1] = info;
          }
        }
      },
      dealLogonRewardNewUser: function dealLogonRewardNewUser(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonRewardNewUser = function _Resolve_LogonRewardNewUser(netMsg) {
            var struct = {};
            struct.giftCard = netMsg.popINT();
            struct.money = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonRewardNewUser(netMsg);
          createNewhandReward(info.giftCard, info.money);
        }
      },
      dealNotifyLuziInfo: function dealNotifyLuziInfo(netMsg) {},
      backLogin: function backLogin() {
        cc.sys.isNative && cc.game.restart();
      },
      requestHorn: function requestHorn(message) {
        var cNetMsg = this.createNetMsg(1024, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_SEND_HORN);
        cNetMsg.pushNCHAR(message, 1024);
        this.sendData(cNetMsg);
      },
      requestDissmissDesk: function requestDissmissDesk(passwd) {
        var cNetMsg = this.createNetMsg(20, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_DISSMISS_DESK);
        cNetMsg.pushNCHAR(String(passwd), 20);
        this.sendData(cNetMsg);
      },
      isInSelfRemoveList: function isInSelfRemoveList(mainID, assID) {
        var selfRemoveCallbackList = [ {
          mainID: MSG_MAIN_LOGON_OTHER,
          assID: MSG_ASS_LOGON_OTHER_SEND_GRADE
        }, {
          mainID: MSG_MAIN_LOGON_OTHER,
          assID: MSG_ASS_LOGON_OTHER_EMAIL_LIST
        } ];
        var key = tools.stringFormat("{0}_{1}", mainID, assID);
        for (var i in selfRemoveCallbackList) {
          var v = selfRemoveCallbackList[i];
          var selfRemovekey = tools.stringFormat("{0}_{1}", v.mainID, v.assID);
          if (key == selfRemovekey) return true;
        }
        return false;
      },
      checkLobbyVersion: function checkLobbyVersion() {},
      requestUserInfo: function requestUserInfo(userID, callback) {
        if (userID <= 0) return;
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_USERINFO);
        cNetMsg.pushINT(Number(userID));
        var getUserInfoCallback = function getUserInfoCallback(netMsg) {
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var _Resolve_LogonResponseUserInfo = function _Resolve_LogonResponseUserInfo(netMsg) {
              var struct = {};
              struct.name = netMsg.readString(MAX_USER_NAME_LEN);
              struct.headURL = netMsg.readString(256);
              struct.sex = netMsg.popBYTE();
              struct.gameCount = netMsg.popINT();
              struct.winCount = netMsg.popINT();
              struct.onlineStatus = netMsg.popBYTE();
              struct.longitude = netMsg.readString(12);
              struct.latitude = netMsg.readString(12);
              struct.address = netMsg.readString(64);
              struct.jewels = netMsg.popINT();
              struct.money = netMsg.popLONGLONG();
              struct.logonIP = netMsg.readString(24);
              struct.motto = netMsg.readString(128);
              struct.giftCard = netMsg.popLONGLONG();
              return struct;
            };
            var info = _Resolve_LogonResponseUserInfo(netMsg);
            cc.log(info);
            info.userID = userID;
            UserInfoManager.push(info.userID, info);
            callback(info);
          }
        };
        this.sendData(cNetMsg, getUserInfoCallback);
      },
      requestLogonUserinfoFlush: function requestLogonUserinfoFlush(type, callback) {
        var cNetMsg = this.createNetMsg(1, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REWARD_NEW_USER);
        cNetMsg.pushBYTE(type);
        this.sendData(cNetMsg, function(netMsg) {
          G_HANDLE_CODE_OK == netMsg.bHandleCode && callback && callback();
        });
      },
      requestSetAutograph: function requestSetAutograph(autograph, callback) {
        var cNetMsg = this.createNetMsg(256, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_SET_AUTOGRAPH);
        cNetMsg.pushNCHAR_NO(autograph, 256);
        var setAutographCallback = function setAutographCallback(netMsg) {
          G_HANDLE_CODE_OK == netMsg.bHandleCode ? callback && callback(true) : callback(false);
        };
        this.sendData(cNetMsg, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_SET_AUTOGRAPH, setAutographCallback);
      },
      requestRoomUserCount: function requestRoomUserCount(roomID, callback) {
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOGON_OTHER, MSG_ADD_LOGON_OTHER_QUERY_ROOMUSERCOUNT);
        cNetMsg.pushINT(roomID);
        var requestRoomUserCountCallback = function requestRoomUserCountCallback(netMsg) {
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var _Resolve_LogonResponseQueryRoomUserCount = function _Resolve_LogonResponseQueryRoomUserCount(netMsg) {
              var struct = {};
              struct.userCount = netMsg.popINT();
              return struct;
            };
            var info = _Resolve_LogonResponseQueryRoomUserCount(netMsg);
            callback && callback(info.userCount);
          }
        };
        this.sendData(cNetMsg, MSG_MAIN_LOGON_OTHER, MSG_ADD_LOGON_OTHER_QUERY_ROOMUSERCOUNT, requestRoomUserCountCallback);
      },
      requestSavePosition: function requestSavePosition(jsonData, callback) {
        createTips("1111111111");
        this.getMyInfo().longitude = jsonData.longitude || G_longitude;
        createTips("2222222222 " + this.getMyInfo().longitude);
        this.getMyInfo().latitude = jsonData.latitude || G_latitude;
        createTips("333333333 " + this.getMyInfo().latitude);
        var fCallback = function fCallback() {
          cc.log("\u4fdd\u5b58\u5730\u5740\u5931\u8d25");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        createTips("99999999999");
        var address = "\u672a\u77e5";
        var args = {};
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/user/saveUserAddress";
        args.params = {
          userID: this.getMyInfo().userID,
          longitude: this.getMyInfo().longitude,
          latitude: this.getMyInfo().latitude,
          address: address
        };
        createTips("AAAAAAAAAAA");
        createTips("longitude " + this.getMyInfo().longitude + "latitude " + this.getMyInfo().latitude);
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestSaveSignature: function requestSaveSignature(content, callback) {
        var cNetMsg = this.createNetMsg(256, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_SIGN);
        cNetMsg.pushNCHAR(content, 256);
        var requestRoomUserCountCallback = function requestRoomUserCountCallback(netMsg) {
          G_HANDLE_CODE_OK == netMsg.bHandleCode && callback && callback();
        };
        this.sendData(cNetMsg, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_SIGN, requestRoomUserCountCallback);
      },
      requestAgentConfig: function requestAgentConfig(callback) {
        var sCallback = function sCallback(jsonData) {
          callback && callback(jsonData);
        };
        var fCallback = function fCallback() {};
        var args = {};
        args.params = {
          api: "Agent",
          action: "isAgent",
          userID: this.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      onEnterBackground: function onEnterBackground() {
        this.isConnected();
      },
      onEnterForeground: function onEnterForeground() {
        if (this.isConnected()) {
          this.sendHelloMessage();
          this.tmpDelay = function() {
            var lobbyScene = cc.director.getScene().getChildByName("Canvas").getChildByName("Hall_Node");
            null != lobbyScene && (lobbyScene = lobbyScene.getComponent("LobbyScene"));
            null != lobbyScene && lobbyScene.updateUI && lobbyScene.updateUI();
          };
          this.scheduleOnce(this.tmpDelay, .01);
        } else {
          this.tmpDelay = function() {
            createRepeatConnectLayer(cc.director.getScene());
          };
          this.scheduleOnce(this.tmpDelay, .01);
        }
      },
      enterGameRoom: function enterGameRoom(gameID, callback) {
        var cNetMsg = this.createNetMsg(5, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_ENTERTHEGAMEROOM);
        cNetMsg.pushBYTE(1);
        cNetMsg.pushINT(gameID);
        this.sendData(cNetMsg);
      },
      leftGameRoom: function leftGameRoom(gameID) {
        var cNetMsg = this.createNetMsg(5, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_ENTERTHEGAMEROOM);
        cNetMsg.pushBYTE(2);
        cNetMsg.pushINT(gameID);
        this.sendData(cNetMsg);
      },
      sendMatchJoinInfo: function sendMatchJoinInfo() {
        cc.log("LobbySocket.sendMatchJoinInfo()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_JOIN_MATCH_SCENE);
        this.sendData(cNetMsg);
      },
      sendMatchLeftInfo: function sendMatchLeftInfo() {
        cc.log("LobbySocket.sendMatchLeftInfo()");
        var cNetMsg = this.createNetMsg(0, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_EXIT_MATCH_SCENE);
        this.sendData(cNetMsg);
      },
      sendRankMatchInfo: function sendRankMatchInfo(Sign, gameID, callBackRankMatch) {
        cc.log("LobbySocket.sendToDuanWeiInfo()");
        var cNetMsg = this.createNetMsg(5, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_REQ_ENTER_OR_LEAVE_THE_GAMERO);
        cNetMsg.pushBYTE(1);
        cNetMsg.pushINT(1e4);
        this.sendData(cNetMsg, callBackRankMatch);
      },
      requestChatList: function requestChatList(count, callback) {
        var requestChaCallback = function requestChaCallback(netMsg) {
          var dataArrs = {};
          dataArrs.msgCount = 0;
          if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
            var msgCount = netMsg.popINT();
            dataArrs.msgCount = msgCount;
            for (var i = 1; i < msgCount; i++) {
              var tempData = {};
              tempDatatype = netMsg.popBYTE();
              tempData.userID = netMsg.popINT();
              tempData.name = netMsg.popNCHAR(256);
              tempData.headURL = netMsg.popNCHAR(256);
              tempData.address = netMsg.popNCHAR(64);
              tempData.chatContent = netMsg.popNCHAR(100);
              tempData.time = netMsg.popINT();
              dataArrs[i] = tempData;
            }
          }
          callback(dataArrs);
        };
        var cNetMsg = this.createNetMsg(4, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_GET_WORLD_CHAT);
        cNetMsg.pushINT(Number(count));
        this.sendData(cNetMsg, requestChaCallback);
      },
      sendChat: function sendChat(type, chatContent, tag, voiceID) {
        var cNetMsg = this.createNetMsg(112, MSG_MAIN_LOGON_OTHER, MSG_ASS_LOGON_OTHER_SEND_WORLD_CHAT);
        cNetMsg.pushBYTE(type);
        cNetMsg.pushNCHAR(chatContent, 100);
        cNetMsg.pushINT(tag);
        cNetMsg.pushINT(voiceID);
        this.sendData(cNetMsg);
      },
      onSocketMsg: function onSocketMsg(p) {
        this.resolveNetMsgHead(p);
        if (p.bHandleCode !== G_HANDLE_CODE_OK) {
          var errorString = GlobalError.getErrorStr(p.bHandleCode);
          if ("" !== errorString) {
            console.warn(tools.getCurTime() + " SOCK_MSG_RSP failed maincmd:" + p.bMainID + " subcmd:" + p.bAssistantID + " errcode:" + p.bHandleCode + " errmsg:" + errorString);
            createTips(errorString);
            "\u623f\u95f4\u4e0d\u5b58\u5728" == errorString && window.testModule && cc.sys.localStorage.removeItem("roomNo");
          } else console.warn(tools.getCurTime() + " SOCK_MSG_RSP failed maincmd:" + p.bMainID + " subcmd:" + p.bAssistantID + " errcode:" + p.bHandleCode + " errmsg:" + errorString);
        }
        p.bHandleCode == G_HANDLE_CODE_OK && console.info(tools.getCurTime() + " SOCK_MSG_RSP sucess maincmd:" + p.bMainID + " subcmd:" + p.bAssistantID);
        MSG_MAIN_MATCH_NOTIFY == p.bMainID && MSG_NTF_LOGON_MATCH_NOTIFY_START_MATCH == p.bAssistantID;
        var callbackFunOfNet = this.getCallbackFun(p.getCmd());
        if (callbackFunOfNet) {
          removeLoading();
          this.removeNetCallback(p.getCmd());
          callbackFunOfNet(p);
        } else {
          cc.log("1", p.bMainID, p.bAssistantID);
          if (MSG_MAIN_LOGON_NOTIFY == p.bMainID) {
            cc.log("2", p.bMainID, p.bAssistantID);
            this.onLogonNotifyMessage(p);
          } else if (MSG_MAIN_FRIENDSGROUP_NOTIFY == p.bMainID) FriendsGroupManager.onFriendsGroupNotifyMessage(p); else if (MSG_MAIN_MATCH_NOTIFY == p.bMainID) {
            cc.log("\u6536\u5230\u4e86\u6bd4\u8d5b\u573a\u7684\u4fe1\u606f");
            MatchManager.onMatchgameNotifyMessage(p);
          }
          cc.log("3", p.bMainID, p.bAssistantID);
          if (MSG_MAIN_LOADER_LOGON == p.bMainID) GameSocket.onLoginMessage(p); else if (MSG_MAIN_LOADER_NOTIFY_USER == p.bMainID) GameSocket.onGameNotifyUserMessage(p); else if (MSG_MAIN_LOADER_NOTIFY == p.bMainID) {
            console.log("\u6536\u5230\u804a\u5929\u6d88\u606f\u5566 ");
            GameSocket.onGameNotifyMessage(p);
          } else MSG_MAIN_LOADER_FRAME == p.bMainID ? GameSocket.onFrameMessage(p) : MSG_MAIN_LOADER_GAME == p.bMainID ? GameSocket.onGameMessage(p) : MSG_MAIN_LOADER_RESOURCE_CHANGE == p.bMainID ? GameSocket.onResourceChange(p) : MSG_MAIN_LOADER_VCODE == p.bMainID ? GameSocket.onGameYanCode(p) : MSG_MAIN_LOADER_MATCH == p.bMainID ? GameSocket.onMatchDeskChange(p) : MSG_NTF_LOADER_DESK_NO_USER == p.bMainID ? GameSocket.backLobby() : MSG_MAIN_LOGON_NOTIFY == p.bMainID && MSG_NTF_LOGON_WORLD_CHAT == p.bAssistantID ? this.dealLogonWorldChat(p) : MSG_MAIN_LOGON_NOTIFY == p.bMainID && MSG_NTF_LOGON_REWARD_NEW_USER == p.bAssistantID ? this.dealLogonRewardNewUser(p) : p.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectSuccess || p.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectFailed || p.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_DisConnect || E_NET_CONNECT_MAINID.mainid_net_connect == p.bMainID || cc.log("LobbySocket \u8fd8\u6536\u5230\u4e86 bMainID=" + p.bMainID + ", bAssistantID=" + p.bAssistantID + " \u7684\u6d88\u606f\u6ca1\u6709\u89e3\u6790 \u8fde\u63a5\u6d88\u606f(1, 1)\u548c\u5fc3\u8df3\u6d88\u606f(1, 2)\u9664\u5916\uff0c\u5f80\u4e0b\u67e5\u770b\u662f\u5426\u662f\u6e38\u620f\u5f00\u53d1\u8005\u81ea\u5df1\u7ed1\u5b9a\u7684\u6d88\u606f");
        }
      }
    });
    module.exports = LobbySocket;
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic",
    LoginRoomLogic: "LoginRoomLogic",
    TcpClient: "TcpClient"
  } ],
  LobbyTopPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c8e1ficOhPg7lolMg85Wyp", "LobbyTopPanel");
    "use strict";
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        nameLabel: cc.Label,
        idLabel: cc.Label,
        jewelsLabel: cc.Label,
        changeLabel: cc.Label,
        goldLabel: cc.Label,
        head: cc.Sprite,
        ticketLabel: cc.Label,
        rengzheng: cc.Node,
        diyiyeXiaoXi: cc.Node,
        LabelNoticeNode: cc.Node
      },
      onLoad: function onLoad() {
        this.isShowStopSvr = false;
        this.isShowNotice = false;
        this.LabelNoticeNode.active = true;
        this.noticeList = [];
        this.noticeListSpec = [];
        this.nPlayIndex = 0;
        this.LobbyLogic = new (require("LobbyLogic"))();
        var realName = this.LobbyLogic.getRealName();
        var idCard = this.LobbyLogic.getIDCard();
        "" != realName && "" != idCard && (this.rengzheng.active = true);
        var onGetHeadRes = function(avataRes) {
          this.head && cc.isValid(this.head) && (this.head.spriteFrame = avataRes);
        }.bind(this);
        var headUrl = this.LobbyLogic.getAvataUrl();
        var userID = UserInfoManager.getMyInfo().userID;
        AvatarManager.requestHeadRes(headUrl, userID, onGetHeadRes, null);
        this.onFriendsGroupRedSpotChange();
      },
      onMoneyChanged: function onMoneyChanged(money) {
        void 0 !== money && (this.goldLabel.string = money / 100);
      },
      onDiamondChanged: function onDiamondChanged(diamond) {
        this.jewelsLabel.string = diamond / 100;
      },
      onGiftCardChanged: function onGiftCardChanged(giftCard) {
        this.ticketLabel.string = giftCard;
      },
      onTransfernumChanged: function onTransfernumChanged(Transfernum) {
        this.changeLabel.string = Transfernum;
      },
      onLogonGamePeoplecountChange: function onLogonGamePeoplecountChange(peopleCount) {},
      start: function start() {},
      setParentNodeProxy: function setParentNodeProxy(scene) {
        this.parentNodeProxy = scene;
      },
      onTool: function onTool(event, param) {
        param;
      },
      onEnable: function onEnable() {
        var _this = this;
        this.nameLabel.string = this.LobbyLogic.getNickName();
        this.idLabel.string = "ID\uff1a" + this.LobbyLogic.getUserID();
        this.jewelsLabel.string = tools.toThousands(this.LobbyLogic.getRoomCard());
        this.changeLabel.string = tools.toThousands(this.LobbyLogic.getTransferNum());
        this.goldLabel.string = this.LobbyLogic.getWalletMoney() / 100;
        this.ticketLabel.string = this.LobbyLogic.getWalletGiftCard();
        this.nameLabel.string = this.nameLabel.string;
        this._super();
        this.initUIData();
        GlobalEvent.instance.on("PLAYER_NICK_CHANGE", this.onNameChange, this);
        GlobalEvent.instance.on("NORMAL_NOTICE", this.onNormalNotice, this);
        this.scheduleOnce(function() {
          _this.requestSystemNotice();
        }, 1);
      },
      onDisable: function onDisable() {
        this._super();
        GlobalEvent.instance.off("PLAYER_NICK_CHANGE", this.onNameChange, this);
        GlobalEvent.instance.off("NORMAL_NOTICE", this.onNormalNotice, this);
      },
      initUIData: function initUIData() {
        this.nameLabel.string = this.LobbyLogic.getNickName();
      },
      onNameChange: function onNameChange(name) {
        this.nameLabel.string = name;
      },
      onFriendsGroupRedSpotChange: function onFriendsGroupRedSpotChange(info) {
        if (this.diyiyeXiaoXi) {
          var totalCount = FriendsGroupManager.getNotifyRedSpotCount();
          false != window.message && void 0 != window.message || (totalCount > 0 ? this.diyiyeXiaoXi.getChildByName("btn_clubMsgRed").getComponent("ShowRedPoint").show() : this.diyiyeXiaoXi.getChildByName("btn_clubMsgRed").getComponent("ShowRedPoint").hide());
        }
      },
      makeNoticeContent: function makeNoticeContent(info) {
        if ("object" != typeof info) return "";
        var nTag = info.tag;
        var newContent = info.content;
        var Headurl = "";
        var str = "        ";
        var arrContent = newContent.split("#");
        if (arrContent.length >= 1 && nTag && nTag >= 1) {
          var strName = decodeURI(arrContent[0]);
          if (nTag && 1 == nTag) if (arrContent[1]) {
            Headurl = arrContent[1];
            newContent = "\u6b22\u8fce\u7528\u6237" + str + "<color=#208307> " + strName + " </color>\u7684\u5230\u6765,\u8ba9\u6211\u4eec\u4e00\u8d77\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01";
          } else newContent = "\u6b22\u8fce\u7528\u6237<color=#208307> " + strName + " </color>\u7684\u5230\u6765,\u8ba9\u6211\u4eec\u4e00\u8d77\u4e3a\u5bb6\u4e61\u4ee3\u8a00\uff01"; else if (nTag && 2 == nTag) if (arrContent[3]) {
            Headurl = arrContent[3];
            newContent = "\u606d\u559c\u7528\u6237" + str + "<color=#208307> " + strName + " </color>\u5728<color=#208307> " + arrContent[1] + " </color>\u4e2d\u8d62\u5f97<color=#208307> " + arrContent[2] + " </color>";
          } else newContent = "\u606d\u559c\u7528\u6237<color=#208307> " + strName + " </color>\u5728<color=#208307> " + arrContent[1] + " </color>\u4e2d\u8d62\u5f97<color=#208307> " + arrContent[2] + " </color>"; else if (nTag && 3 == nTag) if (arrContent[3]) {
            Headurl = arrContent[3];
            newContent = "\u606d\u559c\u7528\u6237" + str + "<color=#208307> " + strName + " </color>\u5728<color=#208307> " + arrContent[1] + " </color>\u4e2d<color=#208307> " + arrContent[2] + " </color>";
          } else newContent = "\u606d\u559c\u7528\u6237<color=#208307> " + strName + " </color>\u5728<color=#208307> " + arrContent[1] + " </color>\u4e2d<color=#208307> " + arrContent[2] + " </color>"; else if (nTag && 4 == nTag) if (arrContent[2]) {
            Headurl = arrContent[2];
            newContent = "\u7528\u6237" + str + "<color=#208307> " + strName + " </color>\u62a5\u540d\u4e86<color=#208307> " + arrContent[1] + " </color>";
          } else newContent = "\u7528\u6237<color=#208307> " + strName + " </color>\u62a5\u540d\u4e86<color=#208307> " + arrContent[1] + " </color>"; else if (nTag && 5 == nTag) if (arrContent[2]) {
            Headurl = arrContent[2];
            newContent = "\u7528\u6237" + str + "<color=#208307> " + strName + " </color>\u9886\u53d6\u4e86<color=#208307> " + arrContent[1] + " </color>";
          } else newContent = "\u7528\u6237<color=#208307> " + strName + " </color>\u9886\u53d6\u4e86<color=#208307> " + arrContent[1] + " </color>";
        }
        var NoticeContent = {};
        NoticeContent.newContent = newContent;
        NoticeContent.Headurl = Headurl;
        return NoticeContent;
      },
      makeNoticePlayHead: function makeNoticePlayHead(Avata_Node, noticeInfo) {
        var Image_Avata = Avata_Node.getChildByName("Image_Avata").getComponent(cc.Sprite);
        var nTag = noticeInfo.tag;
        var Headurl = noticeInfo.Headurl;
        if (nTag && Avata_Node && "" != Headurl) {
          if (1 == nTag || 2 == nTag || 3 == nTag) {
            Avata_Node.active = true;
            Avata_Node.x = 120;
          } else if (4 == nTag || 5 == nTag) {
            Avata_Node.active = true;
            Avata_Node.x = 75;
          }
          cc.loader.load({
            url: Headurl,
            type: "png"
          }, function(err, res) {
            if (err) {
              console.error("load remote spriteframe res failed url:" + url, err.message || err);
              return;
            }
            var sf = new cc.SpriteFrame(res);
            Image_Avata.node && cc.isValid(Image_Avata.node) && (Image_Avata.spriteFrame = sf);
          });
        }
      },
      onNormalNotice: function onNormalNotice(info) {
        if (this.isShowStopSvr) return;
        var newInfo = {};
        if ("object" != typeof info) {
          newInfo.content = info;
          newInfo.type = 1;
          this.noticeList.push(newInfo);
          this.showNotice();
          return;
        }
        newInfo = _extends({}, info);
        var NoticeContent = this.makeNoticeContent(newInfo);
        newInfo.content = NoticeContent.newContent;
        newInfo.Headurl = NoticeContent.Headurl;
        if (info.type && 1 == info.type) this.noticeList.push(newInfo); else if (info.type && 100 == info.type) {
          this.noticeList = [];
          this.noticeListSpec = [];
          this.noticeList.push(newInfo);
          this.isShowStopSvr = true;
        } else this.noticeListSpec.push(newInfo);
        this.showNotice();
      },
      requestSystemNotice: function requestSystemNotice() {
        var _this2 = this;
        var systemNoticeList = NoticeManager.getNormalNoticeList();
        if (tableIsEmpty(systemNoticeList)) {
          var callback = function callback(result) {
            result ? _this2.startSystemNotice() : cc.log("\u83b7\u53d6\u7cfb\u7edf\u516c\u544a\u5931\u8d25.........");
          };
          this.LobbyLogic.requestSystemNotice(callback);
        } else this.startSystemNotice();
      },
      startSystemNotice: function startSystemNotice() {
        var systemNoticeList = NoticeManager.getNormalNoticeList();
        for (var i in systemNoticeList) {
          var a = systemNoticeList[i];
          var tempNotice = _extends({}, a);
          var NoticeContent = this.makeNoticeContent(tempNotice);
          tempNotice.content = NoticeContent.newContent;
          tempNotice.Headurl = NoticeContent.Headurl;
          if (tempNotice.type && 1 == tempNotice.type) this.noticeList.push(tempNotice); else if (tempNotice.type && 100 == tempNotice.type) {
            this.noticeList = [];
            this.noticeListSpec = [];
            this.noticeList.push(tempNotice);
            this.isShowStopSvr = true;
          } else this.noticeListSpec.push(tempNotice);
        }
        this.showNotice();
      },
      showNotice: function showNotice() {
        var _this3 = this;
        if (this.isShowNotice) return;
        var that = this;
        this.isShowNotice = true;
        var labelMove = function labelMove() {
          var noticeInfo = {};
          if (that.noticeListSpec.length > 0) noticeInfo = that.noticeListSpec[0]; else {
            if (0 == that.noticeList.length) {
              that.isShowNotice = false;
              return;
            }
            that.nPlayIndex = Math.floor(Math.random() * that.noticeList.length);
            noticeInfo = that.noticeList[that.nPlayIndex];
          }
          var Image_Bg_Notice = that.LabelNoticeNode.getChildByName("Image_Bg_Notice").getChildByName("mask");
          var LabelNoticeNode = Image_Bg_Notice.getChildByName("txt");
          that.curPlayingNode = LabelNoticeNode;
          that.curPlayingNotice = noticeInfo;
          LabelNoticeNode.getComponent(cc.RichText).string = noticeInfo.content;
          var Avata_Node = LabelNoticeNode.getChildByName("Avata_Node");
          Avata_Node.active = false;
          _this3.makeNoticePlayHead(Avata_Node, noticeInfo);
          LabelNoticeNode.getComponent(cc.RichText)._updateRichText();
          var moveX = LabelNoticeNode.width + LabelNoticeNode.parent.width + 10;
          var tmove = moveX / 128;
          var x = LabelNoticeNode.x;
          LabelNoticeNode.runAction(cc.sequence(cc.moveBy(tmove, -moveX, 0), cc.callFunc(function() {
            LabelNoticeNode.x = x;
            0 == that.curPlayingNotice.type && that.noticeListSpec.splice(0, 1);
            labelMove();
          })));
        };
        labelMove();
      },
      CreateRoomGameConfig: function CreateRoomGameConfig(event, tag) {
        var _this4 = this;
        var layerNameurl = "";
        var selectIndex = -1;
        switch (tag) {
         case "Button_Service":
          layerNameurl = "prefab/lobby/LayoutProposal";
          break;

         case "giveGiftCard":
          layerNameurl = "prefab/lobby/LayoutGiveGiftCard";
          break;

         case "btn_question":
          createQustion();
        }
        if ("btn_question" == tag) return;
        if ("" == layerNameurl) {
          createTips("\u656c\u8bf7\u671f\u5f85");
          return;
        }
        window["LobbyBottom"].setBottomButtonStatus(selectIndex);
        cc.resources.load(layerNameurl, cc.Prefab, function(err, prefab) {
          if (err) {
            cc.log("\u8f7d\u5165\u9884\u5236" + resUrl + "\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
            return;
          }
          _this4.parentNodeProxy.BottomLayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          _this4.parentNodeProxy.LayOutContent.children.forEach(function(element) {
            element.destroy();
          });
          _this4.parentNodeProxy.BottomLayOutContent.removeAllChildren();
          _this4.parentNodeProxy.LayOutContent.removeAllChildren();
          var node = cc.instantiate(prefab);
          node.parent = _this4.parentNodeProxy.BottomLayOutContent;
        });
        window["LobbyBottom"].handleAnnimation();
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    LobbyBaseLayer: "LobbyBaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  LobbyURLShart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7166bT1jNZEirepXh9i1oos", "LobbyURLShart");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        LayoutNode: cc.Node
      },
      onLoad: function onLoad() {
        this.fitBg();
      },
      fitBg: function fitBg() {
        var bgNode = this.LayoutNode;
        var frameSize = cc.view.getFrameSize();
        cc.log("--\u89c6\u56fe\u8fb9\u6846\u5c3a\u5bf8\uff1aw:" + frameSize.width + "  h:" + frameSize.height);
        var designSize = cc.view.getDesignResolutionSize();
        cc.log("--\u8bbe\u8ba1\u5206\u8fa8\u7387\uff1a" + designSize.width + "    h: " + designSize.height);
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          var scaleW = designSize.height / frameSize.height * frameSize.width / designSize.width;
          bgNode.scaleX = scaleW;
          bgNode.scaleY = scaleW;
        } else {
          var scaleH = designSize.width / frameSize.width * frameSize.height / designSize.height;
          bgNode.scaleX = scaleH;
          bgNode.scaleY = scaleH;
        }
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  LogicBasis: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36deb+4zUpOsZ6bChdh4ZaI", "LogicBasis");
    "use strict";
    var LogicBase = cc.Class({
      extends: cc.Component,
      ctor: function ctor() {},
      sendData: function sendData(netMsg, callback) {
        LobbySocket.send(netMsg, callback);
      },
      getUserID: function getUserID() {
        return LobbySocket.getMyInfo().userID;
      },
      getRoomCard: function getRoomCard() {
        return LobbySocket.getMyInfo().jewels;
      },
      getWalletMoney: function getWalletMoney() {
        return LobbySocket.getMyInfo().money;
      },
      getWalletGiftCard: function getWalletGiftCard() {
        return LobbySocket.getMyInfo().giftCard;
      },
      getTransferNum: function getTransferNum() {
        return LobbySocket.getMyInfo().transferNum;
      },
      getUserToken: function getUserToken() {
        return LobbySocket.getMyInfo().userToken;
      },
      getLogicName: function getLogicName() {},
      getMyInfo: function getMyInfo() {
        return LobbySocket.getMyInfo();
      },
      getLoginAcc: function getLoginAcc() {
        return LobbySocket.getMyInfo().account;
      },
      getLoginPsw: function getLoginPsw() {
        return LobbySocket.getMyInfo().passwd;
      },
      getNickName: function getNickName() {
        return decodeURI(LobbySocket.getMyInfo().name);
      },
      isBoy: function isBoy() {
        return 0 == LobbySocket.getMyInfo().sex;
      },
      getAvataUrl: function getAvataUrl() {
        return LobbySocket.getMyInfo().headURL;
      },
      getLogonIP: function getLogonIP() {
        return LobbySocket.getMyInfo().logonIP;
      },
      getBankMoney: function getBankMoney() {
        return LobbySocket.getMyInfo().bankMoney;
      },
      getBankPasswd: function getBankPasswd() {
        return LobbySocket.getMyInfo().bankPasswd;
      },
      setBankPasswd: function setBankPasswd(passwd) {
        LobbySocket.getMyInfo().bankPasswd = passwd;
      },
      getBankPasswdFlag: function getBankPasswdFlag() {
        return LobbySocket.getMyInfo().bankPasswdFlag;
      },
      setBankPasswdFlag: function setBankPasswdFlag(flag) {
        LobbySocket.getMyInfo().bankPasswdFlag = flag;
      },
      setRoomCard: function setRoomCard(roomCard) {
        LobbySocket.getMyInfo().iJewels = roomCard;
      },
      getLongitude: function getLongitude() {
        return LobbySocket.getMyInfo().longitude;
      },
      getLatitude: function getLatitude() {
        return LobbySocket.getMyInfo().latitude;
      },
      getAddress: function getAddress() {
        return LobbySocket.getMyInfo().address;
      },
      getGoodsAddress: function getGoodsAddress() {
        return LobbySocket.getMyInfo().goodsAddress;
      },
      getPhone: function getPhone() {
        return LobbySocket.getMyInfo().goodsPhone;
      },
      getRealName: function getRealName() {
        return LobbySocket.getMyInfo().realName;
      },
      getIDCard: function getIDCard() {
        return LobbySocket.getMyInfo().idCard;
      },
      createNetMsg: function createNetMsg(uMessageSize, bMainID, bAssistantID) {
        return LobbySocket.createNetMsg(uMessageSize, bMainID, bAssistantID);
      },
      bindingNetCallback: function bindingNetCallback(bMainID, bAssistantID, callbackFun) {
        var cmd = bMainID + "-" + bAssistantID;
        LobbySocket.bindingNetCallback(cmd, callbackFun);
      },
      removeNetCallback: function removeNetCallback(bMainID, bAssistantID) {
        var cmd = bMainID + "-" + bAssistantID;
        LobbySocket.removeNetCallback(cmd);
      },
      closeSocket: function closeSocket() {
        LobbySocket.clear();
      },
      backLogin: function backLogin() {
        this.closeSocket();
        LobbySocket.close();
        createLoading("\u6b63\u5728\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e..", 8, true);
        window.location.reload();
      },
      onDisconnect: function onDisconnect() {},
      isConnected: function isConnected() {
        return LobbySocket.isConnected();
      }
    });
    module.exports = LogicBase;
    cc._RF.pop();
  }, {} ],
  LoginLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8d7fzwx1dBSLpxV9VZXfxJ", "LoginLogic");
    "use strict";
    cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {
        this.isConnecting = false;
      },
      accountRegist: function accountRegist(args, onRegistResult, realPwd) {
        var regist = function() {
          var onRegistMessage = function(p) {
            if (p.bHandleCode === G_HANDLE_CODE_OK) {
              var info = this._Resolve_LogonResponseRegister(p);
              onRegistResult(true, info.userID, info.userToken);
              G_LOGIN_TYPE_XX = E_LoginType.PC;
              G_WX_UINIONID = null;
              if (info.regWay === E_RegWay.WX) {
                G_LOGIN_TYPE_XX = E_LoginType.WX;
                G_WX_UINIONID = info.unionid;
              }
              G_USER_PASSWORD = args.psw;
              var loginType = cc.sys.localStorage.getItem(G_LOGIN_TYPE);
              if (args.regWay === E_RegWay.COMMON) {
                var remenber_password = true;
                if (remenber_password) {
                  cc.sys.localStorage.setItem(G_ACCOUNT_KEY, args.acc);
                  cc.sys.localStorage.setItem(G_PASSWARD_KEY, realPwd);
                } else {
                  cc.sys.localStorage.setItem(G_ACCOUNT_KEY, "");
                  cc.sys.localStorage.setItem(G_PASSWARD_KEY, "");
                }
                loginType = E_LoginType.PC;
              } else if (args.regWay === E_RegWay.WECHAT) loginType = E_LoginType.WX; else if (args.regWay === E_RegWay.QQ) loginType = E_LoginType.QQ; else if (args.regWay === E_RegWay.PHONE) {
                loginType = E_LoginType.PHONE;
                cc.sys.localStorage.setItem(G_ACCOUNT_KEY, args.acc);
                cc.sys.localStorage.setItem(G_PASSWARD_KEY, realPwd);
              }
              cc.sys.localStorage.setItem(G_LOGIN_TYPE, loginType);
            } else if (14 == p.bHandleCode) {
              alert("\u8d26\u53f7\u4e0d\u5339\u914d \u79fb\u9664\u672c\u5730\u6570\u636e \u8bf7\u5237\u65b0");
              cc.sys.localStorage.removeItem("wechatArgs_" + G_PLATFORM_NAME);
              cc.sys.isNative && cc.game.restart();
            }
          }.bind(this);
          var bMainID = MSG_MAIN_LOGON_REGISTER;
          var bAssistantID = MSG_ASS_LOGON_REGISTER_NORMAL;
          cc.log("MSG_ASS_LOGON_REGISTER_NORMAL");
          var cNetMsg = LobbySocket.createNetMsg(MAX_USER_NAME_LEN + 388 + 5 + 24 + 64 + 4, bMainID, bAssistantID);
          args.regType = E_RegType.PC;
          cc.sys.isMobile && (args.regType = E_RegType.MOB);
          args.regWay = args.regWay || E_RegWay.COMMON;
          args.regStatus = args.regStatus || E_RegStatus.REG;
          args.sex = args.sex || E_UserSex.E_UserSex;
          args.headURL = args.headURL || "";
          "" == args.headURL && "aa" == args.headURL;
          var shareUserID = Number(cc.sys.localStorage.getItem(G_SHARE_USERID));
          var userAddress = "";
          var UserIp = "";
          cNetMsg.pushBYTE(args.regType);
          cNetMsg.pushBYTE(args.regWay);
          cNetMsg.pushNCHAR(args.acc, MAX_USER_NAME_LEN);
          cNetMsg.pushNCHAR(args.psw, 64);
          cNetMsg.pushBYTE(args.regStatus);
          cNetMsg.pushBYTE(args.sex);
          cNetMsg.pushNCHAR(args.headURL, 256);
          cNetMsg.pushNCHAR(args.unionid, 64);
          cNetMsg.pushBYTE(0);
          cNetMsg.pushINT(shareUserID);
          cNetMsg.pushNCHAR(UserIp, 24);
          cNetMsg.pushNCHAR(userAddress, 64);
          cNetMsg.pushINT(shareUserID);
          LobbySocket.send(cNetMsg, onRegistMessage, "");
        }.bind(this);
        if (this.isConnected()) regist(); else {
          var connectResult = function connectResult(bResult) {
            bResult && regist();
          };
          this.connectSocket(connectResult);
        }
      },
      _Resolve_LogonResponseRegister: function _Resolve_LogonResponseRegister(p) {
        var struct = {};
        struct.userID = p.readInt();
        struct.userToken = p.readString(64);
        struct.unionid = p.readString(64);
        struct.regWay = p.readByte();
        return struct;
      },
      loginLobby: function loginLobby(userID, userToken) {
        if (this.isConnected()) LobbySocket.login(userID, userToken); else {
          var connectResult = function connectResult(bResult) {
            bResult && LobbySocket.login(userID, userToken);
          };
          this.connectSocket(connectResult);
        }
      },
      connectSocket: function connectSocket(connectResult) {
        var _this = this;
        if (this.isConnecting) return;
        this.isConnecting = true;
        var timeoutSchedule = null;
        var baseConnectResult = function baseConnectResult(bResult) {
          _this.isConnecting = false;
          _this.unschedule(timeoutSchedule);
          if (connectResult) {
            connectResult(bResult);
            connectResult = null;
          }
        };
        LobbySocket.connectService(baseConnectResult);
        timeoutSchedule = function timeoutSchedule() {
          _this.isConnecting = false;
        };
        this.schedule(timeoutSchedule, G_COMMON_TIMEOUT_TIME);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  LoginManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24721Yvt45B5IOsC61Zcm0P", "LoginManager");
    "use strict";
    var gameUrl = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxafe2c2b9417bb42f&redirect_uri=http%3A%2F%2Fgame.huoshilianhuazhadan.com%2Fh5&response_type=code&scope=snsapi_userinfo&state=";
    var urlEnd = "#wechat_redirect";
    var E_LoginType = {};
    module.exports = cc.Class({
      ctor: function ctor() {}
    });
    cc._RF.pop();
  }, {} ],
  LoginRoomLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33b40UoB/lJ3rez44jdb+sj", "LoginRoomLogic");
    "use strict";
    module.exports = cc.Class({
      ctor: function ctor() {},
      enterRoom: function enterRoom(roomInfo, userID, userToken, checkPointsNum, costType) {
        RoomListManager.setRoomInfo(roomInfo);
        UserInfoManager.getMyInfo().checkPointsNum = checkPointsNum || 0;
        UserInfoManager.getMyInfo().costType = costType || 0;
        GameManager.onGameUpdateSucceed();
      }
    });
    cc._RF.pop();
  }, {} ],
  MJCommon_Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4dcc7ZgWqNB4K04POKIg9Ks", "MJCommon_Card");
    "use strict";
    var regExpNumber = /[0-9]/;
    cc.Class({
      extends: cc.Component,
      properties: {
        background: cc.Node,
        valueNode: cc.Node,
        tingCardNode: cc.Node,
        imageType: cc.Node,
        ghostType: cc.Node,
        huType: cc.Node,
        anbgNode: cc.Node,
        anbgSprites: [ cc.SpriteFrame ]
      },
      onEnable: function onEnable() {
        this.arryTouchFlag = false;
      },
      onLoad: function onLoad() {
        var _this = this;
        this.valueNode = this.node.children[0];
        this.background && (this.valueNode = this.node.children[1]);
        this.grayColor = cc.color(180, 180, 180);
        this.whiteColor = cc.Color.WHITE;
        this.grayColor2 = cc.color(125, 125, 125);
        this.sceneRotation = cc.director.getScene().children[0].angle;
        180 == this.sceneRotation ? this.isRotate = true : this.isRotate = false;
        this.oldPos = this.node.getPosition();
        this.node.on(cc.Node.EventType.TOUCH_START, function() {
          _this.touchCardCallBack && "function" == typeof _this.touchCardCallBack && _this.scheduleOnce(function() {
            _this.touchCardCallBack(_this.id);
          }, .1);
          if (_this.isUnEnabled) return;
          if (_this.m_isEnable) return;
          _this.dateBegin = new Date();
          _this.arryTouchFlag = false;
        });
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {
          if (_this.isUnEnabled) {
            cc.log("\u5f53\u524d\u7684\u724c\u7981\u6b62\u9009\u4e2d\u5f53\u524d\u7684\u724c\u7981\u6b62\u9009\u4e2d");
            return;
          }
          if (_this.m_isEnable) return;
          if (cc.mj.Data.moveFlag && cc.mj.Data.moveFlag !== _this.id) return;
          var delta = event.getDelta();
          if (!_this.isTouch || cc.mj.Data.isPlayback || cc.mj.Data.showCtrlBtns) return;
          if (!_this.isMeTurn() || !cc.mj.Data.isGaming) return;
          _this.node.x += _this.isRotate ? -delta.x : delta.x;
          _this.node.y += _this.isRotate ? -delta.y : delta.y;
          cc.mj.Data.moveFlag = _this.id;
        });
        this.node.on(cc.Node.EventType.TOUCH_END, function() {
          return _this.touch();
        });
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          return _this.touch();
        });
        GameEvent.on("selectPai", this.selectPai, this);
        GameEvent.on("closeCard", this.closeCard, this);
        this._alt = cc.mjSpriteAlt;
        this.curNodeColor = this.whiteColor;
      },
      init: function init(id, handTrue, isTouch, cardType, sitIndex, byMJCardType) {
        this.reset();
        this.isTouch = isTouch;
        this.handTrue = handTrue;
        this.id = id;
        this.oldId = id;
        this.node.getComponent(cc.Sprite).enabled = true;
        this.valueNode.active = true;
        this.anbgNode && (this.anbgNode.active = false);
        if (this.anbgNode && "handCard" === cardType && 0 === this.sitIndex && cc.mj.Data.isWatchMode) {
          this.isTouch = false;
          this.node.active = true;
          this.node.getComponent(cc.Sprite).enabled = false;
          this.background && (this.background.active = false);
          this.valueNode.active = false;
          var spriteFrame = this.anbgSprites[0];
          1 == byMJCardType && (spriteFrame = this.anbgSprites[1]);
          this.anbgNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          this.anbgNode.active = true;
          console.log("show an hand card", id, this.node.active);
          return;
        }
        if (255 == id) return;
        this.node.active = true;
        this.background && (this.background.active = 1 == byMJCardType);
        var spriteFrameURL = cardType + "_" + sitIndex + "_" + id;
        this.valueNode.getComponent(cc.Sprite).spriteFrame = this._alt.getSpriteFrame(spriteFrameURL);
      },
      selectPai: function selectPai(event) {
        if (this.isUnEnabled) return;
        if (this.m_isEnable) return;
        var data = event;
        if (data && data.isShow && data.id === this.id) {
          if (this.handTrue && this.curNodeColor == this.whiteColor) {
            this.curNodeColor = this.grayColor;
            this.node.color = this.grayColor;
          }
        } else if (this.curNodeColor == this.grayColor) {
          this.curNodeColor = this.whiteColor;
          this.node.color = this.whiteColor;
        }
      },
      setTouchCardCallBack: function setTouchCardCallBack(touchCardCallBack) {
        this.touchCardCallBack = touchCardCallBack;
      },
      setPutCardCallBack: function setPutCardCallBack(putCardCallBack) {
        this.putCardCallBack = putCardCallBack;
      },
      setPaiEnabled: function setPaiEnabled(isEnable) {
        void 0 === isEnable && (isEnable = true);
        this.isUnEnabled = !isEnable;
        this.node.color = isEnable ? this.whiteColor : this.grayColor;
      },
      setChuPaiEnabled: function setChuPaiEnabled(isEnable) {
        this.m_isEnable = isEnable;
      },
      setVerifyPutCardCallBack: function setVerifyPutCardCallBack(handCardComponent, verifyPutCardCardType, verifyPutCardCallBack) {
        this.handCardComponent = handCardComponent;
        this.verifyPutCardCardType = verifyPutCardCardType;
        this.verifyPutCardCallBack = verifyPutCardCallBack;
      },
      closeCard: function closeCard() {
        if (this.isUnEnabled) return;
        if (this.m_isEnable) return;
        if (30 === this.node.y && this.isTouch) {
          this.node.y = 0;
          this.emitPai(false);
          this.isSelected = false;
        }
      },
      emitPai: function emitPai(isShow) {
        true === this.isTouch && GameEvent.emit("selectPai", {
          id: this.id,
          isShow: isShow
        });
      },
      touch: function touch() {
        var _this2 = this;
        if (this.isUnEnabled) return;
        if (this.m_isEnable) return;
        if (!this.isTouch || this.arryTouchFlag || cc.mj.Data.showCtrlBtns || cc.mj.Data.isPlayback) return;
        this.arryTouchFlag = true;
        if (!cc.mj.Data.isGaming) return;
        if (true == cc.mj.Data.CardType) return;
        if (false == cc.mj.Data.CardType) {
          cc.mj.Data.CardType = true;
          this.scheduleOnce(function(dt) {
            cc.mj.Data.CardType = false;
          }, .3);
        }
        var outCard_sound = Number(cc.sys.localStorage.getItem(G_OUTCARD_SOUND) || 2);
        if (2 == outCard_sound) if (this.node.y - this.oldPos.y > 20) {
          if (cc.mj.Data.selectedCard) {
            cc.mj.Data.selectedCard.node.y = 0;
            cc.mj.Data.selectedCard.isSelected = false;
          }
          cc.mj.Data.selectedCard = this;
          cc.mj.Data.notcanPutCard = true;
          cc.mj.Data.moveFlag = null;
          this.putCard();
        } else {
          var selectCard = function selectCard() {
            if (cc.mj.Data.selectedCard) {
              cc.mj.Data.selectedCard.node.y = 0;
              cc.mj.Data.selectedCard.isSelected = false;
            }
            _this2.isSelected = true;
            _this2.emitPai(true);
            _this2.node.setPosition(_this2.oldPos);
            console.log(tools.getCurTime() + " \u4f4d\u7f6e\u6570\u636e", _this2.oldPos);
            13 === _this2.index;
            _this2.node.y = 30;
            cc.mj.Data.selectedCard = _this2;
          };
          cc.mj.Data.moveFlag && (cc.mj.Data.moveFlag = null);
          var dateEnd = new Date();
          if (dateEnd.getTime() - this.dateBegin.getTime() > 500) return selectCard();
          if (this.isSelected) {
            if (!this.isMeTurn() || cc.mj.Data.notcanPutCard || cc.mj.Data.mopaiAction) {
              GameEvent.emit("initHandTouch");
              return;
            }
            cc.mj.Data.notcanPutCard = true;
            this.putCard();
          } else selectCard();
        } else {
          if (cc.mj.Data.selectedCard) {
            cc.mj.Data.selectedCard.node.y = 0;
            cc.mj.Data.selectedCard.isSelected = false;
          }
          cc.mj.Data.selectedCard = this;
          cc.mj.Data.notcanPutCard = true;
          cc.mj.Data.moveFlag = null;
          this.putCard();
        }
      },
      showTingsanjiao: function showTingsanjiao(flag) {
        this.tingCardNode && (this.tingCardNode.active = flag);
        this.tingFlag = flag;
      },
      setHu: function setHu(flag) {
        this.huType && (this.huType.active = flag);
      },
      setGhost: function setGhost(flag) {
        this.ghostType && (this.ghostType.active = flag);
      },
      setImageTag: function setImageTag(flag, rotation) {
        if (this.imageType) {
          this.imageType.active = flag;
          this.imageType.setRotation(rotation);
        }
      },
      hide: function hide() {
        this.node.active = false;
      },
      showBg: function showBg() {
        this.node.active = true;
        this.getComponent(cc.Sprite).enabled = false;
        this.node.getChildByName("bg") && (this.node.getChildByName("bg").active = true);
      },
      show: function show() {
        this.node && (this.node.active = true);
        this.getComponent(cc.Sprite).enabled = true;
        this.node.getChildByName("bg") && (this.node.getChildByName("bg").active = false);
      },
      isMeTurn: function isMeTurn() {
        return 0 === cc.mj.Data.turnFlag;
      },
      mopaiAction: function mopaiAction(fn) {
        this.node.stopAllActions();
        this.node.angle = 0;
        this.hu = false;
        if (this.sitIndex > 0) {
          this.showBg();
          this.node.runAction(cc.sequence(cc.delayTime(.02), cc.callFunc(this.show, this)));
          return;
        }
        this.node.y = 110;
        cc.mj.Data.mopaiAction = true;
        this.node.runAction(cc.sequence(cc.rotateTo(.02, 0), cc.moveTo(.02, this.node.x, 0), cc.moveTo(.008, this.node.x, 12).easing(cc.easeOut(5)), cc.moveTo(.005, this.node.x, 0), cc.callFunc(function() {
          cc.mj.Data.mopaiAction = false;
          setTimeout(function() {
            fn && fn();
          }, 1e3);
        })));
      },
      putCard: function putCard() {
        var id = this.oldId;
        if (this.verifyPutCardCallBack && this.verifyPutCardCardType != G_INVALID_BYTE_VALUE) {
          var cards = this.handCardComponent.getComponentsInChildren("MJCommon_Card");
          var isAliveType = false;
          for (var i = 0; i < cards.length; i++) {
            var tag = cards[i].id;
            if (Math.floor(tag / 10) == this.verifyPutCardCardType) {
              isAliveType = true;
              break;
            }
          }
          if (Math.floor(id / 10) != this.verifyPutCardCardType && isAliveType) {
            createTips("\u7f3a\u724c\u6ca1\u6253\u5b8c\u4e4b\u524d\u4e0d\u80fd\u6253\u5176\u4ed6\u724c");
            this.verifyPutCardCallBack && this.verifyPutCardCallBack();
            return;
          }
        }
        console.log("iiiiiiiiiiiiiiiiiiiii");
        this.emitPai(false);
        this.isSelected = false;
        cc.mj.Data.curPutCard = this;
        GameEvent.emit("reSendPutPai", {
          card: id
        });
        this.putCardCallBack && this.putCardCallBack(this.id);
      },
      upCardPosition: function upCardPosition() {
        this.node.y = 30;
      },
      downCardPosition: function downCardPosition() {
        this.node.y = 0;
      },
      setDingQue: function setDingQue(isSetGray) {
        if (isSetGray) {
          this.node.color = this.grayColor2;
          this.dingQueFlag = true;
        } else {
          this.node.color = this.whiteColor;
          this.dingQueFlag = false;
        }
      },
      reset: function reset() {
        this.oldPos || this.onLoad();
        this.tingCardNode && (this.tingCardNode.active = false);
        this.tingFlag = false;
        this.ghostType && (this.ghostType.active = false);
        this.imageType && (this.imageType.active = false);
        this.huType && (this.huType.active = false);
        this.arryTouchFlag = false;
        this.isTouch = false;
        this.index = -1;
        this.sitIndex = 0;
        this.node.angle = 0;
        this.handTrue = false;
        this.isSelected = false;
        this.isUnEnabled = false;
        this.arryTouchFlag = false;
        this.node.setPosition(this.oldPos);
        this.isThreeSelected = false;
        this.hu = false;
        this.node.color = this.whiteColor;
        this.dingQueFlag = false;
        this.id = -1;
        this.node.active = false;
        this.moveFlag = false;
      },
      onDestroy: function onDestroy() {
        GameEvent.off("selectPai", this.selectPai, this);
        GameEvent.off("closeCard", this.closeCard, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  MJ_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db0a5EBMbBL0IKYWQ9qWPEC", "MJ_ZhanJi_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        bankerView: cc.Node,
        cardsNode: cc.Node,
        penGangPre: cc.Prefab,
        showCardPre: cc.Prefab,
        scoreLabel: cc.Label,
        scoreLabelGang: cc.Label,
        huNode: cc.Node,
        headerImg: cc.Sprite
      },
      initData: function initData(data) {
        var _this = this;
        var pengCards = this.cardsNode.getChildByName("penGangs");
        var showCards = this.cardsNode.getChildByName("showCards");
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        if (roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD) {
          this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2);
          this.scoreLabelGang.string = F_GetMoneyDisplay(data.scoreGang, 2) > 0 ? "+" + F_GetMoneyDisplay(data.scoreGang, 2) : F_GetMoneyDisplay(data.scoreGang, 2);
        } else {
          this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
          this.scoreLabelGang.string = data.scoreGang > 0 ? "+" + data.scoreGang : data.scoreGang;
        }
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.huNode.active = data.win;
        this.bankerView.active = data.isBanker;
        pengCards.children.forEach(function(c) {
          return c.active = false;
        });
        showCards.children.forEach(function(c) {
          return c.active = false;
        });
        var gangLength = 0;
        data.anGangCards.forEach(function(g, i) {
          _this.addPenGang(gangLength + i, 3, g, pengCards, data.ghostCards);
        });
        gangLength += data.anGangCount;
        data.gangCards.forEach(function(g, i) {
          _this.addPenGang(gangLength + i, 2, g, pengCards, data.ghostCards);
        });
        gangLength += data.gangCount;
        gangLength += data.buGangCount;
        data.pengCards.forEach(function(g, i) {
          _this.addPenGang(gangLength + i, 1, g, pengCards, data.ghostCards);
        });
        data.handCards.forEach(function(c, i) {
          var node = showCards.children[i];
          if (!node) {
            node = cc.instantiate(_this.showCardPre);
            showCards.addChild(node);
          }
          node.active = true;
          node.getComponent("MJCommon_Card").init(c, false, false, "outCard", 0);
        });
        this.ruleLabel.string = data.rule;
      },
      addPenGang: function addPenGang(index, type, pai, pengCards, ghostCards) {
        var node = pengCards.children[index];
        if (!node) {
          node = cc.instantiate(this.penGangPre);
          pengCards.addChild(node);
        }
        node.active = true;
        var cards = node.getChildByName("cards").getComponentsInChildren("MJCommon_Card");
        var backCards = node.getChildByName("backCards");
        var topCard = node.getChildByName("topCard");
        cards.push(topCard.getComponent("MJCommon_Card"));
        cards.forEach(function(card) {
          card.node.active = false;
          card.init(pai, false, false, "outCard", 0);
        });
        backCards.active = 3 === type;
        topCard.active = 1 !== type;
      }
    });
    cc._RF.pop();
  }, {} ],
  MYAudioEngine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92c38gl+EFK06J+QRlZmtui", "MYAudioEngine");
    "use strict";
    module.exports = cc.Class({
      ctor: function ctor() {
        this.effectClipMap = new Map();
        this.musicStatus = cc.sys.localStorage.getItem(G_MUSIC_SWITCH);
        if (null == this.musicStatus) {
          cc.sys.localStorage.setItem(G_MUSIC_SWITCH, "1");
          this.musicStatus = "1";
        }
        this.soundStatus = cc.sys.localStorage.getItem(G_SOUND_SWITCH);
        if (null == this.soundStatus) {
          cc.sys.localStorage.setItem(G_SOUND_SWITCH, "1");
          this.soundStatus = "1";
        }
        this.soundResList = {
          btnClick: "btn_click"
        };
        this.bgmVolume = .3;
        this.sfxVolume = cc.sys.localStorage.getItem(G_SOUND_SIZE) || 1;
        cc.audioEngine.setMusicVolume(this.bgmVolume);
        cc.audioEngine.setEffectsVolume(this.sfxVolume);
      },
      initRes: function initRes() {
        var _this = this;
        var _loop = function _loop(sound) {
          var path = _this.soundResList[sound];
          cc.loader.loadRes(path, function(err, s) {
            err && cc.log("load sound err : " + err);
            _this.soundResList[sound] = s;
          });
        };
        for (var sound in this.soundResList) _loop(sound);
      },
      playMusic: function playMusic(musicFile, bLoop) {
        null == bLoop && (bLoop = true);
        this.bgMusicFile = musicFile;
        this.bgMusicFileLoop = bLoop;
        if ("1" == this.musicStatus) {
          this.isPlayedMusic = true;
          cc.audioEngine.playMusic(musicFile, bLoop);
        } else this.isPlayedMusic = false;
      },
      playEffect: function playEffect(musicFile, bLoop) {
        var _this2 = this;
        null == bLoop && (bLoop = false);
        "1" == this.soundStatus && ("string" == typeof musicFile ? this.effectClipMap.get(musicFile) ? cc.audioEngine.playEffect(this.effectClipMap.get(musicFile), bLoop) : cc.loader.loadRes(musicFile, cc.AudioClip, function(err, clip) {
          if (err) return cc.log(err);
          cc.audioEngine.playEffect(clip, bLoop);
          _this2.effectClipMap.set(musicFile, clip);
        }) : cc.audioEngine.playEffect(musicFile, bLoop));
      },
      setEffectsVolume: function setEffectsVolume(Volume) {
        this.sfxVolume = Volume;
        cc.audioEngine.setEffectsVolume(this.sfxVolume);
      },
      setSoundStatus: function setSoundStatus(soundStatus) {
        this.soundStatus = soundStatus ? "1" : "0";
        cc.sys.localStorage.setItem(G_SOUND_SWITCH, this.soundStatus);
      },
      getSoundStatus: function getSoundStatus() {
        return "1" == this.soundStatus;
      },
      setMusicStatus: function setMusicStatus(musicStatus) {
        this.musicStatus = musicStatus ? "1" : "0";
        cc.sys.localStorage.setItem(G_MUSIC_SWITCH, this.musicStatus);
      },
      getMusicStatus: function getMusicStatus() {
        return "1" == this.musicStatus;
      },
      pauseMusic: function pauseMusic() {
        cc.audioEngine.pauseMusic();
      },
      stopMusic: function stopMusic() {
        cc.audioEngine.stopMusic();
      },
      resumeMusic: function resumeMusic() {
        this.isPlayedMusic ? this.getMusicStatus() ? cc.audioEngine.resumeMusic() : cc.audioEngine.pauseMusic() : this.playMusic(this.bgMusicFile, this.bgMusicFileLoop);
      },
      getSound: function getSound(name) {
        var audio = this.soundResList[name];
        return audio;
      },
      playClickSound: function playClickSound() {}
    });
    cc._RF.pop();
  }, {} ],
  MailLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "880bb+MJ7hMcp4PzYXrlKz/", "MailLogic");
    "use strict";
    var API = "email";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      properties: {},
      ctor: function ctor() {
        this.MailManager = new (require("MailManager"))();
      },
      requestMailList: function requestMailList(callback) {
        var _this = this;
        var actionName = "userEmailList";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this.MailManager.setMailList(jsonData.data);
            callback && callback(_this.MailManager.getMailList());
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestMailInfo: function requestMailInfo(mailID, callback) {
        var _this2 = this;
        var actionName = "emailInfo";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this2.MailManager.addMailInfo(jsonData.data);
            callback && callback(jsonData.data);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          emailID: mailID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestDelMail: function requestDelMail(mailID, callback) {
        var _this3 = this;
        var actionName = "delUserEmail";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this3.MailManager.delMail(mailID);
            callback && callback();
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          emailID: mailID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestTakeReward: function requestTakeReward(mailID, callback) {
        var _this4 = this;
        var actionName = "receiveEmailReward";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
          callback && callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this4.MailManager.changeMailReceived(mailID, 1);
            callback && callback(true);
          } else {
            createTips(jsonData.msg);
            callback && callback(false);
          }
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          emailID: mailID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis",
    MailManager: "MailManager"
  } ],
  MailManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fbf47CE9SFOp4X1+maCDV6Z", "MailManager");
    "use strict";
    var MailManager = cc.Class({
      ctor: function ctor() {
        this.mailList = [];
        this.notReadCount = 0;
        this.notReceivedCount = 0;
      },
      _Resolve_OneSimpleEmail: function _Resolve_OneSimpleEmail(netMsg) {
        var struct = {};
        struct.mailID = netMsg.popLONGLONG();
        struct.sendtime = netMsg.popINT();
        struct.mailType = netMsg.popBYTE();
        struct.isRead = netMsg.popBYTE();
        struct.isHaveGoods = netMsg.popBYTE();
        struct.isReceived = netMsg.popBYTE();
        struct.title = netMsg.popNCHAR(24);
        return struct;
      },
      _Resolve_OneEmailGoods: function _Resolve_OneEmailGoods(netMsg) {
        var struct = {};
        struct.resourceType = netMsg.popBYTE();
        struct.nums = netMsg.popINT();
        return struct;
      },
      setMailList: function setMailList(mailList) {
        this.mailList = [];
        for (var k in mailList) {
          cc.log(mailList);
          var mail = mailList[k];
          cc.log(mail);
          mail.mailID = mail.emailID;
          this.addMail(mail);
        }
      },
      addMail: function addMail(mail) {
        this.mailList[mail.mailID] = mail;
      },
      getMailList: function getMailList() {
        var mailList = [];
        for (var k in this.mailList) if (this.mailList[k]) {
          var mail = this.mailList[k];
          mailList.push(mail);
        }
        mailList.reverse();
        return mailList;
      },
      getMail: function getMail(mailID) {
        return this.mailList[mailID];
      },
      delMail: function delMail(mailID) {
        this.mailList[mailID] = null;
      },
      changeMailReceived: function changeMailReceived(mailID, isReceived) {
        var mail = this.getMail(mailID);
        if (mail) {
          this.mailList[mailID].isReceived = isReceived;
          this.mailList[mailID].mailInfo.isReceived = isReceived;
        }
      },
      getMailInfo: function getMailInfo(mailID) {
        var mail = this.getMail(mailID);
        if (mail) return mail.mailInfo;
        return null;
      },
      addMailInfo: function addMailInfo(mailInfo) {
        mailInfo.mailID = mailInfo.emailID;
        var mail = this.getMail(mailInfo.mailID);
        if (mail) {
          this.mailList[mailInfo.mailID].isRead = 1;
          this.mailList[mailInfo.mailID].mailInfo = mailInfo;
        }
      },
      setMailRedPiontCount: function setMailRedPiontCount(info) {
        this.setNotReadCount(info.notReadCount);
        this.setNotReceivedCount(info.notReceivedCount);
      },
      setNotReadCount: function setNotReadCount(notReadCount) {
        this.notReadCount = notReadCount;
      },
      setNotReceivedCount: function setNotReceivedCount(notReceivedCount) {
        this.notReceivedCount = notReceivedCount;
      },
      getMailRedPiontCount: function getMailRedPiontCount() {
        if (this.notReadCount > 0) return this.notReadCount;
        if (this.notReceivedCount > 0) return this.notReceivedCount;
        return 0;
      },
      dealMailAdd: function dealMailAdd(netMsg) {
        var _this = this;
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyNewEmail = function _Resolve_LogonNotifyNewEmail(netMsg) {
            var struct = {};
            struct.mail = _this._Resolve_OneSimpleEmail(netMsg);
            struct.notReadCount = netMsg.popINT();
            struct.notReceivedCount = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyNewEmail(netMsg);
          this.setMailRedPiontCount(info);
          this.addMail(info.mail);
          DataNotify.onMailRedSpot(info.notReadCount);
          DataNotify.onMailAdd(info.mail);
        }
      },
      dealMailRedSpot: function dealMailRedSpot(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_LogonNotifyEmailRedSpot = function _Resolve_LogonNotifyEmailRedSpot(netMsg) {
            var struct = {};
            struct.notReadCount = netMsg.popINT();
            struct.notReceivedCount = netMsg.popINT();
            return struct;
          };
          var info = _Resolve_LogonNotifyEmailRedSpot(netMsg);
          this.setMailRedPiontCount(info);
          this.notReadCount = info.notReadCount;
          this.notReceivedCount = info.notReceivedCount;
          DataNotify.onMailRedSpot(info.notReadCount);
        }
      },
      clear: function clear() {
        this.mailList = [];
        this.notReadCount = 0;
        this.notReceivedCount = 0;
        instance = null;
      }
    });
    module.exports = MailManager;
    cc._RF.pop();
  }, {} ],
  MatchCheckPointInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cbda15OF2dNU6ukN+2N1Wrz", "MatchCheckPointInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        checkPointLabel: cc.Label
      },
      init: function init(info) {
        this.checkPointLabel.string = info.checkPointNum + "/" + info.count;
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchCheckPointIntroLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0cbanIEJZOTJ06lVhorr75", "MatchCheckPointIntroLayer");
    "use strict";
    var TYPE_DETAIL = 1;
    var TYPE_RULE = 2;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Button_Rule: cc.Button,
        Button_Detail: cc.Button,
        Image_Rule: cc.Node,
        Panel_Detail: cc.Node,
        ListView_Reward: cc.ScrollView,
        Panel_Reward: cc.Node
      },
      init: function init() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.selectedButtonType = TYPE_DETAIL;
        for (var i = 1; i <= 7; i++) {
          this[tools.stringFormat("Text_{0}", i)] = this.Panel_Detail.getChildByName(tools.stringFormat("Text_{0}", i)).getComponent(cc.Label);
          this[tools.stringFormat("Text_{0}", i)].node.active = false;
        }
        this.Panel_Reward.active = false;
        this.Panel_Detail.active = false;
        this.Image_Rule.active = false;
        this.initSelectedButton();
        this.requestRewardInfo();
      },
      initSelectedButton: function initSelectedButton() {
        this.Button_Rule.interactable = !(this.selectedButtonType == TYPE_RULE);
        this.Button_Detail.interactable = !(this.selectedButtonType == TYPE_DETAIL);
        this.Image_Rule.active = this.selectedButtonType == TYPE_RULE;
        this.Panel_Detail.active = this.selectedButtonType == TYPE_DETAIL;
        if (this.selectedButtonType == TYPE_DETAIL) {
          for (var i = 1; i <= 2; i++) this[tools.stringFormat("Text_{0}", i)].node.active = true;
          this[tools.stringFormat("Text_{0}", 1)].string = tools.stringFormat("\u6bd4\u8d5b\u540d\u79f0\uff1a{0}", "\u95ef\u5173\u8d5b");
          this[tools.stringFormat("Text_{0}", 2)].string = tools.stringFormat("\u6bd4\u8d5b\u7c7b\u578b\uff1a{0}", "\u95ef\u5173\u8d5b");
        }
      },
      initRewardListView: function initRewardListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Text_Rank = item.getChildByName("Text_Rank").getComponent(cc.Label);
          var AtlasLabel_Gold = item.getChildByName("AtlasLabel_Gold").getComponent(cc.Label);
          Text_Rank.string = data.name.replace("\u95ef\u5173\u8d5b", "") + data.checkpointNumber + "\u5173";
          AtlasLabel_Gold.string = data.entryFee;
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Reward, this.Panel_Reward, 1);
      },
      requestRewardInfo: function requestRewardInfo() {
        var _this = this;
        var callback = function callback(result) {
          var listData = [];
          for (var i = 0; i < result.length; i++) for (var k = 0; k < result[i].length; k++) listData.push(result[i][k]);
          _this.initRewardListView(listData);
        };
        this.LobbyLogic.requestCheckPointConfig(callback);
      },
      doButton_DetailClick: function doButton_DetailClick() {
        if (this.selectedButtonType == TYPE_DETAIL) return;
        this.selectedButtonType = TYPE_DETAIL;
        this.initSelectedButton();
      },
      doButton_RuleClick: function doButton_RuleClick() {
        if (this.selectedButtonType == TYPE_RULE) return;
        this.selectedButtonType = TYPE_RULE;
        this.initSelectedButton();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  MatchCheckPointResultLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "700e8Y/XLpJ9JjeAgt5Jocd", "MatchCheckPointResultLayer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var PoolMgr_1 = require("../../../framework/PoolMgr");
    var SpriteArray_1 = require("../../ui/SpriteArray");
    var tools = require("Tools");
    var BaseLayer = require("BaseLayer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var MatchCheckPointResultType;
    (function(MatchCheckPointResultType) {
      MatchCheckPointResultType[MatchCheckPointResultType["\u7ee7\u7eed"] = 0] = "\u7ee7\u7eed";
      MatchCheckPointResultType[MatchCheckPointResultType["\u664b\u7ea7"] = 1] = "\u664b\u7ea7";
      MatchCheckPointResultType[MatchCheckPointResultType["\u6dd8\u6c70"] = 2] = "\u6dd8\u6c70";
      MatchCheckPointResultType[MatchCheckPointResultType["\u95ef\u5173\u6210\u529f"] = 3] = "\u95ef\u5173\u6210\u529f";
    })(MatchCheckPointResultType || (MatchCheckPointResultType = {}));
    cc.Enum(MatchCheckPointResultType);
    var GameEndResultType;
    (function(GameEndResultType) {
      GameEndResultType[GameEndResultType["\u6d41\u5c40"] = 0] = "\u6d41\u5c40";
      GameEndResultType[GameEndResultType["\u80dc\u5229"] = 1] = "\u80dc\u5229";
      GameEndResultType[GameEndResultType["\u5931\u8d25"] = 2] = "\u5931\u8d25";
    })(GameEndResultType || (GameEndResultType = {}));
    cc.Enum(GameEndResultType);
    var MatchCheckPointResultLayer = function(_super) {
      __extends(MatchCheckPointResultLayer, _super);
      function MatchCheckPointResultLayer() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.levelItemContentNode = null;
        _this.levelItemNode = null;
        _this.levelItemIntervalNode = null;
        _this.levelUpTip = null;
        _this._resultType = MatchCheckPointResultType.\u7ee7\u7eed;
        _this.nextBtn = null;
        _this.scoreProcessLabel = null;
        _this.rewardNode = null;
        _this.rewardLabel = null;
        _this.contentBGNode = null;
        _this.levelBGNode = null;
        _this.players = null;
        _this.costTipNode = null;
        _this.costLabel = null;
        _this.costTipLabel = null;
        _this.spines = new Array();
        _this.maxLevel = 0;
        _this.passLevel = 0;
        _this.nowLevel = 0;
        _this.maxScore = 0;
        _this.score = 0;
        _this.resultType = 0;
        _this.rewardGiftCard = 0;
        _this.reChallengeCost = 0;
        _this._delegate = null;
        return _this;
      }
      MatchCheckPointResultLayer.prototype.onLoad = function() {
        this.resize();
      };
      MatchCheckPointResultLayer.prototype.start = function() {};
      MatchCheckPointResultLayer.prototype.resize = function() {
        var canvas = cc.Canvas.instance;
        var frameSize = cc.view.getFrameSize();
        cc.log("--\u89c6\u56fe\u8fb9\u6846\u5c3a\u5bf8\uff1aw:" + frameSize.width + "  h:" + frameSize.height);
        var designSize = cc.view.getDesignResolutionSize();
        cc.log("--\u8bbe\u8ba1\u5206\u8fa8\u7387\uff1a" + designSize.width + "    h: " + designSize.height);
        designSize || (designSize = cc.view.getDesignResolutionSize());
        this.contentBGNode = this.node.getChildByName("center");
        if (frameSize.width / frameSize.height > designSize.width / designSize.height) {
          var rw = frameSize.height * (designSize.width / designSize.height);
          var scale = frameSize.width / rw;
          scale = scale > 1.13 ? 1.13 : scale;
          this.contentBGNode.scaleX = scale;
          this.contentBGNode.scaleY = scale;
          console.log("GameOverUI \u9002\u914d \u957f\u5c4f \u56fa\u5b9a\u9ad8\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height, scale);
        } else {
          var scale = frameSize.height / designSize.height;
          console.log("GameOverUI \u9002\u914d \u77ed\u5c4f \u56fa\u5b9a\u5bbd\u5ea6", designSize.width, designSize.height, frameSize.width, frameSize.height);
        }
      };
      MatchCheckPointResultLayer.prototype.init = function(delegate, matchResultInfo, gameResultInfo, chekcPointInfo) {
        this._delegate = delegate;
        gameResultInfo || (gameResultInfo = globalThis.gameResultInfo);
        chekcPointInfo = chekcPointInfo || globalThis.MatchManager.getCurCheckPointInfo();
        var showUI = function(matchResultInfo, gameResultInfo, chekcPointInfo) {
          var gameResultType = gameResultInfo ? gameResultInfo.resultType : 0;
          cc.log(tools.getCurTime() + " \u51b2\u5173\u7ed3\u7b97", "\u51b2\u5173\u7ed3\u679c:", JSON.stringify(matchResultInfo), "\u6e38\u620f\u5c0f\u7ed3\u7b97:", JSON.stringify(gameResultInfo), "\u914d\u7f6e:", JSON.stringify(chekcPointInfo));
          this.showCheckPointResult(matchResultInfo, chekcPointInfo, gameResultType);
          this.showGameEndResult(gameResultInfo);
        }.bind(this);
        chekcPointInfo ? showUI(matchResultInfo, gameResultInfo, chekcPointInfo) : globalThis.MatchManager.requestCheckPointMatchInfo(function() {
          chekcPointInfo = globalThis.MatchManager.getCurCheckPointInfo();
          showUI(matchResultInfo, gameResultInfo, chekcPointInfo);
        });
      };
      MatchCheckPointResultLayer.prototype.showCheckPointResult = function(matchResultInfo, chekcPointInfo, gameResultType) {
        var _this = this;
        var maxLevelCfg = chekcPointInfo.config[chekcPointInfo.config.length - 1];
        this.resultType = null == matchResultInfo ? MatchCheckPointResultType.\u95ef\u5173\u6210\u529f : matchResultInfo.bAgain;
        var bgIndex = this.resultType == MatchCheckPointResultType.\u7ee7\u7eed ? gameResultType : this.resultType + 2;
        if (null == matchResultInfo) {
          this.maxLevel = maxLevelCfg.levelID;
          this.passLevel = maxLevelCfg.levelID;
          this.score = maxLevelCfg.score;
          this.maxScore = maxLevelCfg.score;
          this.rewardGiftCard = maxLevelCfg.award;
          this.reChallengeCost = chekcPointInfo.config[0].cost;
        } else {
          this.nowLevel = 1 == matchResultInfo.bAgain ? matchResultInfo.checkPointNum - 1 : matchResultInfo.checkPointNum;
          var nowLevelCfg = chekcPointInfo.config[this.nowLevel];
          this.maxLevel = maxLevelCfg.levelID;
          this.passLevel = 1 == matchResultInfo.bAgain ? this.nowLevel : this.nowLevel - 1;
          this.score = matchResultInfo.score;
          nowLevelCfg || maxLevelCfg.levelID == this.nowLevel && (nowLevelCfg = chekcPointInfo.config[this.nowLevel - 1]);
          this.maxScore = nowLevelCfg.score;
          this.rewardGiftCard = nowLevelCfg.award;
          this.reChallengeCost = nowLevelCfg.cost;
        }
        this.levelUpTip.node.active = false;
        this.scoreProcessLabel.node.active = false;
        this.costTipNode.active = false;
        this.rewardNode.active = false;
        this.spines.forEach(function(skeleton, index) {
          skeleton.node.active = bgIndex == index;
          bgIndex == index && _this.playSkelenAnimation(skeleton, "KaiShi", false, function() {
            _this.playSkelenAnimation(skeleton, "XunHuan", true, null);
          });
        });
        if (this.resultType != MatchCheckPointResultType.\u95ef\u5173\u6210\u529f) {
          this.scoreProcessLabel.node.active = true;
          this.scoreProcessLabel.string = this.score + "/" + this.maxScore;
        }
        if (this.resultType != MatchCheckPointResultType.\u95ef\u5173\u6210\u529f) {
          this.levelUpTip.node.active = true;
          this.levelUpTip.string = "\u6ee1" + this.maxScore + "\u5206\u53ef\u664b\u7ea7";
        }
        if (this.resultType == MatchCheckPointResultType.\u95ef\u5173\u6210\u529f) {
          this.rewardNode.active = true;
          this.rewardLabel.string = "X" + this.rewardGiftCard;
        }
        this._showProgress(this.maxLevel, this.passLevel);
        if (this.resultType == MatchCheckPointResultType.\u95ef\u5173\u6210\u529f || this.resultType == MatchCheckPointResultType.\u6dd8\u6c70) {
          this.levelUpTip.node.active = false;
          this.scoreProcessLabel.node.active = false;
          this.costTipNode.active = true;
          this.costTipLabel.string = this.resultType == MatchCheckPointResultType.\u6dd8\u6c70 ? "\u590d\u6d3b\u8d39\u7528\uff1a" : "\u91cd\u65b0\u6311\u6218\u8d39\u7528\uff1a";
          this.costLabel.string = "X" + this.reChallengeCost / 100;
        }
      };
      MatchCheckPointResultLayer.prototype.showGameEndResult = function(gameResultInfo) {
        var _this = this;
        this.players.children.forEach(function(node, index) {
          node.active = false;
        });
        if (!gameResultInfo) {
          cc.log("....\u4f60\u600e\u4e48\u6ca1\u6709\u6570\u636e\uff0cbug\u4e86\u90fd");
          return;
        }
        gameResultInfo.playsData.forEach(function(info, i) {
          if (info.userID <= 0) return;
          var node = _this.players.children[i];
          if (!node) return;
          node.active = true;
          node.getComponent("HZMJ_gameOverItem").initData(info);
          var PlayNode = node.getChildByName("info");
          PlayNode.getChildByName("name").getComponent(cc.Label).string = tools.getCutStringByCount(decodeURI(info.name), 4);
          PlayNode.getChildByName("score").getComponent(cc.Label).string = info.score;
          PlayNode.getChildByName("score").color = 1 == info.resultType ? cc.color(255, 255, 255) : cc.color(176, 59, 52);
          if (1 == info.resultType) {
            PlayNode.getChildByName("name").color = cc.color(255, 217, 115);
            PlayNode.getChildByName("bg").getChildByName("bg_win").active = true;
          } else {
            PlayNode.getChildByName("name").color = cc.color(87, 40, 40);
            PlayNode.getChildByName("bg").getChildByName("bg_win").active = false;
          }
          var imgHead = PlayNode.getChildByName("head").getChildByName("avatar");
          var onGetHeadRes = function(avataRes) {
            imgHead && cc.isValid(imgHead) && (imgHead.getComponent(cc.Sprite).spriteFrame = avataRes);
          }.bind(_this);
          var headUrl = info.avatar;
          globalThis.AvatarManager.requestHeadRes(headUrl, info.userID, onGetHeadRes, null);
          PlayNode.getChildByName("bank").active = info.isBanker;
          PlayNode.getChildByName("image_Hu").active = 1 == info.resultType;
        });
      };
      MatchCheckPointResultLayer.prototype._showProgress = function(maxLevel, passLevel) {
        cc.log("showProgress maxLevel:" + maxLevel + " passLevel:" + passLevel);
        this.levelItemContentNode.active = true;
        if (maxLevel <= 0) return;
        for (var _i = 0, _a = this.levelItemContentNode.children; _i < _a.length; _i++) {
          var node = _a[_i];
          node.active = false;
          PoolMgr_1.PoolMgr.instance.putNode(node);
        }
        this.levelItemContentNode.removeAllChildren();
        for (var i = 1; i <= maxLevel; i++) {
          var node = PoolMgr_1.PoolMgr.instance.getNode(this.levelItemNode, this.levelItemContentNode);
          node.active = true;
          var intervalNode = null;
          if (i < maxLevel) {
            intervalNode = PoolMgr_1.PoolMgr.instance.getNode(this.levelItemIntervalNode, this.levelItemContentNode);
            intervalNode.active = true;
          }
          if (passLevel >= i) {
            node.getChildByName("bright").active = true;
            node.getChildByName("text").getComponent(cc.Label).string = "" + i;
            node.getChildByName("text").color = cc.color(255, 222, 0);
            intervalNode && (intervalNode.getChildByName("bright").active = true);
          } else {
            node.getChildByName("bright").active = false;
            node.getChildByName("text").getComponent(cc.Label).string = "" + i;
            node.getChildByName("text").color = cc.color(135, 139, 178);
            intervalNode && (intervalNode.getChildByName("bright").active = false);
          }
        }
        this.levelBGNode && (this.levelBGNode.active = true);
      };
      MatchCheckPointResultLayer.prototype.doButton_BackClick = function() {
        this._delegate.doLeftRoom();
      };
      MatchCheckPointResultLayer.prototype.doButton_NextClick = function() {
        if (this._delegate) switch (this.resultType) {
         case MatchCheckPointResultType.\u7ee7\u7eed:
         case MatchCheckPointResultType.\u664b\u7ea7:
          this._delegate.sendAgreeGame();
          this.node.destroy();
          break;

         case MatchCheckPointResultType.\u6dd8\u6c70:
          this._delegate.loginRoom(18, this.nowLevel, 1);
          break;

         case MatchCheckPointResultType.\u95ef\u5173\u6210\u529f:
          this._delegate.loginRoom(18, 1, 1);
        }
      };
      MatchCheckPointResultLayer.prototype.playSkelenAnimation = function(skeleton, animName, isLoop, callBack) {
        skeleton.loop = isLoop;
        skeleton.animation = animName;
        skeleton.setCompleteListener(function() {
          callBack && this.scheduleOnce(callBack, .2);
        }.bind(this));
      };
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "levelItemContentNode", void 0);
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "levelItemNode", void 0);
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "levelItemIntervalNode", void 0);
      __decorate([ property({
        type: cc.Label
      }) ], MatchCheckPointResultLayer.prototype, "levelUpTip", void 0);
      __decorate([ property(SpriteArray_1.default) ], MatchCheckPointResultLayer.prototype, "nextBtn", void 0);
      __decorate([ property({
        type: cc.Label,
        tooltip: "\u79ef\u5206\u8fdb\u5ea6"
      }) ], MatchCheckPointResultLayer.prototype, "scoreProcessLabel", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: "\u5956\u52b1\u793c\u5238\u6839\u8282\u70b9"
      }) ], MatchCheckPointResultLayer.prototype, "rewardNode", void 0);
      __decorate([ property({
        type: cc.Label,
        tooltip: "\u5956\u52b1\u793c\u5238\u6570\u91cf"
      }) ], MatchCheckPointResultLayer.prototype, "rewardLabel", void 0);
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "contentBGNode", void 0);
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "levelBGNode", void 0);
      __decorate([ property(cc.Node) ], MatchCheckPointResultLayer.prototype, "players", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: "\u91cd\u65b0\u6311\u6218\u6d88\u8017\u6839\u8282\u70b9"
      }) ], MatchCheckPointResultLayer.prototype, "costTipNode", void 0);
      __decorate([ property({
        type: cc.Label,
        tooltip: "\u590d\u6d3b\u6216\u91cd\u65b0\u6311\u6218\u6d88\u8017"
      }) ], MatchCheckPointResultLayer.prototype, "costLabel", void 0);
      __decorate([ property(cc.Label) ], MatchCheckPointResultLayer.prototype, "costTipLabel", void 0);
      __decorate([ property({
        type: [ sp.Skeleton ],
        tooltip: "\u80cc\u666f\u9aa8\u9abc\u52a8\u753b"
      }) ], MatchCheckPointResultLayer.prototype, "spines", void 0);
      MatchCheckPointResultLayer = __decorate([ ccclass ], MatchCheckPointResultLayer);
      return MatchCheckPointResultLayer;
    }(BaseLayer);
    exports.default = MatchCheckPointResultLayer;
    cc._RF.pop();
  }, {
    "../../../framework/PoolMgr": "PoolMgr",
    "../../ui/SpriteArray": "SpriteArray",
    BaseLayer: "BaseLayer",
    Tools: "Tools"
  } ],
  MatchDeskInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "952ebuv8CFCBqp95Lh/zm+o", "MatchDeskInfo");
    "use strict";
    var STATUS = {
      gaming: 0,
      finish: 1,
      begining: 2
    };
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        list_scroll: cc.ScrollView,
        list_item: cc.Node
      },
      start: function start() {},
      init: function init(matchDeskInfo) {
        this.matchDeskInfo = matchDeskInfo;
        this.list_item.active = false;
        if (!this.matchDeskInfo.DeskInfo) return;
        this.matchDeskInfo && this.initListViewDeskInfo(this.matchDeskInfo.DeskInfo);
      },
      initListViewDeskInfo: function initListViewDeskInfo(dataList) {
        cc.error("HHHHHHHHHHHHHHHHHHH1", dataList);
        var onAddItemCallback = function(listView, item, data, pos) {
          this.onAddItemCallback(listView, item, data, pos);
        }.bind(this);
        F_InitListView(dataList, onAddItemCallback, this.list_scroll, this.list_item, 5);
      },
      onAddItemCallback: function onAddItemCallback(listView, item, data, pos) {
        var Button_Desk = item.getChildByName("Button_Desk");
        var Text_No = Button_Desk.getChildByName("Text_No").getComponent(cc.Label);
        var Text_Status = Button_Desk.getChildByName("Text_Status").getComponent(cc.Label);
        Text_No.string = Number(pos) + 1;
        Button_Desk.interactable = false;
        Text_No.node.color = new cc.Color(97, 0, 0);
        Text_Status.node.color = new cc.Color(97, 0, 0);
        if (data.status == STATUS.gaming) {
          Text_Status.string = "\u6bd4\u8d5b\u4e2d";
          Button_Desk.interactable = true;
          Text_No.node.color = new cc.Color(255, 0, 0);
          Text_Status.node.color = new cc.Color(255, 0, 0);
        } else data.status == STATUS.finish ? Text_Status.string = "\u5df2\u7ed3\u675f" : data.status == STATUS.begining ? Text_Status.string = "\u7b49\u5f85\u4e2d" : Text_Status.string = "\u65e0\u72b6\u6001";
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchExpUserLevelInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec264aK8G9LW4+yP2VC6TpZ", "MatchExpUserLevelInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        matchRankLabel: cc.RichText
      },
      init: function init(info) {
        var userRankInfo = getRankInfo(info.gameExp);
        var nextRankInfo = getNextRankInfo(info.gameExp);
        this.matchRankLabel.string = "<color = #ffffff>\u7ecf\u9a8c\u503c</c><color=#ffb573>" + (userRankInfo.gameExp + 1) + "</c><color=#ffffff>\u7b49\u7ea7:</color><color=#87d6ff>" + userRankInfo.remark + "</color>\n <color = #ffffff>\u60a8\u8ddd\u79bb</c><color=#ffb573>" + nextRankInfo.remark + "</c><color=#ffffff>\u8fd8\u5dee</color><color=#87d6ff>" + (nextRankInfo.gameExp - info.gameExp) + "</color><color=#ffffff>\u7ecf\u9a8c</color>";
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchGameRank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a2c00pVPtGKrdAp5YZJQCD", "MatchGameRank");
    "use strict";
    var RANK_SHOW_NUM = 20;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        AtlasLabel_Score_Win: cc.Label,
        AtlasLabel_Score_Lose: cc.Label,
        Image_No_Rank: cc.Node,
        Image_Rank: cc.Node,
        Text_Name: cc.Label,
        ListView_Rank: cc.ScrollView,
        Panel_Rank: cc.Node,
        Image_Avata: cc.Node,
        AtlasLabel_Rank: cc.Label
      },
      init: function init() {
        var onlyMatchInfo = MatchManager.getMyMatchGameInfo();
        var callback = function(info) {
          cc.log(info);
          this.initMyRankInfo(info);
          this.initRankListView(info.rankInfo);
        }.bind(this);
        GameSocket.requestMatchRankInfo(onlyMatchInfo.llPartOfMatchID, callback);
      },
      initMyRankInfo: function initMyRankInfo(info) {
        var myInfo = UserInfoManager.getMyInfo();
        var userID = myInfo.userID;
        var rank = info.rank;
        var score = info.score;
        if (score > 0) {
          this.AtlasLabel_Score_Win.node.active = true;
          this.AtlasLabel_Score_Win.string = "+" + F_GetMoneyDisplay(score);
        } else {
          this.AtlasLabel_Score_Lose.node.active = true;
          this.AtlasLabel_Score_Lose.string = F_GetMoneyDisplay(score);
        }
        this.Text_Name.string = "";
        if (rank > RANK_SHOW_NUM) this.Image_No_Rank.active = true; else if (rank <= 3 && rank > 0) {
          this.Image_Rank.active = true;
          this.Image_Rank.loadTexture(tools.stringFormat("Match/MatchReward/{0}", rank));
        } else {
          this.AtlasLabel_Rank.node.active = true;
          this.AtlasLabel_Rank.string = rank;
        }
        var getUserInfoCallback = function(userInfo) {
          this.Text_Name.string = tools.getCutStringByCount(userInfo.name, 5);
          this.Text_Name.node.active = true;
          var onGetHeadRes = function(headRes) {
            this.Image_Avata.active = true;
            this.Image_Avata.getComponent(cc.Sprite).spriteFrame = headRes;
          }.bind(this);
          AvatarManager.requestHeadRes(userInfo.headURL, userInfo.userID, onGetHeadRes, this.Image_Avata);
        }.bind(this);
        UserInfoManager.requestUserInfoByUserID(userID, getUserInfoCallback);
      },
      initRankListView: function initRankListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Image_Rank = item.getChildByName("Image_Rank");
          var AtlasLabel_Rank = item.getChildByName("AtlasLabel_Rank").getComponent(cc.Label);
          var Text_Name = item.getChildByName("Text_Name").getComponent(cc.Label);
          var Image_Avata = item.getChildByName("Image_Avata");
          var AtlasLabel_Score_Win = item.getChildByName("AtlasLabel_Score_Win").getComponent(cc.Label);
          var AtlasLabel_Score_Lose = item.getChildByName("AtlasLabel_Score_Lose").getComponent(cc.Label);
          AtlasLabel_Score_Win.node.active = false;
          AtlasLabel_Score_Lose.node.active = false;
          Text_Name.string = "";
          Text_Name.string = tools.getCutStringByCount(data.name, 5);
          if (data.score > 0) {
            AtlasLabel_Score_Win.node.active = true;
            AtlasLabel_Score_Win.string = "+" + F_GetMoneyDisplay(data.score);
          } else {
            AtlasLabel_Score_Lose.node.active = true;
            AtlasLabel_Score_Lose.string = F_GetMoneyDisplay(data.score);
          }
          Image_Rank.active = false;
          AtlasLabel_Rank.node.active = false;
          if (pos <= 3) {
            Image_Rank.active = true;
            Image_Rank.loadTexture(tools.stringFormat("Match/MatchReward/{0}", pos));
          } else {
            AtlasLabel_Rank.node.active = true;
            AtlasLabel_Rank.string = pos;
          }
          var onGetHeadRes = function onGetHeadRes(headRes) {
            Image_Avata.getComponent(cc.Sprite).spriteFrame = headRes;
          };
          AvatarManager.requestHeadRes(data.headURL, data.userID, onGetHeadRes, Image_Avata);
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Rank, this.Panel_Rank, 1);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70c68PBseRHDbMl6r2y4gUj", "MatchItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var tools = require("Tools");
    var MatchItem = function(_super) {
      __extends(MatchItem, _super);
      function MatchItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.signUpNum = null;
        _this.matchStartTimeLabel = null;
        _this.leftTimesLabels = new Array();
        _this.enrollCostLabel = null;
        _this.signUpBtn = null;
        _this.cancelSignUpBtn = null;
        _this.stopSignUpBtn = null;
        _this._matchId = 0;
        _this._leftTime = 0;
        _this._currentTime = 0;
        _this._endEnrollTime = 0;
        _this._isSignUp = false;
        return _this;
      }
      MatchItem.prototype.start = function() {};
      MatchItem.prototype.onDisable = function() {
        this.unscheduleAllCallbacks();
      };
      MatchItem.prototype.init = function(data, index) {
        console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u573a\u6b21\u5217\u8868 item:", data);
        this._matchId = data.id;
        this.signUpNum.string = "<color=#ffffff>\u5f53\u524d\u62a5\u540d\u4eba\u6570 <color=#ff0000>" + data.sign_up_people + "</color>/" + data.sign_up_max + " </c>";
        this.matchStartTimeLabel.string = "\u6bd4\u8d5b\u65f6\u95f4 " + data.start_time;
        this._endEnrollTime = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3 + "");
        this.enrollCostLabel.string = tools.stringFormat("X{0}", data.game_money + data.fee);
        if (0 == data.sign_up_status) {
          this.signUpBtn.active = true;
          this.cancelSignUpBtn.active = false;
          data.fee <= 0 && (this.enrollCostLabel.string = "\u514d\u8d39");
        } else {
          this.cancelSignUpBtn.active = true;
          this.signUpBtn.active = false;
        }
        this._leftTime = data.seconds;
        this.unscheduleAllCallbacks();
        this._endEnrollTime = data.match_time - 300;
        var endEnrollTime = 300;
        if (this._leftTime > 1) {
          if (this._leftTime - endEnrollTime <= 0) {
            this.signUpBtn.active = false;
            this.cancelSignUpBtn.active = false;
            this.stopSignUpBtn.active = true;
          }
          this.schedule(this._matchTimeSchedule.bind(this), 1, cc.macro.REPEAT_FOREVER);
        } else {
          this._showLeftTime(0);
          this.signUpBtn.active = false;
          this.cancelSignUpBtn.active = false;
          this.stopSignUpBtn.active = true;
        }
      };
      MatchItem.prototype._matchTimeSchedule = function() {
        this._leftTime = this._leftTime - 1;
        this._currentTime = this._currentTime + 1;
        if (this._leftTime <= 300 || this._endEnrollTime - this._currentTime <= 0) {
          this.signUpBtn.active = false;
          this.cancelSignUpBtn.active = false;
          this.stopSignUpBtn.active = true;
        } else this.stopSignUpBtn.active = false;
        this._showLeftTime(this._leftTime);
        if (this._leftTime <= 0) {
          this.unschedule(this._matchTimeSchedule.bind(this));
          return;
        }
      };
      MatchItem.prototype._showLeftTime = function(leftTime) {
        if (leftTime > 1) {
          var result = leftTime;
          var h = (Math.floor(result / 3600) < 10, Math.floor(result / 3600));
          var m = (Math.floor(result / 60 % 60) < 10, Math.floor(result / 60 % 60));
          var s = (Math.floor(result % 60) < 10, Math.floor(result % 60));
          var tab = [];
          tab.push((tools.fillZero2(h, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(h, 1) + "").substr(1, 1));
          tab.push((tools.fillZero2(m, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(m, 1) + "").substr(1, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(1, 1));
          for (var i = 0; i < 6; i++) this.leftTimesLabels[i].string = tab[i];
        } else for (var _i = 0, _a = this.leftTimesLabels; _i < _a.length; _i++) {
          var item = _a[_i];
          item.string = "0";
        }
      };
      MatchItem.prototype.onEnrollBtnClick = function() {
        var _this = this;
        if (false == this.signUpBtn.active) {
          globalThis.createTips("\u672c\u573a\u6bd4\u8d5b\u5df2\u7ecf\u62a5\u540d");
          return;
        }
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var msgCallback = function(btnName) {
          if (btnName == btnName1 && "undefined" != typeof _this._matchId) {
            console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u62a5\u540d matchid:" + _this._matchId);
            globalThis.MatchManager.requestMatchEnroll(_this._matchId, function() {
              console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u62a5\u540d matchid:" + _this._matchId + "\u6210\u529f");
              globalThis.createTips("\u62a5\u540d\u6210\u529f");
              _this.cancelSignUpBtn.active = true;
              _this.signUpBtn.active = false;
            });
          }
        };
        var msgObj = {
          msg: "\u5c06\u8f6c\u6362\u4f59\u989d\u4e3a\u6bd4\u8d5b\u7b79\u7801?",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      MatchItem.prototype.onCancelEnrollBtnClick = function() {
        var _this = this;
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var msgCallback = function(btnName) {
          if (btnName == btnName1 && "undefined" != typeof _this._matchId) {
            console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u53d6\u6d88\u62a5\u540d matchid:" + _this._matchId);
            globalThis.MatchManager.requestMatchEnrollCancel(_this._matchId, function() {
              console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u53d6\u6d88\u62a5\u540d matchid:" + _this._matchId + " \u6210\u529f");
              globalThis.createTips("\u53d6\u6d88\u62a5\u540d\u6210\u529f");
              _this.cancelSignUpBtn.active = false;
              _this.signUpBtn.active = true;
            });
          }
        };
        var msgObj = {
          msg: "\u53d6\u6d88\u6bd4\u8d5b\u7b79\u7801\u5c06\u9000\u56de\uff0c\u4f46\u62a5\u540d\u8d39\u4e0d\u9000\u56de?",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      MatchItem.prototype.onStopEnrollBtnClick = function() {
        this._leftTime <= 0 ? globalThis.createTips("\u5df2\u7ecf\u8fc7\u4e86\u62a5\u540d\u65f6\u95f4") : globalThis.createTips("\u8ddd\u79bb\u5f00\u8d5b5\u5206\u949f\u5185\u4e0d\u80fd\u62a5\u540d");
      };
      __decorate([ property(cc.RichText) ], MatchItem.prototype, "signUpNum", void 0);
      __decorate([ property(cc.Label) ], MatchItem.prototype, "matchStartTimeLabel", void 0);
      __decorate([ property([ cc.Label ]) ], MatchItem.prototype, "leftTimesLabels", void 0);
      __decorate([ property(cc.Label) ], MatchItem.prototype, "enrollCostLabel", void 0);
      __decorate([ property(cc.Node) ], MatchItem.prototype, "signUpBtn", void 0);
      __decorate([ property(cc.Node) ], MatchItem.prototype, "cancelSignUpBtn", void 0);
      __decorate([ property(cc.Node) ], MatchItem.prototype, "stopSignUpBtn", void 0);
      MatchItem = __decorate([ ccclass ], MatchItem);
      return MatchItem;
    }(cc.Component);
    exports.default = MatchItem;
    cc._RF.pop();
  }, {
    Tools: "Tools"
  } ],
  MatchLevelUp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a155frZpppM7JktS3effu4a", "MatchLevelUp");
    "use strict";
    var REWARD_RANK = 20;
    var TIPS_RANK = "";
    var TIPS_CODE = "\u9080\u8bf7\u7801\uff1a{0}";
    var TIPS_SHARE = "\u5206\u4eab\u4e8c\u7ef4\u7801\u53ec\n\u5524\u7ea2\u5305\u96e8\u3002";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Panel_Bg_Up: cc.Node,
        Panel_Bg_Out: cc.Node,
        Panel_Bg_Rank: cc.Node,
        Panel_Bg_Revive: cc.Node,
        Text_Tips_Rank: cc.Label,
        Text_Tips_Share: cc.Label,
        Text_Tips_Share_Fail: cc.Label,
        Text_Rank_Out: cc.Label,
        Text_Rank_Out_2: cc.Label,
        Image_Bg_Code_Fail: cc.Node,
        Text_Tips_Code: cc.Label,
        Text_revive_infor: cc.RichText,
        Text_revive_Time: cc.Label,
        Text_revive_Round: cc.Label,
        Button_Revive_Success: cc.Node,
        Button_notRevive_Fail: cc.Node,
        Image_Bg_EWM: cc.Node,
        Image_Bg_EWM_Fail: cc.Node,
        Text_Tips_Code_Fail: cc.Label,
        AtlasLabel_Rank: cc.Label,
        Text_Reward: cc.Label,
        Text_giftCard: cc.Label,
        Text_Desc_Rank: cc.Label,
        Panel_Anim: cc.Node,
        Skeleton_1: sp.SkeletonData,
        Skeleton_2: sp.SkeletonData,
        Skeleton_3: sp.SkeletonData,
        Skeleton_4: sp.SkeletonData,
        Skeleton_out: sp.SkeletonData,
        Text_bzpm: cc.Label,
        Text_dqjf: cc.Label,
        Text_qcpm: cc.Label
      },
      init: function init(delegate, deskInfo) {
        this._delegate = delegate;
        this._deskInfo = deskInfo;
        this.Panel_Bg_Up.active = false;
        this.Panel_Bg_Out.active = false;
        this.Panel_Bg_Rank.active = false;
        this.Panel_Bg_Revive.active = false;
        this.Text_giftCard.node.active = false;
        this.m_countDown = null;
        this.initData();
      },
      updateCurMatchCount: function updateCurMatchCount() {},
      showAllPlayerChouMa: function showAllPlayerChouMa() {
        var layerName = "Match/MatchGameRankLayer";
        if (this._delegate.node.getChildByName(layerName)) return;
        this.addLayer(this._delegate.node, layerName, function(prefab) {
          prefab.zIndex = G_DISMISS_ROOM_LAYER_TAG;
        });
      },
      initData: function initData() {
        this.Text_Tips_Rank.string = TIPS_RANK;
        this.Text_Tips_Share.string = TIPS_SHARE;
        this.Text_Tips_Share_Fail.string = TIPS_SHARE;
        var info = this._deskInfo;
        this.llPartOfMatchID = info.llPartOfMatchID;
        this.iCurMatchRound = info.iCurMatchRound;
        this.iMaxMatchRound = info.iMaxMatchRound;
        if (0 == info.type && info.rankMatch > REWARD_RANK) {
          this.Panel_Bg_Out.active = true;
          this.Text_Rank_Out.string = tools.stringFormat("\u7b2c {0} \u540d", info.rankMatch);
          this.Text_Rank_Out_2.string = info.rankMatch + " / " + info.peopleCount;
          GameSocket.setIsSendLogoutRoom(true);
          var callback = function(data) {
            if (data.agent_id && "" != data.agent_id && data.agent_id > 0) {
              this.Image_Bg_Code_Fail.active = true;
              this.Text_Tips_Code_Fail.string = tools.stringFormat(TIPS_CODE, data.agent_id);
            }
            var url = data.invite_url || ConfigManager.getConfigStringValue("share_domain", "");
            var logo_url = data.logo_url || "ui/logo.png";
            var size = this.Image_Bg_EWM_Fail.getContentSize();
            var makeQrCodeCallback = function(node) {
              this.Node_EWM_Fail = node;
              this.Image_Bg_EWM_Fail.addChild(this.Node_EWM_Fail);
              this.Node_EWM_Fail.setPosition(cc.p(size.width / 2, .5 * size.height));
            }.bind(this);
          }.bind(this);
          MatchManager.requestMatchInfoByID(callback, info.gameMatchID);
          this._delegate.removeMatchNotifyLayer();
        } else if (1 == info.type) ; else if (3 == info.type) {
          var costResTypeStr = "";
          1 == info.costResType ? costResTypeStr = "\u91d1\u8c46" : 5 == info.type && (costResTypeStr = "\u793c\u5238");
          this.Panel_Bg_Revive.active = true;
          var Text_infor = "<size=38>\u7b2c</size>";
          Text_infor = Text_infor + "<size=58>" + String(info.rankMatch) + "</size>";
          Text_infor = Text_infor + "<size=38>\u540d " + String(info.matchScore) + "\u5206 \u590d\u6d3b\u8d39\u7528";
          Text_infor = Text_infor + String(info.giftCard) + costResTypeStr + "</size>";
          this.Text_revive_infor.string = Text_infor;
          this.Text_revive_Round.string = tools.stringFormat("\u7b2c{0}\u8f6e", info.iCurMatchRound);
          this.Text_revive_Time.node.active = false;
          var self = this;
          if (info.reviveRemainTime > 0) {
            var time = info.reviveRemainTime;
            self.Text_revive_Time.string = time;
            self.Text_revive_Time.node.active = true;
            var countDown = function countDown() {
              time -= 1;
              if (time <= 0) {
                time = 0;
                self.unschedule(countDown);
              }
              self.Text_revive_Time.string = time;
            };
            self.schedule(countDown, 1);
            this.m_countDown = countDown;
          } else self.Text_revive_Time.node.active = false;
        } else {
          if (info.giftCard > 0) {
            this.Text_giftCard.node.active = true;
            this.Text_giftCard.string = tools.stringFormat("\u83b7\u5f97 {0} \u793c\u5238", info.giftCard);
          }
          var callback2 = function(data) {
            cc.log(data, "data++++++");
            if (data.agent_id && "" != data.agent_id && parseInt(data.agent_id) > 0) {
              this.Image_Bg_Code.active = true;
              this.Text_Tips_Code.string = tools.stringFormat(TIPS_CODE, data.agent_id);
            }
            var url = data.invite_url || ConfigManager.getConfigStringValue("share_domain", "");
            var logo_url = data.logo_url || "ui/logo.png";
            var size = this.Image_Bg_EWM.getContentSize();
            var makeQrCodeCallback = function(node) {
              this.Node_EWM = node;
              this.Image_Bg_EWM.addChild(this.Node_EWM);
              this.Node_EWM.setPosition(cc.p(size.width / 2, .5 * size.height));
            }.bind(this);
            this.Panel_Bg_Rank.active = true;
            info.rankMatch <= 4 ? this.AtlasLabel_Rank.string = tools.stringFormat("{0}/{1}", info.rankMatch, data.people_number) : this.AtlasLabel_Rank.node.active = false;
            var reward = 0;
            for (var i = 0; i < data.rewardList.length; i++) {
              var rewardInfo = data.rewardList[i];
              if (rewardInfo.ranking_start <= info.rankMatch && info.rankMatch <= rewardInfo.ranking_end) {
                reward = rewardInfo.money;
                break;
              }
            }
            this.Text_Reward.string = F_GetMoneyDisplay(reward);
            this.Text_Desc_Rank.string = tools.stringFormat("\u606d\u559c\u60a8\u5728{0}{1}\u4eba\u4e2d\u83b7\u5f97\u7b2c{2}\u540d", data.name, data.people_number, info.rankMatch);
          }.bind(this);
          MatchManager.requestMatchInfoByID(callback2, info.gameMatchID);
          GameSocket.setIsSendLogoutRoom(true);
          this._delegate.removeMatchNotifyLayer();
          var name = info.rankMatch + "";
          var aName = "animation";
          if (info.rankMatch > 3 && (info.rankMatch < REWARD_RANK || info.rankMatch == REWARD_RANK)) {
            name = "4";
            aName += info.rankMatch;
          }
          this.setAnimationPlay(this.Panel_Anim, name, aName);
        }
      },
      QR_Code: function QR_Code(url, node) {
        var qrcode = new QRCode(-1, QRErrorCorrectLevel.H);
        qrcode.addData(url);
        qrcode.make();
        var ctx = node.getComponent(cc.Graphics);
        var tileW = node.width / qrcode.getModuleCount();
        var tileH = node.height / qrcode.getModuleCount();
        for (var row = 0; row < qrcode.getModuleCount(); row++) for (var col = 0; col < qrcode.getModuleCount(); col++) {
          qrcode.isDark(row, col) ? ctx.fillColor = cc.Color.BLACK : ctx.fillColor = cc.Color.WHITE;
          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
          ctx.rect(Math.round(col * tileW), Math.round(row * tileH), w, h);
          ctx.fill();
        }
      },
      setAnimationPlay: function setAnimationPlay(node, name, aName) {
        var animationName = aName || "animation";
        var animation = node.getChildByName(name);
        animation && animation.removeFromParent();
        var animNode = new cc.Node();
        var anim = animNode.addComponent(sp.Skeleton);
        this.Panel_Anim.addChild(animNode);
        animNode.name = name;
        anim.skeletonData = this["Skeleton_" + name];
        anim.animation = animationName;
        anim.premultipliedAlpha = false;
        anim.setCompleteListener(function() {
          var nextName = animationName + "2";
          "animation4" == animationName && (nextName = animationName + "1");
          anim.animation = nextName;
        }.bind(this));
      },
      backToLobby: function backToLobby() {
        console.log("\u8fd4\u56de\u5927\u5385");
        this._delegate.tableLogic.backLobby();
      },
      onClickReviveUser: function onClickReviveUser(event, tag) {
        console.log("\u590d\u6d3b");
        var type = Number(tag);
        var that = this;
        var callback = function(info) {
          that.unschedule(this.m_countDown);
          that.Button_Revive_Success.active = false;
          that.Button_notRevive_Fail.active = false;
          that.Text_revive_Time.string = "\u7b49\u5f85\u5176\u4ed6\u73a9\u5bb6\uff0c\u8bf7\u7a0d\u540e...";
        }.bind(this);
        GameSocket.requestReviveUser(this.llPartOfMatchID, this.iCurMatchRound, this.iMaxMatchRound, type, callback);
      },
      onClickShare: function onClickShare() {
        var layerName = "prefab/GameCreaterImage";
        this.simpleAddLayer(layerName);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e04d3liQP9O2b63XEFc34le", "MatchManager");
    "use strict";
    var API = "Match";
    var DataManager = require("DataManager");
    var LobbyLogic = new (require("LobbyLogic"))();
    var MatchManager = cc.Class({
      ctor: function ctor() {
        this.matchGameInfo = {};
        this.matchDeskInfo = {};
        this.myMatchGameInfo = {};
        this.MatchDeskRankInfo = {};
        this.matchListInfo = {};
        this.curMatchID = -1;
        this.curRoundIsEnd = false;
        this.myMatchAndRoomInfo = {};
        this.curMatchGameInfo = {};
        this.checkPointInfo = null;
      },
      getCurCheckPointInfo: function getCurCheckPointInfo() {
        return this.checkPointInfo || null;
      },
      getCurCheckPointMatchID: function getCurCheckPointMatchID() {
        return this.checkPointInfo.passID || 0;
      },
      setCurMatchGameInfo: function setCurMatchGameInfo(info) {
        this.curMatchGameInfo = info;
      },
      getCurMatchGameInfo: function getCurMatchGameInfo() {
        return this.curMatchGameInfo;
      },
      setCurMatchID: function setCurMatchID(matchid) {
        this.curMatchID = matchid;
      },
      getCurMatchID: function getCurMatchID() {
        return this.curMatchID;
      },
      setCurRoundIsEnd: function setCurRoundIsEnd(isEnd) {
        this.curRoundIsEnd = isEnd;
      },
      getCurRoundIsEnd: function getCurRoundIsEnd() {
        return this.curRoundIsEnd;
      },
      setMyMatchAndRoomInfoInfo: function setMyMatchAndRoomInfoInfo(info) {
        this.myMatchAndRoomInfo = info;
      },
      getMyMatchAndRoomInfoInfo: function getMyMatchAndRoomInfoInfo() {
        return this.myMatchAndRoomInfo;
      },
      setMatchDeskRankInfo: function setMatchDeskRankInfo(info) {
        this.MatchDeskRankInfo = info;
      },
      getMatchDeskRankInfo: function getMatchDeskRankInfo() {
        return this.MatchDeskRankInfo;
      },
      setMatchGameInfo: function setMatchGameInfo(matchGameInfo) {
        this.matchGameInfo = matchGameInfo;
      },
      getMatchGameInfo: function getMatchGameInfo() {
        return this.matchGameInfo;
      },
      setMyMatchGameInfo: function setMyMatchGameInfo(info) {
        this.myMatchGameInfo = info;
      },
      getMyMatchGameInfo: function getMyMatchGameInfo() {
        return this.myMatchGameInfo;
      },
      setMatchGameID: function setMatchGameID(gameid) {
        this.matchGameID = gameid;
      },
      getMatchGameID: function getMatchGameID() {
        return this.matchGameID;
      },
      setMatchDeskInfo: function setMatchDeskInfo(deskInfo) {
        this.matchDeskInfo = deskInfo;
      },
      getMatchDeskInfo: function getMatchDeskInfo() {
        return this.matchDeskInfo;
      },
      setMatchListInfo: function setMatchListInfo(deskInfo) {
        this.matchListInfo = deskInfo;
      },
      getMatchListInfo: function getMatchListInfo() {
        return this.matchListInfo;
      },
      requireMatchGameInfo: function requireMatchGameInfo(matchid, userid, callback) {
        var action = "getInfo";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchGameInfo++++++");
          if (0 == jsonData.status) {
            if (callback) {
              MatchManager.setMatchGameInfo(jsonData.data);
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          userID: userid,
          matchID: matchid
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requireMatchListInfo: function requireMatchListInfo(callback, ListTag, userid) {
        var action = "getList";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchListInfo+++++++");
          if (0 == jsonData.status) {
            if (callback) {
              MatchManager.setMatchListInfo(jsonData.data);
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        dump(userid, "userid++++++");
        args.params = {
          api: API,
          action: action,
          ListTag: ListTag,
          userID: userid
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requireMatchSignUpInfo: function requireMatchSignUpInfo(matchid, userid, callback) {
        var action = "signUp";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchListInfo+++++++");
          0 == jsonData.status ? callback && callback(true) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: userid,
          matchID: matchID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requireMatchCancelSignInfo: function requireMatchCancelSignInfo(matchid, userid, callback) {
        var action = "cancelSignUp";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
          callback(false);
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchListInfo+++++++");
          0 == jsonData.status ? callback && callback(true) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: userid,
          matchID: matchID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requireMatchMySignInfo: function requireMatchMySignInfo(userid, callback, matchid) {
        dump(userid, "useridrequireMatchListInfo+++++++");
        var action = "getSignUpInfo";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchListInfo+++++++");
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: userid,
          matchID: matchID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requireMatchRewordInfo: function requireMatchRewordInfo(userid, matchid, callback) {
        dump(userid, "useridrequireMatchListInfo+++++++");
        var action = "getAwardRecord";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          dump(jsonData, "requireMatchRewordInfo+++++++");
          0 == jsonData.status ? callback && callback(true, jsonData.data) : callback && callback(false);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: userid,
          matchID: matchID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestCurMatchInfo: function requestCurMatchInfo(matchType, callback) {
        var action = "getCurMatchInfo";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (callback) {
              console.log(tools.getCurTime() + " #### data:", jsonData.data);
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          matchType: matchType
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        console.log(tools.getCurTime() + " #### \u62a5\u540d\u4fe1\u606f args:", args);
        MyHttpRequest.doRequest(args);
      },
      requestMatchEnroll: function requestMatchEnroll(matchId, callback) {
        var action = "doMatchEnroll";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) callback && callback(jsonData.data); else {
            console.warn(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u62a5\u540d matchid:" + matchId + " \u5931\u8d25 errmsg:" + jsonData.msg);
            createTips(jsonData.msg);
          }
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          matchID: matchId
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        console.log(tools.getCurTime() + " #### \u62a5\u540d\u6bd4\u8d5b args:", args);
        MyHttpRequest.doRequest(args);
      },
      requestMatchEnrollCancel: function requestMatchEnrollCancel(matchId, callback) {
        var action = "matchEnrollCancel";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) callback && callback(jsonData.data); else {
            console.warn(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u53d6\u6d88\u62a5\u540d matchid:" + matchId + " \u5931\u8d25 errmsg:" + jsonData.msg);
            createTips(jsonData.msg);
          }
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          matchID: matchId
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchRewardRecordList: function requestMatchRewardRecordList(callback, page, num) {
        var action = "getMatchRewardRecordList";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.code ? callback && callback(jsonData) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          num: num,
          page: page
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestCheckPointMatchInfo: function requestCheckPointMatchInfo(callback) {
        var action = "getMakeCertificate";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var that = this;
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (callback) {
              that.checkPointInfo = jsonData.data;
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "Checkpoint",
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        dump(args, "args+++++++");
        MyHttpRequest.doRequest(args);
      },
      requestCheckPointRewardRecordList: function requestCheckPointRewardRecordList(callback, page, num) {
        var action = "getCheckpointRecord";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.code ? callback && callback(jsonData) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        0 == page && (page = 1);
        args.params = {
          api: "lobby",
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          num: num,
          page: page
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchEnrollRecordList: function requestMatchEnrollRecordList(callback, num) {
        var action = "getMatchEnrollRecordList";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          num: num
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchInfoByID: function requestMatchInfoByID(callback, matchID) {
        var action = "getMatchInfoByID";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          matchID: matchID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchRewardConfig: function requestMatchRewardConfig(callback) {
        var action = "getMatchRewardConfig";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchConfig: function requestMatchConfig(callback) {
        var action = "getMatchConfig";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchRank: function requestMatchRank(callback) {
        var action = "getMatchRank";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestSureEnterMatch: function requestSureEnterMatch(callback) {
        var action = "sureEnterMatch";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      onMatchgameNotifyMessage: function onMatchgameNotifyMessage(netMsg) {
        if (MSG_NTF_LOGON_MATCH_NOTIFY_SIGNUP_CHANGE == netMsg.bAssistantID) this.dealMatchSignUpChangeNotifyMessage(netMsg); else if (MSG_NTF_LOGON_MATCH_NOTIFY_START_MATCH == netMsg.bAssistantID) {
          createTips("\u6536\u5230\u4e86\u6bd4\u8d5b\u573a\u5f00\u59cb\u7684\u4fe1\u606f");
          this.dealMatchStartNotifyMessage(netMsg);
        } else if (MSG_NTF_LOGON_MATCH_NOTIFY_START_CHANGE_TIME == netMsg.bAssistantID) {
          createTips("\u6536\u5230\u4e86\u5b9a\u65f6\u8d5b\u4eba\u6570\u53d8\u5316\u63a8\u9001");
          this.dealMatchPeopleChangeNotifyMessage(netMsg);
        } else if (MSG_NTF_LOGON_MATCH_NOTIFY_START_CHANGE_FAIL == netMsg.bAssistantID) {
          createTips("\u6536\u5230\u4e86\u6bd4\u8d5b\u672a\u80fd\u5f00\u59cb\u901a\u77e5\u4fe1\u606f");
          this.dealMatchFailNotifyMessage(netMsg);
        } else MSG_NTF_LOGON_MATCH_NOTIFY_START_MATCH_RIGHTAWAY == netMsg.bAssistantID && this.dealMatchStartRightAwayNotifyMessage(netMsg);
      },
      dealMatchSignUpChangeNotifyMessage: function dealMatchSignUpChangeNotifyMessage(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resove_MatchInfoNotify = function _Resove_MatchInfoNotify(netMsg) {
            var struct = {};
            struct.gameID = netMsg.popINT();
            struct.matchID = netMsg.popINT();
            struct.curSignUpCount = netMsg.popINT();
            struct.peopleCount = netMsg.popINT();
            struct.allSignUpCount = netMsg.popINT();
            return struct;
          };
          var info = _Resove_MatchInfoNotify(info);
          dump(info, "dealMatchSignUpChangeNotifyMessage");
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u62a5\u540d\u4eba\u6570\u53d8\u5316\u901a\u77e5", info);
        }
      },
      dealMatchStartNotifyMessage: function dealMatchStartNotifyMessage(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resove_MatchInfoNotify = function _Resove_MatchInfoNotify(netMsg) {
            var struct = {};
            struct.gameID = netMsg.popINT();
            struct.matchType = netMsg.popBYTE();
            struct.matchID = netMsg.popINT();
            struct.roomID = netMsg.popINT();
            return struct;
          };
          var info = _Resove_MatchInfoNotify(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u5f00\u59cb\u901a\u77e5", info);
          setTimeout(function() {
            LobbyLogic.enterGame(info.roomID);
          }, .01);
          this.setCurRoundIsEnd(true);
        }
      },
      dealMatchPeopleChangeNotifyMessage: function dealMatchPeopleChangeNotifyMessage(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resove_MatchInfoNotify = function _Resove_MatchInfoNotify(netMsg) {
            var struct = {};
            struct.matchID = netMsg.popINT();
            struct.curSignupCount = netMsg.popINT();
            struct.robotCount = netMsg.popINT();
            return struct;
          };
          var info = _Resove_MatchInfoNotify(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u4eba\u6570\u53d8\u5316\u901a\u77e5", info);
          DataNotify.onCurMatchChange(info);
        }
      },
      dealMatchFailNotifyMessage: function dealMatchFailNotifyMessage(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resove_MatchInfoNotify = function _Resove_MatchInfoNotify(netMsg) {
            var struct = {};
            struct.gameID = netMsg.popINT();
            struct.matchType = netMsg.popBYTE();
            struct.matchID = netMsg.popINT();
            struct.reason = netMsg.popBYTE();
            return struct;
          };
          var info = _Resove_MatchInfoNotify(netMsg);
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u672a\u80fd\u5f00\u59cb\u901a\u77e5", info);
          DataNotify.onCurMatchFail(info);
        }
      },
      dealMatchStartRightAwayNotifyMessage: function dealMatchStartRightAwayNotifyMessage(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resove_MatchInfoNotify = function _Resove_MatchInfoNotify(netMsg) {
            var struct = {};
            struct.gameID = netMsg.popINT();
            struct.matchID = netMsg.popINT();
            struct.startTime = netMsg.popLONGLONG();
            return struct;
          };
          var info = _Resove_MatchInfoNotify(netMsg);
          dump(info, "dealMatchStartRightAwayNotifyMessage+++++");
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u5373\u5c06\u5f00\u59cb\u901a\u77e5", info);
          DataNotify.onCurMatchComeSoon(info);
        }
      },
      onMatchDeskInfo: function onMatchDeskInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_MatchDeskInfo = function _Resolve_MatchDeskInfo(netMsg) {
            var struct = {};
            struct.iCurPeopleCount = netMsg.popINT();
            struct.iMaxPeopleCount = netMsg.popINT();
            struct.iCurMatchRound = netMsg.popINT();
            struct.iMaxMatchRound = netMsg.popINT();
            struct.deskCount = netMsg.popINT();
            struct.DeskInfo = [];
            for (var i = 0; i < struct.deskCount; i++) {
              struct.DeskInfo[i] = {};
              struct.DeskInfo[i].deskIdx = netMsg.popINT();
              struct.DeskInfo[i].status = netMsg.popBYTE();
              struct.DeskInfo[i].deskUserID = tools.popArray("INT", netMsg, G_WAR_RECORD_PLAYER_NUM);
            }
            return struct;
          };
          var info = _Resolve_MatchDeskInfo(netMsg);
          dump(info, "info++++++++++++onMatchDeskInfo+++++");
          console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u6536\u5230\u6bd4\u8d5b\u684c\u5b50\u4fe1\u606f\u901a\u77e5", info);
          this.setMatchDeskInfo(info);
          DataNotify.showMatchGameDeskInfo();
        }
      },
      onAllMatchInfo: function onAllMatchInfo(netMsg) {
        if (G_HANDLE_CODE_OK == netMsg.bHandleCode) {
          var _Resolve_AllMatchInfo = function _Resolve_AllMatchInfo(netMsg) {
            var struct = {};
            struct.matchList = tools.popArray("LONGLONG", netMsg, 10);
            return struct;
          };
          var info = _Resolve_AllMatchInfo(netMsg);
          DataNotify.showAllMatchList();
        }
      },
      clear: function clear() {
        this.matchGameInfo = {};
        this.matchDeskInfo = {};
        this.myMatchGameInfo = {};
        this.MatchDeskRankInfo = {};
        this.curMatchID = -1;
        this.myMatchAndRoomInfo = {};
        this.curMatchGameInfo = {};
      },
      requestMatchRankRankList: function requestMatchRankRankList(callback) {
        var action = "SeasonRanking";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "rank",
          action: action,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestMatchRankRecordList: function requestMatchRankRecordList(page, num, callback) {
        var action = "getRewardsRecord";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.code ? callback && callback(jsonData) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "lobby",
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          page: page,
          num: num
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      getDuanWeiAwardList: function getDuanWeiAwardList(callback) {
        if (callback) return callback(window.rankInfoArr);
      },
      getChuangGuanAwardList: function getChuangGuanAwardList(gameID, callback) {
        var actionName = "getCheckpointMoneyConfig";
        var api = "Checkpoint";
        var fCallback = function fCallback() {};
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: api,
          action: actionName,
          gameID: gameID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      }
    });
    module.exports = MatchManager;
    cc._RF.pop();
  }, {
    DataManager: "DataManager",
    LobbyLogic: "LobbyLogic"
  } ],
  MatchNotify: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3f6034p0XJOAJDx/ZkwNPi6", "MatchNotify");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      doButton_Match_RankClick: function doButton_Match_RankClick() {
        if (!this._delegate) return;
        var layerName = "Match/MatchGameRankLayer";
        if (this._delegate.getChildByName(layerName)) return;
        this.addLayer(this._delegate, layerName, function(prefab) {
          prefab.zIndex = G_DISMISS_ROOM_LAYER_TAG;
        });
      },
      init: function init(delegate) {
        this._delegate = delegate;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1cf06wVa2hMXZMPGA1aE0iE", "MatchPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports._forceUpdateRenderData = void 0;
    var PoolMgr_1 = require("../../../framework/PoolMgr");
    var SpriteArray_1 = require("../../ui/SpriteArray");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var tools = require("Tools");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var MatchState;
    (function(MatchState) {
      MatchState[MatchState["MATCH_STATE_NO_ENROLL"] = 0] = "MATCH_STATE_NO_ENROLL";
      MatchState[MatchState["MATCH_STATE_ALREADY_ENROLL"] = 1] = "MATCH_STATE_ALREADY_ENROLL";
      MatchState[MatchState["MATCH_STATE_STOP_ENROLL"] = 2] = "MATCH_STATE_STOP_ENROLL";
    })(MatchState || (MatchState = {}));
    var ARENA_MATCHTYPE = [ {
      matchType: 4
    }, {
      matchType: 8
    }, {
      matchType: 5
    }, {
      matchType: 9
    } ];
    var TopTeamState;
    (function(TopTeamState) {
      TopTeamState[TopTeamState["TopTeam_STATE_XYY"] = 0] = "TopTeam_STATE_XYY";
      TopTeamState[TopTeamState["TopTeam_STATE_JLY"] = 1] = "TopTeam_STATE_JLY";
      TopTeamState[TopTeamState["TopTeam_STATE_JLM"] = 2] = "TopTeam_STATE_JLM";
      TopTeamState[TopTeamState["TopTeam_STATE_DFB"] = 3] = "TopTeam_STATE_DFB";
    })(TopTeamState || (TopTeamState = {}));
    var LEFT_ENROLL_TIME = 30;
    var MatchPanel = function(_super) {
      __extends(MatchPanel, _super);
      function MatchPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.MatchlistNode = null;
        _this.TopTeamNode = null;
        _this.newHandNode = null;
        _this.listNode = null;
        _this.matchItemNode = null;
        _this.annimetions = null;
        _this.TopTeamItemNode = null;
        _this.MeRewardNode = null;
        _this.MeRewardlistNode = null;
        _this.MeRewardItem = null;
        _this.listData = new Array();
        _this.MeRewardList = new Array();
        _this.node111 = null;
        _this._leftTime0 = 0;
        _this._currentTime0 = 0;
        _this._endEnrollTime0 = 0;
        _this._isEnroll0 = false;
        _this.node122 = null;
        _this._leftTime1 = 0;
        _this._currentTime1 = 0;
        _this._endEnrollTime1 = 0;
        _this._isEnroll1 = false;
        _this.node133 = null;
        _this._leftTime2 = 0;
        _this._currentTime2 = 0;
        _this._endEnrollTime2 = 0;
        _this._isEnroll2 = false;
        _this.TopTeamnode = null;
        _this._isTopTeam = false;
        _this._leftTime = 0;
        _this._currentTime = 0;
        _this._endEnrollTime = 0;
        _this.matchType = 0;
        _this._matchId = 0;
        _this._fee = 0;
        _this.matchNode = null;
        _this.detailsNode = null;
        _this.SponsorNode = null;
        _this.TopNode = null;
        _this.timeIndex = 0;
        _this.timeIndex1 = 0;
        _this.timeIndex2 = 0;
        _this.timeIndex3 = 0;
        return _this;
      }
      MatchPanel.prototype.onEnable = function() {
        this.doButton_MatchList();
      };
      MatchPanel.prototype.onDisable = function() {
        clearInterval(this.timeIndex);
        clearInterval(this.timeIndex1);
        clearInterval(this.timeIndex2);
        this.DeleteListNode();
      };
      MatchPanel.prototype.onToggleContainerClick = function(toggle) {
        switch (toggle.node.name) {
         case "toggle1":
          this.doButton_MatchList();
          break;

         case "toggle2":
          this.doButton_TopTeam(TopTeamState.TopTeam_STATE_XYY);
          break;

         case "toggle3":
          this.doButton_TopTeam(TopTeamState.TopTeam_STATE_JLY);
          break;

         case "toggle4":
          this.doButton_TopTeam(TopTeamState.TopTeam_STATE_JLM);
          break;

         case "toggle5":
          this.doButton_TopTeam(TopTeamState.TopTeam_STATE_DFB);
          break;

         case "toggle6":
          this.MatchlistNode.active = false;
          this.TopTeamNode.active = false;
          this.newHandNode.active = false;
          this.MeRewardNode.active = true;
          var detailsNode = this.MeRewardNode.getChildByName("detailsNode");
          detailsNode.active = false;
          this._refreshMeRewardList();
          break;

         case "toggle7":
          this.doButton_NewHand();
        }
      };
      MatchPanel.prototype.doButton_MatchList = function() {
        this.MatchlistNode.active = true;
        this.TopTeamNode.active = false;
        this.newHandNode.active = false;
        this.MeRewardNode.active = false;
        this.matchType = 2;
        this._refreshMatchList();
      };
      MatchPanel.prototype.doButton_TopTeam = function(State) {
        this.MatchlistNode.active = false;
        this.TopTeamNode.active = true;
        this.newHandNode.active = false;
        this.MeRewardNode.active = false;
        this.matchType = ARENA_MATCHTYPE[State].matchType;
        this._refreshTopTeamList(State);
      };
      MatchPanel.prototype.doButton_NewHand = function() {
        this.MatchlistNode.active = false;
        this.TopTeamNode.active = false;
        this.newHandNode.active = true;
        this.MeRewardNode.active = false;
      };
      MatchPanel.prototype._refreshMatchList = function() {
        var _this = this;
        this._isEnroll0 = false;
        this._isEnroll1 = false;
        this._isEnroll2 = false;
        this.listData = [];
        this.DeleteListNode();
        var that = this;
        globalThis.MatchManager.requestCurMatchInfo(this.matchType, function(data) {
          for (var i = 0; i < data.length; i++) {
            if (3 == i) break;
            var itemData = data[i];
            _this.listData[i] = data[i];
            var node = PoolMgr_1.PoolMgr.instance.getNode(that.matchItemNode, that.listNode);
            that.showUI(node, itemData, i);
          }
        });
      };
      MatchPanel.prototype.showUI = function(node, data, index) {
        console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u573a\u6b21\u5217\u8868 item:", data);
        node.getChildByName("bottomBtns").getChildByName("Number").getComponent(cc.Label).string = tools.stringFormat("\u62a5\u540d\u8d39\u7528: {0}\u91d1\u8c46", data.game_money);
        node.getChildByName("bottomBtns").getChildByName("text_1").getChildByName("num").getComponent(cc.Label).string = String(data.award[0].gold) + data.award[0].goodsname;
        node.getChildByName("bottomBtns").getChildByName("text_2").getChildByName("num").getComponent(cc.Label).string = String(data.award[1].gold) + data.award[1].goodsname;
        node.getChildByName("bottomBtns").getChildByName("text_3").getChildByName("num").getComponent(cc.Label).string = String(data.award[2].gold) + data.award[2].goodsname;
        var actionBtn = node.getChildByName("bottomBtns").getChildByName("actionBtn");
        var button = actionBtn.getComponent(cc.Button);
        var clickEventHandler = new cc.Component.EventHandler();
        clickEventHandler.target = this.node;
        clickEventHandler.component = "MatchPanel";
        clickEventHandler.handler = "onActionBtnClick";
        clickEventHandler.customEventData = String(data.matchID);
        button.clickEvents = [];
        button.clickEvents.push(clickEventHandler);
        if (0 == index) {
          this._endEnrollTime0 = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3 + "");
          this._isEnroll0 = false;
          if (0 == data.sign_up_status) actionBtn.getComponent(SpriteArray_1.default).index = 0; else {
            this._isEnroll0 = true;
            actionBtn.getComponent(SpriteArray_1.default).index = 1;
          }
          this._leftTime0 = data.seconds;
          this.timeIndex && clearInterval(this.timeIndex);
          this._endEnrollTime0 = data.match_time - LEFT_ENROLL_TIME;
          var endEnrollTime = LEFT_ENROLL_TIME;
          if (this._leftTime0 > 1) {
            this._leftTime0 - endEnrollTime <= 0 && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
            this.node111 = null;
            this.node111 = node;
            this._matchTimeSchedule();
            var that_1 = this;
            this.timeIndex = setInterval(function() {
              that_1._matchTimeSchedule();
            }, 1e3);
          } else {
            this._showLeftTime(node, 0);
            actionBtn.getComponent(SpriteArray_1.default).index = 2;
          }
        } else if (1 == index) {
          this._endEnrollTime1 = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3 + "");
          this._isEnroll1 = false;
          if (0 == data.sign_up_status) actionBtn.getComponent(SpriteArray_1.default).index = 0; else {
            this._isEnroll1 = true;
            actionBtn.getComponent(SpriteArray_1.default).index = 1;
          }
          this._leftTime1 = data.seconds;
          this.timeIndex1 && clearInterval(this.timeIndex1);
          this._endEnrollTime1 = data.match_time - LEFT_ENROLL_TIME;
          var endEnrollTime = LEFT_ENROLL_TIME;
          if (this._leftTime1 > 1) {
            this._leftTime1 - endEnrollTime <= 0 && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
            this.node122 = null;
            this.node122 = node;
            this._matchTimeSchedule1(node);
            var that_2 = this;
            this.timeIndex1 = setInterval(function() {
              that_2._matchTimeSchedule1(that_2.node122);
            }, 1e3);
          } else {
            this._showLeftTime(node, 0);
            actionBtn.getComponent(SpriteArray_1.default).index = 2;
          }
        } else if (2 == index) {
          this._endEnrollTime2 = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3 + "");
          this._isEnroll2 = false;
          if (0 == data.sign_up_status) actionBtn.getComponent(SpriteArray_1.default).index = 0; else {
            this._isEnroll2 = true;
            actionBtn.getComponent(SpriteArray_1.default).index = 1;
          }
          this._leftTime2 = data.seconds;
          this.timeIndex2 && clearInterval(this.timeIndex2);
          this._endEnrollTime2 = data.match_time - LEFT_ENROLL_TIME;
          var endEnrollTime = LEFT_ENROLL_TIME;
          if (this._leftTime2 > 1) {
            this._leftTime2 - endEnrollTime <= 0 && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
            this.node133 = null;
            this.node133 = node;
            this._matchTimeSchedule2(this.node133);
            var that_3 = this;
            this.timeIndex2 = setInterval(function() {
              that_3._matchTimeSchedule2(that_3.node133);
            }, 1e3);
          } else {
            this._showLeftTime(node, 0);
            actionBtn.getComponent(SpriteArray_1.default).index = 2;
          }
        }
      };
      MatchPanel.prototype._matchTimeSchedule = function() {
        var _this = this;
        if (null == this.node111) return;
        var actionBtn = this.node111.getChildByName("bottomBtns").getChildByName("actionBtn");
        this._leftTime0 = this._leftTime0 - 1;
        this._currentTime0 = this._currentTime0 + 1;
        (this._leftTime0 <= LEFT_ENROLL_TIME || this._endEnrollTime0 - this._currentTime0 <= 0) && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
        this._showLeftTime(this.node111, this._leftTime0);
        if (this._leftTime0 < 0) {
          this.timeIndex && clearInterval(this.timeIndex);
          this._isEnroll0 ? this._refreshMatchList() : this.scheduleOnce(function() {
            _this._refreshMatchList();
          }, 2);
        }
      };
      MatchPanel.prototype._matchTimeSchedule1 = function(node) {
        var _this = this;
        if (null == node) return;
        var actionBtn = node.getChildByName("bottomBtns").getChildByName("actionBtn");
        this._leftTime1 = this._leftTime1 - 1;
        this._currentTime1 = this._currentTime1 + 1;
        (this._leftTime1 <= LEFT_ENROLL_TIME || this._endEnrollTime1 - this._currentTime1 <= 0) && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
        this._showLeftTime(node, this._leftTime1);
        if (this._leftTime1 < 0) {
          this.timeIndex1 && clearInterval(this.timeIndex1);
          this._isEnroll1 ? this._refreshMatchList() : this.scheduleOnce(function() {
            _this._refreshMatchList();
          }, 2);
        }
      };
      MatchPanel.prototype._matchTimeSchedule2 = function(node) {
        var _this = this;
        if (null == node) return;
        var actionBtn = node.getChildByName("bottomBtns").getChildByName("actionBtn");
        this._leftTime2 = this._leftTime2 - 1;
        this._currentTime2 = this._currentTime2 + 1;
        (this._leftTime2 <= LEFT_ENROLL_TIME || this._endEnrollTime2 - this._currentTime2 <= 0) && (actionBtn.getComponent(SpriteArray_1.default).index = 2);
        this._showLeftTime(node, this._leftTime2);
        if (this._leftTime2 < 0) {
          this.timeIndex2 && clearInterval(this.timeIndex2);
          this._isEnroll2 ? this._refreshMatchList() : this.scheduleOnce(function() {
            _this._refreshMatchList();
          }, 2);
        }
      };
      MatchPanel.prototype._showLeftTime = function(node, leftTime) {
        var countDown = node.getChildByName("countDown");
        var leftTimesLabels = [];
        var text_1 = countDown.getChildByName("item_1").getChildByName("num_1").getChildByName("text").getComponent(cc.Label);
        var text_2 = countDown.getChildByName("item_1").getChildByName("num_2").getChildByName("text").getComponent(cc.Label);
        var text_3 = countDown.getChildByName("item_2").getChildByName("num_1").getChildByName("text").getComponent(cc.Label);
        var text_4 = countDown.getChildByName("item_2").getChildByName("num_2").getChildByName("text").getComponent(cc.Label);
        leftTimesLabels.push(text_1);
        leftTimesLabels.push(text_2);
        leftTimesLabels.push(text_3);
        leftTimesLabels.push(text_4);
        if (leftTime > 1) {
          var result = leftTime;
          var h = (Math.floor(result / 3600) < 10, Math.floor(result / 3600));
          var m = (Math.floor(result / 60 % 60) < 10, Math.floor(result / 60 % 60));
          var s = (Math.floor(result % 60) < 10, Math.floor(result % 60));
          var tab = [];
          tab.push((tools.fillZero2(m, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(m, 1) + "").substr(1, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(1, 1));
          for (var i = 0; i < leftTimesLabels.length; i++) leftTimesLabels[i].string = tab[i];
        } else for (var _i = 0, leftTimesLabels_1 = leftTimesLabels; _i < leftTimesLabels_1.length; _i++) {
          var item = leftTimesLabels_1[_i];
          item.string = "0";
        }
      };
      MatchPanel.prototype.onActionBtnClick = function(event, customEventData) {
        var node = event.target;
        var actionBtn = node.getComponent(cc.Button);
        var matchId = Number(customEventData);
        var showIndex = actionBtn.getComponent(SpriteArray_1.default).index;
        switch (showIndex) {
         case 0:
          this.onEnrollBtnClick(actionBtn, matchId);
          break;

         case 1:
          this.onCancelEnrollBtnClick(actionBtn, matchId);
          break;

         case 2:
          this.onStopEnrollBtnClick();
        }
      };
      MatchPanel.prototype.onEnrollBtnClick = function(actionBtn, matchId) {
        var showIndex = actionBtn.getComponent(SpriteArray_1.default).index;
        if (0 != showIndex) {
          globalThis.createTips("\u672c\u573a\u6bd4\u8d5b\u5df2\u7ecf\u62a5\u540d");
          return;
        }
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var that = this;
        var msgCallback = function(btnName) {
          if (btnName == btnName1 && "undefined" != typeof matchId) {
            console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u62a5\u540d matchid:" + matchId);
            var Numer_1 = 0;
            for (var i = 0; i < that.listData.length; i++) that.listData[i].matchID == matchId && (Numer_1 = i);
            globalThis.MatchManager.requestMatchEnroll(matchId, function() {
              console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u62a5\u540d matchid:" + matchId + "\u6210\u529f");
              globalThis.createTips("\u62a5\u540d\u6210\u529f");
              actionBtn.getComponent(SpriteArray_1.default).index = 1;
              0 == Numer_1 ? that._isEnroll0 = true : 1 == Numer_1 ? that._isEnroll1 = true : 2 == Numer_1 && (that._isEnroll2 = true);
            });
          }
        };
        var game_money = 0;
        for (var i = 0; i < that.listData.length; i++) that.listData[i].matchID == matchId && (game_money = that.listData[i].game_money);
        var msgObj = {
          msg: "\u60a8\u662f\u5426\u82b1\u8d39" + game_money + "\u91d1\u8c46\u62a5\u540d\uff1f",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      MatchPanel.prototype.onCancelEnrollBtnClick = function(actionBtn, matchId) {
        var btnName1 = "\u786e\u5b9a";
        var btnName2 = "\u53d6\u6d88";
        var that = this;
        var msgCallback = function(btnName) {
          if (btnName == btnName1 && "undefined" != typeof matchId) {
            console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u53d6\u6d88\u62a5\u540d matchid:" + matchId);
            var Numer_2 = 0;
            for (var i = 0; i < that.listData.length; i++) that.listData[i].matchID == matchId && (Numer_2 = i);
            globalThis.MatchManager.requestMatchEnrollCancel(matchId, function() {
              console.log(tools.getCurTime() + " #### \u6bd4\u8d5b\u4e1a\u52a1 \u8bf7\u6c42\u53d6\u6d88\u62a5\u540d matchid:" + matchId + " \u6210\u529f");
              globalThis.createTips("\u53d6\u6d88\u62a5\u540d\u6210\u529f");
              actionBtn.getComponent(SpriteArray_1.default).index = 0;
              0 == Numer_2 ? that._isEnroll0 = false : 1 == Numer_2 ? that._isEnroll1 = false : 2 == Numer_2 && (that._isEnroll2 = false);
            });
          }
        };
        var msgObj = {
          msg: "\u662f\u5426\u53d6\u6d88\u6bd4\u8d5b\uff0c\u62a5\u540d\u8d39\u5c06\u4f1a\u9000\u56de?",
          btn1: btnName1,
          btn2: btnName2,
          callbackFun: msgCallback
        };
        globalThis.createMsgBox(msgObj);
      };
      MatchPanel.prototype.DeleteListNode = function() {
        for (var _i = 0, _a = this.listNode.children; _i < _a.length; _i++) {
          var node = _a[_i];
          PoolMgr_1.PoolMgr.instance.putNode(node);
        }
        this.listNode.removeAllChildren();
      };
      MatchPanel.prototype.onStopEnrollBtnClick = function() {
        this._leftTime0 <= 0 ? globalThis.createTips("\u5df2\u7ecf\u8fc7\u4e86\u62a5\u540d\u65f6\u95f4") : globalThis.createTips("\u8ddd\u79bb\u5f00\u8d5b30\u79d2\u5185\u4e0d\u80fd\u62a5\u540d");
      };
      MatchPanel.prototype._refreshTopTeamList = function(State) {
        this._isTopTeam = false;
        this.matchNode = null;
        this.detailsNode = null;
        this.SponsorNode = null;
        this.TopNode = null;
        var that = this;
        this.TopTeamItemNode.active = false;
        globalThis.MatchManager.requestCurMatchInfo(this.matchType, function(data) {
          for (var i = 0; i < data.length; i++) {
            if (1 == i) break;
            var itemData = data[i];
            that.TopTeamItemNode.active = true;
            that.showTopTeamUI(that.TopTeamItemNode, itemData, i, State);
          }
        });
      };
      MatchPanel.prototype.showTopTeamUI = function(node, data, index, State) {
        console.log(tools.getCurTime() + " #### \u4e89\u9738\u8d5b\u4e1a\u52a1 \u573a\u6b21\u5217\u8868 item:", data);
        this.TopNode = node;
        var titleNode = node.getChildByName("titleNode");
        titleNode.getChildByName("title").getComponent(SpriteArray_1.default).index = State;
        var tip = "";
        var tips = "";
        var tipsss = "";
        if (State == TopTeamState.TopTeam_STATE_XYY) {
          tip = "\u6d17\u8863\u6db2";
          tips = "\u2460\u4ef7\u503c10\u5143\u7684\u6d17\u8863\u6db2\u4e00\u74f6";
          tipsss = "\u65f6\u95f4\uff1a\u6bcf\u65e59:00-23:00\uff08\u6bcf\u4e24\u4e2a\u5c0f\u65f6\u4e00\u573a\uff09";
        } else if (State == TopTeamState.TopTeam_STATE_JLY) {
          tip = "\u91d1\u9f99\u6cb9";
          tips = "\u2460\u4ef7\u503c65\u51434L\u91d1\u9f99\u6cb9\u4e00\u74f6";
          tipsss = "\u65f6\u95f4\uff1a\u6bcf\u5929\u4e00\u573a \u665a\u4e0a21:00\u51c6\u65f6\u5f00\u8d5b";
        } else if (State == TopTeamState.TopTeam_STATE_JLM) {
          tip = "\u91d1\u9f99\u7c73";
          tips = "\u2460\u4ef7\u503c130\u5143\u7684\u9999\u5927\u7c7320kg";
          tipsss = "\u65f6\u95f4\uff1a\u6bcf\u4e09\u5929\u4e00\u573a \u665a\u4e0a21:30\u51c6\u65f6\u5f00\u8d5b";
        } else if (State == TopTeamState.TopTeam_STATE_DFB) {
          tip = "\u7535\u996d\u7172";
          tips = "\u2460\u4ef7\u503c300\u5143\u7684\u7535\u996d\u7172";
          tipsss = "\u65f6\u95f4\uff1a\u6bcf\u670810\u53f7\u300120\u53f7\u300128\u53f7\u665a\u4e0a21:30\u51c6\u65f6\u5f00\u8d5b";
        }
        node.getChildByName("bottomBtns").getChildByName("TopTeamLine").getChildByName("name").getComponent(cc.Label).string = tip + "\u4e89\u9738\u8d5b\u62a5\u540d\u5165\u53e3";
        this.matchNode = node.getChildByName("bottomBtns").getChildByName("matchNode");
        this.matchNode.getChildByName("time").getComponent(cc.Label).string = tipsss;
        this.matchNode.getChildByName("reawad").getComponent(cc.Label).string = "\u62a5\u540d\u8d39\u7528\uff1a" + String(data.fee / 100) + "\u793c\u5238";
        this.matchNode.getChildByName("text").active = true;
        this.matchNode.getChildByName("text").getComponent(cc.Label).string = "\u5956\u54c1\uff1a\u524d\u4e09\u540d\u83b7\u5f97\u76f8\u5e94\u5956\u54c1\uff0c\u5177\u4f53\u67e5\u770b\u8be6\u60c5\u3002";
        this.detailsNode = node.getChildByName("bottomBtns").getChildByName("detailsNode");
        this.detailsNode.getChildByName("text3").getComponent(cc.Label).string = tips + " \u2461" + data.award[1].gold + data.award[1].goodsname + " \u2462" + data.award[2].gold + data.award[2].goodsname;
        this.SponsorNode = node.getChildByName("bottomBtns").getChildByName("SponsorNode");
        this._matchId = data.matchID;
        this._fee = data.fee / 100;
        var btn_signup = node.getChildByName("bottomBtns").getChildByName("btn_signup");
        if (0 == data.sign_up_status) btn_signup.getComponent(SpriteArray_1.default).index = 0; else {
          this._isTopTeam = true;
          btn_signup.getComponent(SpriteArray_1.default).index = 1;
        }
        if (data.beforeMatch > 0) {
          var TimeNode_1 = node.getChildByName("beloNode").getChildByName("TimeNode");
          TimeNode_1.active = false;
          var dayNode_1 = node.getChildByName("beloNode").getChildByName("dayNode");
          dayNode_1.active = true;
          dayNode_1.getChildByName("bg").getChildByName("text").getComponent(cc.Label).string = String(data.beforeMatch);
          return;
        }
        var TimeNode = node.getChildByName("beloNode").getChildByName("TimeNode");
        TimeNode.active = true;
        var dayNode = node.getChildByName("beloNode").getChildByName("dayNode");
        dayNode.active = false;
        dayNode.getChildByName("bg").getChildByName("text").getComponent(cc.Label).string = "";
        this._endEnrollTime = parseInt(new Date(data.match_date + " " + data.people_end).getTime() / 1e3 + "");
        this._isTopTeam = false;
        this._leftTime = data.seconds;
        this.timeIndex3 && clearInterval(this.timeIndex3);
        this._endEnrollTime = data.match_time - LEFT_ENROLL_TIME;
        var endEnrollTime = LEFT_ENROLL_TIME;
        if (this._leftTime > 1) {
          this._leftTime - endEnrollTime <= 0 && (btn_signup.getComponent(SpriteArray_1.default).index = 2);
          this.TopTeamnode = null;
          this.TopTeamnode = node;
          this._TopTeamTimeSchedule();
          var that_4 = this;
          this.timeIndex3 = setInterval(function() {
            that_4._TopTeamTimeSchedule();
          }, 1e3);
        } else {
          this._showTopTeamTime(node, 0);
          btn_signup.getComponent(SpriteArray_1.default).index = 2;
        }
      };
      MatchPanel.prototype._TopTeamTimeSchedule = function() {
        var _this = this;
        if (null == this.TopNode) return;
        var btn_signup = this.TopNode.getChildByName("bottomBtns").getChildByName("btn_signup");
        this._leftTime = this._leftTime - 1;
        this._currentTime = this._currentTime + 1;
        (this._leftTime <= LEFT_ENROLL_TIME || this._endEnrollTime - this._currentTime <= 0) && (btn_signup.getComponent(SpriteArray_1.default).index = 2);
        this._showTopTeamTime(this.TopTeamnode, this._leftTime);
        if (this._leftTime < 0) {
          this.timeIndex3 && clearInterval(this.timeIndex3);
          this._isTopTeam ? this._refreshTopTeamList(this.matchType) : this.scheduleOnce(function() {
            _this._refreshTopTeamList(_this.matchType);
          }, 2);
        }
      };
      MatchPanel.prototype._showTopTeamTime = function(node, leftTime) {
        var TimeNode = node.getChildByName("beloNode").getChildByName("TimeNode");
        var leftTimesLabels = [];
        var text_1 = TimeNode.getChildByName("item_1").getChildByName("num_1").getChildByName("text").getComponent(cc.Label);
        var text_2 = TimeNode.getChildByName("item_1").getChildByName("num_2").getChildByName("text").getComponent(cc.Label);
        var text_3 = TimeNode.getChildByName("item_2").getChildByName("num_1").getChildByName("text").getComponent(cc.Label);
        var text_4 = TimeNode.getChildByName("item_2").getChildByName("num_2").getChildByName("text").getComponent(cc.Label);
        var text_5 = TimeNode.getChildByName("item_3").getChildByName("num_1").getChildByName("text").getComponent(cc.Label);
        var text_6 = TimeNode.getChildByName("item_3").getChildByName("num_2").getChildByName("text").getComponent(cc.Label);
        leftTimesLabels.push(text_1);
        leftTimesLabels.push(text_2);
        leftTimesLabels.push(text_3);
        leftTimesLabels.push(text_4);
        leftTimesLabels.push(text_5);
        leftTimesLabels.push(text_6);
        if (leftTime > 1) {
          var result = leftTime;
          var h = (Math.floor(result / 3600) < 10, Math.floor(result / 3600));
          var m = (Math.floor(result / 60 % 60) < 10, Math.floor(result / 60 % 60));
          var s = (Math.floor(result % 60) < 10, Math.floor(result % 60));
          var tab = [];
          tab.push((tools.fillZero2(h, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(h, 1) + "").substr(1, 1));
          tab.push((tools.fillZero2(m, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(m, 1) + "").substr(1, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(0, 1));
          tab.push((tools.fillZero2(s, 1) + "").substr(1, 1));
          for (var i = 0; i < leftTimesLabels.length; i++) leftTimesLabels[i].string = tab[i];
        } else for (var _i = 0, leftTimesLabels_2 = leftTimesLabels; _i < leftTimesLabels_2.length; _i++) {
          var item = leftTimesLabels_2[_i];
          item.string = "0";
        }
      };
      MatchPanel.prototype.onBtnTopTeamClick = function(event, value) {
        switch (value) {
         case "btn_signup":
          var node = event.target;
          var actionBtn = node.getComponent(cc.Button);
          this.SignupBtnClick(actionBtn);
          break;

         case "btn_match":
          this.matchNode.active = true;
          this.detailsNode.active = false;
          this.SponsorNode.active = false;
          break;

         case "btn_details":
          this.matchNode.active = false;
          this.detailsNode.active = true;
          this.SponsorNode.active = false;
          break;

         case "btn_Sponsor":
          this.matchNode.active = false;
          this.detailsNode.active = false;
          this.SponsorNode.active = true;
          break;

         case "btn_more":
          GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
        }
      };
      MatchPanel.prototype.SignupBtnClick = function(actionBtn) {
        var showIndex = actionBtn.getComponent(SpriteArray_1.default).index;
        var matchId = this._matchId;
        switch (showIndex) {
         case 0:
          if (0 != showIndex) {
            globalThis.createTips("\u672c\u573a\u6bd4\u8d5b\u5df2\u7ecf\u62a5\u540d");
            return;
          }
          var btnName1_1 = "\u786e\u5b9a";
          var btnName2 = "\u53d6\u6d88";
          var that_5 = this;
          var msgCallback = function(btnName) {
            if (btnName == btnName1_1 && "undefined" != typeof matchId) {
              console.log(tools.getCurTime() + " #### \u4e89\u9738\u8d5b \u8bf7\u6c42\u62a5\u540d matchid:" + matchId);
              globalThis.MatchManager.requestMatchEnroll(matchId, function() {
                console.log(tools.getCurTime() + " #### \u4e89\u9738\u8d5b \u8bf7\u6c42\u62a5\u540d matchid:" + matchId + "\u6210\u529f");
                globalThis.createTips("\u62a5\u540d\u6210\u529f");
                actionBtn.getComponent(SpriteArray_1.default).index = 1;
                that_5._isTopTeam = true;
              });
            }
          };
          var msgObj = {
            msg: "\u60a8\u662f\u5426\u82b1\u8d39" + this._fee + "\u793c\u5238\u62a5\u540d\uff0c\u4e00\u65e6\u62a5\u540d\u53c2\u4e0e\u6bd4\u8d5b\uff0c\u793c\u5238\u6982\u4e0d\u9000\u8fd8\uff0c\u662f\u5426\u7ee7\u7eed\uff1f",
            btn1: btnName1_1,
            btn2: btnName2,
            callbackFun: msgCallback
          };
          globalThis.createMsgBox(msgObj);
          break;

         case 1:
          break;

         case 2:
          globalThis.createTips("\u5df2\u7ecf\u8fc7\u4e86\u62a5\u540d\u65f6\u95f4");
        }
      };
      MatchPanel.prototype._refreshMeRewardList = function() {
        this.deleterecyle();
        var that = this;
        this.MeRewardList = [];
        globalThis.RankManager.requestExchangeList(function(data) {
          var MeRewardScrollView = that.MeRewardNode.getChildByName("MeRewardScrollView");
          var NoMeReward = that.MeRewardNode.getChildByName("NoMeReward");
          MeRewardScrollView.active = 0 != data.length;
          NoMeReward.active = 0 == data.length;
          for (var i = 0; i < data.length; i++) {
            var itemData = data[i];
            that.MeRewardList[i] = data[i];
            var item = PoolMgr_1.PoolMgr.instance.getNode(that.MeRewardItem, that.MeRewardlistNode);
            that._initItemUI(item, itemData, i);
          }
        }, 2);
      };
      MatchPanel.prototype._initItemUI = function(item, itemData, index) {
        var date = new Date(itemData.create_time);
        var dayta1 = date.getFullYear();
        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        var currentdate = dayta1 + "/" + month + "/" + strDate + "  " + itemData.pay_desc;
        item.getChildByName("buyTIps").getComponent(cc.Label).string = "" + itemData.buyGoods;
        item.getChildByName("time").getComponent(cc.Label).string = currentdate;
        var actionBtn = item.getChildByName("btn_details");
        var button = actionBtn.getComponent(cc.Button);
        var clickEventHandler = new cc.Component.EventHandler();
        clickEventHandler.target = this.node;
        clickEventHandler.component = "MatchPanel";
        clickEventHandler.handler = "onMeRewardBtnClick";
        clickEventHandler.customEventData = String(index);
        button.clickEvents = [];
        button.clickEvents.push(clickEventHandler);
      };
      MatchPanel.prototype.onMeRewardBtnClick = function(event, customEventData) {
        var exchangeScrollView = this.MeRewardNode.getChildByName("MeRewardScrollView");
        exchangeScrollView.active = false;
        var detailsNode = this.MeRewardNode.getChildByName("detailsNode");
        detailsNode.active = true;
        var exId = Number(customEventData);
        var info = this.MeRewardList[exId];
        if (info) {
          var date = new Date(info.create_time);
          var dayta1 = date.getFullYear();
          var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
          var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
          detailsNode.getChildByName("TIps_3").getComponent(cc.Label).string = "\u606d\u559c\u60a8\u4e8e" + dayta1 + "\u5e74" + month + "\u6708" + strDate + "\u65e5\u5728\u201c" + info.buyGoods + "\u4e89\u9738";
          detailsNode.getChildByName("TIps_4").getComponent(cc.Label).string = "\u8d5b\u201d\u4e2d\u83b7\u5f97\u7b2c\u4e00\u540d\uff0c\u60a8\u5c06\u83b7\u53d6" + info.buyGoods + "\u3002";
          detailsNode.getChildByName("TIps_9").getComponent(cc.Label).string = dayta1 + "." + month + "." + strDate;
        }
      };
      MatchPanel.prototype.onMeRewardCloseClick = function(event, customEventData) {
        var exchangeScrollView = this.MeRewardNode.getChildByName("MeRewardScrollView");
        exchangeScrollView.active = true;
        var detailsNode = this.MeRewardNode.getChildByName("detailsNode");
        detailsNode.active = false;
        var NoMeReward = this.MeRewardNode.getChildByName("NoMeReward");
        NoMeReward.active = false;
      };
      MatchPanel.prototype.deleterecyle = function() {
        for (var _i = 0, _a = this.MeRewardlistNode.children; _i < _a.length; _i++) {
          var node = _a[_i];
          PoolMgr_1.PoolMgr.instance.putNode(node);
        }
        this.MeRewardlistNode.removeAllChildren();
      };
      MatchPanel.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "MatchlistNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "TopTeamNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "newHandNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "listNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "matchItemNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "annimetions", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "TopTeamItemNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "MeRewardNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "MeRewardlistNode", void 0);
      __decorate([ property(cc.Node) ], MatchPanel.prototype, "MeRewardItem", void 0);
      MatchPanel = __decorate([ ccclass ], MatchPanel);
      return MatchPanel;
    }(cc.Component);
    exports.default = MatchPanel;
    function _forceUpdateRenderData() {
      throw new Error("Function not implemented.");
    }
    exports._forceUpdateRenderData = _forceUpdateRenderData;
    cc._RF.pop();
  }, {
    "../../../framework/PoolMgr": "PoolMgr",
    "../../ui/SpriteArray": "SpriteArray",
    EventEmiter: "EventEmiter",
    Tools: "Tools"
  } ],
  MatchRankGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "790931d8OxBvK+YjxsHbp2b", "MatchRankGame");
    "use strict";
    var matchGameArr = [ 20170405, 36610103, 20161010, 20161004, 30100008, 30000004, 23510004, 30000606, 20173124, 12101105 ];
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        matchRankImages: [ cc.SpriteFrame ],
        gameBg: cc.Sprite
      },
      setData: function setData(tableUIComponent, itemInfo) {
        this.tableUIComponent = tableUIComponent;
        this.itemInfo = itemInfo;
        var clickIndex = 0;
        for (var i = 0; i < matchGameArr.length; i++) if (matchGameArr[i] == itemInfo.gameID) {
          clickIndex = i;
          break;
        }
        this.gameBg.spriteFrame = this.matchRankImages[clickIndex];
      },
      onClickToMatchRank: function onClickToMatchRank() {
        this.tableUIComponent && this.tableUIComponent.onEnterRankMatch(this.itemInfo);
      },
      init: function init(gameTables) {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchRankResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c7ebYOBthMYKV9beb6g48Q", "MatchRankResult");
    "use strict";
    var BG_MOVE_TIME = .3;
    var PLAY_COUNT = 4;
    var COUNT_TIME = 5;
    cc.Class({
      extends: cc.Component,
      properties: {
        gameExp: cc.Label,
        userLevel: cc.Label,
        remark: cc.Label,
        Button_Back: cc.Button,
        animateNode: cc.Node,
        Skeleton: [ sp.SkeletonData ]
      },
      init: function init(delegate, resultInfo) {
        this._delegate = delegate;
        this._resultInfo = resultInfo || null;
        this.initUIData();
      },
      doButton_BackClick: function doButton_BackClick() {
        this.node.removeFromParent();
      },
      setShowMatchLevelUp: function setShowMatchLevelUp() {
        this.isShowMatchLevelUp = true;
      },
      playSkelenAnimation: function playSkelenAnimation(fileName, isLoop, callBack, parentNode, skin) {
        isLoop = isLoop || false;
        var node = new cc.Node();
        var Skeleton = node.addComponent(sp.Skeleton);
        var SkeletonIndex = 0;
        Skeleton.skeletonData = this.Skeleton[SkeletonIndex];
        Skeleton.premultipliedAlpha = false;
        Skeleton.loop = isLoop;
        Skeleton.animation = "animation";
        Skeleton.timeScale = 1;
        this.scheduleOnce(function() {
          Skeleton.setSkin(skin);
        }, .1);
        parentNode ? parentNode.addChild(node) : this.node.addChild(node);
        node.name = fileName;
        Skeleton.setCompleteListener(function() {
          callBack && callBack();
        }.bind(this));
      },
      initUIData: function initUIData() {
        var gameExp = parseInt(F_GetMoneyDisplay(this._resultInfo.gameExp));
        this.gameExp.string = "\u7ecf\u9a8c\u503c\uff1a" + gameExp;
        var userRankInfo = getRankInfo(gameExp);
        this.remark.string = "\u661f\u7ea7\uff1a" + userRankInfo.remark;
        this.animateNode.children.forEach(function(node) {
          return node.destroy();
        });
        var animateStr = "A";
        var levelIndex = parseInt(this._resultInfo.UserLevel / 5);
        var levelStr = [ "A", "B", "C", "D", "E", "F", "G" ];
        animateStr = levelStr[levelIndex];
        this.playSkelenAnimation(animateStr, false, null, this.animateNode, animateStr);
      }
    });
    cc._RF.pop();
  }, {} ],
  MatchRank: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d77aG/3P9N3oiDS+5Qx3yD", "MatchRank");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        ListView_Rank: cc.ScrollView,
        Panel_Rank: cc.Node
      },
      start: function start() {},
      init: function init() {
        this.Panel_Rank.active = false;
        var callback = function(dataList) {
          this.initRankListView(dataList);
        }.bind(this);
        MatchManager.requestMatchRank(callback, this.node);
      },
      initRankListView: function initRankListView(dataList) {
        cc.log(dataList);
        var onAddDataCallback = function(listView, item, data, pos) {
          var AtlasLabel_Rank = item.getChildByName("AtlasLabel_Rank").getComponent(cc.Label);
          var Text_Name = item.getChildByName("Text_Name").getComponent(cc.Label);
          var Image_Avata = item.getChildByName("Image_Avata");
          var AtlasLabel_Reward = item.getChildByName("AtlasLabel_Reward").getComponent(cc.Label);
          Text_Name.string = "";
          Text_Name.ignoreContentAdaptWithSize(true);
          AtlasLabel_Reward.string = data.gold;
          Image_Rank.ignoreContentAdaptWithSize(true);
          AtlasLabel_Rank.active = false;
          AtlasLabel_Rank.active = true;
          AtlasLabel_Rank.string = pos;
          Text_Name.string = tools.getCutStringByCount(data.name, 5);
          var onGetHeadRes = function(headRes) {
            F_SetClipAvataImage(Image_Avata, headRes, false, CLIP_RES_PATH, FRAME_RES_PATH, ccui.TextureResType.localType);
          }.bind(this);
          AvatarManager.requestHeadRes(data.headURL, data.userid, onGetHeadRes, Image_Avata);
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Rank, this.Panel_Rank, 1);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80f0dluu0JAXKGbDABVV4lH", "MatchResult");
    "use strict";
    var BG_MOVE_TIME = .3;
    var PLAY_COUNT = 4;
    var COUNT_TIME = 5;
    cc.Class({
      extends: cc.Component,
      properties: {
        Image_Bg_User0: cc.Node,
        Image_Bg_User1: cc.Node,
        Image_Bg_User2: cc.Node,
        Image_Bg_User3: cc.Node,
        Text_Time: cc.Label,
        Button_Back: cc.Button
      },
      init: function init(delegate, resultInfo, matchPlayerFans, matchPlayerInfos) {
        this._delegate = delegate;
        this._resultInfo = resultInfo || null;
        this.matchPlayerFans = matchPlayerFans || null;
        this.matchPlayerInfos = matchPlayerInfos || null;
        this.isShowMatchLevelUp = false;
        if (void 0 == this._resultInfo) return;
        this.initUIData();
        this.showCountDown();
      },
      getUserCount: function getUserCount() {
        var uerCount = 0;
        for (var k in this._resultInfo.userID) {
          var v = this._resultInfo.userID[k];
          "" != v && v.length >= 6 && (uerCount += 1);
        }
        cc.log("getUserCount = " + uerCount);
        return uerCount;
      },
      doButton_BackClick: function doButton_BackClick() {
        this.isShowMatchLevelUp ? this._delegate.showMatchLevelUp() : GameSocket.getIsSendLogoutRoom() ? this._delegate.removeAllMatchLayer() : this._delegate.showMatchWait();
        this.node.removeFromParent();
      },
      setShowMatchLevelUp: function setShowMatchLevelUp() {
        this.isShowMatchLevelUp = true;
      },
      showCountDown: function showCountDown() {
        var time = COUNT_TIME;
        this.Text_Time.node.active = true;
        this.Text_Time.string = tools.stringFormat("{0}", time);
        var countDown = function() {
          time -= 1;
          if (time <= 0) {
            time = 0;
            if (!this || !this) return;
            this.unschedule(countDown);
            this.doButton_BackClick();
          }
          this.Text_Time.string = tools.stringFormat("{0}", time);
        }.bind(this);
        this.schedule(countDown, 1, false);
      },
      initUIData: function initUIData() {
        var _this = this;
        4 == PLAY_COUNT && (this.Button_Back.node.y = .5 * C_WinSize.height);
        var resultInfo = this._resultInfo;
        for (var i = 0; i < PLAY_COUNT; i++) 0 != resultInfo.userID[i] && function() {
          _this["Image_Bg_User" + i].active = true;
          var Image_Avata = _this["Image_Bg_User" + i].getChildByName("Image_Avata").getComponent(cc.Sprite);
          var Text_Name = _this["Image_Bg_User" + i].getChildByName("Text_Name").getComponent(cc.Label);
          var AtlasLabel_Win = _this["Image_Bg_User" + i].getChildByName("AtlasLabel_Win").getComponent(cc.Label);
          var AtlasLabel_Lose = _this["Image_Bg_User" + i].getChildByName("AtlasLabel_Lose").getComponent(cc.Label);
          var AtlasLabel_Win_All = _this["Image_Bg_User" + i].getChildByName("AtlasLabel_Win_All").getComponent(cc.Label);
          var AtlasLabel_Lose_All = _this["Image_Bg_User" + i].getChildByName("AtlasLabel_Lose_All").getComponent(cc.Label);
          var AtlasLabel_Fan = _this["Image_Bg_User" + i].getChildByName("AtlasLabel_Fan").getComponent(cc.Label);
          AtlasLabel_Win.node.active = false;
          AtlasLabel_Lose.node.active = false;
          AtlasLabel_Win_All.node.active = false;
          AtlasLabel_Lose_All.node.active = false;
          var getUserInfoCallback = function(userInfo) {
            var onGetHeadRes = function(headRes) {
              Image_Avata.spriteFrame = headRes;
            }.bind(this);
            AvatarManager.requestHeadRes(userInfo.headURL, resultInfo.userID[i], onGetHeadRes, Image_Avata, false);
          }.bind(_this);
          Text_Name.string = tools.getCutStringByCount(resultInfo.userName[i], 5);
          UserInfoManager.requestUserInfoByUserID(resultInfo.userID[i], getUserInfoCallback);
          window.matchPlayerFans && (AtlasLabel_Fan.string = window.matchPlayerFans[i] + "\u756a");
          var scoreLabel = void 0;
          if (resultInfo.llAllPoint[i] >= 0) {
            AtlasLabel_Win.node.active = true;
            AtlasLabel_Win.string = "+" + F_GetMoneyDisplay(resultInfo.llAllPoint[i]);
          } else {
            AtlasLabel_Lose.node.active = true;
            AtlasLabel_Lose.string = F_GetMoneyDisplay(resultInfo.llAllPoint[i]);
          }
          if (resultInfo.llAllPoint_ALL[i] >= 0) {
            AtlasLabel_Win_All.node.active = true;
            AtlasLabel_Win_All.string = "+" + F_GetMoneyDisplay(resultInfo.llAllPoint_ALL[i]);
          } else {
            AtlasLabel_Lose_All.node.active = true;
            AtlasLabel_Lose_All.string = F_GetMoneyDisplay(resultInfo.llAllPoint_ALL[i]);
          }
        }();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  MatchReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54cbbjMETNJtIaWWio9ZZYc", "MatchReward");
    "use strict";
    var TYPE_DETAIL = 1;
    var TYPE_RULE = 2;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Button_Rule: cc.Button,
        Button_Detail: cc.Button,
        Image_Rule: cc.Node,
        Panel_Detail: cc.Node,
        ListView_Reward: cc.ScrollView,
        Panel_Reward: cc.Node
      },
      init: function init() {
        this.selectedButtonType = TYPE_DETAIL;
        for (var i = 1; i <= 7; i++) {
          this[tools.stringFormat("Text_{0}", i)] = this.Panel_Detail.getChildByName(tools.stringFormat("Text_{0}", i)).getComponent(cc.Label);
          this[tools.stringFormat("Text_{0}", i)].node.active = false;
        }
        this.Panel_Reward.active = false;
        this.Panel_Detail.active = false;
        this.Image_Rule.active = false;
        this.initSelectedButton();
        this.requestRewardInfo();
      },
      initSelectedButton: function initSelectedButton() {
        this.Button_Rule.interactable = !(this.selectedButtonType == TYPE_RULE);
        this.Button_Detail.interactable = !(this.selectedButtonType == TYPE_DETAIL);
        this.Image_Rule.active = this.selectedButtonType == TYPE_RULE;
        this.Panel_Detail.active = this.selectedButtonType == TYPE_DETAIL;
        if (this.selectedButtonType == TYPE_DETAIL) {
          var callback = function(info) {
            for (var i = 1; i <= 7; i++) this[tools.stringFormat("Text_{0}", i)].node.active = true;
            this[tools.stringFormat("Text_{0}", 1)].string = tools.stringFormat("\u6bd4\u8d5b\u540d\u79f0\uff1a{0}", info.match_name);
            this[tools.stringFormat("Text_{0}", 2)].string = tools.stringFormat("\u6bd4\u8d5b\u7c7b\u578b\uff1a{0}", "\u8840\u6218\u9ebb\u5c06");
            this[tools.stringFormat("Text_{0}", 3)].string = tools.stringFormat("\u6bd4\u8d5b\u65f6\u95f4\uff1a{0}-{1}", info.match_start, info.match_end);
            this[tools.stringFormat("Text_{0}", 4)].string = tools.stringFormat("\u5f00\u8d5b\u95f4\u9694\uff1a{0}\u5206\u949f", info.match_interval);
            this[tools.stringFormat("Text_{0}", 5)].string = tools.stringFormat("\u62a5\u540d\u4eba\u6570\uff1a{0}\u4eba", info.people_count);
            this[tools.stringFormat("Text_{0}", 6)].string = tools.stringFormat("\u62a5\u540d\u8d39\u7528\uff1a{0}", info.fee);
            this[tools.stringFormat("Text_{0}", 7)].string = tools.stringFormat("\u6bd4\u8d5b\u7b79\u7801\uff1a{0}", info.game_money);
          }.bind(this);
          MatchManager.requestMatchConfig(tools.nodeCallback(callback, this.Layer));
        }
      },
      initRewardListView: function initRewardListView(dataList) {
        var onAddDataCallback = function(listView, item, data, pos) {
          var Image_Rank = item.getChildByName("Image_Rank");
          var Text_Rank = item.getChildByName("Text_Rank").getComponent(cc.Label);
          var AtlasLabel_Gold = item.getChildByName("AtlasLabel_Gold").getComponent(cc.Label);
          Image_Rank.active = false;
          Text_Rank.node.active = false;
          if (data.rank_end <= 3) {
            Image_Rank.active = true;
            Image_Rank.loadTexture(tools.stringFormat("Match/MatchReward/{0}", data.rank_end));
          } else {
            Text_Rank.node.active = true;
            data.rank_end == data.rank_start ? Text_Rank.string = tools.stringFormat("\u7b2c{0}\u540d", data.rank_end) : Text_Rank.string = tools.stringFormat("\u7b2c{0}-{1}\u540d", data.rank_start, data.rank_end);
          }
          AtlasLabel_Gold.string = F_GetMoneyDisplay(data.gold);
        }.bind(this);
        F_InitListView(dataList, onAddDataCallback, this.ListView_Reward, this.Panel_Reward, 1);
      },
      requestRewardInfo: function requestRewardInfo() {
        var callback = function(dataList) {
          this.initRewardListView(dataList);
        }.bind(this);
        MatchManager.requestMatchRewardConfig(callback);
      },
      doButton_DetailClick: function doButton_DetailClick() {
        if (this.selectedButtonType == TYPE_DETAIL) return;
        this.selectedButtonType = TYPE_DETAIL;
        this.initSelectedButton();
      },
      doButton_RuleClick: function doButton_RuleClick() {
        if (this.selectedButtonType == TYPE_RULE) return;
        this.selectedButtonType = TYPE_RULE;
        this.initSelectedButton();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MatchWait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d03avyFQdEJbh0eUKiLo0S", "MatchWait");
    "use strict";
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        logon_draw: cc.Node,
        logon_win: cc.Node,
        logon_lose: cc.Node
      },
      init: function init(delegate, resultType) {
        this._delegate = delegate.node;
        this.logon_draw.active = 0 == resultType;
        this.logon_win.active = 1 == resultType;
        this.logon_lose.active = 2 == resultType;
        var frameSize = cc.view.getFrameSize();
        if (frameSize.width / frameSize.height > 2) {
          this.logon_draw.x -= 100;
          this.logon_win.x -= 100;
          this.logon_lose.x -= 100;
        }
      },
      doButton_LookClick: function doButton_LookClick() {
        var onlyMatchInfo = MatchManager.getMyMatchGameInfo();
        GameSocket.requireAllDeskData(onlyMatchInfo.llPartOfMatchID);
        this.doButton_RankClick();
      },
      doButton_RankClick: function doButton_RankClick() {},
      showMatchGameDeskInfo: function showMatchGameDeskInfo() {
        cc.log(this._delegate);
        var layerName = "Match/MatchDeskInfoLayer";
        if (this._delegate.getChildByName("MatchDeskInfoLayer")) return;
        cc.log("addLayershowMatchGameDeskInfo");
        if (!this.curShowMatchGameDeskInfoTime || new Date().getTime() - this.curShowMatchGameDeskInfoTime > 1e3) {
          var callback = function callback(layer) {
            layer.zIndex = G_MATCH_LAYER_TAG;
            layer.name = "MatchDeskInfoLayer";
          };
          var deskInfo = MatchManager.getMatchDeskInfo();
          this.addLayer(this._delegate, layerName, callback, deskInfo);
          this.curShowMatchGameDeskInfoTime = new Date().getTime();
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    LobbyBaseLayer: "LobbyBaseLayer"
  } ],
  MathUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "784d58Ohy1E+Ld8QEvOuG27", "MathUtils");
    "use strict";
    var MathUtils = {
      INT_MAX_VALUE: 2147483647,
      randomInt: function randomInt(range) {
        return Math.round(parseInt(Math.random() * this.INT_MAX_VALUE) % range);
      },
      randomArray: function randomArray(a) {
        a.sort(function() {
          return .5 - Math.random();
        });
      }
    };
    module.exports = MathUtils;
    cc._RF.pop();
  }, {} ],
  MobileLoginScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "350c2IxgWRDpKIs5dWf7kpB", "MobileLoginScene");
    "use strict";
    window.WechatAppID = "wx85e582fb8e80518f";
    window.redirect_uri = "http://h5.ouwan.hmzb.top";
    var gameUrl = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=" + WechatAppID + "&redirect_uri=" + encodeURIComponent(redirect_uri) + "&response_type=code&scope=snsapi_userinfo&state=1#wechat_redirect";
    var LAYOUT_TYPE_LOGIN = 1;
    var LAYOUT_TYPE_REGIST = 2;
    var isDebug = true;
    var BaseLayer = require("BaseLayer");
    var Tools = require("../tools/Tools");
    window.isWeiXin = function() {
      var ua = window.navigator.userAgent.toLowerCase();
      console.log(ua);
      return "micromessenger" == ua.match(/MicroMessenger/i);
    };
    window.ua = navigator.userAgent;
    window.isTablet = function() {
      return /(?:iPad|PlayBook)/.test(ua) || /(?:Android)/.test(ua) && !/(?:Mobile)/.test(ua) || /(?:Firefox)/.test(ua) && /(?:Tablet)/.test(ua);
    };
    window.isIphone = function() {
      return !!/(iPhone|iPad|iPod|iOS)/i.test(ua);
    };
    window.isAndroid = function() {
      return !!/(Android)/i.test(ua);
    };
    window.isPC = function() {
      return !(/(iPhone|iPad|iPod|iOS)/i.test(ua) || /(Android)/i.test(ua) || isTablet());
    };
    window.runAppToSetting = function(configText) {
      cc.sys.localStorage.setItem("is" + G_APP_NAME_EN + "GameStartApp", "1");
    };
    window.nativeNullNet = function(configText) {
      try {
        if ("mLogin" == cc.director.getScene()._name) {
          var currentNode = cc.find("Canvas");
          if (currentNode) {
            var updateComponent = currentNode.getComponent("OfficialHotUpdate");
            updateComponent && updateComponent.checkStopUpdate();
          }
        } else {
          cc.curGameNetWorkType = -1;
          LobbySocket.onDisconnect();
        }
      } catch (e) {}
    };
    cc.Class({
      extends: BaseLayer,
      properties: {
        node_login: cc.Node,
        PCNode: cc.Node,
        btnLogin: cc.Node,
        btnPhone: cc.Node,
        loadingNode: cc.Node,
        loadProgressText: cc.Label,
        loadProgress: cc.ProgressBar,
        loadName: cc.Label,
        loadingBgNode: cc.Node,
        tip_Label: cc.Node,
        latitude1: cc.Label,
        latitude2: cc.Label,
        checkmark: cc.Node,
        toggle: cc.Node
      },
      ctor: function ctor() {
        this.LoginLogic = new (require("LoginLogic"))();
      },
      GetRequest: function GetRequest(requestURLStr) {
        var url = requestURLStr;
        var theRequest = {};
        if (-1 != url.indexOf("?")) {
          var str = url.substr(1);
          var strs = str.split("&");
          for (var i = 0; i < strs.length; i++) theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
        }
        cc.log(theRequest);
        return theRequest;
      },
      onEnable: function onEnable() {},
      onLoad: function onLoad() {
        var _this = this;
        var frameSize = cc.view.getFrameSize();
        cc.view.setOrientation(cc.macro.ORIENTATION_PORTRAIT);
        frameSize.width > frameSize.height && cc.view.setFrameSize(frameSize.height, frameSize.width);
        cc.game.setFrameRate(60);
        window.GameEvent = new cc.EventTarget();
        ConfigDataManager.getConfigData();
        document.title = G_APP_NAME_CH;
        cc.sys.localStorage.setItem(G_LIVE_BROADCAST, 1);
        this.loadingNode.active = true;
        if (cc.sys.isNative) {
          window.isRelease = true;
          if (!cc.jsbMgr) {
            var jsbMgr = require("JsbMgr");
            cc.jsbMgr = new jsbMgr();
          }
        } else {
          this.node_login.active = false;
          var host = window.location.host;
          window.isRelease = host.indexOf("localhost") < 0 && host.indexOf("192.168.") < 0;
          this.theRequest = this.GetRequest(window.location.search);
          window.vedioFileId = Tools.getQueryString("fileID");
          this.getRequest();
        }
        !cc.sys.isNative && isRelease && this.loadingBgNode && (this.loadingBgNode.active = true);
        cc.director.once(cc.Director.EVENT_AFTER_SCENE_LAUNCH, function() {
          _this.scheduleOnce(function() {
            _this.loadProgress.progress += .08;
            if (cc.sys.isNative) {
              _this.loadProgress.progress += .1;
              _this.isLoadedScene = true;
            } else cc.director.preloadScene("lobby", null, function() {
              _this.loadProgress.progress += .1;
              _this.isLoadedScene = true;
            });
          }, 0);
          !cc.sys.isNative && isRelease && (_this.loadingBgNode.active = false);
          if (cc.sys.isNative) try {
            var isEnableRemoveLaunchImage = false;
            var GameBuildVerionCode = cc.sys.localStorage.getItem(G_APP_NAME_EN + "GameBuildVerionCode");
            isEnableRemoveLaunchImage = !GameBuildVerionCode;
            isEnableRemoveLaunchImage && _this.scheduleOnce(function() {
              cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "removeLaunchImage", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("AppController", "removeLaunchImage");
            }, cc.sys.os == cc.sys.OS_IOS ? 1.2 : 3.5);
          } catch (e) {}
        });
        this.loadIndex = 0;
        this.loadPreData = [ {
          preName: "LoadingLayer",
          url: "prefab/",
          showName: "",
          loadLocationType: "mLogin"
        }, {
          preName: "RepeatConnectLayer",
          url: "prefab/",
          showName: "",
          loadLocationType: "mLogin"
        }, {
          preName: "NewhandrewardPrefab",
          url: "prefab/",
          showName: "",
          loadLocationType: "mLogin"
        }, {
          preName: "personMsgDialog",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "mLogin"
        }, {
          preName: "LayoutPersonalInformation",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "mLogin"
        }, {
          preName: "LayoutShop",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "personVideoDialog",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutLobby",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutMatch",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "MsgBoxPrefab",
          url: "prefab/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "TipLayerPrefab",
          url: "prefab/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "TipLayerPrefabhe",
          url: "prefab/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutActivity",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutChongGuan",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutExchange",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutGiveGiftCard",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutMyHome",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutNotice",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutProposal",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "GameSetting",
          url: "prefab/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LayoutVenueSelection",
          url: "prefab/lobby/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "LobbyCreaterImage",
          url: "prefab/",
          showName: "",
          loadLocationType: "lobby"
        }, {
          preName: "GameSetLayer",
          url: "prefab/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        }, {
          preName: "VoiceLayer",
          url: "prefab/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        }, {
          preName: "GameCreaterImage",
          url: "prefab/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        }, {
          preName: "ChatLayer",
          url: "prefab/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        }, {
          preName: "gameOver",
          url: "HZMJ/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        }, {
          preName: "MatchCheckPointResultLayer",
          url: "prefab/Match/",
          showName: "",
          loadLocationType: "Game_HZMJ"
        } ];
        cc.loadData = {};
        cc.loadData.loadLobbyPreData = [];
        cc.loadData.loadLobbyPreDataIndex = 0;
        cc.loadData.loadGamePreData = [];
        cc.loadData.loadGamePreDataIndex = 0;
        for (var index = this.loadPreData.length - 1; index >= 0; index--) if ("lobby" == this.loadPreData[index].loadLocationType) {
          cc.loadData.loadLobbyPreData.unshift(this.loadPreData[index]);
          this.loadPreData.splice(index, 1);
        } else if ("Game_HZMJ" == this.loadPreData[index].loadLocationType) {
          cc.loadData.loadGamePreData.unshift(this.loadPreData[index]);
          this.loadPreData.splice(index, 1);
        }
        this.loadProgress.progress = 0;
        this.programNum = 0;
        this.isComplite = false;
        this.loadFinish = function() {
          _this.loadIndex++;
          _this.programNum = _this.loadIndex / _this.loadPreData.length;
          _this.loadingFlag = false;
        };
        if (!cc.checkIsFrontBack) {
          cc.checkIsFrontBack = true;
          this.checkIsFrontStage();
        }
        this.getGameList();
      },
      getGameList: function getGameList() {
        var callback = function(gameList) {
          if (0 !== gameList.length) {
            cc.log("\u6e38\u620f\u5217\u8868\u4fe1\u606f\u83b7\u53d6\u5b8c\u6bd5,\u5f00\u59cb\u83b7\u53d6\u6240\u6709\u623f\u95f4\u5217\u8868\u4fe1\u606f");
            var roomListCallback = function(roomList) {
              cc.log("\u623f\u95f4\u5217\u8868\u4fe1\u606f\u6570\u636e:", roomList);
            }.bind(this);
            RoomListManager.requestAllRoomList(roomListCallback);
          } else cc.log(" \u6e38\u620f\u5217\u8868\u83b7\u53d6\u5931\u8d25 ");
        }.bind(this);
        GameListManager.requestGameList(callback);
      },
      onBtnLogin: function onBtnLogin() {
        var _this2 = this;
        if (this.isClick) return;
        this.isClick = true;
        this.scheduleOnce(function() {
          _this2.isClick = false;
        }, .8);
        if (this.isComplite) {
          this.replaceWxURL();
          return;
        }
        this.loadingNode.active = true;
      },
      onBtnPhone: function onBtnPhone() {
        this.PCNode.active = true;
        this.node_login.active = false;
      },
      toLoginData: function toLoginData() {
        var that = this;
        var callback = function(Info) {
          that.tryToWechatLogin();
        }.bind(this);
        var uncallback = function(msg) {
          var btnName1 = "\u786e\u5b9a";
          var msgCallback = function(btnName) {
            that.replaceWxURL();
          }.bind(this);
          var msgObj = {};
          msgObj.msg = msg;
          msgObj.btn1 = btnName1;
          msgObj.callbackFun = msgCallback;
          createMsgBox(msgObj);
        }.bind(this);
        ConfigDataManager.getServerStatus(callback, uncallback);
      },
      compliteLogin: function compliteLogin() {
        if (1 == window.G_GAMESEVER_KEY) {
          if (cc.sys.isMobile) this.toLoginData(); else if (!window.isRelease) {
            this.node_login.active = true;
            this.loadingNode.active = false;
            this.setZhangHaoLogin();
          }
        } else {
          this.node_login.active = true;
          this.loadingNode.active = false;
          this.setZhangHaoLogin();
        }
      },
      start: function start() {
        window.prefabMap = new Map();
      },
      update: function update(dt) {
        if (!cc.sys.isNative) {
          if (this.loadProgress.progress >= 1 && !this.isComplite) {
            this.isComplite = true;
            this.compliteLogin();
          }
          this.isComplite || (this.loadProgress.progress < this.programNum ? this.loadProgress.progress += .005 : this.loadPre());
        }
      },
      loadResult: function loadResult(err, result, preResourceKey) {
        if (err || !result) cc.error("\u672a\u5b9a\u4e49\u7684\u9884\u5236\u4f53\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u8d44\u6e90" + preResourceKey); else {
          "object" == typeof result && window.prefabMap.set(preResourceKey + "", result);
          this.loadFinish();
          cc.sys.isNative && cc.loadData.loadLobbyPreDataIndex >= cc.loadData.loadLobbyPreData.length && this.checkPreLoadScence();
        }
      },
      loadPre: function loadPre() {
        var _this3 = this;
        if (this.loadingFlag) return;
        this.loadingFlag = true;
        var preData = this.loadPreData[this.loadIndex];
        if (!preData) return;
        "" != preData.showName && (this.loadName.string = preData.showName);
        "Texture" == preData.preName ? cc.loader.loadResDir(preData.url, cc.SpriteFrame, function(completedCount, totalCount, item) {}, function() {
          _this3.loadResult(null, "Texture", preData.url);
        }) : "TextureAtlas" == preData.preName ? cc.loader.loadResDir(preData.url, cc.SpriteAtlas, function(completedCount, totalCount, item) {}, function() {
          _this3.loadResult(null, "TextureAtlas", preData.url);
        }) : "bitmapFont" == preData.preName ? cc.loader.loadRes(preData.url, cc.BitmapFont, function(err, font) {
          _this3.loadResult(null, font, "bitmapFont" + preData.url);
        }) : "json" == preData.preName ? cc.loader.loadRes(preData.url, cc.JsonAsset, function(err, json) {
          _this3.loadResult(null, json, "json" + preData.url);
        }) : cc.loader.loadRes(preData.url + preData.preName, function(err, result) {
          _this3.loadResult(err, result, preData.url + preData.preName);
        });
      },
      getRequest: function getRequest() {
        window.code = this.theRequest.code;
        window.ShartuserID = this.theRequest.state;
        this.theRequest.state ? cc.sys.localStorage.setItem(G_SHARE_USERID, this.theRequest.state) : cc.sys.localStorage.setItem(G_SHARE_USERID, 0);
        window.username = this.theRequest.username;
        window.password = this.theRequest.password;
      },
      replaceWxURL: function replaceWxURL() {},
      setZhangHaoLogin: function setZhangHaoLogin() {
        if (isDebug) {
          this.layoutType = LAYOUT_TYPE_LOGIN;
          this.initUI();
          this.initUIData();
        }
      },
      tryToWechatLogin: function tryToWechatLogin() {
        if (window.code) this.wechatLogin(this.theRequest); else if (window.username && window.password) {
          var args = {};
          args.unionid = "";
          args.regType = E_RegType.MOB;
          args.regWay = E_RegWay.COMMON;
          args.acc = window.username;
          args.psw = window.password;
          args.regStatus = E_RegStatus.LOGIN;
          args.sex = E_UserSex.MALE;
          args.headURL = "";
          this.doLoginWechat(args);
          this.btnLogin.active = false;
          this.btnPhone.active = false;
        } else if (cc.sys.isMobile) this.replaceWxURL(); else {
          if (!isDebug && (cc.sys.isMobile || window.isRelease)) return;
          this.replaceWxURL();
        }
      },
      setLayout: function setLayout() {
        if (this.layoutType === LAYOUT_TYPE_LOGIN) {
          if (!this.login_acc) {
            var localLoginAcc = cc.sys.localStorage.getItem(G_ACCOUNT_KEY);
            this.login_acc = localLoginAcc || "";
          }
          if (!this.login_pwd) {
            var localPwdAcc = cc.sys.localStorage.getItem(G_PASSWARD_KEY);
            this.login_pwd = localPwdAcc || "";
          }
          this.editboxAccount.string = this.login_acc;
          this.editboxPassword.string = this.login_pwd;
        } else if (this.layoutType === LAYOUT_TYPE_REGIST) {
          this.regist_acc = this.regist_acc ? this.regist_acc : "";
          this.regist_pwd = this.regist_pwd ? this.regist_pwd : "";
          this.editboxAccount.string = this.regist_acc;
          this.editboxPassword.string = this.regist_pwd;
        }
      },
      initUI: function initUI() {
        this.editboxAccount = cc.find("Canvas/Window_Layout/Editbox_Acc").getComponent(cc.EditBox);
        this.editboxPassword = cc.find("Canvas/Window_Layout/Editbox_Pwd").getComponent(cc.EditBox);
      },
      initUIData: function initUIData() {
        this.setLayout();
      },
      wechatLogin: function wechatLogin(theRequest) {
        console.log("wechat auth login wxcode:", window.code);
        var that = this;
        var callback = function(Info) {
          var userInfo = Info;
          var args = {};
          args.unionid = userInfo.openid;
          args.regType = E_RegType.MOB;
          args.regWay = E_RegWay.WECHAT;
          var userInfonickname = userInfo.nickname;
          var percent2percent25 = function percent2percent25(URI) {
            return URI.indexOf("%") > -1 ? URI.replace(/%/g, "%25") : URI;
          };
          userInfonickname = percent2percent25(userInfonickname);
          var nickname = encodeURI(userInfonickname);
          args.acc = nickname;
          args.psw = hex_md5(userInfo.openid);
          args.regStatus = E_RegStatus.REG;
          args.sex = 1 == userInfo.sex ? 1 : 0;
          args.headURL = userInfo.headimgurl;
          console.log("wechat login to game srv", args);
          that.doLoginWechat(args);
        }.bind(this);
        var Callback2 = function Callback2() {
          that.replaceWxURL();
        };
        ConfigDataManager.getWxUserInfo(theRequest.code, callback, Callback2);
      },
      saveWeDataToLocal: function saveWeDataToLocal(args) {},
      doLoginLobby: function doLoginLobby(acc, pwd, status, realPwd) {
        cc.log("acc = ", acc);
        var onRegistResult = function(bResult, userID, userToken) {
          var _this4 = this;
          if (bResult) {
            var toLogin = function toLogin() {
              LobbySocket.setLoginDelegate(_this4);
              if (status === E_RegStatus.LOGIN) _this4.LoginLogic.loginLobby(userID, userToken); else {
                var btnName1 = "\u786e \u5b9a";
                var btnName2 = "\u53d6 \u6d88";
                var msgCallback = function(btnName) {
                  btnName === btnName1 && this.LoginLogic.loginLobby(userID, userToken);
                }.bind(_this4);
                var msgObj = {};
                msgObj.msg = "\u6ce8\u518c\u6210\u529f, \u76f4\u63a5\u767b\u5f55\u5427";
                msgObj.btn1 = "\u786e \u5b9a";
                msgObj.btn2 = "\u53d6 \u6d88";
                msgObj.callbackFun = msgCallback;
                createMsgBox(msgObj);
              }
            };
            if (cc.sys.isNative && cc.sys.OS_ANDROID == cc.sys.os) {
              this.node_login.active = false;
              this.PCNode.active = false;
              this.loadProgress.progress = .1;
              this.loadingNode.active = true;
              var beforeMaxConcurrent = cc.macro.DOWNLOAD_MAX_CONCURRENT;
              cc.macro.DOWNLOAD_MAX_CONCURRENT = 2;
              this.checkPreLoadScence(this.loadProgress, function() {
                cc.macro.DOWNLOAD_MAX_CONCURRENT = beforeMaxConcurrent;
                toLogin();
              });
            } else toLogin();
          }
        }.bind(this);
        var args = {};
        args.unionid = "";
        args.regType = E_RegType.PC;
        args.regWay = E_RegWay.COMMON;
        args.acc = acc;
        args.psw = pwd;
        args.regStatus = status;
        args.sex = E_UserSex.MALE;
        args.headURL = "";
        this.LoginLogic.accountRegist(args, onRegistResult, realPwd);
      },
      vertifyAccountPwdText: function vertifyAccountPwdText(t, isPwd) {
        if (isPwd && 32 === t.length) return true;
        if ("" === t || t.length < 6 || t.length > 16) return false;
        return true;
      },
      doButtonLoginClick: function doButtonLoginClick() {
        var acc = this.editboxAccount.string;
        var pwd = this.editboxPassword.string;
        cc.log("doButtonLoginClick", acc, pwd);
        if (this.layoutType === LAYOUT_TYPE_LOGIN) {
          if (!this.vertifyAccountPwdText(acc)) {
            createTips("\u8bf7\u8f93\u51656-16\u4f4d\u8d26\u53f7");
            return;
          }
          32 === pwd.length ? this.doLoginLobby(acc, pwd, E_RegStatus.LOGIN, pwd) : this.doLoginLobby(acc, hex_md5(pwd), E_RegStatus.LOGIN, pwd);
        } else if (this.layoutType === LAYOUT_TYPE_REGIST) {
          this.regist_acc = acc || "";
          this.regist_pwd = pwd || "";
          this.layoutType = LAYOUT_TYPE_LOGIN;
          this.setLayout();
        }
      },
      doButtonRegistClick: function doButtonRegistClick() {
        var acc = this.editboxAccount.string;
        var pwd = this.editboxPassword.string;
        if (this.layoutType === LAYOUT_TYPE_REGIST) {
          if (!this.vertifyAccountPwdText(acc)) {
            createTips("\u8bf7\u8f93\u51656-16\u4f4d\u8d26\u53f7");
            return;
          }
          if (!this.vertifyAccountPwdText(pwd, true)) {
            createTips("\u8bf7\u8f93\u51656-16\u4f4d\u5bc6\u7801");
            return;
          }
          this.doLoginLobby(acc, hex_md5(pwd), E_RegStatus.REG, pwd);
        } else if (this.layoutType === LAYOUT_TYPE_LOGIN) {
          this.login_acc = acc || "";
          this.login_pwd = pwd || "";
          this.layoutType = LAYOUT_TYPE_REGIST;
          this.setLayout();
        }
      },
      onDestroy: function onDestroy() {
        this._super();
        LobbySocket.setLoginDelegate(null);
      },
      doLoginWechat: function doLoginWechat(args) {
        var onRegistResult = function(bResult, userID, userToken) {
          if (bResult) {
            LobbySocket.setLoginDelegate(this);
            this.LoginLogic.loginLobby(userID, userToken);
          }
        }.bind(this);
        this.LoginLogic.accountRegist(args, onRegistResult);
      },
      isToggle: function isToggle() {
        this.btnLogin.getComponent(cc.Button).interactable = this.checkmark.active;
        this.btnPhone.getComponent(cc.Button).interactable = this.checkmark.active;
      }
    });
    cc._RF.pop();
  }, {
    "../tools/Tools": "Tools",
    BaseLayer: "BaseLayer",
    JsbMgr: "JsbMgr",
    LoginLogic: "LoginLogic"
  } ],
  MsgBoxLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7312eyFMcRDnqSJVKkaR/im", "MsgBoxLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        btnSure: cc.Button,
        sureLabel: cc.Label,
        btnCancel: cc.Button,
        cancelLabel: cc.Label,
        btnClose: cc.Button,
        msgLabel: cc.Label
      },
      onLoad: function onLoad() {
        this._super();
        this.node.setPosition(cc.v2(cc.winSize.width / 2, cc.winSize.height / 2));
      },
      init: function init(msgObj) {
        this.msgObj = msgObj;
        var sure = this.btnSure.getComponent(cc.Button);
        var sureName = this.sureLabel.getComponent(cc.Label);
        var cancel = this.btnCancel.getComponent(cc.Button);
        var cancelName = this.cancelLabel.getComponent(cc.Label);
        var msgText = this.msgLabel.getComponent(cc.Label);
        this.node.name = msgObj.msg;
        this.callbackFun = msgObj.callbackFun;
        msgText.string = msgObj.msg;
        cc.log(msgObj);
        if (msgObj.btn2) ; else {
          var pos = cc.v2(.5 * (sure.node.getPosition().x + cancel.node.getPosition().x), sure.node.getPosition().y);
          sure.node.setPosition(pos);
          cancel.node.parent = null;
        }
      },
      removeLayer: function removeLayer() {},
      onButtonClick: function onButtonClick(event, param) {
        switch (param) {
         case "cancel":
          this.callbackFun(this.msgObj.btn2);
          break;

         case "sure":
          this.callbackFun(this.msgObj.btn1);
        }
        this.node.parent = null;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  MsgBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9d70H3wVhDYL5yRQYuuV4u", "MsgBox");
    "use strict";
    window.createTips = function(msg, delayTime) {
      var TipLayerPrefabName = "";
      var frameSize = cc.view.getFrameSize();
      TipLayerPrefabName = frameSize.height > frameSize.width ? "prefab/TipLayerPrefabhe" : "prefab/TipLayerPrefab";
      cc.loader.loadRes(TipLayerPrefabName, function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName(msg);
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        var tipLayerPrefab = cc.instantiate(loadedResource);
        var tipScript = tipLayerPrefab.getComponent("TipLayer");
        msg && msg.length > 0 && msg.indexOf("\u8d44\u6e90") >= 0 && (msg.indexOf("\u4e0d\u8db3") >= 0 || msg.indexOf("\u4e0d\u591f") >= 0) && (msg = msg.replace("\u8d44\u6e90", "\u91d1\u5e01"));
        tipScript.initTip(msg, delayTime);
        cc.director.getScene().addChild(tipLayerPrefab, 8887);
      });
    };
    var updateOrientation = function updateOrientation() {
      var orientation = window.orientation;
      switch (orientation) {
       case 90:
       case -90:
        orientation = "landscape";
        setTimeout(function() {}, 500);
      }
      document.body.parentNode.setAttribute("class", orientation);
    };
    window.addEventListener("orientationchange", updateOrientation, false);
    window.createClickTips = function(msg, callBack) {
      var TipLayerPrefabName = "";
      var frameSize = cc.view.getFrameSize();
      TipLayerPrefabName = frameSize.height > frameSize.width ? "prefab/TipLayerPrefabhe" : "prefab/TipLayerPrefab";
      cc.loader.loadRes(TipLayerPrefabName, function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName(msg);
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        var tipLayerPrefab = cc.instantiate(loadedResource);
        var tipScript = tipLayerPrefab.getComponent("TipLayer");
        tipScript.initClickTip(msg, callBack);
        cc.director.getScene().addChild(tipLayerPrefab, 888887);
      });
    };
    window.createMsgBox = function(msgObj, parent) {
      var showBoxTip = function showBoxTip(createMsgBoxFab) {
        var node = cc.director.getScene().getChildByName(msgObj.msg);
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var msgBoxPrefab = cc.instantiate(createMsgBoxFab);
        var tipScript = msgBoxPrefab.getComponent("MsgBoxLayer");
        tipScript.init(msgObj);
        parent.addChild(msgBoxPrefab, 8887);
      };
      var MsgBoxPrefab = window.prefabMap.get("prefab/MsgBoxPrefab");
      MsgBoxPrefab ? showBoxTip(MsgBoxPrefab) : cc.loader.loadRes("prefab/MsgBoxPrefab", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25createMsgBox\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        showBoxTip(loadedResource);
      });
    };
    window.createQustion = function(parent) {
      cc.loader.loadRes("prefab/QustionPrefab", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName("QustionPrefab");
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var QustionPrefab = cc.instantiate(loadedResource);
        parent.addChild(QustionPrefab, 8887);
      });
    };
    window.LobbyCreaterImage = function(parent) {
      cc.loader.loadRes("prefab/LobbyCreaterImage", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName("LobbyCreaterImage");
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var LobbyCreaterImagePrefab = cc.instantiate(loadedResource);
        parent.addChild(LobbyCreaterImagePrefab, 8887);
      });
    };
    window.LobbyurlShart = function(parent) {
      cc.loader.loadRes("prefab/LobbyURLShart", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName("LobbyURLShart");
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var LobbyURLShartPrefab = cc.instantiate(loadedResource);
        parent.addChild(LobbyURLShartPrefab, 8887);
      });
    };
    window.createNewhandReward = function(giftCard, money, parent) {
      cc.loader.loadRes("prefab/NewhandrewardPrefab", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        var node = cc.director.getScene().getChildByName("NewhandrewardPrefab");
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var NewhandrewardPrefab = cc.instantiate(loadedResource);
        var tipScript = NewhandrewardPrefab.getComponent("NewhandReward");
        tipScript.init(giftCard, money);
        parent.addChild(NewhandrewardPrefab, 8e3);
      });
    };
    window.createPersonRealNameMsgBox = function(msgObj, parent) {
      var showRealNameBoxTip = function showRealNameBoxTip(createPersonRealNameMsgBoxFab) {
        var node = cc.director.getScene().getChildByName(msgObj.msg);
        if (null !== node) {
          node.stopAllActions();
          node.destroy();
        }
        parent || (parent = cc.director.getScene());
        var PersonRealNameMsgBoxfab = cc.instantiate(createPersonRealNameMsgBoxFab);
        var tipScript = PersonRealNameMsgBoxfab.getComponent("PersonRealNameMsgBoxLayout");
        tipScript.init(msgObj);
        parent.addChild(PersonRealNameMsgBoxfab, 8886);
      };
      var PersonRealNameMsgBoxfab = window.prefabMap.get("prefab/PersonRealNameMsgBoxPrefab");
      PersonRealNameMsgBoxfab ? showRealNameBoxTip(PersonRealNameMsgBoxfab) : cc.loader.loadRes("prefab/PersonRealNameMsgBoxLayout", function(err, loadedResource) {
        if (err) {
          cc.log("\u8f7d\u5165\u9884\u5236\u8d44\u6e90\u5931\u8d25PersonRealNameMsgBoxLayout\uff0c \u539f\u56e0:" + err);
          return;
        }
        if (!(loadedResource instanceof cc.Prefab)) {
          cc.log(" \u4f60\u8f7d\u5165\u7684\u4e0d\u662f\u9884\u5236\u8d44\u6e90 ");
          return;
        }
        showRealNameBoxTip(loadedResource);
      });
    };
    window.createRepeatConnectLayer = function(node) {
      console.log(">>>>>>>createRepeatConnectLayer \u51c6\u5907...");
      if (GameSocket.getIsSendLogoutRoom()) return;
      if (window.repeatConnectLayer) return;
      console.log(">>>>>>>createRepeatConnectLayer \u8fdb\u6765\u4e86...");
      cc.loader.loadRes("prefab/RepeatConnectLayer", function(err, prefab) {
        if (err) return;
        console.log(">>>>>>>RepeatConnectLayer \u521d\u59cb\u5316\u9884\u5236\u4f53\u5b8c\u6bd5...");
        var layer = cc.instantiate(prefab);
        layer.setPosition(cc.v2(cc.winSize.width / 2, cc.winSize.height / 2));
        layer.name = "RepeatConnectLayer";
        node ? node.addChild(layer) : console.log(">>>\u6ca1\u6709node>>>\u6ca1\u6709node>>>\u6ca1\u6709node>>>\u6ca1\u6709node>>>\u6ca1\u6709node>>>\u6ca1\u6709node");
        window.repeatConnectLayer = layer;
      });
    };
    cc._RF.pop();
  }, {} ],
  MyAwardInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02f62HGdEFKZb64IS/8G7X/", "MyAwardInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: cc.Label,
        week_money: cc.Label,
        not_under_achievement: cc.Label,
        under_achievement: cc.Label,
        rmb: cc.Label,
        status: cc.Label
      },
      init: function init(info) {
        var date = new Date(1e3 * (info.time || 0));
        var Y = date.getFullYear() + "";
        var M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "";
        var D = (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) + "";
        this.timeLabel.string = String(Y + "/" + M + "/" + D);
        this.week_money.string = String(Number(info.week_money / G_MULTI_NUM));
        this.not_under_achievement.string = String(Number(info.not_under_achievement / G_MULTI_NUM));
        this.under_achievement.string = String(Number(info.under_achievement / G_MULTI_NUM));
        this.rmb.string = String(Number(info.rmb / G_MULTI_NUM));
        this.status.string = info.status;
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  MyHttpRequest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4ec67OTlMJN1L+6ym0pjswl", "MyHttpRequest");
    "use strict";
    var MyHttpRequest = {
      doRequest: function doRequest(args) {
        var requestType = E_REQUEST_TYPE.POST;
        args.responseType && (requestType = args.responseType);
        args.url || (args.url = NetConfig.getPHPUrl());
        args.url = args.url;
        var requestDesc = args.requestDesc;
        var params = args.params;
        var isSign = args.isSign;
        if (isSign) {
          params.deviceType = 1;
          var tmp = Date.parse(new Date()).toString();
          params.timestamp = Number(tmp.substr(0, 10));
          params.random = tools.getRandomStr(parseInt(32 * Math.random()));
          params.uuid = "A1D62-DAB28-80Z59-ACW87-1ETD9";
          cc.log(Base64.encode(hex_md5(objKeySort(params))));
          cc.log(Base64.encode(hex_md5(objKeySort(JSON.stringify(params)))));
          params.sign = Base64.encode(hex_md5(objKeySort(params)));
        }
        function objKeySort(obj) {
          var newkey = Object.keys(obj).sort();
          var newURL = "";
          for (var i = 0; i < newkey.length; i++) newURL += ("" != newURL ? "&" : "") + newkey[i] + "=" + obj[newkey[i]];
          return newURL;
        }
        var url = args.url;
        var xhr = cc.loader.getXMLHttpRequest();
        requestType === E_REQUEST_TYPE.GET && (url += tools.convertGetParams(params));
        cc.log("url : " + url);
        xhr.open(requestType, url, true);
        cc.sys.isNative && xhr.setRequestHeader("Accept-Encoding", "gzip,deflate", "text/html;charset=UTF-8");
        var sCallback = args.sCallback;
        var fCallback = args.fCallback;
        var err = false;
        xhr.onreadystatechange = function() {
          var response = xhr.responseText;
          if (2 == xhr.readyState || 3 == xhr.readyState) ; else if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207) {
            requestDesc && removeLoading && removeLoading();
            if (sCallback) if (response) {
              var data = JSON.parse(response);
              sCallback(data);
            } else sCallback(data);
          } else {
            cc.log(tools.getCurTime() + " http request failed method:" + requestType + " url:" + url + " issign:" + isSign + " data:", sendData, "xhr.readyState:" + xhr.readyState + " xhr.status:" + xhr.status);
            requestDesc && removeLoading && removeLoading();
            fCallback && fCallback();
          }
        }, xhr.ontimeout = function() {
          return args.ontimeout && args.ontimeout();
        }, xhr.onerror = function(ms, Url, Line) {
          return true;
        };
        var sendData = null;
        if (requestType === E_REQUEST_TYPE.POST) {
          sendData = tools.convertPostParams(params);
          xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        }
        xhr.send(sendData);
        requestDesc && createLoading && createLoading(requestDesc);
      }
    };
    module.exports = MyHttpRequest;
    cc._RF.pop();
  }, {} ],
  NJJ_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "815ee6EeWpJPKRt/q1dPLJf", "NJJ_ZhanJi_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        cards: cc.Node,
        cardItem: cc.Node,
        bankerView: cc.Node,
        nnCardsAtlas: cc.SpriteAtlas,
        nnTipsAtlas: cc.SpriteAtlas,
        cardTips: cc.Sprite
      },
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.bankerView.active = data.isBanker;
        for (var i = 0; i < data.handCards.length; i++) if (255 != data.handCards[i]) {
          var card = this.cards.children[i];
          card.setContentSize(cc.size(75, 90));
          card.active = true;
          card.getComponent(cc.Sprite).spriteFrame = this.nnCardsAtlas.getSpriteFrame(data.handCards[i]);
          0 == data.cardShape && (3 != i && 4 != i || (card.y = -45));
        } else this.cards.children[i].active = false;
        this.cardTips.spriteFrame = this.nnTipsAtlas.getSpriteFrame("card_result" + data.cardShape);
      }
    });
    cc._RF.pop();
  }, {} ],
  NetConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c8d2DqCf5C5K2u82LvnwkJ", "NetConfig");
    "use strict";
    module.exports = {
      getServerAddress: function getServerAddress() {
        return G_HTTP_DOMAIN;
      },
      getAgentServer: function getAgentServer() {
        return G_AGENT_SERVER;
      },
      getServerPort: function getServerPort() {
        return G_SERVER_PORT;
      },
      setServerAddress: function setServerAddress(address) {
        G_HTTP_DOMAIN = address;
      },
      setServerPort: function setServerPort(port) {
        G_SEND_PORT = port;
      },
      getPHP_IP: function getPHP_IP() {
        return G_PHP_IP;
      },
      getSendPort: function getSendPort() {
        return G_SEND_PORT;
      },
      getPHPUrl: function getPHPUrl() {
        var template = "https://" + this.getPHP_IP() + "/hm_ucenter/web/index.php";
        return template;
      },
      getHttpDomain: function getHttpDomain() {
        return G_HTTP_DOMAIN;
      },
      getSecretKey: function getSecretKey() {
        return G_SECRET_KEY;
      },
      isLocalServerAddress: function isLocalServerAddress() {
        var ip = this.getServerAddress();
        var strTab = ip.split(".");
        if ("192" == strTab[1] && "168" == strTab[2]) return true;
        return false;
      },
      getServerConfigByID: function getServerConfigByID(id) {
        for (var i in G_SERVER_LIST) {
          var config = G_SERVER_LIST[i];
          if (config.id == id) return config;
        }
        this.setServerConfigID(G_SERVER_LIST[1].id);
        return G_SERVER_LIST[1];
      },
      getServerConfigID: function getServerConfigID() {
        return cc.sys.localStorage.getItem(G_SELECTED_SERVER_ID);
      },
      setServerConfigID: function setServerConfigID(id) {
        cc.sys.localStorage.setItem(G_SELECTED_SERVER_ID, id);
      },
      initServerConfig: function initServerConfig() {
        var id = this.getServerConfigID();
        var config = this.getServerConfigByID(id);
      },
      isTestServer: function isTestServer() {
        return 1 != this.getServerConfigID();
      }
    };
    cc._RF.pop();
  }, {} ],
  NetResManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a34dX5BvBD/5T3N7jB1pmB", "NetResManager");
    "use strict";
    module.exports = cc.Class({
      ctor: function ctor() {},
      requestNetRes: function requestNetRes(url, spUI, callback) {
        cc.loader.load({
          url: url,
          type: "png"
        }, function(err, res) {
          if (err) {
            console.error("requestNetRes failed url:" + url, err.message || err);
            return;
          }
          var sf = new cc.SpriteFrame(res);
          if (spUI && cc.isValid(spUI)) {
            var aaa = spUI.getComponent(cc.Sprite);
            aaa.spriteFrame = sf;
          }
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  NewScript: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd1fd2r54BPgppEyp9Gs/b1", "NewScript");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  NewhandReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38830dKCnpChbk4zqCcOnh9", "NewhandReward");
    "use strict";
    var TOGGLE_INDEX = {
      toggle1: 0,
      toggle2: 1
    };
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        SexNode: cc.Node,
        PlayinforNode: cc.Node,
        rewardNode: cc.Node,
        toggleboy: cc.Toggle,
        togglegirt: cc.Toggle,
        IphoneEdit: cc.EditBox,
        CodeEdit: cc.EditBox,
        adressEdit: cc.EditBox,
        labjuan: cc.Label,
        labgold: cc.Label
      },
      onLoad: function onLoad() {
        this._super();
        this.SexNode.active = true;
        this.rewardNode.active = false;
        this.PlayinforNode.active = false;
        this.node.setPosition(cc.v2(cc.winSize.width / 2, cc.winSize.height / 2));
        var LobbyLogic = new (require("LobbyLogic"))();
        var myInfo = LobbyLogic.getMyInfo();
        this.myInfo = myInfo;
        1 == myInfo.sex ? this.toggleboy.getComponent(cc.Toggle).check() : this.togglegirt.getComponent(cc.Toggle).check();
      },
      init: function init(giftCard, money) {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.labjuan.string = "x" + String(giftCard);
        this.labgold.string = "x" + String(money / 100);
        var nowPhone = this.LobbyLogic.getPhone();
        var nowaddress = this.LobbyLogic.getGoodsAddress();
        0 == nowPhone && (nowPhone = "");
        0 == nowaddress && (nowaddress = "");
        this.IphoneEdit.string = nowPhone;
        this.adressEdit.string = nowaddress;
      },
      onSexXiuGai: function onSexXiuGai(toggle) {
        var sex = TOGGLE_INDEX[toggle.node.name];
        cc.log(sex);
        if (sex == this.myInfo.sex) return;
        var that = this;
        var changeSexCallBack = function changeSexCallBack() {
          that.myInfo.sex = sex;
          UserInfoManager.setMyInfo(that.myInfo);
        };
        UserInfoManager.requestChangeUserSex(sex, changeSexCallBack);
      },
      onButtonClick: function onButtonClick(event, param) {
        var _this = this;
        switch (param) {
         case "btn_next":
          this.SexNode.active = false;
          this.rewardNode.active = false;
          this.PlayinforNode.active = true;
          break;

         case "btn_lq":
          var callback = function callback() {
            createTips("\u606d\u559c\u60a8\u83b7\u5f97\u65b0\u624b\u793c\u5305\uff0c\u5956\u52b1\u7a0d\u540e\u5230\u8d26\u8bf7\u6ce8\u610f\u67e5\u6536\uff01");
            _this.onCloseBtn();
          };
          this.LobbyLogic.requestLogonUserinfoFlush(1, callback);
          break;

         case "btn_tg1":
         case "btn_tg2":
          var that = this;
          var btnName1 = "\u786e\u5b9a";
          var btnName2 = "\u53d6\u6d88";
          var msgCallback = function msgCallback(btnName) {
            if (btnName == btnName1) {
              var _callback = function _callback() {
                that.onCloseBtn();
              };
              that.LobbyLogic.requestLogonUserinfoFlush(0, _callback);
            }
          };
          var msgObj = {
            msg: "\n\u5b8c\u6210\u540e\u5373\u53ef\u83b7\u5f97\u65b0\u4eba\u5927\u793c\u5305\uff0c\u662f\u5426\u786e\u8ba4\u8df3\u8fc7",
            btn1: btnName1,
            btn2: btnName2,
            callbackFun: msgCallback
          };
          createMsgBox(msgObj);
        }
      },
      doButton_Code: function doButton_Code() {
        this.requestbCode(this.IphoneEdit);
      },
      requestbCode: function requestbCode(phone) {
        cc.log(phone.string);
        var phonestr = phone.string;
        if (11 != phonestr.length || "" == phonestr) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7");
          return;
        }
        var actionName = "bindPhoneCode";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          0 == jsonData.status ? createTips("\u53d1\u9001\u6210\u529f") : createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/Phone/sendCode";
        args.params = {
          phone: phonestr,
          type: 0
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        args.requestDesc = "\u53d1\u9001\u9a8c\u8bc1\u7801...";
        MyHttpRequest.doRequest(args);
      },
      doButton_PRIVE: function doButton_PRIVE() {
        createTips("\u656c\u8bf7\u671f\u5f85");
      },
      doButton_OK: function doButton_OK() {
        var _this2 = this;
        var newIphone = this.IphoneEdit.string;
        var newaddress = this.adressEdit.string;
        var CodeStr = this.CodeEdit.string;
        if ("" == newIphone) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7\u7801");
          return;
        }
        if ("" == CodeStr) {
          createTips("\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801");
          return;
        }
        if (6 != CodeStr.length) {
          createTips("\u8bf7\u8f93\u51656\u4f4d\u9a8c\u8bc1\u7801");
          return;
        }
        if ("" == newaddress) {
          createTips("\u8bf7\u8f93\u5165\u8be6\u7ec6\u6536\u8d27\u5730\u5740");
          return;
        }
        var callback = function callback() {
          LobbySocket.getMyInfo().goodsPhone = newIphone;
          LobbySocket.getMyInfo().goodsAddress = newaddress;
          _this2.SexNode.active = false;
          _this2.rewardNode.active = true;
          _this2.PlayinforNode.active = false;
        };
        UserInfoManager.requestChangeUserInfor(newIphone, CodeStr, newaddress, callback);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  NoticeButLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58de1wgB3hCwa8/mb2M6OcD", "NoticeButLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        noticeScroll: cc.ScrollView,
        noticeEBox: cc.EditBox,
        noticeLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.score = ConfigDataManager.getConfigDataByKey("sendHornCostJewels", 10);
        this.LobbyLogic = new (require("LobbyLogic"))();
      },
      start: function start() {
        this.initChatData();
        this.noticeLabel.string = "\u6ce8\uff1a\u60a8\u53d1\u7684\u4e16\u754c\u5e7f\u64ad\u6240\u6709\u4eba\u90fd\u80fd\u6536\u5230\uff0c\u53d1\u9001\u4e16\u754c\u5e7f\u64ad\u9700\u8981\u6d88\u8017" + this.score + "\u9897\u94bb\u77f3";
      },
      initChatData: function initChatData() {
        this.noticeScroll.content.removeAllChildren();
        var chatMessageList = ChatMessageManager.getAllChatMessage();
        if (!tableIsEmpty(chatMessageList)) for (var k in chatMessageList) {
          var node = new cc.Node();
          var label = node.addComponent(cc.Label);
          label.string = chatMessageList[k];
          node.anchorX = 0;
          node.anchorY = 1;
          node.x = -350;
          node.width = 700;
          node.color = cc.color(184, 72, 32);
          this.noticeScroll.content.addChild(node);
          label.overflow = 3;
        }
      },
      onSendNotice: function onSendNotice() {
        if (this.noticeEBox.string) if (this.LobbyLogic.getRoomCard() < this.score) createTips("\u94bb\u77f3\u4e0d\u8db3"); else {
          this.LobbyLogic.sendHornMessage(this.noticeEBox.string);
          this.noticeEBox.string = "";
          this.node.destroy();
        } else createTips("\u8bf7\u8f93\u5165\u5e7f\u64ad\u5185\u5bb9");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  NoticeLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80bf0UsxUVGXplOfkPeoeK6", "NoticeLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        layoutNode: cc.Node,
        label: cc.Label
      },
      init: function init(string) {
        var self = this;
        this.label.string = string;
        this.runAc();
      },
      runAc: function runAc() {
        var self = this;
        this.contentSize = this.label.node.getContentSize();
        this.layoutNode.active = false;
        this.layoutNode.width = this.contentSize.width;
        this.label.node.x = 0;
        this.layoutNode.x = cc.winSize.width / 2;
        this.layoutNode.y = cc.winSize.height / 2 - this.layoutNode.height / 2;
        var moveX = this.layoutNode.width + cc.winSize.width + 10;
        var tmove = moveX / 128;
        this.layoutNode.active = true;
        this.layoutNode.stopAllActions();
        this.layoutNode.runAction(cc.sequence(cc.moveBy(tmove, -moveX, 0), cc.delayTime(1), cc.callFunc(function() {
          self.node.destroy();
        })));
      },
      update: function update(dt) {
        this.contentSize.width != this.label.node.getContentSize().width && this.runAc();
      }
    });
    cc._RF.pop();
  }, {} ],
  NoticeManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a6c47Dv6J5FS7LsQ+ZRpgSo", "NoticeManager");
    "use strict";
    var API = "notice";
    var NoticeManager = cc.Class({
      ctor: function ctor() {
        this.normalNoticeList = [];
        this.shopMommodityList = [];
        this.GongGaoMommodityList = [];
        this.chatMessageList = [];
        this.specialNoticeList = [];
        this.NoticeList = [];
      },
      requestSystemNotice: function requestSystemNotice(callback) {
        var _this = this;
        var actionName = "normalNoticeList";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          if (0 == jsonData.status) {
            for (var i = 0; i < jsonData.data.length; i++) _this.pushNormalNotice(jsonData.data[i]);
            callback && callback(jsonData.data);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          num: 10
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestFeedback: function requestFeedback(endorsement) {
        endorsement || console.error("\u53cd\u9988\u65e5\u5fd7\uff1a\u5185\u5bb9\u4e3a", endorsement);
        var actionName = "endorsement";
        var fCallback = function fCallback(jsonData) {
          var data = jsonData;
        };
        var sCallback = function sCallback(jsonData) {
          console.log("\u53cd\u9988\u65e5\u5fd7\uff1a", jsonData.status);
          0 == jsonData.status;
        };
        var args = {};
        args.url = "http://" + G_PHP_IP + "/api/v1/feedback/" + actionName;
        args.params = {
          type: endorsement,
          userID: UserInfoManager.getMyInfo().userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestPayPrepayID: function requestPayPrepayID(buyNum, consumeNum, goodsID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          buyNum: buyNum,
          consumeNum: consumeNum,
          goodsID: goodsID
        };
        args.url = "http://" + G_PHP_IP + "/api/pay/buy";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestShopMommodity: function requestShopMommodity(callback) {
        var _this2 = this;
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          if (0 == jsonData.status) {
            for (var i = 0; i < jsonData.data.length; i++) _this2.pushShopMommodity(jsonData.data[i]);
            callback && callback(jsonData.data);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          goodsType: 2
        };
        args.url = "http://" + G_PHP_IP + "/api/pay/goodsList";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestPaijuList: function requestPaijuList(callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/record/simpleGradeTotalList";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestZhanjiList: function requestZhanjiList(gameID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          gameID: gameID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/record/simpleGradeList";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestZhanjiDetailsList: function requestZhanjiDetailsList(gradeID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          gradeID: gradeID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/record/simpleGradeInfo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requesSmalltZhanjiDetailsList: function requesSmalltZhanjiDetailsList(gradeID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          gradeID: gradeID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/record/gradeList";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestGongGaoMommodity: function requestGongGaoMommodity(callback) {
        var _this3 = this;
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          if (0 == jsonData.status) {
            for (var i = 0; i < jsonData.data.length; i++) _this3.pushGongGaoMommodity(jsonData.data[i]);
            callback && callback(jsonData.data);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/notice/imgNoticeList";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestShartReward: function requestShartReward(ShartuserID) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status;
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          shareUserID: ShartuserID
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/User/phareAndPolite";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestSpecialNotice: function requestSpecialNotice(callback) {
        console.log(">>>>>>>>>>>>>>>requestSpecialNoticerequestSpecialNotice");
        var actionName = "specialNoticeList";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          if (0 == jsonData.status) {
            for (var obj in jsonData.data) NoticeManager.pushSpecialNotice(obj);
            callback && callback(true);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          num: 1
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestdelNotice: function requestdelNotice(ID, callback) {
        var _this4 = this;
        var actionName = "delNotice";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          if (0 == jsonData.status) {
            _this4.delNotice(ID);
            callback && callback();
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          id: ID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      delNotice: function delNotice(ID) {
        this.NoticeList[ID] = null;
      },
      push: function push(message) {
        message && this.chatMessageList.push(message);
        this.chatMessageList.length >= G_CHAT_MAX_NUM && this.chatMessageList.splice(0, 1);
      },
      pushSpecialNotice: function pushSpecialNotice(message) {
        message && this.specialNoticeList.push(message);
      },
      pushNormalNotice: function pushNormalNotice(message) {
        message && this.normalNoticeList.push(message);
        this.normalNoticeList.length >= G_CHAT_COMMON_MAX_NUM && this.normalNoticeList.splice(0, 1);
      },
      pushShopMommodity: function pushShopMommodity(message) {
        message && this.shopMommodityList.push(message);
        this.shopMommodityList.length >= G_CHAT_COMMON_MAX_NUM && this.shopMommodityList.splice(0, 1);
      },
      pushGongGaoMommodity: function pushGongGaoMommodity(message) {
        message && this.GongGaoMommodityList.push(message);
        this.GongGaoMommodityList.length >= G_CHAT_COMMON_MAX_NUM && this.GongGaoMommodityList.splice(0, 1);
      },
      getAllChatMessage: function getAllChatMessage() {
        return this.chatMessageList;
      },
      getNormalNoticeList: function getNormalNoticeList() {
        return this.normalNoticeList;
      },
      getShopMommodityList: function getShopMommodityList() {
        return this.shopMommodityList;
      },
      getGongGaoMommodityList: function getGongGaoMommodityList() {
        return this.GongGaoMommodityList;
      },
      getSpecialMessage: function getSpecialMessage() {
        return this.specialNoticeList[this.specialNoticeList.length - 1];
      },
      getSpecialNoticeList: function getSpecialNoticeList() {
        return this.specialNoticeList;
      }
    });
    module.exports = NoticeManager;
    cc._RF.pop();
  }, {} ],
  NoticeSystem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfd636JVXFBxrMN7LDE2Zbu", "NoticeSystem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PoolMgr_1 = require("../../../../../framework/PoolMgr");
    var tools = require("Tools");
    var NoticeSystem = function(_super) {
      __extends(NoticeSystem, _super);
      function NoticeSystem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.SystemlistNode = null;
        _this.SystemItem = null;
        return _this;
      }
      NoticeSystem.prototype.start = function() {};
      NoticeSystem.prototype.onEnable = function() {};
      NoticeSystem.prototype.onDisable = function() {};
      NoticeSystem.prototype.init = function(info, callback) {
        var param = [];
        param.push(info.param1);
        param.push(info.param2);
        param.push(info.param3);
        param.push(info.param4);
        param.push(info.param5);
        param.push(info.param6);
        param.push(info.param7);
        param.push(info.param8);
        param.push(info.param9);
        param.push(info.param10);
        this.node.getComponent("LayerMask").setLayerClickCallback(callback);
        var SystemText = this.SystemlistNode.getChildByName("SystemText");
        var StopTime = SystemText.getChildByName("bg").getChildByName("StopTime").getComponent(cc.Label);
        var ServiceTime = SystemText.getChildByName("bg").getChildByName("ServiceTime").getComponent(cc.Label);
        var date = new Date(info.closeServerTime);
        var dayta1 = date.getFullYear();
        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        var datatime = date.toLocaleTimeString();
        var closeServerTime = dayta1 + "\u5e74" + month + "\u6708" + strDate + "\u65e5" + datatime;
        var date2 = new Date(info.openServerTime);
        var dayta2 = date2.getFullYear();
        var month2 = date2.getMonth() + 1 < 10 ? "0" + (date2.getMonth() + 1) : date2.getMonth() + 1;
        var strDate2 = date2.getDate() < 10 ? "0" + date2.getDate() : date2.getDate();
        var datatime2 = date2.toLocaleTimeString();
        var openServerTime = dayta2 + "\u5e74" + month2 + "\u6708" + strDate2 + "\u65e5" + datatime2;
        StopTime.string = closeServerTime;
        ServiceTime.string = openServerTime;
        var that = this;
        for (var i = 0; i < info.count; i++) {
          var itemData = param[i];
          var item = PoolMgr_1.PoolMgr.instance.getNode(that.SystemItem, that.SystemlistNode);
          that._initItemUI(item, itemData, i);
        }
      };
      NoticeSystem.prototype._initItemUI = function(item, itemData, index) {
        var text = item.getChildByName("text").getComponent(cc.Label);
        text.string = String(itemData);
      };
      __decorate([ property(cc.Node) ], NoticeSystem.prototype, "SystemlistNode", void 0);
      __decorate([ property(cc.Node) ], NoticeSystem.prototype, "SystemItem", void 0);
      NoticeSystem = __decorate([ ccclass ], NoticeSystem);
      return NoticeSystem;
    }(cc.Component);
    exports.default = NoticeSystem;
    cc._RF.pop();
  }, {
    "../../../../../framework/PoolMgr": "PoolMgr",
    Tools: "Tools"
  } ],
  Notice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7efe7KIQ/xODKsKApz9XOa9", "Notice");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.text = "hello";
        return _this;
      }
      NewClass.prototype.start = function() {};
      __decorate([ property(cc.Label) ], NewClass.prototype, "label", void 0);
      __decorate([ property ], NewClass.prototype, "text", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {} ],
  OfficialHotUpdate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "feb21NxHzhBMYXhvpy637CU", "OfficialHotUpdate");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        node_login: cc.Node,
        manifestUrl: {
          type: cc.Asset,
          default: null
        },
        webProgressNode: cc.Node,
        info: cc.Label,
        updatePanel: {
          default: null,
          type: cc.Node
        },
        nativeUpdatePanelCloseBtn: {
          default: null,
          type: cc.Node
        },
        updateStatePanel: {
          default: null,
          type: cc.Node
        },
        tipVersion: {
          default: null,
          type: cc.Label
        },
        percent: {
          default: null,
          type: cc.Label
        },
        progressBar: {
          default: null,
          type: cc.ProgressBar
        },
        testServerIP: "test",
        tipSureCode: -1,
        isCurDownloading: false,
        _updating: false,
        _canRetry: false,
        _storagePath: "",
        _customManifestStr: null,
        _infoText: "",
        UpdateApkNode: cc.Node
      },
      setVersionTip: function setVersionTip() {
        try {
          var curVersion = this._am.getLocalManifest().getVersion();
          var curVersionURL = this._am.getLocalManifest().getVersionFileUrl();
          curVersionURL.indexOf(this.testServerIP) < 0 ? this.tipVersion.string = "\u5f53\u524d\u7248\u672c:" + curVersion : this.tipVersion.string = "\u5f53\u524d\u6d4b\u8bd5\u670d\u8d44\u6e90|\u5f53\u524d\u7248\u672c:" + curVersion;
        } catch (e) {
          cc.log("\u663e\u793a\u5f53\u524d\u7684\u672c\u5730\u7248\u672c \u9519\u8bef", e.message);
        }
      },
      checkCb: function checkCb(event) {
        switch (event.getEventCode()) {
         case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
          this.setProgressTipText("\u6ca1\u6709\u53d1\u73b0\u672c\u5730\u7684\u8d44\u6e90\u6587\u4ef6\u914d\u7f6e\u6587\u4ef6");
          this.toTipDialog("\u65e0\u6cd5\u6821\u9a8c\u672c\u5730\u8d44\u6e90\u6587\u4ef6,\n\u8bf7\u91cd\u65b0\u4e0b\u8f7d\u5b89\u88c5", 0);
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
         case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
          this.setProgressTipText("\u8fde\u63a5\u8d44\u6e90\u670d\u52a1\u5668\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u5ba2\u670d");
          this.toTipDialog("\u8fde\u63a5\u8d44\u6e90\u670d\u52a1\u5668\u5931\u8d25,\n\u8bf7\u8054\u7cfb\u5ba2\u670d\u6216\u70b9\u51fb\u786e\u5b9a\u91cd\u65b0\u4e0b\u8f7d\u5b89\u88c5", 0);
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
          this.setProgressTipText("\u8d44\u6e90\u6587\u4ef6\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c");
          this.isCurDownloading = false;
          console.log("\u767b\u5f55===========23=>");
          this.appAutoLogin() ? this.setProgressTipText("") : this.hideUpdatePanel();
          this.setVersionTip();
          break;

         case jsb.EventAssetsManager.NEW_VERSION_FOUND:
          this.setProgressTipText("\u5f00\u59cb\u540c\u6b65\u8d44\u6e90\u6587\u4ef6\u4fe1\u606f");
          this.progressBar.node.active = true;
          this.isCurDownloading = true;
          this.setVersionTip();
          break;

         default:
          return;
        }
        this._am.setEventCallback(null);
        this._updating = false;
        this.hotUpdate();
      },
      handleManifestFile: function handleManifestFile(packageUrl) {
        try {
          var projectStr = "";
          var localProject = this._storagePath + "/project.manifest";
          console.log(localProject + ">>>>>>>>>>>jsb.fileUtils.isFileExist(localProject)" + jsb.fileUtils.isFileExist(localProject) + "?>>");
          projectStr = jsb.fileUtils.getStringFromFile(this.manifestUrl);
          console.log(this.manifestUrl + "\u5f00\u59cb\u66f4\u65b0 storage path for remote asset :" + this._storagePath);
          var obj = JSON.parse(projectStr);
          if (obj.packageUrl.indexOf(this.testServerIP) < 0) {
            obj.packageUrl = packageUrl;
            obj.remoteManifestUrl = packageUrl + "project.manifest";
            obj.remoteVersionUrl = packageUrl + "version.manifest";
            this._customManifestStr = JSON.stringify(obj);
            cc.sys.localStorage.setItem("isTestServer", "0");
            console.log("\u8bfb\u5199 manifest " + this._customManifestStr);
          } else cc.sys.localStorage.setItem("isTestServer", "1");
        } catch (e) {
          console.log("\u8bfb\u5199 manifest \u9519\u8bef" + e.message);
        }
      },
      updateCb: function updateCb(event) {
        var needRestart = false;
        var failed = false;
        var isError = false;
        switch (event.getEventCode()) {
         case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
          this.setProgressTipText("\u6e38\u620fApp\u635f\u574f\uff0c\u8bf7\u91cd\u65b0\u4e0b\u8f7d\u5b89\u88c5");
          failed = true;
          isError = true;
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.UPDATE_PROGRESSION:
          var downloadedBytes = event.getDownloadedBytes() / 1048576;
          var downloadedStr = "";
          0 != downloadedBytes && (downloadedStr = downloadedBytes.toFixed(2) + "M/");
          var totalBytes = event.getTotalBytes() / 1048576;
          var totalBytesStr = "";
          0 != totalBytes && (totalBytesStr = totalBytes.toFixed(2) + "M");
          "" == downloadedStr && (totalBytesStr = "");
          this.setProgressTipText("\u8d44\u6e90\u6587\u4ef6\u4e0b\u8f7d\u4e2d " + downloadedStr + totalBytesStr);
          if ("NaN" != parseFloat(event.getPercent()).toString()) {
            var percentStr = (100 * event.getPercent()).toFixed(2);
            parseInt(percentStr + "") >= 100 && (percentStr = "100.00");
            this.percent.string = percentStr + "%";
            this.progressBar.progress = event.getPercent().toFixed(1) + "";
          }
          var msg = event.getMessage();
          msg && (this.isCurDownloading = true);
          break;

         case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
         case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
          this.setProgressTipText("\u4e0b\u8f7d\u8d44\u6e90\u6587\u4ef6\u914d\u7f6e\u6587\u4ef6\u5931\u8d25,\u76f4\u63a5\u8df3\u8fc7\u66f4\u65b0");
          failed = true;
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
          this.setProgressTipText("\u8d44\u6e90\u6587\u4ef6\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c");
          failed = true;
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.UPDATE_FINISHED:
          this.setProgressTipText("\u8d44\u6e90\u6587\u4ef6\u4e0b\u8f7d\u5b8c\u6bd5");
          needRestart = true;
          this.isCurDownloading = false;
          break;

         case jsb.EventAssetsManager.UPDATE_FAILED:
          this.isCurDownloading = true;
          if (this.failedCount <= 1) {
            this.toTipDialog("\u4e0b\u8f7d\u8d44\u6e90\u5931\u8d25,\n\u8bf7\u70b9\u51fb\u786e\u5b9a\u91cd\u8bd5", 2);
            this._canRetry = true;
            this._updating = false;
          } else this.reDownloadUpdate("\u91cd\u8bd5\u4e0b\u8f7d\u8d44\u6e90\u5931\u8d25,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u542f\u8f6f\u4ef6\u4e0b\u8f7d");
          break;

         case jsb.EventAssetsManager.ERROR_UPDATING:
          this.isCurDownloading = true;
          break;

         case jsb.EventAssetsManager.ERROR_DECOMPRESS:
        }
        if (failed) {
          this._am.setEventCallback(null);
          this._updateListener = null;
          this._updating = false;
          console.log("\u767b\u5f55===========25=>");
          this.appAutoLogin() ? this.setProgressTipText("") : this.hideUpdatePanel();
        }
        if (needRestart) {
          console.log(">>>\u66f4\u65b0\u5b8c\u6bd5");
          this._am.setEventCallback(null);
          this._updateListener = null;
          var searchPaths = jsb.fileUtils.getSearchPaths();
          var newPaths = this._am.getLocalManifest().getSearchPaths();
          this.setProgressTipText("\u66f4\u65b0\u5b8c\u6210");
          Array.prototype.unshift.apply(searchPaths, newPaths);
          cc.sys.localStorage.setItem("HotUpdateSearchPaths", JSON.stringify(searchPaths));
          jsb.fileUtils.setSearchPaths(searchPaths);
          this.toTipDialog("\u66f4\u65b0\u5b8c\u6210\u6587\u4ef6\u5b8c\u6210,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u542f\u8f6f\u4ef6", 4);
        }
      },
      onClickNotNativeUpdate: function onClickNotNativeUpdate() {},
      loadCustomManifest: function loadCustomManifest() {
        if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
          var manifest = new jsb.Manifest(this._customManifestStr, this._storagePath);
          this._am.loadLocalManifest(manifest, this._storagePath);
          this.setProgressTipText("\u8bfb\u53d6\u914d\u7f6e\u8d44\u6e90\u6587\u4ef6\u4e2d");
        }
      },
      toTipDialog: function toTipDialog(contentText, code, callBack) {
        void 0 === contentText && (contentText = "");
        void 0 === code && (code = -1);
        this.updateStatePanel.setScale(.1);
        this.updateStatePanel.active = true;
        this.updateStatePanel.runAction(cc.sequence(cc.scaleTo(.1, 1.1), cc.scaleTo(.1, 1)));
        this.tipSureCode = code;
        this.tipSureCallBack = callBack;
        this.updateStatePanel.children[1].children[2].children[0].children[0].children[0].getComponent(cc.Label).string = contentText;
      },
      clickToTipSure: function clickToTipSure() {
        this.updateStatePanel.active = false;
        if (0 == this.tipSureCode) this.clickToUpdateVersion(null); else if (1 == this.tipSureCode) this.tipSureCallBack && this.tipSureCallBack(); else if (2 == this.tipSureCode) this.retry(); else if (4 == this.tipSureCode) {
          cc.audioEngine.stopAll();
          this.scheduleOnce(function() {
            cc.game.restart();
          }, .1);
        }
      },
      retry: function retry() {
        if (!this._updating && this._canRetry && this.failedCount <= 1) {
          this.failedCount++;
          this.updateStatePanel.active = false;
          this._canRetry = false;
          this.setProgressTipText("\u91cd\u8bd5\u4e0b\u8f7d\u8d44\u6e90\u6587\u4ef6");
          this._am.downloadFailedAssets();
        }
      },
      checkUpdate: function checkUpdate() {
        var self = this;
        if (this._updating) return;
        if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
          var url = this.manifestUrl.nativeUrl;
          cc.loader.md5Pipe && (url = cc.loader.md5Pipe.transformURL(url));
          this._am.loadLocalManifest(url);
        }
        if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
          this.setProgressTipText("\u52a0\u8f7d\u7248\u672c\u6587\u4ef6\u5931\u8d25,\u8bf7\u6e05\u9664\u6e38\u620fapp\u7f13\u5b58\u5e76\u91cd\u542f\u6e38\u620f");
          this.reDownloadUpdate("\u52a0\u8f7d\u7248\u672c\u6587\u4ef6\u5931\u8d25,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u542f\u8f6f\u4ef6\u4e0b\u8f7d");
          return;
        }
        this._am.setEventCallback(this.checkCb.bind(this));
        this._am.checkUpdate();
        this._updating = true;
        this.failedCount = 0;
      },
      hotUpdate: function hotUpdate() {
        if (this._am && !this._updating) {
          this._updateListener = "1";
          this._am.setEventCallback(this.updateCb.bind(this));
          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            var url = this.manifestUrl.nativeUrl;
            cc.loader.md5Pipe && (url = cc.loader.md5Pipe.transformURL(url));
            this._am.loadLocalManifest(url);
          }
          this._failCount = 0;
          this._am.update();
          this._updating = true;
        }
      },
      appAutoLogin: function appAutoLogin() {
        return false;
      },
      showUpdatePanel: function showUpdatePanel() {
        this.updatePanel.active = true;
        this.node_login.active = false;
      },
      hideUpdatePanel: function hideUpdatePanel() {
        this.updatePanel.active = false;
        this.node_login.active = true;
      },
      notHotUpdate: function notHotUpdate() {
        this.appAutoLogin() ? this.setProgressTipText("") : this.hideUpdatePanel();
      },
      setProgressTipText: function setProgressTipText(tipText) {
        this.info.string = tipText;
        this._infoText = tipText;
      },
      update: function update(dt) {
        if ("" != this.info.string) {
          var tTime = Math.floor(Date.now() / 1e3) % 5;
          this.info.string = this._infoText;
          for (var i = 0; i < tTime; ++i) this.info.string += ".";
        }
      },
      onLoad: function onLoad() {
        if (cc.sys.isNative && !cc.jsbMgr) {
          var jsbMgr = require("JsbMgr");
          cc.jsbMgr = new jsbMgr();
        }
        this.progressBar.progress = 0;
        this.progressBar.totalLength = this.progressBar.node.width;
        if (!cc.sys.isNative) return;
        this.webProgressNode.active = false;
        this.updatePanel.active = true;
        this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : "/") + "blackjack-remote-asset";
        console.log("Storage path for remote asset : " + this._storagePath);
        this.versionCompareHandle = function(versionA, versionB) {
          console.log("JS Custom Version Compare: version A is " + versionA + ", version B is " + versionB);
          var vA = versionA.split(".");
          var vB = versionB.split(".");
          for (var i = 0; i < vA.length; ++i) {
            var a = parseInt(vA[i]);
            var b = parseInt(vB[i] || 0);
            if (a === b) continue;
            return a - b;
          }
          return vB.length > vA.length ? -1 : 0;
        };
        var beforeStoragePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : "/") + "blackjack-remote-asset/";
        cc.jsbMgr.setLocalStorageToNative("canControlDel", "1");
        var isDeleteSuccess = false;
        try {
          var curNativeVersionCode = "1";
          cc.sys.OS_ANDROID == cc.sys.os ? curNativeVersionCode = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "getVersionCode", "()Ljava/lang/String;") : cc.sys.os == cc.sys.OS_IOS && (curNativeVersionCode = jsb.reflection.callStaticMethod("NativeJSForOC", "getAppVersionCode"));
          cc.jsbMgr.setLocalStorageToNative("writeFilePath" + curNativeVersionCode, this._storagePath + "");
          var beforeVersionCode = cc.sys.localStorage.getItem(G_APP_NAME_EN + "GameBuildVerionCode");
          if (beforeVersionCode) {
            if (parseInt(beforeVersionCode) < parseInt(curNativeVersionCode)) if (jsb.fileUtils.isDirectoryExist(beforeStoragePath)) {
              var ret = jsb.fileUtils.removeDirectory(beforeStoragePath);
              isDeleteSuccess = ret;
            } else isDeleteSuccess = false;
          } else if (jsb.fileUtils.isDirectoryExist(beforeStoragePath)) {
            var ret = jsb.fileUtils.removeDirectory(beforeStoragePath);
            isDeleteSuccess = ret;
          } else isDeleteSuccess = false;
          cc.sys.localStorage.setItem(G_APP_NAME_EN + "GameBuildVerionCode", curNativeVersionCode);
          if (isDeleteSuccess) {
            cc.audioEngine.stopAll();
            this.scheduleOnce(function() {
              cc.game.restart();
            }, .08);
            console.log("\u5220\u9664\u540e\u91cd\u542f");
          } else this.scheduleOnce(function() {
            cc.sys.OS_ANDROID == cc.sys.os ? jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "removeLaunchImage", "()V") : cc.sys.os == cc.sys.OS_IOS && jsb.reflection.callStaticMethod("AppController", "removeLaunchImage");
          }, cc.sys.os == cc.sys.OS_IOS ? 1.2 : 3.5);
        } catch (e) {
          console.log("\u5220\u9664\u76ee\u5f55\u9519\u8bef" + e);
        }
        if (isDeleteSuccess) return;
        this._am = new jsb.AssetsManager("", this._storagePath, this.versionCompareHandle);
        var self = this;
        this._am.setVerifyCallback(function(path, asset) {
          var compressed = asset.compressed;
          var expectedMD5 = asset.md5;
          var relativePath = asset.path;
          var size = asset.size;
          if (compressed) {
            console.log("Verification passed : " + relativePath);
            return true;
          }
          console.log(">>>path" + path);
          var filePath = this._storagePath + "_temp/" + relativePath;
          if (!jsb.fileUtils.isFileExist(filePath)) {
            console.log(">>>>file don not exist" + relativePath);
            return true;
          }
          var data = jsb.fileUtils.getDataFromFile(filePath);
          var md5 = hex_md5(data);
          console.log("Verification passed : " + relativePath + " (" + expectedMD5 + ")>>>>>>>" + md5);
          if (md5 === expectedMD5) {
            console.log("\u4e00\u81f4\u300b\u300b\u300b\u300b");
            return true;
          }
          console.log("\u4e0d\u4e00\u81f4\u300b\u300b\u300b\u300b");
          return false;
        });
        this.setProgressTipText("\u6821\u9a8c\u8d44\u6e90\u6587\u4ef6\u4fe1\u606f");
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          this._am.setMaxConcurrentTask(2);
          console.log("Max concurrent tasks count have been limited to 2");
        }
        this.retryVersionCount = 1;
        this.loadServerConfig();
      },
      reDownloadUpdate: function reDownloadUpdate(tipString) {
        void 0 === tipString && (tipString = "\u4e0b\u8f7d\u4e2d\u65ad,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u542f\u8f6f\u4ef6\u4e0b\u8f7d");
        this.toTipDialog(tipString, 4);
        this._am.setEventCallback(null);
        this._updateListener = null;
        jsb.fileUtils.removeDirectory(jsb.fileUtils.getWritablePath() + "blackjack-remote-asset_temp/");
        this._canRetry = false;
        this._updating = false;
        this.setProgressTipText(tipString);
        cc.audioEngine.stopAll();
      },
      checkStopUpdate: function checkStopUpdate() {
        this.isCurDownloading ? this.reDownloadUpdate("\u7f51\u7edc\u4e2d\u65ad\uff0c\u4e0b\u8f7d\u5931\u8d25,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u542f\u8f6f\u4ef6\u4e0b\u8f7d") : LobbySocket.onDisconnect();
      },
      toGetVersion: function toGetVersion(data, platFormValue) {
        var self = this;
        var versionData = cc.sys.localStorage.getItem(G_APP_NAME_EN + "GameVersionData");
        versionData && (versionData = JSON.parse(versionData));
        console.log("\u7248\u672c\u7684\u4fe1\u606f>>" + JSON.stringify(versionData));
        if (versionData && cc.sys.isNative) if ("android" == platFormValue) {
          cc.curNativeVersion = jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "getVersionName", "()Ljava/lang/String;");
          self.controlVersionView(cc.curNativeVersion, versionData.android);
        } else if ("iosstore" == platFormValue) {
          cc.curNativeVersion = jsb.reflection.callStaticMethod("NativeJSForOC", "getAppVersion");
          self.controlVersionView(cc.curNativeVersion, versionData.iosstore);
        } else if ("ios" == platFormValue) {
          cc.curNativeVersion = jsb.reflection.callStaticMethod("NativeJSForOC", "getAppVersion");
          self.controlVersionView(cc.curNativeVersion, versionData.ios);
        }
      },
      loadServerConfig: function loadServerConfig() {
        var self = this;
        if (!cc.jsbMgr.getNetState()) {
          this.toTipDialog("\u60a8\u7684\u7f51\u7edc\u5df2\u7ecf\u65ad\u5f00\n\u8bf7\u68c0\u67e5\u7f51\u7edc\u8bbe\u7f6e,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u65b0\u8fde\u63a5", 1, function() {
            self.loadServerConfig();
          });
          this.retryVersionCount = 0;
          return;
        }
        if (this.retryVersionCount >= 10) {
          this.toTipDialog("\u5f53\u524d\u7f51\u7edc\u4e0d\u7ed9\u529b\n\u8bf7\u68c0\u67e5\u7f51\u7edc\u8bbe\u7f6e,\n\u70b9\u51fb\u786e\u5b9a\u91cd\u65b0\u8fde\u63a5", 1, function() {
            self.loadServerConfig();
          });
          this.retryVersionCount = 0;
          return;
        }
        this.retryVersionCount++;
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", "https://testetetete.oss-cn-shanghai.aliyuncs.com/happy_remote/happyDragonExConfig.json", true);
        xhr.timeout = 5e3;
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207) {
            var ret = JSON.parse(xhr.responseText);
            if (0 == ret.errno) {
              self.retryVersionCount = 0;
              var jsonData = ret.data;
              cc.log("\u914d\u7f6e" + JSON.stringify(jsonData));
              cc.sys.localStorage.setItem(G_APP_NAME_EN + "GameLoginServer", jsonData.loginServer);
              cc.sys.localStorage.setItem(G_APP_NAME_EN + "GameVersionData", JSON.stringify(jsonData.versionData));
              self.controlNativeVersion();
            } else self.toTipDialog(ret.errmsg + ",\n\u8bf7\u70b9\u51fb\u786e\u5b9a\u91cd\u65b0\u542f\u52a8\u8f6f\u4ef6", 4);
          }
        };
        xhr.ontimeout = function(event) {
          self.setProgressTipText("\u8054\u7f51\u68c0\u6d4b\u7248\u672c\u4fe1\u606f \u5c1d\u8bd5" + self.retryVersionCount + "\u6b21");
          self.loadServerConfig();
        };
        xhr.onerror = function(e) {
          self.setProgressTipText("\u8054\u7f51\u68c0\u6d4b\u7248\u672c\u4fe1\u606f \u5c1d\u8bd5" + self.retryVersionCount + "\u6b21");
          self.loadServerConfig();
        };
        xhr.send();
      },
      controlNativeVersion: function controlNativeVersion() {
        this.node_login.active = false;
        var platFormValue = "android";
        cc.sys.OS_IOS == cc.sys.os && (platFormValue = "iosstore");
        this.newVersionURL = "";
        var data = {
          platForm: platFormValue
        };
        this.toGetVersion(data, platFormValue);
      },
      controlVersionView: function controlVersionView(curNativeVersion, resultData) {
        var rootUpdate = cc.find("Canvas/root_update");
        var newVersion = resultData.version;
        var self = this;
        if (null != curNativeVersion && curNativeVersion.length > 0) if (this.versionCompareHandle(curNativeVersion, newVersion) < 0) {
          this.hideUpdatePanel();
          this.newVersionURL = resultData.url;
          rootUpdate.children[1].setScale(.1);
          rootUpdate.active = true;
          rootUpdate.children[1].runAction(cc.sequence(cc.scaleTo(.1, 1.1), cc.scaleTo(.1, .9), cc.scaleTo(.1, 1)));
          var content = resultData.content;
          "" != content && (content += "\n");
          rootUpdate.children[1].children[2].children[0].children[0].children[0].getComponent(cc.Label).string = content + "\u8bf7\u70b9\u51fb\u786e\u5b9a\u66f4\u65b0\u7248\u672c!";
        } else self.checkUpdate();
      },
      clickToUpdateVersion: function clickToUpdateVersion(event, tag) {
        if (!cc.jsbMgr.getNetState()) {
          cc.jsbMgr.toastToJava("\u5f53\u524d\u65e0\u7f51\u7edc\u8fde\u63a5\uff0c\u8bf7\u68c0\u67e5\u7f51\u7edc\u8bbe\u7f6e");
          return;
        }
        if (cc.sys.OS_ANDROID == cc.sys.os) {
          event && (event.target.name = "btn_restart_download") && (event.target.active = false);
          var versionData = cc.sys.localStorage.getItem(G_APP_NAME_EN + "GameVersionData");
          versionData && (versionData = JSON.parse(versionData));
          var androidVersion = versionData.android;
          if (androidVersion && !androidVersion.browerUpdate) try {
            jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "jsToNativeUpdateApk", "(Ljava/lang/String;Ljava/lang/String;)V", G_APP_NAME_CH + "_" + androidVersion.version, androidVersion.url + "");
            this.UpdateApkNode.active = true;
            this.UpdateApkNode.getComponent("UpdateApkNode").setUpdateDesc(androidVersion.content + "", "\u60a8\u5f53\u524d\u7248\u672c:" + cc.curNativeVersion);
          } catch (e) {
            this.UpdateApkNode.active = false;
            "" != this.newVersionURL && cc.sys.openURL(this.newVersionURL);
          } else "" != this.newVersionURL && cc.sys.openURL(this.newVersionURL);
        } else cc.sys.os == cc.sys.OS_IOS && "" != this.newVersionURL && cc.sys.openURL(this.newVersionURL);
      },
      onDestroy: function onDestroy() {
        this._updateListener && (this._updateListener = null);
      }
    });
    cc._RF.pop();
  }, {
    JsbMgr: "JsbMgr"
  } ],
  PDK_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fb36dMtT1A7IpwH3WknGS9", "PDK_ZhanJi_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        cards: cc.Node,
        cardItem: cc.Node,
        bankerView: cc.Node
      },
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.bankerView.active = data.isBanker;
        for (var i = 0; i < data.handCards.length; i++) if (255 != data.handCards[i]) {
          var card = cc.instantiate(this.cardItem);
          card.setContentSize(cc.size(75, 90));
          card.active = true;
          setTexture(card.getComponent(cc.Sprite), tools.stringFormat("PDK/poker/{0}", data.handCards[i]));
          this.cards.addChild(card);
        } else this.cards.children[i].active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  Package: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7a2929Q9mtOZZu7e6oHKgH9", "Package");
    "use strict";
    var ByteBuffer = require("bytebuffer");
    var Package = {
      PACKAGE_HEADLENGTH: 20,
      bMainID: 0,
      bAssistantID: 0,
      bHandleCode: 0,
      reserve: 0,
      _writeBuffer: null,
      _readBuffer: null,
      buildWritePack: function buildWritePack(len) {
        this._writeBuffer ? this._writeBuffer.clear() : this._writeBuffer = new ByteBuffer();
        this._writeBuffer.writeUint32(len + this.PACKAGE_HEADLENGTH);
        return this;
      },
      writeBegin: function writeBegin(mid, aid, roomID) {
        void 0 === aid && (aid = 0);
        void 0 === roomID && (roomID = 0);
        this.bMainID = mid;
        this.bAssistantID = aid;
        this.roomID = roomID;
        this._writeBuffer.writeUint32(mid);
        this._writeBuffer.writeUint32(aid);
        this._writeBuffer.writeUint32(0);
        this._writeBuffer.writeUint32(roomID);
      },
      writeBoolean: function writeBoolean(val) {
        val ? this._writeBuffer.writeByte(1) : this._writeBuffer.writeByte(0);
      },
      pushBOOL: function pushBOOL(val) {
        val ? this._writeBuffer.writeByte(1) : this._writeBuffer.writeByte(0);
      },
      writeByte: function writeByte(val) {
        this._writeBuffer.writeByte(val);
        this.leng += 1;
      },
      pushBYTE: function pushBYTE(val) {
        this._writeBuffer.writeByte(val);
      },
      writeShort: function writeShort(val) {
        this._writeBuffer.writeShort(val);
      },
      writeUnsignedInt: function writeUnsignedInt(val) {
        this._writeBuffer.writeUint32(val);
      },
      pushUINT: function pushUINT(val) {
        this._writeBuffer.writeUint32(val);
      },
      writeInt: function writeInt(val) {
        this._writeBuffer.writeInt32(val);
      },
      pushINT: function pushINT(val) {
        this._writeBuffer.writeInt32(val);
      },
      writeInt64: function writeInt64(val) {
        this._writeBuffer.writeInt64(val);
      },
      pushLONGLONG: function pushLONGLONG(val) {
        this._writeBuffer.writeInt64(val);
      },
      writeString: function writeString(val, len) {
        len || (len = val.length);
        var offset = this._writeBuffer.offset;
        this._writeBuffer.writeString(val);
        offset = len - (this._writeBuffer.offset - offset);
        offset < 0 && (this._writeBuffer.offset += offset);
        for (;offset-- > 0; ) this._writeBuffer.writeByte(0);
      },
      pushNCHAR: function pushNCHAR(val, len) {
        len || (len = val.length);
        var offset = this._writeBuffer.offset;
        this._writeBuffer.writeString(val);
        offset = len - (this._writeBuffer.offset - offset);
        offset < 0 && (this._writeBuffer.offset += offset);
        for (;offset-- > 0; ) this._writeBuffer.writeByte(0);
      },
      getCmd: function getCmd() {
        return this.bMainID + "-" + this.bAssistantID;
      },
      getData: function getData() {
        this._writeBuffer.flip();
        var b = this._writeBuffer.toArrayBuffer();
        return b;
      },
      buildReadPack: function buildReadPack(cmd, msg) {
        this.bMainID = cmd;
        this._readBuffer = msg;
        this.bAssistantID = this.readUnsignedInt();
        this.bHandleCode = this.readUnsignedInt();
        this.reserve = this.readUnsignedInt();
        return this;
      },
      bytesAvailable: function bytesAvailable() {
        return this._readBuffer.offset - this._readBuffer.limit;
      },
      readBoolean: function readBoolean() {
        return 1 == this._readBuffer.readInt8();
      },
      popBOOL: function popBOOL() {
        return 1 == this._readBuffer.readInt8();
      },
      readByte: function readByte() {
        return this._readBuffer.readInt8();
      },
      popBYTE: function popBYTE() {
        var data = this._readBuffer.readInt8();
        -1 == data && (data = 255);
        return data;
      },
      readUnsignedByte: function readUnsignedByte() {
        return this._readBuffer.readUint8();
      },
      readShort: function readShort() {
        return this._readBuffer.readInt16();
      },
      readUnsignedShort: function readUnsignedShort() {
        return this._readBuffer.readUint16();
      },
      readUnsignedInt: function readUnsignedInt() {
        return this._readBuffer.readUint32();
      },
      popUINT: function popUINT() {
        return this._readBuffer.readUint32();
      },
      readUnsignedInt64: function readUnsignedInt64() {
        return this._readBuffer.readUint64().toNumber();
      },
      readInt: function readInt() {
        return this._readBuffer.readInt32();
      },
      popINT: function popINT() {
        return this._readBuffer.readInt32();
      },
      readInt64: function readInt64() {
        return this._readBuffer.readInt64().toNumber();
      },
      popLONGLONG: function popLONGLONG() {
        return this._readBuffer.readInt64().toNumber();
      },
      readFloat: function readFloat() {
        return this._readBuffer.readFloat32();
      },
      popFLOAT: function popFLOAT() {
        return this._readBuffer.readFloat32();
      },
      pushFloat: function pushFloat(val) {
        this._writeBuffer.writeFloat(val);
      },
      readFloat64: function readFloat64() {
        return this._readBuffer.readFloat64();
      },
      readString: function readString(len) {
        var s = this._rGBK(this._readBuffer.view, this._readBuffer.offset, len);
        if (!s) return;
        this._readBuffer.offset += len;
        var len = s.length;
        for (var i = 0; i < len; i++) if (0 == s.charCodeAt(i)) return s.substr(0, i);
        return s;
      },
      popNCHAR: function popNCHAR(len) {
        var s = this._rGBK(this._readBuffer.view, this._readBuffer.offset, len);
        if (!s) return;
        this._readBuffer.offset += len;
        var len = s.length;
        for (var i = 0; i < len; i++) if (0 == s.charCodeAt(i)) return s.substr(0, i);
        return s;
      },
      _rUTF: function _rUTF(u, offset, len) {
        var p = offset;
        var max = p + len;
        var v = "", c, c2, c3, f = String.fromCharCode;
        var i = 0;
        while (p < max) {
          c = u[p++];
          if (c < 128) 0 != c && (v += f(c)); else if (c < 224) v += f((63 & c) << 6 | 127 & u[p++]); else if (c < 240) {
            c2 = u[p++];
            v += f((31 & c) << 12 | (127 & c2) << 6 | 127 & u[p++]);
          } else {
            c2 = u[p++];
            c3 = u[p++];
            v += f((15 & c) << 18 | (127 & c2) << 12 | c3 << 6 & 127 | 127 & u[p++]);
          }
          i++;
        }
        return v;
      },
      _rGBK: function _rGBK(u, offset, len) {
        try {
          var x = new Uint8Array(this._readBuffer.buffer, offset, len);
          var str = new TextDecoder("gbk").decode(x);
          return str;
        } catch (err) {}
      },
      crossedARM: function crossedARM(len) {
        for (var i = 0; i < len; i++) this.popBOOL();
      },
      crossedARMPush: function crossedARMPush(len) {
        for (var i = 0; i < len; i++) this.pushBOOL(true);
      }
    };
    module.exports = Package;
    cc._RF.pop();
  }, {
    bytebuffer: "bytebuffer"
  } ],
  PageViews: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd569deIOJN17VO8PjApazG", "PageViews");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: cc.Component,
      properties: {
        adviePage: [ cc.Node ],
        imgDot: [ cc.Node ]
      },
      onLoad: function onLoad() {
        this.advieIndex = 1;
        this.posStart = {
          x: -950,
          y: 0,
          z: 0
        };
        this.adviePOS = [];
        for (var i = 0; i < 4; i++) {
          var _adviePage = this.adviePage[i];
          this.adviePOS[i] = _adviePage.getPosition();
        }
        this.AdvieTime = false;
        this.ShowDot(this.advieIndex);
        this.bannerList = [];
        this.requestBanners();
      },
      requestBanners: function requestBanners() {
        var _this = this;
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.code && _this.initBannerList(jsonData.data);
        };
        var args = {};
        args.url = "https://" + G_PHP_IP + "/txysdk/Banner/getBannerInfo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      initBannerList: function initBannerList(bannerList) {
        this.bannerList = bannerList;
        for (var i = 0; i < 4; i++) {
          var adviePage = this.adviePage[i];
          var tempBanner = bannerList[i];
          if (tempBanner) {
            var img_url = "https://" + globalThis.NetConfig.getPHP_IP() + tempBanner.banner_img;
            NetResManager.requestNetRes(img_url, adviePage);
          }
        }
      },
      start: function start() {
        var _this2 = this;
        this.node.on("touchstart", function(event) {
          this.startTime = new Date().getTime();
        }, this);
        this.node.on("touchmove", function(event) {}, this);
        this.node.on("touchend", this.touchEnd, this);
        this.node.on("touchcancel", this.touchEnd, this);
        this.scheduleAdvie && this.unschedule(this.scheduleAdvie, 2);
        this.scheduleAdvie = function() {
          _this2.MoveLeft();
        };
        this.schedule(this.scheduleAdvie, 4);
      },
      touchEnd: function touchEnd(event) {
        var startPos = event.getStartLocation();
        var curPos = event.getLocation();
        var pos = startPos.x - curPos.x;
        if (0 == pos) {
          var bannerData = this.bannerList[this.advieIndex - 1];
          bannerData.type == E_BANNER_TYPE.VEDIO && VideoManager.instance.requestVedioByFileId(bannerData.file_id, function(data) {
            data.length > 0 && (window["tempVedioList"] = data);
            GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
          });
          return;
        }
        var endTime = new Date().getTime();
        var ea = endTime - this.startTime;
        if (pos > 10) this.MoveLeft(); else if (pos < -10) this.MoveRight(); else {
          var _bannerData = this.bannerList[this.advieIndex - 1];
          if (_bannerData.type == E_BANNER_TYPE.VEDIO) var aaaaa = 0;
        }
      },
      MoveRight: function MoveRight() {
        var _this3 = this;
        if (true == this.AdvieTime) return;
        if (false == this.AdvieTime) {
          this.AdvieTime = true;
          this.scheduleOnce(function(dt) {
            _this3.AdvieTime = false;
          }, .5);
        }
        if (1 == this.advieIndex) {
          var Node = this.adviePage[0];
          var EndPos = this.adviePOS[1];
          this.MovePOS(Node, EndPos, false);
          var Node2 = this.adviePage[1];
          var EndPos2 = this.adviePOS[2];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[2];
          var EndPos3 = this.adviePOS[3];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[3];
          var pos = this.posStart;
          Node4.setPosition(pos.x, pos.y);
          var EndPos4 = this.adviePOS[0];
          this.MovePOS(Node4, EndPos4, false);
        } else if (2 == this.advieIndex) {
          var Node = this.adviePage[1];
          var EndPos = this.adviePOS[1];
          this.MovePOS(Node, EndPos, false);
          var Node2 = this.adviePage[2];
          var EndPos2 = this.adviePOS[2];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[3];
          var EndPos3 = this.adviePOS[3];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[0];
          var pos = this.posStart;
          Node4.setPosition(pos.x, pos.y);
          var EndPos4 = this.adviePOS[0];
          this.MovePOS(Node4, EndPos4, false);
        } else if (3 == this.advieIndex) {
          var Node = this.adviePage[2];
          var EndPos = this.adviePOS[1];
          this.MovePOS(Node, EndPos, false);
          var Node2 = this.adviePage[3];
          var EndPos2 = this.adviePOS[2];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[0];
          var EndPos3 = this.adviePOS[3];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[1];
          var pos = this.posStart;
          Node4.setPosition(pos.x, pos.y);
          var EndPos4 = this.adviePOS[0];
          this.MovePOS(Node4, EndPos4, false);
        } else if (4 == this.advieIndex) {
          var Node = this.adviePage[3];
          var EndPos = this.adviePOS[2];
          this.MovePOS(Node, EndPos, false);
          var Node2 = this.adviePage[2];
          var EndPos2 = this.adviePOS[0];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[1];
          var EndPos3 = this.adviePOS[1];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[0];
          var pos = this.posStart;
          Node4.setPosition(pos.x, pos.y);
          var EndPos4 = this.adviePOS[0];
          this.MovePOS(Node4, EndPos4, false);
        }
        this.advieIndex = this.advieIndex - 1;
        this.advieIndex < 1 && (this.advieIndex = 4);
        this.ShowDot(this.advieIndex);
      },
      MoveLeft: function MoveLeft() {
        var _this4 = this;
        if (true == this.AdvieTime) return;
        if (false == this.AdvieTime) {
          this.AdvieTime = true;
          this.scheduleOnce(function(dt) {
            _this4.AdvieTime = false;
          }, .5);
        }
        if (1 == this.advieIndex) {
          var Node = this.adviePage[0];
          var EndPos = this.posStart;
          this.MovePOS(Node, EndPos, true);
          var Node2 = this.adviePage[1];
          var EndPos2 = this.adviePOS[0];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[2];
          var EndPos3 = this.adviePOS[1];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[3];
          var EndPos4 = this.adviePOS[2];
          this.MovePOS(Node4, EndPos4, false);
        } else if (2 == this.advieIndex) {
          var Node = this.adviePage[1];
          var EndPos = this.posStart;
          this.MovePOS(Node, EndPos, true);
          var Node2 = this.adviePage[2];
          var EndPos2 = this.adviePOS[0];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[3];
          var EndPos3 = this.adviePOS[2];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[0];
          var EndPos4 = this.adviePOS[1];
          this.MovePOS(Node4, EndPos4, false);
        } else if (3 == this.advieIndex) {
          var Node = this.adviePage[2];
          var EndPos = this.posStart;
          this.MovePOS(Node, EndPos, true);
          var Node2 = this.adviePage[3];
          var EndPos2 = this.adviePOS[0];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[0];
          var EndPos3 = this.adviePOS[2];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[1];
          var EndPos4 = this.adviePOS[1];
          this.MovePOS(Node4, EndPos4, false);
        } else if (4 == this.advieIndex) {
          var Node = this.adviePage[3];
          var EndPos = this.posStart;
          this.MovePOS(Node, EndPos, true);
          var Node2 = this.adviePage[0];
          var EndPos2 = this.adviePOS[0];
          this.MovePOS(Node2, EndPos2, false);
          var Node3 = this.adviePage[1];
          var EndPos3 = this.adviePOS[1];
          this.MovePOS(Node3, EndPos3, false);
          var Node4 = this.adviePage[2];
          var EndPos4 = this.adviePOS[2];
          this.MovePOS(Node4, EndPos4, false);
        }
        this.advieIndex = this.advieIndex + 1;
        this.advieIndex > 4 && (this.advieIndex = 1);
        this.ShowDot(this.advieIndex);
      },
      MovePOS: function MovePOS(adverNode, EndPos, isPnePos) {
        var _this5 = this;
        isPnePos ? adverNode.runAction(cc.sequence(cc.moveTo(.2, EndPos.x, EndPos.y), cc.callFunc(function() {
          var pos = _this5.adviePOS[2];
          adverNode.setPosition(pos.x, pos.y);
        }))) : adverNode.runAction(cc.moveTo(.2, EndPos.x, EndPos.y));
      },
      ShowDot: function ShowDot(Sindex) {
        for (var i = 1; i <= 4; i++) {
          var DotNode = this.imgDot[i - 1];
          DotNode.getChildByName("img_true").active = Sindex == i;
        }
      }
    });
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    VideoManager: "VideoManager"
  } ],
  PanelSelect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee587egmCdAko0g4VFMLthl", "PanelSelect");
    "use strict";
    var textDescHeight = 60;
    cc.Class({
      extends: cc.Component,
      properties: {
        Text_Desc: cc.Label,
        Check_Box_Prefab: cc.Prefab,
        Input_Prefab: cc.Prefab,
        selectType: cc.Integer,
        checkboxArr: {
          type: [ cc.Prefab ],
          default: []
        },
        toggleGroup: cc.ToggleContainer,
        normalGroup: cc.Node
      },
      ctor: function ctor() {
        this.CELL_NUM = CELL_NUM;
      },
      updateContent: function updateContent(data, checkboxBindFunc) {
        this.Text_Desc.string = data.desc;
        var cellCount = data.num;
        if ("undefined" != typeof data.customerCELL_NUM) {
          cellCount = data.customerCELL_NUM;
          this.Text_Desc.node.y = 6 * (Math.ceil(cellCount / CELL_NUM) - 1) - 37.5;
        }
        data.customerDescColor ? this.Text_Desc.node.color = new cc.Color(data.customerDescColor[0], data.customerDescColor[1], data.customerDescColor[2]) : this.Text_Desc.node.color = G_COLOR_NOT_SELECTED;
        this.selectType = data.selectType;
        var descList = data.textDescList;
        this.data = data;
        var keyList = data.keyList;
        var textDescList = data.textDescList;
        var inputRangeList = data.inputRangeList;
        var specialData = {};
        for (var i = 0; i < data.num; i++) if (1 == data.selectType) {
          var checkBoxPrefab = cc.instantiate(this.Check_Box_Prefab);
          var script = checkBoxPrefab.getComponent("BaseLayer");
          specialData = {
            defaultAllSelected: data.defaultAllSelected,
            defaultAllUnselected: data.defaultAllUnselected,
            defaultAllDisabled: data.defaultAllDisabled,
            defaultSelectIndex: data.defaultSelectIndex
          };
          script.init(i, descList[i], this.selectType, this.onCheckboxCallback.bind(this), specialData, this.toggleGroup);
          var idx = (data.cellIndex - 1) * this.CELL_NUM + i;
          "pay" == data.name && (checkBoxPrefab.width = 250);
          data.customerWidth && (checkBoxPrefab.width = data.customerWidth);
          checkBoxPrefab.name = tools.stringFormat(CHECKBOX_NAME, data.name, idx);
          this.toggleGroup.node.addChild(checkBoxPrefab);
          this.checkboxArr.push(checkBoxPrefab);
          checkboxBindFunc(checkBoxPrefab);
          data.defaultAllUnselected ? data.defaultAllDisabled : data.defaultAllSelected ? script.setChecked(true) : 0 === i && script.setChecked(true);
        } else if (2 == data.selectType) {
          var _checkBoxPrefab = cc.instantiate(this.Check_Box_Prefab);
          var _script = _checkBoxPrefab.getComponent("BaseLayer");
          specialData = {
            defaultAllSelected: data.defaultAllSelected,
            defaultAllUnselected: data.defaultAllUnselected,
            defaultAllDisabled: data.defaultAllDisabled
          };
          ("" == data.desc && "jokerTuo" == data.name || "\u73a9\u6cd5" == data.desc && "wanfa" == data.name && 3 == data.num) && (specialData.specialUnSelectedCallBack = this.onUnSelectedCheckboxCallback.bind(this));
          _script.init(i, descList[i], this.selectType, this.onCheckboxCallback.bind(this), specialData);
          data.defaultAllUnselected ? data.defaultAllDisabled : data.defaultAllSelected ? _script.setChecked(true) : 0 === i && _script.setChecked(true);
          data.customerWidth && (_checkBoxPrefab.width = data.customerWidth);
          var _idx = (data.cellIndex - 1) * this.CELL_NUM + i;
          _checkBoxPrefab.name = tools.stringFormat(CHECKBOX_NAME, data.name, _idx);
          this.normalGroup.addChild(_checkBoxPrefab);
          this.checkboxArr.push(_checkBoxPrefab);
          checkboxBindFunc(_checkBoxPrefab);
        } else if (4 == data.selectType) {
          var inputPrefab = cc.instantiate(this.Input_Prefab);
          var _script2 = inputPrefab.getComponent("CreateRoomInput");
          _script2.init(keyList[i], textDescList[i], inputRangeList[i], i);
          var _idx2 = (data.cellIndex - 1) * this.CELL_NUM + i;
          inputPrefab.name = tools.stringFormat(INPUTBOX_NAME, data.name, _idx2);
          this.node.addChild(inputPrefab);
          checkboxBindFunc(inputPrefab);
        }
        data.num > 4 && (this.node.height = this.node.height + textDescHeight);
      },
      onUnSelectedCheckboxCallback: function onUnSelectedCheckboxCallback(name, index) {
        "\u56db\u9b3c\u80e1\u724c" == name && 2 == index ? this.refreshHuChiJokerTuoSiGuiFun && this.refreshHuChiJokerTuoSiGuiFun(index) : "\u62a2\u6760\u80e1" == name && 1 == index && this.refreshHuChiQiangGangFun && this.refreshHuChiQiangGangFun("unSelected", index);
      },
      onCheckboxCallback: function onCheckboxCallback(value, index) {
        if (this.selectType === SELECT_TYPE_ONE) for (var idx = 0; idx < this.checkboxArr.length; idx++) {
          var checkbox = this.checkboxArr[idx].getComponent("BaseLayer");
          if (idx !== index && true === value) {
            checkbox.toggle.isChecked = false;
            checkbox.setChecked(false);
          }
        }
        "RoomType" == this.data.name && this.refreshRoomTypeFunc && this.refreshRoomTypeFunc();
        "Count" == this.data.name && this.refreshPayFunc && this.refreshPayFunc();
        "cCSFS" == this.data.name && this.refreshCSLFunc && this.refreshCSLFunc();
        "\u73a9\u6cd5" == this.data.desc && "wanfa" == this.data.name && 3 == this.data.num && this.refreshHuChiJokerFun && this.refreshHuChiQiangGangFun("selected", index);
        "\u9b3c\u724c" == this.data.desc && "joker" == this.data.name && this.refreshHuChiJokerFun && this.refreshHuChiJokerFun();
        "jokerTuo" == this.data.name && this.refreshHuChiJokerTuoFun && this.refreshHuChiJokerTuoFun("selected", index);
        "\u9a6c\u724c" == this.data.desc && "mapai" == this.data.name && this.refreshHuChiMaPaiFun && this.refreshHuChiMaPaiFun();
        "\u62d3\u5c55" == this.data.desc && "tuoz" == this.data.name && (0 != index && 1 != index || this.refreshHuChiQiDuiFun && this.refreshHuChiQiDuiFun(index));
      },
      setRefreshRoomTypeFun: function setRefreshRoomTypeFun(func) {
        this.refreshRoomTypeFunc = func;
      },
      setRefreshCSLFun: function setRefreshCSLFun(func) {
        this.refreshCSLFunc = func;
      },
      setRefreshPayFun: function setRefreshPayFun(func) {
        this.refreshPayFunc = func;
      },
      setRefreshHuChiQiangGangFun: function setRefreshHuChiQiangGangFun(func) {
        this.refreshHuChiQiangGangFun = func;
      },
      setRefreshHuChiJokerFun: function setRefreshHuChiJokerFun(func) {
        this.refreshHuChiJokerFun = func;
      },
      setRefreshHuChiJokerTuoFun: function setRefreshHuChiJokerTuoFun(func) {
        this.refreshHuChiJokerTuoFun = func;
      },
      setRefreshHuChiJokerTuoSiGuiFun: function setRefreshHuChiJokerTuoSiGuiFun(func) {
        this.refreshHuChiJokerTuoSiGuiFun = func;
      },
      setRefreshHuChiMaPaiFun: function setRefreshHuChiMaPaiFun(func) {
        this.refreshHuChiMaPaiFun = func;
      },
      setRefreshHuChiQiDuiFun: function setRefreshHuChiQiDuiFun(func) {
        this.refreshHuChiQiDuiFun = func;
      },
      update: function update() {
        0 != this.toggleGroup.node.height && "undefined" != typeof this.toggleGroup.node.height && (this.node.height = this.toggleGroup.node.height);
      }
    });
    cc._RF.pop();
  }, {} ],
  Panel_Notice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "742d5cvaf5Llrx3qXexE1NS", "Panel_Notice");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        noticLab: cc.Label,
        mask: cc.Node
      },
      onLoad: function onLoad() {
        this.noticLab.node.x = this.mask.width / 2 + this.noticLab.node.width;
        this.noticLab.node.runAction(cc.moveTo(5, -(this.mask.width / 2 + this.noticLab.node.width), 0));
      },
      update: function update(dt) {
        if (this.noticLab.node.x <= -(this.mask.width / 2 + this.noticLab.node.width)) {
          this.noticLab.node.stopAllActions();
          this.noticLab.node.x = this.mask.width / 2 + this.noticLab.node.width;
          this.noticLab.node.runAction(cc.moveTo(5, -(this.mask.width / 2 + this.noticLab.node.width), 0));
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  PersonRealNameMsgBoxLayout: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fde8d+gY/VMJ47oP2Dl6aIT", "PersonRealNameMsgBoxLayout");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {
        this._super();
        this.node.setPosition(cc.v2(cc.winSize.width / 2, cc.winSize.height / 2));
      },
      init: function init(msgObj) {
        this.msgObj = msgObj;
        this.callbackFun = msgObj.callbackFun;
      },
      onButtonClick: function onButtonClick(event, param) {
        switch (param) {
         case "cancel":
          this.callbackFun(this.msgObj.btn2);
          break;

         case "sure":
          this.callbackFun(this.msgObj.btn1);
        }
        this.node.parent = null;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  PersonalInformation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b0771hy3hDAY2dGRsU0GoK", "PersonalInformation");
    "use strict";
    var _require = require("console"), timeStamp = _require.timeStamp;
    cc.Class({
      extends: cc.Component,
      properties: {
        rollViewleft: cc.Node,
        rollViewRight: cc.Node,
        personInfoPrefab: cc.Prefab,
        personVideoPrefab: cc.Prefab,
        personRealNamePrefab: cc.Prefab,
        annimetions: cc.Node,
        toggleContainer: cc.Node
      },
      init: function init(idx) {
        var node = this.toggleContainer.getChildByName("toggle" + (idx + 1));
        if (node) {
          var toggle = node.getComponent(cc.Toggle);
          this.onToggleContainerClick(toggle);
        } else this.btnLeftClick(idx);
      },
      onToggleContainerClick: function onToggleContainerClick(toggle) {
        toggle.check();
        switch (toggle.node.name) {
         case "toggle1":
          this.btnLeftClick(0);
          break;

         case "toggle2":
          this.btnLeftClick(1);
          break;

         case "toggle3":
          this.btnLeftClick(2);
        }
      },
      btnLeftClick: function btnLeftClick(index) {
        this.currentContent = index;
        this.rollViewRight.children.forEach(function(element) {
          element.destroy();
        });
        var tmp = null;
        if (0 == index) {
          tmp = cc.instantiate(this.personInfoPrefab);
          tmp.name = "personInfo";
        } else if (1 == index) {
          tmp = cc.instantiate(this.personVideoPrefab);
          tmp.name = "personVideo";
        } else if (2 == index) {
          tmp = cc.instantiate(this.personRealNamePrefab);
          tmp.name = "personRealName";
        }
        tmp.parent = this.rollViewRight;
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    console: 8
  } ],
  PhoneLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87a14ScYoZMCqZfpBdCb97P", "PhoneLayer");
    "use strict";
    var API = "phone";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        dengluNode: cc.Node,
        login_box: cc.EditBox,
        log_pwd_box: cc.EditBox,
        zhuceNode: cc.Node,
        r_or_b_phone_box: cc.EditBox,
        r_or_b_pwd_box: cc.EditBox,
        r_or_b_code_box: cc.EditBox,
        zhaohuiNode: cc.Node,
        first_node: cc.Node,
        getback_node: cc.Node,
        phone_box: cc.EditBox,
        code_box: cc.EditBox,
        pwd_box: cc.EditBox,
        c_pwd_box: cc.EditBox
      },
      onLoad: function onLoad() {
        this.LoginLogic = new (require("LoginLogic"))();
      },
      init: function init(callback) {
        callback && callback();
      },
      start: function start() {},
      doButton_ZhuCe: function doButton_ZhuCe() {
        this.dengluNode.active = false;
        this.zhuceNode.active = true;
        this.zhaohuiNode.active = false;
      },
      doButton_ZhaoHui: function doButton_ZhaoHui() {
        this.dengluNode.active = false;
        this.zhuceNode.active = false;
        this.zhaohuiNode.active = true;
      },
      doButton_Close: function doButton_Close() {
        if (true == this.zhuceNode.active) {
          this.zhuceNode.active = false;
          this.dengluNode.active = true;
        } else if (true == this.zhaohuiNode.active) {
          this.zhaohuiNode.active = false;
          this.dengluNode.active = true;
          this.first_node.active = true;
          this.getback_node.active = false;
        }
      },
      getback_pwd: function getback_pwd() {
        var n_pwd = this.pwd_box.string;
        var c_pwd = this.c_pwd_box.string;
        if (!this.vertifyAccountPwdText(n_pwd)) {
          createTips("\u8bf7\u8f93\u51656-16\u4f4d\u5bc6\u7801");
          return;
        }
        if (!n_pwd === c_pwd) {
          createTips("\u4e24\u6b21\u5bc6\u7801\u4e0d\u5339\u914d");
          return;
        }
        var code = this.code_box.string;
        if (6 != code.length) {
          createTips("\u8bf7\u8f93\u51656\u4f4d\u9a8c\u8bc1\u7801");
          return;
        }
        32 === n_pwd.length ? this.reset_pwd(this.phone, n_pwd, code, E_RegStatus.LOGIN) : this.reset_pwd(this.phone, hex_md5(n_pwd), code, E_RegStatus.LOGIN);
      },
      getback_next: function getback_next() {
        this.phone = this.phone_box.string;
        if (11 != this.phone.length || "" == this.phone) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7");
          return;
        }
        this.update_getback_node();
        this.first_node.active = false;
        this.getback_node.active = true;
      },
      update_getback_node: function update_getback_node() {
        var phone_label = this.getback_node.getChildByName("PhoneLabel").getComponent(cc.Label);
        var str = "\u60a8\u6b63\u5728\u4e3a\u8d26\u53f7:" + this.phone + "\u627e\u56de\u5bc6\u7801";
        phone_label.string = str;
      },
      bind_code: function bind_code() {
        this.get_code(this.r_or_b_phone_box);
      },
      reset_code: function reset_code() {
        this.get_code(this.phone_box);
      },
      get_code: function get_code(phone_box) {
        cc.log(phone_box.string);
        var phone = phone_box.string;
        if (11 != phone.length || "" == phone) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7");
          return;
        }
        var actionName = "bindPhoneCode";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          0 == jsonData.status ? createTips("\u53d1\u9001\u6210\u529f") : createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          phone: phone,
          address: "86"
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        args.requestDesc = "\u53d1\u9001\u9a8c\u8bc1\u7801...";
        MyHttpRequest.doRequest(args);
      },
      reset_pwd: function reset_pwd(phone, pwd, code, status) {
        var actionName = "resetPhonePassword";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          0 == jsonData.status ? createTips("\u91cd\u8bbe\u5bc6\u7801\u6210\u529f") : createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          phone: phone,
          code: code,
          password: pwd,
          address: "86"
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        args.requestDesc = "\u91cd\u8bbe\u5bc6\u7801...";
        MyHttpRequest.doRequest(args);
      },
      doButton_BindClick: function doButton_BindClick() {
        var phone = this.r_or_b_phone_box.string;
        var code = this.r_or_b_code_box.string;
        if ("" == phone || 11 != phone.length) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7");
          return;
        }
        var pwd = this.r_or_b_pwd_box.string;
        if (!this.vertifyAccountPwdText(pwd)) {
          createTips("\u8bf7\u8f93\u51656-16\u4f4d\u5bc6\u7801");
          return;
        }
        32 === pwd.length ? this.bind_phone(phone, pwd, code, E_RegStatus.LOGIN) : this.bind_phone(phone, hex_md5(pwd), code, E_RegStatus.LOGIN);
      },
      bind_phone: function bind_phone(phone, pwd, code, status) {
        var actionName = "bindPhone";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          if (0 == jsonData.status) {
            var info = jsonData.data;
            cc.log("#######################", info);
            createTips(info);
          } else createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          userID: UserInfoManager.getMyInfo().userID,
          phone: phone,
          code: code,
          password: pwd,
          wechat: "",
          address: "86"
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        args.requestDesc = "\u7ed1\u5b9a\u624b\u673a\u4e2d...";
        MyHttpRequest.doRequest(args);
      },
      login: function login() {
        var acc = this.login_box.string;
        var pwd = this.log_pwd_box.string;
        if (!this.vertifyAccountPwdText(acc)) {
          createTips("\u8bf7\u8f93\u51656-16\u4f4d\u8d26\u53f7");
          return;
        }
        if (!this.vertifyAccountPwdText(pwd, true)) {
          createTips("\u8bf7\u8f93\u51656-16\u4f4d\u5bc6\u7801");
          return;
        }
        32 === pwd.length ? this.doLoginLobby(acc, pwd, E_RegStatus.LOGIN, pwd) : this.doLoginLobby(acc, hex_md5(pwd), E_RegStatus.LOGIN, pwd);
      },
      doLoginLobby: function doLoginLobby(acc, pwd, status, realPwd) {
        cc.log("acc = ", acc);
        cc.log("realPwd = ", realPwd);
        var onRegistResult = function(bResult, userID, userToken) {
          if (bResult) {
            LobbySocket.setLoginDelegate(this);
            if (status === E_RegStatus.LOGIN) this.LoginLogic.loginLobby(userID, userToken); else {
              var btnName1 = "\u786e \u5b9a";
              var msgCallback = function(btnName) {
                btnName === btnName1 && this.LoginLogic.loginLobby(userID, userToken);
              }.bind(this);
              var msgObj = {};
              msgObj.msg = "\u6ce8\u518c\u6210\u529f, \u76f4\u63a5\u767b\u5f55\u5427";
              msgObj.btn1 = "\u786e \u5b9a";
              msgObj.callbackFun = msgCallback;
              createMsgBox(msgObj);
            }
          }
        }.bind(this);
        var args = {};
        args.unionid = "";
        args.regType = E_RegType.PC;
        args.regWay = E_RegWay.COMMON;
        args.acc = acc;
        args.psw = pwd;
        args.regStatus = status;
        args.sex = E_UserSex.MALE;
        args.headURL = "";
        this.LoginLogic.accountRegist(args, onRegistResult, realPwd);
      },
      vertifyAccountPwdText: function vertifyAccountPwdText(t, isPwd) {
        if (isPwd && 32 === t.length) return true;
        if ("" === t || t.length < 6 || t.length > 16) return false;
        return true;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LoginLogic: "LoginLogic"
  } ],
  PlayerInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a3a2DKpLlDHLN3zc7kHGAO", "PlayerInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Text_Value_name: cc.Label,
        Text_Value_userid: cc.Label,
        Text_Value_week_money: cc.Label,
        Text_Value_under_achievement: cc.Label,
        Text_Value_team_size: cc.Label,
        Text_Value_direct_player: cc.Label,
        Text_Value_type: cc.Label,
        PromotionMyPlayer: cc.Prefab,
        PromotionBaoDi_Button: cc.Node
      },
      start: function start() {},
      init: function init(data, node, callback) {
        this.data = data;
        this.Layer = node;
        this.callback = callback;
        this.Text_Value_name.string = data.name;
        this.Text_Value_userid.string = data.userid;
        data.week_money && (this.Text_Value_week_money.string = String(Number(data.week_money) / G_MULTI_NUM));
        data.under_achievement && (this.Text_Value_under_achievement.string = String(Number(data.under_achievement) / G_MULTI_NUM));
        this.Text_Value_team_size.string = String(data.team_size);
        this.Text_Value_direct_player.string = data.direct_player;
        if (0 == data.direct_player) {
          this.PromotionBaoDi_Button.color = cc.color(130, 130, 130, 255);
          this.PromotionBaoDi_Button.getComponent(cc.Button).interactable = false;
          this.Text_Value_week_money.string = "";
          this.Text_Value_under_achievement.string = "";
          this.Text_Value_team_size.string = "";
          this.Text_Value_direct_player.string = "";
        }
      },
      doButton: function doButton() {
        cc.log(this.data);
        var item = cc.instantiate(this.PromotionMyPlayer);
        var script = item.getComponent("PromotionMyPlayer");
        script.init(this.data, this.callback);
        this.Layer.addChild(item);
      }
    });
    cc._RF.pop();
  }, {} ],
  PlayerListLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68f79JF30pCsYvLLVyAS760", "PlayerListLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        ListView_Player: cc.Node,
        Panel_Player: cc.Prefab
      },
      init: function init(info, _delegete) {
        var _this = this;
        this._delegete = _delegete;
        info.sort(function(a, b) {
          if (a.money == b.money) return a.deskStation - b.deskStation;
          return b.money - a.money;
        });
        var onAddPlayerCallback = function onAddPlayerCallback(listView, item, data, pos) {
          var handImg = item.getChildByName("Image_handImg");
          var money = item.getChildByName("Text_goods");
          var Text_name = item.getChildByName("Text_name");
          money && cc.isValid(money) && (money.getComponent(cc.Label).string = tools.toAtlasValue(data.money));
          if (data.name) {
            Text_name && cc.isValid(Text_name) && (Text_name.getComponent(cc.Label).string = data.name);
            var onGetHeadRes = function onGetHeadRes(headRes) {
              handImg && cc.isValid(handImg) && (handImg.getComponent(cc.Sprite).spriteFrame = headRes);
            };
            AvatarManager.requestHeadRes(data.headURL, data.userID, onGetHeadRes, handImg);
          } else UserInfoManager.requestUserInfoByUserID(data.userID, function(userInfo) {
            if (Text_name && handImg && cc.isValid(Text_name) && cc.isValid(handImg)) {
              Text_name.getComponent(cc.Label).string = userInfo.name;
              var _onGetHeadRes = function _onGetHeadRes(headRes) {
                handImg && cc.isValid(handImg) && (handImg.getComponent(cc.Sprite).spriteFrame = handImg.getComponent(cc.Sprite).spriteFrame = headRes);
              };
              AvatarManager.requestHeadRes(userInfo.headURL, data.userID, _onGetHeadRes, handImg);
            }
          });
          data.isNotAll && _this._delegete.tableLogic.sendDeskOneUserInfo(data.deskStation);
        };
        F_InitListView(info, onAddPlayerCallback, this.ListView_Player, this.Panel_Player, 3);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  PlayerUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff456hEM/JD84Jn5MuxR6Mh", "PlayerUI");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Image_RoomMaster: cc.Node,
        Image_AutoPic: cc.Node,
        Image_ReadyPic: cc.Node,
        Image_Avatar: cc.Sprite,
        Text_Name: cc.Label,
        Text_Money: cc.Label,
        text_id: cc.Label,
        Image_BetBg: cc.Node,
        Text_BetNum: cc.Label,
        timerProg: cc.ProgressBar,
        text_dun: cc.Label,
        img_backCard: cc.Node,
        text_leftCard: cc.Label,
        img_rank: cc.Sprite,
        img_rank1: cc.SpriteFrame,
        img_rank2: cc.SpriteFrame,
        img_rank3: cc.SpriteFrame,
        img_rank4: cc.SpriteFrame,
        img_daDu: cc.Node
      },
      setData: function setData(user, target) {
        this.user = user;
        this.target = target;
        this.initData(user);
      },
      initData: function initData(user) {
        var _this = this;
        if (!user || !this.Text_Name) return;
        var onGetHeadRes = function onGetHeadRes(avataRes) {
          if (_this.Image_Avatar && cc.isValid(_this.Image_Avatar)) {
            var layerMask = _this.Image_Avatar.node.getChildByName("layerMask");
            layerMask && layerMask.removeFromParent();
            _this.Image_Avatar.spriteFrame = avataRes;
          }
        };
        AvatarManager.requestHeadRes(user.headURL, user.userID, onGetHeadRes, this.Image_Avatar);
        user.name = decodeURI(user.name);
        user.name.length > 8 ? this.Text_Name.string = user.name.substring(0, 8) + "..." : this.Text_Name.string = user.name;
        if (RoomListManager.getRoomInfo()) {
          var moneyValue = user.score;
          moneyValue = RoomListManager.getRoomInfo().type == E_ROOM_TYPE.CARD ? user.score : RoomListManager.getRoomInfo().type == E_ROOM_TYPE.GOLD ? F_GetMoneyDisplay(Number(user.money)) : RoomListManager.getRoomInfo().type == E_ROOM_TYPE.PRIVATE ? user.money : RoomListManager.getRoomInfo().type == E_ROOM_TYPE.MATCH || RoomListManager.getRoomInfo().type == E_ROOM_TYPE.REALMATCH || RoomListManager.getRoomInfo().type == E_ROOM_TYPE.BARRIERMATCH ? user.score : user.money;
          var GameLogicBase = new (require("GameLogicBase"))();
          this.Text_Money.string = tools.formatNumberEx(moneyValue);
        } else this.Text_Money.string = tools.toAtlasValue(user.score);
        this.text_id && (this.text_id.string = "ID:" + user.userID);
      },
      onLoad: function onLoad() {
        this.curTime = 0;
        this.showPersonMsgDialog = function(eventTouch) {
          this.target && this.user && this.target.showPersonMsgDialog(this.user, this.Image_Avatar.node, this.node, this.target);
        }.bind(this);
        this.node.on(cc.Node.EventType.TOUCH_START, this.showPersonMsgDialog);
      },
      getImageAvatar: function getImageAvatar() {
        return this.Image_Avatar.node;
      },
      showBanker: function showBanker(bShow) {},
      showCut: function showCut() {
        if (this.Image_Avatar) {
          var node = new cc.Node();
          var layerMask = node.addComponent("LayerMask");
          layerMask.maskWidth = this.Image_Avatar.node.width;
          layerMask.maskHeight = this.Image_Avatar.node.height;
          node.opacity = 220;
          layerMask.clickToClose = false;
          layerMask.maskOpacity = 230;
          node.name = "layerMask";
          this.Image_Avatar.node.addChild(node);
          layerMask.setLayerMaskButton(true);
          this.showWords("\u4e0d\u597d\u610f\u601d,\u79bb\u5f00\u4e00\u4e0b\u4e0b");
        }
      },
      showPlayRoomMaster: function showPlayRoomMaster(masterID) {
        if (this.Image_RoomMaster) {
          this.Image_RoomMaster.active = false;
          this.user.userID == masterID && (this.Image_RoomMaster.active = false);
        }
      },
      showAuto: function showAuto(bShow) {
        this.Image_AutoPic && (this.Image_AutoPic.active = false);
      },
      showReady: function showReady(bShow) {
        this.Image_ReadyPic && (this.Image_ReadyPic.active = bShow);
      },
      showWords: function showWords(words, bBoy, gameTable) {
        console.log("PlayerUI showWords", words);
        if (this.node.getComponent("UiShowWords")) {
          this.node.getComponent("UiShowWords").showWords(words, bBoy, gameTable);
          this.node.getComponent("UiShowWords").delayClearWords(3);
        }
      },
      showBet: function showBet(bShow, bet) {
        if (this.Image_BetBg) {
          if (!bShow) {
            this.Image_BetBg.active = false;
            return;
          }
          this.Image_BetBg.active = true;
          this.Text_BetNum.getComponent(cc.Label).string = String(bet);
        }
      },
      updateJewels: function updateJewels(jewels) {
        this.user.jewels = jewels;
      },
      updateMoney: function updateMoney(money, lastMoney, resourceType, AfterchoushuMoney) {
        var self = this;
        var startUpdate = function startUpdate() {
          AfterchoushuMoney ? E_ResourceType.GOLD == resourceType ? self.Text_Money.string = tools.formatNumberEx(F_GetMoneyDisplay(Number(AfterchoushuMoney)), 2) : self.Text_Money.string = tools.formatNumberEx(Number(AfterchoushuMoney), 2) : E_ResourceType.GOLD == resourceType ? self.Text_Money.string = tools.formatNumberEx(F_GetMoneyDisplay(Number(money)), 2) : self.Text_Money.string = tools.formatNumberEx(Number(money), 2);
        };
        var profit = money - lastMoney;
        if (0 == profit) {
          startUpdate();
          return;
        }
        var up = cc.moveBy(1, cc.v2(0, 20));
        var down = cc.moveBy(1, cc.v2(0, -20));
        var a1 = cc.callFunc(startUpdate, {});
        var a2 = cc.delayTime(1);
        var a3 = cc.removeSelf();
        var scoreLabel = null;
        var label = null;
        var roomType = RoomListManager.getRoomInfo().type;
        roomType != E_ROOM_TYPE.PRIVATE && roomType != E_ROOM_TYPE.TABLE && roomType != E_ROOM_TYPE.GOLD || (profit = F_GetMoneyDisplay(profit));
        var GameLogicBase = new (require("GameLogicBase"))();
        GameLogicBase.isGoldRoom();
        if (profit > 0) {
          label = createBitmapFontLabel("+" + Math.abs(profit), "font/result_font_num_win_yellow");
          label.runAction(cc.sequence(up, a1, a2, a3));
        } else {
          label = createBitmapFontLabel("-" + Math.abs(profit), "font/result_font_num_lose_blue");
          label.runAction(cc.sequence(down, a1, a2, a3));
        }
        label.setAnchorPoint(self.Text_Money.node.getAnchorPoint());
        label.setPosition(self.Text_Money.node.getPosition());
        self.Text_Money.node.parent.addChild(label);
      },
      playSuanPai: function playSuanPai() {
        var imgAvat = this.Image_Avatar.node;
        var tmpDelay = function(dt) {
          var jsonName = tools.stringFormat("NJJ/effect/suanpai/skeleton");
          var animation = skeletonAnimationCreate(jsonName, "animation");
          this._isNine && 0 != viewSeatNo && animation.setScale(.75);
          animation.name = "suanpai";
          animation.setAnchorPoint(cc.v2(.5, .5));
          animation.setPosition(cc.v2(-3, 0));
          animation.loop = true;
          imgAvat.addChild(animation);
        }.bind(this);
        this.scheduleOnce(tmpDelay, 0);
      },
      update: function update(dt) {
        this.totalTime = 30;
        if (this.isRunTime) {
          this.curTime += dt;
          this.curTime >= 30 && this.stopRunTime();
          this.runTime();
        }
      },
      beginRunTime: function beginRunTime() {
        this.isRunTime = true;
        this.curTime = 0;
      },
      stopRunTime: function stopRunTime() {
        var _this2 = this;
        this.isRunTime = false;
        var callback = function callback() {
          _this2.timerProg.node.active = !_this2.timerProg.node.active;
        };
        this.schedule(callback, .2);
      },
      recoverTimerProg: function recoverTimerProg() {
        this.timerProg.node.active = true;
        this.timerProg.progress = 0;
      },
      hideRunTime: function hideRunTime() {
        this.unscheduleAllCallbacks();
        this.recoverTimerProg();
        this.isRunTime = false;
        this.curTime = 0;
      },
      runTime: function runTime() {
        var value = this.curTime / this.totalTime;
        this.timerProg.progress = value;
      },
      setDun: function setDun(dun) {
        this.text_dun.string = dun;
      },
      setBackVisible: function setBackVisible(v) {
        this.img_backCard && (this.img_backCard.active = v);
      },
      setLeftCardNum: function setLeftCardNum(num) {
        if (!this.text_leftCard) return;
        this.text_leftCard.node.active = 0 != num;
        this.text_leftCard.string = num;
      },
      showRank: function showRank(rank) {
        this.img_rank.node.active = true;
        this.img_rank.spriteFrame = this["img_rank" + rank];
      },
      hideRank: function hideRank() {
        this.img_rank.node.active = false;
      },
      getImageDaDuNode: function getImageDaDuNode() {
        return this.img_daDu;
      },
      showDadu: function showDadu() {
        this.img_daDu.active = true;
      },
      hideDadu: function hideDadu() {
        this.img_daDu.active = false;
      },
      clearDun: function clearDun() {
        this.text_dun.string = "0";
      },
      clearSuanPai: function clearSuanPai() {
        var suanpai = this.Image_Avatar.node.getChildByName("suanpai");
        suanpai && (suanpai.parent = null);
      },
      clear: function clear() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    GameLogicBase: "GameLogicBase"
  } ],
  Point2DUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fddeAXrEhLrrA2KmH4pFMj", "Point2DUtils");
    "use strict";
    var Point2DUtils = {
      getDirection: function getDirection(s, e) {
        var m = e.sub(s);
        var radians = Math.atan(m.y / m.x);
        m.x < 0 && (radians += Math.PI);
        m.x >= 0 && m.y < 0 && (radians += 2 * Math.PI);
        return radians;
      }
    };
    module.exports = Point2DUtils;
    cc._RF.pop();
  }, {} ],
  PolygonMask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13174+AsrpJR7gkjlvKfuOl", "PolygonMask");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, executeInEditMode = _a.executeInEditMode, disallowMultiple = _a.disallowMultiple, requireComponent = _a.requireComponent, menu = _a.menu;
    cc.macro.ENABLE_WEBGL_ANTIALIAS = true;
    var PolygonMask = function(_super) {
      __extends(PolygonMask, _super);
      function PolygonMask() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mask = null;
        _this._points = new Array(cc.v2(-50, -50), cc.v2(-50, 50), cc.v2(50, 50), cc.v2(50, -50));
        return _this;
      }
      Object.defineProperty(PolygonMask.prototype, "points", {
        get: function() {
          return this._points;
        },
        set: function(v) {
          this._points = v;
          this.updateMask(this._points);
        },
        enumerable: false,
        configurable: true
      });
      PolygonMask.prototype.onEnable = function() {
        this.mask = this.getComponent(cc.Mask);
        this.updateMask(this._points);
      };
      PolygonMask.prototype.updateMask = function(points) {
        if (points.length < 3) return;
        this.mask["points"] = points;
        this.mask["onDraw"] = this.onDraw.bind(this.mask);
        this.mask["_updateGraphics"] = this._updateGraphics.bind(this.mask);
        this.mask.type = cc.Mask.Type.RECT;
      };
      PolygonMask.prototype._updateGraphics = function() {
        var graphics = this._graphics;
        if (!graphics) return;
        this.onDraw(graphics);
      };
      PolygonMask.prototype.onDraw = function(graphics) {
        graphics.clear(false);
        graphics.lineWidth = 2;
        var points = this.points;
        graphics.moveTo(points[0].x, points[0].y);
        for (var i = 0; i < points.length; i++) i == points.length - 1 ? graphics.lineTo(points[0].x, points[0].y) : graphics.lineTo(points[i + 1].x, points[i + 1].y);
        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? graphics.stroke() : graphics.fill();
      };
      __decorate([ property() ], PolygonMask.prototype, "_points", void 0);
      __decorate([ property({
        type: [ cc.Vec2 ],
        displayName: "\u70b9\u96c6\u5408",
        min: 3,
        tooltip: "\u6784\u5efa\u591a\u8fb9\u5f62\u7684\u70b9\u96c6\u5408\uff0c\u6700\u5c11\u4e09\u4e2a\u70b9"
      }) ], PolygonMask.prototype, "points", null);
      PolygonMask = __decorate([ ccclass, executeInEditMode(true), disallowMultiple(true), requireComponent(cc.Mask), menu("\u6269\u5c55/\u591a\u8fb9\u5f62\u906e\u7f69") ], PolygonMask);
      return PolygonMask;
    }(cc.Component);
    exports.default = PolygonMask;
    cc._RF.pop();
  }, {} ],
  PoolMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c07c0ksCvxEA6YriH9DnTo7", "PoolMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PoolMgr = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PoolMgr = function() {
      function PoolMgr() {
        this._dictPool = {};
        this._dictPrefab = {};
      }
      Object.defineProperty(PoolMgr, "instance", {
        get: function() {
          if (this._instance) return this._instance;
          this._instance = new PoolMgr();
          return this._instance;
        },
        enumerable: false,
        configurable: true
      });
      PoolMgr.prototype.getNode = function(prefab, parent) {
        var name = prefab.name;
        prefab.position || (name = prefab.data.name);
        this._dictPrefab[name] = prefab;
        var node = null;
        if (this._dictPool.hasOwnProperty(name)) {
          var pool = this._dictPool[name];
          node = pool.size() > 0 ? pool.get() : cc.instantiate(prefab);
        } else {
          var pool = new cc.NodePool();
          this._dictPool[name] = pool;
          node = cc.instantiate(prefab);
        }
        node.parent = parent;
        node.active = true;
        return node;
      };
      PoolMgr.prototype.putNode = function(node) {
        if (!node) return;
        var name = node.name;
        var pool = null;
        if (this._dictPool.hasOwnProperty(name)) pool = this._dictPool[name]; else {
          pool = new cc.NodePool();
          this._dictPool[name] = pool;
        }
        pool.put(node);
      };
      PoolMgr.prototype.prePool = function(prefab, nodeNum) {
        var name = prefab.name;
        var pool = null;
        if (this._dictPool.hasOwnProperty(name)) pool = this._dictPool[name]; else {
          pool = new cc.NodePool();
          this._dictPool[name] = pool;
        }
        this._dictPrefab[name] = prefab;
        for (var i = 0; i < nodeNum; i++) {
          var node = cc.instantiate(prefab);
          pool.put(node);
        }
      };
      PoolMgr.prototype.clearPool = function(name) {
        if (this._dictPool.hasOwnProperty(name)) {
          var pool = this._dictPool[name];
          pool.clear();
        }
      };
      PoolMgr._instance = null;
      return PoolMgr;
    }();
    exports.PoolMgr = PoolMgr;
    cc._RF.pop();
  }, {} ],
  PriveLayout: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b2f4ni14JLJ44k6oQg2ccf", "PriveLayout");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {},
      init: function init() {},
      doButton_Close: function doButton_Close() {
        this.node && this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  PromotionLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7ebf7PDh8dADoDX6Ihu0pDP", "PromotionLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        TuiGuangBtn: cc.Node,
        TuiGuangNode: cc.Node,
        WanJiaBtn: cc.Node,
        WanJiaNode: cc.Node,
        YeJiBtn: cc.Node,
        YeJiNode: cc.Node,
        JiangLiBtn: cc.Node,
        JiangLiNode: cc.Node,
        YuTiBtn: cc.Node,
        YuTiNode: cc.Node,
        ShuoMingBtn: cc.Node,
        ShuoMingNode: cc.Node,
        playerInfo: cc.Prefab,
        shuomingInfo: cc.Prefab,
        MyPromotionNode: cc.Node,
        MyPromotionList: cc.Node,
        Image_QRCode: cc.Node,
        QRCode_Tips: cc.Label,
        WDTG_Text_InviteCode: cc.Label,
        WDTG_Text_Link: cc.Label,
        WDWJ_View: cc.Node,
        WDWJ_Button_Last: cc.Button,
        WDWJ_Button_Next: cc.Button,
        WDWJ_Text_PageCount: cc.Label,
        WDWJ_Text_PageCount_max: cc.Label,
        inputText: cc.EditBox,
        WDYJ_Text_PageCount: cc.Label,
        WDYJ_Text_PageCount_max: cc.Label,
        WDYJ_Text_Week: cc.Node,
        WDYJ_Text_Value: [ cc.Node ],
        WDYJ_Button_Last: cc.Button,
        WDYJ_Button_Next: cc.Button,
        MyAwardInfo: cc.Prefab,
        WDJL_View: cc.Node,
        WDYT_Node: cc.Node,
        WDYT_Text_All: cc.Node,
        Text_TotalMoney: cc.Label,
        Text_Value: [ cc.Node ],
        WithdrawLayer: cc.Node,
        EditBox_Input: cc.EditBox,
        Text_Value_YuE: cc.Label,
        JLSM_View: cc.Node,
        ShuoMingInfo: cc.Prefab,
        Panel_shipei: cc.Node,
        Panel_shipeiBtn: cc.Node
      },
      onLoad: function onLoad() {
        if (cc.winSize.width / 1280 < 1) {
          this.Panel_shipei.setScale(cc.winSize.width / 1280);
          this.Panel_shipeiBtn.setScale(cc.winSize.width / 1280);
        }
        this.AllNodeFalse();
        this.TuiGuangBtn.active = true;
        this.TuiGuangNode.active = true;
        this.curMyPlayerPage = 1;
        this.totalMyPlayerPage = 1;
        this.curMyAchievementPage = 1;
        this.totalMyAchievementPage = 1;
        this.PromotionLogic = new (require("PromotionLogic"))();
        this.isTuiGuang();
        this.WDYT_Node.children[0]._components[0].string = "\u65f6\u95f4";
        this.WDYT_Node.children[1]._components[0].string = "\u5355\u53f7";
        this.WDYT_Node.children[2]._components[0].string = "\u91d1\u989d";
        this.WDYT_Node.children[3]._components[0].string = "\u7c7b\u578b";
        this.WDYT_Node.children[4]._components[0].string = "\u63d0\u73b0\u8d26\u53f7";
        this.WDYT_Node.children[5]._components[0].string = "\u72b6\u6001";
        this.MyPromotionNode.children[0]._components[0].string = "\u4e0a\u7ea7ID";
        this.MyPromotionNode.children[1]._components[0].string = "ID";
        this.MyPromotionNode.children[2]._components[0].string = "\u56e2\u961f\u4eba\u6570";
        this.MyPromotionNode.children[3]._components[0].string = "\u76f4\u5c5e\u73a9\u5bb6";
        this.MyPromotionNode.children[4]._components[0].string = "\u4eca\u65e5\u65b0\u589e";
        this.MyPromotionNode.children[5]._components[0].string = "\u4eca\u65e5\u6d3b\u8dc3";
      },
      AllNodeFalse: function AllNodeFalse() {
        this.TuiGuangNode.active = false;
        this.WanJiaNode.active = false;
        this.YeJiNode.active = false;
        this.JiangLiNode.active = false;
        this.YuTiNode.active = false;
        this.ShuoMingNode.active = false;
        this.TuiGuangBtn.active = false;
        this.WanJiaBtn.active = false;
        this.YeJiBtn.active = false;
        this.JiangLiBtn.active = false;
        this.YuTiBtn.active = false;
        this.ShuoMingBtn.active = false;
      },
      start: function start() {},
      isTuiGuang: function isTuiGuang() {
        this.AllNodeFalse();
        this.TuiGuangBtn.active = true;
        this.TuiGuangNode.active = true;
        this.showMyPromotionView();
      },
      isWanJia: function isWanJia() {
        this.AllNodeFalse();
        this.WanJiaBtn.active = true;
        this.WanJiaNode.active = true;
        this.showMyPlayerView();
      },
      isYeJi: function isYeJi() {
        this.AllNodeFalse();
        this.YeJiBtn.active = true;
        this.YeJiNode.active = true;
        this.showMyAchieveMentView();
      },
      isJiangLi: function isJiangLi() {
        this.AllNodeFalse();
        this.JiangLiBtn.active = true;
        this.JiangLiNode.active = true;
        this.showMyAwardView();
      },
      isYuTi: function isYuTi() {
        this.AllNodeFalse();
        this.YuTiBtn.active = true;
        this.YuTiNode.active = true;
        this.showMyProWithdrawView();
      },
      isShuoMing: function isShuoMing() {
        this.AllNodeFalse();
        this.ShuoMingBtn.active = true;
        this.ShuoMingNode.active = true;
        this.showDescritionView();
      },
      showMyPromotionView: function showMyPromotionView() {
        var _this = this;
        var callback = function callback(info) {
          info && _this.showMyPromotionList(info);
        };
        this.PromotionLogic.requestMyPromotion(callback);
      },
      showMyPromotionList: function showMyPromotionList(info) {
        cc.log("showMyPromotionListshowMyPromotionListshowMyPromotionList", info);
        this.MyPromotionList.children[0]._components[0].string = info.superior_agentid || "";
        this.MyPromotionList.children[1]._components[0].string = info.userid;
        this.MyPromotionList.children[2]._components[0].string = String(info.team_size);
        this.MyPromotionList.children[3]._components[0].string = info.direct_player;
        this.MyPromotionList.children[4]._components[0].string = info.add_today;
        this.MyPromotionList.children[5]._components[0].string = info.active_today;
        this.WDTG_Text_InviteCode.string = info.userid;
        this.url = info.url;
        this.WDTG_Text_Link.string = tools.getCutStringByCount(this.url, 14);
        this.QR_Code();
      },
      QR_Code: function QR_Code() {
        var qrcode = new QRCode(-1, QRErrorCorrectLevel.H);
        qrcode.addData(this.url);
        qrcode.make();
        var ctx = this.Image_QRCode.getComponent(cc.Graphics);
        var tileW = this.Image_QRCode.width / qrcode.getModuleCount();
        var tileH = this.Image_QRCode.height / qrcode.getModuleCount();
        for (var row = 0; row < qrcode.getModuleCount(); row++) for (var col = 0; col < qrcode.getModuleCount(); col++) {
          qrcode.isDark(row, col) ? ctx.fillColor = cc.Color.BLACK : ctx.fillColor = cc.Color.WHITE;
          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
          ctx.rect(Math.round(col * tileW), Math.round(row * tileH), w, h);
          ctx.fill();
        }
      },
      copyTextBut: function copyTextBut() {
        cc.sys.isNative ? cc.jsbMgr.copyToClipboard(this.url) : this.url && tools.copyTextFun(this.url) ? createTips("\u590d\u5236\u6210\u529f:" + this.url) : createTips("\u590d\u5236\u5931\u8d25\uff01");
      },
      showMyPlayerView: function showMyPlayerView(userID, page, num) {
        var _this2 = this;
        for (var i = 1; i < 9; i++) this.WDWJ_View.children[i] && this.WDWJ_View.children[i].destroy();
        this.inputText.string = "";
        var callback = function callback(info) {
          cc.log("showMyPlayerViewshowMyPlayerViewshowMyPlayerView");
          cc.log(info);
          _this2.showMyPlayerList(info.list);
          _this2.curMyPlayerPage = info.page || 1;
          _this2.totalMyPlayerPage = info.totalPage || 1;
          _this2.WDWJ_Text_PageCount.string = _this2.curMyPlayerPage;
          _this2.WDWJ_Text_PageCount_max.string = _this2.totalMyPlayerPage;
          if (1 == _this2.curMyPlayerPage && 1 == _this2.totalMyPlayerPage) {
            _this2.WDWJ_Button_Last.interactable = false;
            _this2.WDWJ_Button_Next.interactable = false;
          } else if (1 == _this2.curMyPlayerPage) {
            _this2.WDWJ_Button_Last.interactable = false;
            _this2.WDWJ_Button_Next.interactable = true;
          } else if (_this2.curMyPlayerPage == _this2.totalMyPlayerPage) {
            _this2.WDWJ_Button_Last.interactable = true;
            _this2.WDWJ_Button_Next.interactable = false;
          } else {
            _this2.WDWJ_Button_Last.interactable = true;
            _this2.WDWJ_Button_Next.interactable = true;
          }
        };
        this.PromotionLogic.requestMyPlayer(callback, userID, this.curMyPlayerPage, 8);
      },
      showMyPlayerList: function showMyPlayerList(data) {
        var _this3 = this;
        var callback = function callback() {
          _this3.showMyPlayerView();
        };
        for (var i = 0; i < data.length; i++) {
          var item = cc.instantiate(this.playerInfo);
          var script = item.getComponent("PlayerInfo");
          script.init(data[i], this.node, callback);
          this.WDWJ_View.addChild(item);
        }
      },
      doWDWJ_Button_NextClick: function doWDWJ_Button_NextClick() {
        this.curMyPlayerPage = this.curMyPlayerPage + 1;
        if (this.curMyPlayerPage > this.totalMyPlayerPage) {
          this.curMyPlayerPage = this.totalMyPlayerPage;
          return createTips("\u5230\u9876\u5566");
        }
        this.showMyPlayerView();
      },
      doWDWJ_Button_LastClick: function doWDWJ_Button_LastClick() {
        this.curMyPlayerPage = this.curMyPlayerPage - 1;
        if (this.curMyPlayerPage < 1) {
          this.curMyPlayerPage = 1;
          return createTips("\u5230\u5e95\u5566");
        }
        this.showMyPlayerView();
      },
      doWDWJ_Button_QueryClick: function doWDWJ_Button_QueryClick() {
        cc.log(this.inputText);
        if ("" == this.inputText.string) return createTips("\u73a9\u5bb6id\u4e0d\u80fd\u4e3a\u7a7a");
        this.showMyPlayerView(this.inputText.string);
      },
      showMyAchieveMentView: function showMyAchieveMentView() {
        var _this4 = this;
        for (var i = 0; i < 5; i++) {
          this.WDYJ_Text_Value[i].children[0]._components[0].string = "";
          this.WDYJ_Text_Value[i].children[1]._components[0].string = "";
          this.WDYJ_Text_Value[i].children[2]._components[0].string = "";
          this.WDYJ_Text_Value[i].children[3]._components[0].string = "";
        }
        var callback = function callback(info) {
          cc.log("showMyAchieveMentViewshowMyAchieveMentViewshowMyAchieveMentView", info);
          _this4.showMyAchievementList(info);
          _this4.curMyAchievementPage = Number(info.page) || 1;
          _this4.totalMyAchievementPage = info.total_page || 1;
          _this4.WDYJ_Text_PageCount.string = _this4.curMyAchievementPage;
          _this4.WDYJ_Text_PageCount_max.string = _this4.totalMyAchievementPage;
          if (1 == _this4.curMyAchievementPage && 1 == _this4.totalMyAchievementPage) {
            _this4.WDYJ_Button_Last.interactable = false;
            _this4.WDYJ_Button_Next.interactable = false;
          } else if (1 == _this4.curMyAchievementPage) {
            _this4.WDYJ_Button_Last.interactable = false;
            _this4.WDYJ_Button_Next.interactable = true;
          } else if (_this4.curMyAchievementPage == _this4.totalMyAchievementPage) {
            _this4.WDYJ_Button_Last.interactable = true;
            _this4.WDYJ_Button_Next.interactable = false;
          } else {
            _this4.WDYJ_Button_Last.interactable = true;
            _this4.WDYJ_Button_Next.interactable = true;
          }
        };
        this.PromotionLogic.requestMyAchievement(callback, null, this.curMyAchievementPage, 5);
      },
      doWDYJ_Button_LastClick: function doWDYJ_Button_LastClick() {
        this.curMyAchievementPage = this.curMyAchievementPage - 1;
        if (this.curMyAchievementPage < 1) {
          this.curMyAchievementPage = 1;
          return createTips("\u5230\u9876\u5566");
        }
        this.showMyAchieveMentView();
      },
      doWDYJ_Button_NextClick: function doWDYJ_Button_NextClick() {
        this.curMyAchievementPage = this.curMyAchievementPage + 1;
        if (this.curMyAchievementPage > this.totalMyAchievementPage) {
          this.curMyAchievementPage = this.totalMyAchievementPage;
          return createTips("\u5230\u5e95\u5566");
        }
        this.showMyAchieveMentView();
      },
      showMyAchievementList: function showMyAchievementList(info) {
        cc.log("showMyAchievementListshowMyAchievementListshowMyAchievementList");
        cc.log(info);
        if (info.week_money) {
          this.WDYJ_Text_Week.children[0]._components[0].string = String(Number(info.week_money / G_MULTI_NUM));
          this.WDYJ_Text_Week.children[1]._components[0].string = String(Number(info.not_under_achievement / G_MULTI_NUM));
          this.WDYJ_Text_Week.children[2]._components[0].string = String(Number(info.under_achievement / G_MULTI_NUM));
          this.WDYJ_Text_Week.children[3]._components[0].string = String(info.week_commission / G_MULTI_NUM);
          for (var i = 0; i < 5; i++) if (info.achievement[i]) if (2 == this.curMyAchievementPage) {
            this.WDYJ_Text_Value[i].children[0]._components[0].string = String(info.achievement[i + 5].data);
            this.WDYJ_Text_Value[i].children[1]._components[0].string = String(info.achievement[i + 5].personal_achievement / G_MULTI_NUM);
            this.WDYJ_Text_Value[i].children[2]._components[0].string = String(info.achievement[i + 5].team_achievement / G_MULTI_NUM);
            this.WDYJ_Text_Value[i].children[3]._components[0].string = String(info.achievement[i + 5].total_achievement / G_MULTI_NUM);
          } else {
            this.WDYJ_Text_Value[i].children[0]._components[0].string = String(info.achievement[i].data);
            this.WDYJ_Text_Value[i].children[1]._components[0].string = String(info.achievement[i].personal_achievement / G_MULTI_NUM);
            this.WDYJ_Text_Value[i].children[2]._components[0].string = String(info.achievement[i].team_achievement / G_MULTI_NUM);
            this.WDYJ_Text_Value[i].children[3]._components[0].string = String(info.achievement[i].total_achievement / G_MULTI_NUM);
          }
        }
      },
      showMyAwardView: function showMyAwardView() {
        var _this5 = this;
        var callback = function callback(info) {
          cc.log(info);
          info.length > 0 && _this5.showMyAwardList(info);
        };
        this.PromotionLogic.requestMyAward(callback);
      },
      showMyAwardList: function showMyAwardList(info) {
        this.WDJL_View.removeAllChildren();
        if (info.length > 0) for (var i = 0; i < info.length; i++) if (info[i]) {
          var item = cc.instantiate(this.MyAwardInfo);
          var script = item.getComponent("MyAwardInfo");
          script.init(info[i]);
          this.WDJL_View.addChild(item);
        }
      },
      showMyProWithdrawView: function showMyProWithdrawView() {
        var _this6 = this;
        var callback = function callback(info) {
          cc.log(info);
          _this6.showMyPreWithdrawList(info);
        };
        this.PromotionLogic.requestMyPreWithdraw(callback);
      },
      showMyPreWithdrawList: function showMyPreWithdrawList(info) {
        cc.log(info);
        this.WDYT_Text_All.children[0]._components[0].string = String(info.userid);
        this.WDYT_Text_All.children[1]._components[0].string = String(info.newTotal / G_MULTI_NUM);
        this.WDYT_Text_All.children[2]._components[0].string = String(info.enableDraw / G_MULTI_NUM);
        this.WDYT_Text_All.children[3]._components[0].string = String(Number(info.hasDraw) / G_MULTI_NUM);
        this.WDYT_Text_All.children[4]._components[0].string = String(info.shengyu / G_MULTI_NUM);
        this.Text_TotalMoney.string = String(info.week_bankcard / G_MULTI_NUM);
        this.saveRemainMoney = String(Number(info.shengyu / G_MULTI_NUM));
        if (info.apply_pos.length > 0) for (var i = 0; i < 6; i++) if (info.apply_pos[i]) {
          var date = new Date(1e3 * info.apply_pos[i].apply_time);
          var Y = date.getFullYear() + "";
          var M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "";
          var D = (date.getDate() < 10 ? "0" + date.getDate() : date.getDate()) + "";
          var h = (date.getHours() < 10 ? "0" + date.getHours() : date.getHours()) + ":";
          var m = (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes()) + ":";
          var s = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
          this.Text_Value[i].children[0]._components[0].string = String(Y + "/" + M + "/" + D + "\n" + h + m + s);
          this.Text_Value[i].children[1]._components[0].string = String(info.apply_pos[i].order);
          this.Text_Value[i].children[2]._components[0].string = String(Number(info.apply_pos[i].apply_amount / G_MULTI_NUM));
          this.Text_Value[i].children[3]._components[0].string = String(info.apply_pos[i].type);
          this.Text_Value[i].children[4]._components[0].string = String(info.apply_pos[i].userid);
          this.Text_Value[i].children[5]._components[0].string = String(info.apply_pos[i].status);
        }
      },
      doWDYT_Button_ProWithdraw: function doWDYT_Button_ProWithdraw() {
        if (this.saveRemainMoney) {
          this.WithdrawLayer.active = true;
          this.Text_Value_YuE.string = this.saveRemainMoney;
        } else createTips("\u83b7\u53d6\u53ef\u63d0\u73b0\u4f59\u989d\u5931\u8d25\uff0c\u8bf7\u9000\u51fa\u91cd\u8bd5");
      },
      doWDYT_Button_WithdrawLayer: function doWDYT_Button_WithdrawLayer() {
        this.WithdrawLayer.active = false;
      },
      doButton_ApplyClick: function doButton_ApplyClick() {
        var _this7 = this;
        if ("" == this.EditBox_Input.string) return createTips("\u8bf7\u8f93\u5165\u63d0\u73b0\u91d1\u989d");
        if (this.EditBox_Input.string > this.remianMoney) return createTips("\u8f93\u5165\u91d1\u989d\u4e0d\u80fd\u5927\u4e8e\u53ef\u63d0\u53d6\u91d1\u989d");
        var callback = function callback(info) {
          createTips("\u9886\u53d6\u6210\u529f");
          _this7.showMyProWithdrawView();
          _this7.doWDYT_Button_WithdrawLayer();
        };
        this.PromotionLogic.requestAddMoneyToGame(Number(this.EditBox_Input.string) * G_MULTI_NUM, callback);
      },
      showDescritionView: function showDescritionView() {
        var _this8 = this;
        var callback = function callback(info) {
          _this8.JLSM_View.removeAllChildren();
          _this8.showDescritionList(info);
        };
        this.PromotionLogic.requestDescrition(callback);
      },
      showDescritionList: function showDescritionList(listData) {
        for (var i = 0; i < listData.length; i++) {
          var item = cc.instantiate(this.ShuoMingInfo);
          var script = item.getComponent("ShuoMingInfo");
          script.init(listData[i]);
          this.JLSM_View.addChild(item);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    PromotionLogic: "PromotionLogic"
  } ],
  PromotionLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a3cfRHdEpA8LQzuY8WmqWp", "PromotionLogic");
    "use strict";
    var API = "agent";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      properties: {},
      ctor: function ctor() {},
      requestMyPromotion: function requestMyPromotion(callback) {
        var actionName = "my_promotion";
        var fCallback = function fCallback() {};
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestMyPlayer: function requestMyPlayer(callback, userID, page, num) {
        var actionName = "my_player";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: userID || this.getUserID(),
          page: page || 1,
          num: num || 8
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestMyAchievement: function requestMyAchievement(callback, userID, page, num) {
        var actionName = "my_achievements";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status, callback(jsonData.data);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: userID || this.getUserID(),
          page: page || 1,
          num: num || 5
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestMyAward: function requestMyAward(callback, userID) {
        var actionName = "my_reward";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: userID || this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestMyPreWithdraw: function requestMyPreWithdraw(callback, userID) {
        var actionName = "my_presentation";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: userID || this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestWithdraw: function requestWithdraw(callback, userID) {
        var actionName = "apply_pos";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: userID || this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestAddMoneyToGame: function requestAddMoneyToGame(money_num, callback) {
        var actionName = "apply_pos";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: this.getUserID(),
          money_num: money_num
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestDescrition: function requestDescrition(callback) {
        var actionName = "return_commission";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      },
      requestGuarantee: function requestGuarantee(subordinateUserID, num, callback) {
        var actionName = "set_bottom_guard";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            callback(jsonData.data);
            createTips(jsonData.msg);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = tools.stringFormat("http://" + G_PHP_IP + "/index.php/agent/ApiAgent/" + actionName);
        args.params = {
          userID: this.getUserID(),
          subordinateUserID: subordinateUserID,
          num: num
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.isSign = true;
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  PromotionMyPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b99b72mFSJDaIejwaB3hInb", "PromotionMyPlayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Edit: cc.EditBox,
        fanyongLabel: cc.Label,
        IDLabel: cc.Label,
        nameLabel: cc.Label
      },
      onLoad: function onLoad() {},
      init: function init(data, callback) {
        this.data = data;
        this.callback = callback;
        this.IDLabel.string = data.userid;
        this.nameLabel.string = data.name;
        this.fanyongLabel.string = "\u5f53\u524d\u4fdd\u5e95\u8fd4\u4f63 " + data.bottom_guard;
      },
      doButton_Sure: function doButton_Sure() {
        var _this = this;
        cc.log(this.data);
        if ("" == this.Edit.string) return createTips("\u8f93\u5165\u4e0d\u80fd\u4e3a\u7a7a");
        var callback = function callback(info) {
          cc.log(info);
          if (_this.callback) {
            _this.fanyongLabel.string = "\u5f53\u524d\u4fdd\u5e95\u8fd4\u4f63 " + _this.Edit.string;
            _this.callback();
          }
        };
        this.PromotionLogic = new (require("PromotionLogic"))();
        this.PromotionLogic.requestGuarantee(this.data.userid, Number(this.Edit.string) * G_MULTI_NUM, callback);
      },
      doButton_Close: function doButton_Close() {
        this.node.destroy();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {
    PromotionLogic: "PromotionLogic"
  } ],
  PublicProtocolId: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ac52furCihCmKDmqiQ5/60d", "PublicProtocolId");
    "use strict";
    window.E_NET_CONNECT_MAINID = {
      mainid_net_connect: 1,
      mainid_net_hello: 2
    };
    window.E_NET_CONNECT_ASSID = {
      assid_net_connect: 3,
      assid_net_test: 1,
      assid_net_hello: 2
    };
    window.E_ClientNetStatusProtocolDef = {
      NetStatusProtocol_ConnectSuccess: 8888880,
      NetStatusProtocol_ConnectFailed: 8888881,
      NetStatusProtocol_DisConnect: 8888882
    };
    cc._RF.pop();
  }, {} ],
  QieHuanBi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ac4fKSpeVKFoE76UcXfSf1", "QieHuanBi");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        xuanzhongUSDT: cc.Node,
        xuanzhongDT: cc.Node,
        btn_kai: cc.Node,
        btn_guan: cc.Node,
        StoreDragonLayer: cc.Prefab
      },
      onLoad: function onLoad() {
        this.num = 0;
      },
      start: function start() {},
      doButton_xuanzhong: function doButton_xuanzhong(event, num) {
        this.num = num;
        if (0 == num) {
          this.xuanzhongUSDT.active = true;
          this.xuanzhongDT.active = false;
        } else {
          this.xuanzhongUSDT.active = false;
          this.xuanzhongDT.active = true;
        }
      },
      doButton_kaiguan: function doButton_kaiguan() {
        if (true == this.btn_kai.active) {
          this.btn_kai.active = false;
          this.btn_guan.active = true;
        } else {
          this.btn_kai.active = true;
          this.btn_guan.active = false;
        }
      },
      doButton_store: function doButton_store() {
        var item = cc.instantiate(this.StoreDragonLayer);
        var script = item.getComponent("StoreDragonLayer");
        script.init(this.num);
        this.node.addChild(item);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  QualifyingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a712p5j+pGfp4zKaO5SLMt", "QualifyingLayer");
    "use strict";
    var qualifyingRes = "lobby/ui/Qualifying/";
    var richTextString = "<color = #ffb573>\u60a8\u8ddd\u79bb</c><color=#ffffff>{0}</c><color=#ffb573>\u8fd8\u5dee</color><color=#87d6ff>{1}</color><color=#ffb573>\u79ef\u5206</color>";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        img_avata: cc.Sprite,
        label_id: cc.Label,
        label_name: cc.Label,
        label_gold: cc.Label,
        img_season: cc.Sprite,
        img_duanwei_icon: cc.Sprite,
        img_duanwei_text: cc.Sprite,
        label_d_score: cc.Label,
        img_score: cc.Sprite,
        progress_score: cc.ProgressBar,
        tip_text: cc.RichText,
        panel_match_rank_game: cc.ScrollView,
        prefab_match_rank_game: cc.Prefab,
        progressNode: cc.ProgressBar
      },
      onEnable: function onEnable() {
        var _this = this;
        var combineMatchID = UserInfoManager.getMyInfo().combineMatchID;
        var matchStatus = UserInfoManager.getMyInfo().matchStatus;
        var gameExp = UserInfoManager.getMyInfo().gameExp;
        var UserLevel = UserInfoManager.getMyInfo().UserLevel;
        this.label_d_score.node.active = true;
        this.tip_text.node.active = true;
        var userRankInfo = getRankInfo(gameExp);
        var nextRankInfo = getNextRankInfo(gameExp);
        this.tip_text.string = "<color = #ffb573>\u60a8\u8ddd\u79bb</c><color=#ffffff>" + nextRankInfo.remark + "</c><color=#ffb573>\u8fd8\u5dee</color><color=#87d6ff>" + (nextRankInfo.gameExp - gameExp) + "</color><color=#ffb573>\u7ecf\u9a8c</color>";
        this.label_d_score.string = "\u7ecf\u9a8c\u503c\uff1a" + gameExp + " \u7b49\u7ea7\uff1a" + userRankInfo.remark;
        var d_img_name = "icon" + (parseInt(userRankInfo.level / 5) + 1);
        this.changeImg(d_img_name, this.img_duanwei_icon);
        console.log("dsfdsfadsfsf" + gameExp / nextRankInfo.gameExp);
        this.progressNode.progress = gameExp / nextRankInfo.gameExp;
        var getAllRoomList = function getAllRoomList(roomList) {
          var enterGameData = [];
          for (var i = 0; i < roomList.length; i++) roomList[i].sort == E_ROOM_SORT.RANKMATCH && enterGameData.push(roomList[i]);
          _this.panleMatchRankContent.children.forEach(function(node) {
            node.destroy();
          });
          for (var _i = 0; _i < enterGameData.length; _i++) {
            var matchRankGame = cc.instantiate(_this.prefab_match_rank_game);
            _this.panleMatchRankContent.addChild(matchRankGame);
            matchRankGame.getComponent("MatchRankGame").setData(_this, enterGameData[_i]);
          }
        };
        this.LobbyLogic.requestAllRoomList(getAllRoomList);
      },
      exit: function exit() {
        var _this2 = this;
        var callBackLeaveRankMatch = function callBackLeaveRankMatch() {
          _this2.onCloseBtn();
        };
        LobbySocket.sendRankMatchInfo(E_PAIWEI_INFO.Sign_LEFT, E_PAIWEI_INFO.LobbyID, callBackLeaveRankMatch);
      },
      init: function init(lobbyComponent) {
        this.lobbyComponent = lobbyComponent;
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.panleMatchRankContent = this.panel_match_rank_game.content;
        if (cc.winSize.width / 1280 < 1) {
          this.panleMatchRankContent.getComponent(cc.Layout).paddingLeft = 8;
          this.panleMatchRankContent.getComponent(cc.Layout).spacingX = 0;
        }
      },
      onEnterRankMatch: function onEnterRankMatch(enterGameData) {
        var walleMoney = this.LobbyLogic.getWalletMoney();
        if (walleMoney < enterGameData.minPoint) return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u4e0d\u6ee1\u8db3\u8fdb\u5165\u623f\u95f4\u4e0b\u9650:{0}", F_GetMoneyDisplay(enterGameData.minPoint)));
        if (0 != enterGameData.maxPoint && walleMoney > enterGameData.maxPoint) return createTips(tools.stringFormat("\u60a8\u7684\u91d1\u5e01\u6570\u8d85\u8fc7\u8fdb\u5165\u623f\u95f4\u4e0a\u9650:{0}", F_GetMoneyDisplay(enterGameData.maxPoint)));
        this.lobbyComponent && this.lobbyComponent.enterGameByRoomID(enterGameData.roomID);
      },
      onBtnClicked: function onBtnClicked(event, data) {
        if (!data) return;
        var layerName = "";
        if ("rank" == data) {
          layerName = "prefab/Qualifying/DuanWeiRank";
          this.simpleAddLayer(layerName);
        } else if ("his_record" == data) {
          layerName = "prefab/Qualifying/HisRecord";
          this.simpleAddLayer(layerName, "lishi");
        } else if ("intro" == data) {
          layerName = "prefab/Qualifying/DuanWeiRewardLayer";
          this.simpleAddLayer(layerName);
        } else if ("dw_award" == data) {
          layerName = "prefab/Qualifying/DuanWeiAward";
          this.simpleAddLayer(layerName);
        }
      },
      start: function start() {},
      changeImg: function changeImg(img_name, node) {
        cc.loader.loadRes(qualifyingRes + img_name, cc.SpriteFrame, function(err, spriteFrame) {
          if (err) {
            cc.log(err);
            return;
          }
          node.spriteFrame = spriteFrame;
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  RankManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b713lls0RO67WGiVAAlL3v", "RankManager");
    "use strict";
    var RankManager = cc.Class({
      ctor: function ctor() {},
      requestRankingInformation: function requestRankingInformation(callback, rankType, typedata) {
        console.log("\u6392\u540d\uff1a\u8bf7\u6c42ID" + rankType);
        var fCallback = function fCallback() {
          var localTab = [];
          callback(localTab, rankType);
        };
        var sCallback = function sCallback(jsonData) {
          if (jsonData.status == G_HANDLE_CODE_OK) {
            console.log("\u6392\u884c\u699c\u6570\u636e:" + jsonData);
            callback(jsonData.data);
          } else console.warn("\u8bf7\u6c42\u6392\u884c\u6570\u636e\u5931\u8d25");
        };
        var args = [];
        if (0 === rankType) {
          args.url = "https://" + G_PHP_IP + "/api/v1/rank/richRankList";
          args.params = {
            userID: UserInfoManager.getMyInfo().userID,
            richType: "giftCard",
            num: 11
          };
        } else if (1 === rankType || 2 === rankType || 3 === rankType) {
          args.url = "https://" + G_PHP_IP + "/api/v1/match/getMatchRanking";
          args.params = {
            userID: UserInfoManager.getMyInfo().userID,
            matchID: 1,
            type: rankType,
            num: 10
          };
        }
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestProductlistInfo: function requestProductlistInfo(callback, goods_category) {
        var action = "goodsList";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "mall",
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          goods_category: goods_category
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestExchangeList: function requestExchangeList(callback, goodsWays) {
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", "myPrizeRecord"));
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.url = "https://" + G_PHP_IP + "/api/v1/User/myPrizeRecord";
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          goodsWays: goodsWays
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestpurchaseInfo: function requestpurchaseInfo(goodsID, callback) {
        var action = "buy";
        var fCallback = function fCallback() {
          printInfo(tools.stringFormat("\u8bf7\u6c42{0}\u8d85\u65f6", action));
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (callback) {
              cc.log(jsonData.data);
              callback(jsonData.data);
              createTips(jsonData.msg);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: "mall",
          action: action,
          userID: UserInfoManager.getMyInfo().userID,
          goodsID: goodsID,
          buyNum: 1
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        cc.log(args);
        MyHttpRequest.doRequest(args);
      },
      requestRichRankList: function requestRichRankList(richType, callback, rankType) {
        richType = richType || E_RichType.CARD;
        var actionName = "Vulgar";
        var fCallback = function fCallback() {
          var localTab = [];
          callback(localTab, rankType);
        };
        var sCallback = function sCallback(jsonData) {
          cc.log(jsonData);
          jsonData.status == G_JSON_DATA_STATUS_OK ? callback(jsonData[actionName].Vulgar, rankType) : createTips(jsonData.msg);
        };
        var args = [];
        args.url = "http://" + G_PHP_IP + "/API/index.php";
        args.params = {
          action: actionName,
          type: richType
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      }
    });
    module.exports = RankManager;
    cc._RF.pop();
  }, {} ],
  RepeatConnectLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca9fdynjSpLMa1vGTkKeig0", "RepeatConnectLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        rotateImg: cc.Node
      },
      onLoad: function onLoad() {
        this._super();
      },
      start: function start() {
        var _this = this;
        console.log(">>>>>>>RepeatConnectLayer start");
        if (!cc.sys.isNative && LobbySocket.isReconnected) {
          console.log(">>>\u5f53\u524d\u6b63\u5728isReconnected");
          return;
        }
        var live_broadcast = Number(cc.sys.localStorage.getItem(G_LIVE_BROADCAST));
        if (0 == live_broadcast && this.rotateImg) {
          this.rotateImg.stopAllActions();
          this.rotateImg.active = false;
        }
        console.log(">>>>>>>\u54ce\u5440\u7f51\u7edc\u8d70\u4e22\u5566\uff0c\u5c1d\u8bd5\u627e\u56de\u4e2d...");
        LobbySocket.clear();
        this.schedule(function() {
          console.log("repeat connect schedule");
          LobbySocket.setLoginDelegate(_this);
          LobbySocket.reconnecService();
          _this.scheduleOnce(function() {
            LobbySocket.onLoginFailed();
            _this.unscheduleAllCallbacks();
            window.repeatConnectLayer = null;
          }, G_COMMON_TIMEOUT_TIME);
        }, 2);
        removeLoading();
      },
      onLoginSuccess: function onLoginSuccess() {
        this.unscheduleAllCallbacks();
        this.node && (this.node.parent = null);
        window.repeatConnectLayer = null;
      },
      onLoginFailed: function onLoginFailed() {
        this.unscheduleAllCallbacks();
        this.node && (this.node.parent = null);
        window.repeatConnectLayer = null;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ReqHttp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ad6a7GKSVFDcL3wg4jhbGrm", "ReqHttp");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GlobelContext_1 = require("./GlobelContext");
    var PushStream = "txysdk/user/getLiveOnFlow";
    var PullStream = "txysdk/user/getPlayUrl";
    var UserIslive = "txysdk/user/userIslive";
    var ReqHttp = function() {
      function ReqHttp() {}
      ReqHttp.getInst = function() {
        this._inst || (this._inst = new ReqHttp());
        return this._inst;
      };
      Object.defineProperty(ReqHttp, "inst", {
        get: function() {
          return this.getInst();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ReqHttp, "xhr", {
        get: function() {
          if (!this._xhr) {
            this._xhr = cc.loader.getXMLHttpRequest();
            this._xhr.timeout = 5e3;
          }
          return this._xhr;
        },
        enumerable: false,
        configurable: true
      });
      ReqHttp.post = function(url, params, cb) {
        var xhr = this.xhr;
        xhr.open("POST", url);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207) {
            var response = xhr.responseText;
            cb && cb(response);
          }
        };
        xhr.onerror = function(e) {
          console.log("POST ERROR");
          console.log(e);
        };
        xhr.ontimeout = function(e) {
          console.log("POST TIMEOUT");
          console.log(e);
        };
        xhr.send(JSON.stringify(params));
      };
      ReqHttp.get = function(url, params, cb) {
        var xhr = this.xhr;
        xhr.open("GET", url + this.analyzeParams(params));
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207) {
            var response = xhr.responseText;
            cb && cb(response);
          }
        };
        xhr.send();
      };
      ReqHttp.analyzeParams = function(params) {
        var analyzeStr = "?";
        Object.keys(params).forEach(function(key) {
          analyzeStr = analyzeStr + key + "=" + params[key];
        });
        return analyzeStr;
      };
      ReqHttp.getPushStreamUrl = function(params, cb) {
        this.get(GlobelContext_1.default.url + PushStream, params, cb);
      };
      ReqHttp.getPullStreamUrl = function(params, cb) {
        this.get(GlobelContext_1.default.url + PullStream, params, cb);
      };
      ReqHttp.checkUserIsLive = function(params, cb) {
        this.get(GlobelContext_1.default.url + UserIslive, params, cb);
      };
      ReqHttp._inst = null;
      ReqHttp._xhr = null;
      return ReqHttp;
    }();
    exports.default = ReqHttp;
    cc._RF.pop();
  }, {
    "./GlobelContext": "GlobelContext"
  } ],
  ResMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1bacc5hEkBKoJT1sdky9dd/", "ResMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ResMgr = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var tools = require("Tools");
    var ResMgr = function() {
      function ResMgr() {
        this._loadTag = new Map();
        this._loadResCache = new Map();
        this._loadProgressMap = new Map();
      }
      Object.defineProperty(ResMgr, "instance", {
        get: function() {
          if (this._instance) return this._instance;
          this._instance = new ResMgr();
          return this._instance;
        },
        enumerable: false,
        configurable: true
      });
      ResMgr.prototype.setLoaded = function(key, flag) {
        this._loadTag.set(key, flag);
      };
      ResMgr.prototype.getLoaded = function(key) {
        var flag = this._loadTag.get(key);
        if (void 0 === flag) return false;
        return flag;
      };
      ResMgr.prototype.loadAssetsInUrls = function(resPkgKey, assetType, urls, progress, endFunc) {
        var progressInfo = this._loadProgressMap.get(resPkgKey);
        var _loop_1 = function(i) {
          var url = urls[i];
          cc.resources.load(url, assetType, function(err, asset) {
            if (err) {
              console.log(tools.getCurTime() + " load assets:" + url + " err:", err);
              return;
            }
            asset.addRef();
            progressInfo.now++;
            console.log(tools.getCurTime() + " load assets:" + url + " sucess progress:" + progressInfo.now + "/" + progressInfo.total);
            progress && progress(null, progressInfo.now, progressInfo.total);
            progressInfo.now >= progressInfo.total && endFunc && endFunc(null);
          });
        };
        for (var i = 0; i < urls.length; i++) _loop_1(i);
      };
      ResMgr.prototype.releaseAssetsInUrls = function(assetType, urls) {
        for (var i = 0; i < urls.length; i++) {
          var asset = cc.resources.get(urls[i]);
          if (!asset) continue;
          asset.decRef();
        }
      };
      ResMgr.prototype.preloadResPkg = function(resPkg, progress, endFunc) {
        if (resPkg instanceof Array) {
          var progressInfo = {
            now: 0,
            total: 0
          };
          for (var index in resPkg) progressInfo.total += resPkg[index].urls.length;
          this._loadProgressMap.set(resPkg, progressInfo);
          for (var index in resPkg) this.loadAssetsInUrls(resPkg, resPkg[index].assetType, resPkg[index].urls, progress, endFunc);
        } else {
          var progressInfo = {
            now: 0,
            total: 0
          };
          progressInfo.total = resPkg.urls.length;
          this._loadProgressMap.set(resPkg, progressInfo);
          this.loadAssetsInUrls(resPkg, resPkg.assetType, resPkg.urls, progress, endFunc);
        }
      };
      ResMgr.prototype.releaseResPkg = function(resPkg) {
        if (resPkg instanceof Array) for (var index in resPkg) this.releaseAssetsInUrls(resPkg[index].assetType, resPkg[index].urls); else this.releaseAssetsInUrls(resPkg.assetType, resPkg.urls);
      };
      ResMgr.prototype.preloadAsset = function(url, typeClass, endFunc) {
        cc.resources.load(url, typeClass, function(err, asset) {
          if (err) {
            console.log(err);
            endFunc && endFunc(err);
            return;
          }
          endFunc && endFunc(null, asset);
        });
      };
      ResMgr.prototype.releaseAsset = function(url) {
        cc.resources.release(url);
      };
      ResMgr.prototype.getAsset = function(url) {
        return cc.resources.get(url);
      };
      ResMgr.prototype.loadPrefabRes = function(url, cb) {
        cc.resources.load(url, cc.Prefab, function(err, res) {
          if (err) {
            console.error("load prefab res failed url:" + url, err.message || err);
            cb && cb(err, res);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadSpriteFrameRes = function(url, cb) {
        cc.resources.load(url, cc.SpriteFrame, function(err, res) {
          if (err) {
            console.error("load spriteframe res failed url:" + url, err.message || err);
            cb && cb(err, res);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadTextRes = function(url, cb) {
        cc.resources.load(url, cc.TextAsset, function(err, res) {
          if (err) {
            console.error("load text res failed url:" + url, err.message || err);
            cb && cb(err, res);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadJsonRes = function(url, cb) {
        cc.resources.load(url, cc.JsonAsset, function(err, res) {
          if (err) {
            console.error("load json res failed url:" + url, err.message || err);
            cb && cb(err, res);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadAudioClipRes = function(url, cb) {
        cc.resources.load(url, cc.AudioClip, function(err, res) {
          if (err) {
            console.error("load audio res failed url:" + url, err.message || err);
            cb && cb(err, res);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadRemoteSpriteFrameRes = function(url, cb) {
        cc.assetManager.loadRemote(url, {
          ext: ".png"
        }, function(err, textureRes) {
          if (err) {
            console.error("load remote spriteframe res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          var sf = new cc.SpriteFrame(textureRes);
          cb && cb(null, sf);
        });
      };
      ResMgr.prototype.loadRemoteAvatar = function(url, useDefault, cb) {
        var _this = this;
        void 0 === useDefault && (useDefault = false);
        var res = this._loadResCache.get(url);
        if (res) {
          cb(null, res);
          return;
        }
        var useDefaultCb = function() {
          var localAvatarUrl = "texture/avatar/img_avata_null";
          res = _this._loadResCache.get(url);
          if (res) {
            cb(null, res);
            return;
          }
          _this.loadSpriteFrameRes(localAvatarUrl, function(err, res) {
            if (err) {
              cb(err, null);
              return;
            }
            _this._loadResCache.set(url, res);
            cb(null, res);
            return;
          });
        };
        if ("" === url) {
          if (useDefault) {
            useDefaultCb();
            return;
          }
          cb(new Error("invalid url"), null);
          return;
        }
        this.loadRemoteSpriteFrameRes(url, function(err, res) {
          if (err) {
            if (useDefault) {
              useDefaultCb();
              return;
            }
            cb(err, null);
            return;
          }
          _this._loadResCache.set(url, res);
          cb(null, res);
        });
      };
      ResMgr.prototype.loadRemoteTextRes = function(url, cb) {
        cc.assetManager.loadRemote(url, function(err, res) {
          if (err) {
            console.error("load remote text res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadRemoteJsonRes = function(url, cb) {
        cc.assetManager.loadRemote(url, function(err, res) {
          if (err) {
            console.error("load remote json res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.prototype.loadRemoteAudioClipRes = function(url, cb) {
        cc.assetManager.loadRemote(url, function(err, res) {
          if (err) {
            console.error("load remote audioclip res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          cb && cb(null, res);
        });
      };
      ResMgr.readFile = function(path, cb) {
        var projectPath = Editor.Project.path.replace("\\", "/");
        var filePath = projectPath + "/" + path;
        var fs = require("fs");
        fs.readFile(filePath, "utf-8", function(err, data) {
          if (err) {
            console.error("load " + filePath + " error:", err);
            cb && cb(err, null);
            return;
          }
          console.info("load " + filePath + " sucess");
          cb && cb(null, data);
        });
      };
      ResMgr.writeFile = function(path, data, cb) {
        var projectPath = Editor.Project.path.replace("\\", "/");
        var filePath = projectPath + "/" + path;
        var dirName = filePath.substr(0, filePath.lastIndexOf("/") + 1);
        var fs = require("fs");
        var write = function() {
          fs.writeFile(filePath, data, function(err) {
            if (err) {
              console.error("save " + filePath + " error:", err);
              cb && cb(null);
              return;
            }
            console.info("save " + filePath + " sucess:");
            cb && cb(null);
          });
        };
        fs.exists(dirName, function(e) {
          e ? write() : fs.mkdir(dirName, function(err) {
            if (err) {
              console.error("save " + filePath + " mkdir error:", err);
              cb && cb(err);
              return;
            }
            write();
          });
        });
      };
      return ResMgr;
    }();
    exports.ResMgr = ResMgr;
    cc._RF.pop();
  }, {
    Tools: "Tools",
    fs: void 0
  } ],
  RewardNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c35c4UTR2FDBoRP8azdJMgq", "RewardNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        numLabel: cc.Label,
        gold: cc.Node,
        zuan: cc.Node
      },
      init: function init(data) {
        if (2 == data.goodsType) {
          this.numLabel.string = "\u94bb\u77f3x" + data.goodsNums;
          this.zuan.active = true;
          this.gold.active = false;
        } else if (1 == data.goodsType) {
          this.numLabel.string = "\u91d1\u5e01x" + data.goodsNums;
          this.gold.active = true;
          this.zuan.active = false;
        }
      },
      doButtonClose: function doButtonClose() {
        this.node.destroy();
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  RoomListItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "197384B2m9JNazO9lOPlGeG", "RoomListItem");
    "use strict";
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        text_roomID: cc.Label,
        text_play: cc.Label,
        text_jushu: cc.Label
      },
      init: function init(data) {
        this.LobbyLogic = new (require("LobbyLogic"))();
        cc.log(data);
        this.data = data;
      },
      start: function start() {
        var data = this.data;
        this.text_roomID.string = data.passwd;
        var gameType = "\u7ecf\u5178\u73a9\u6cd5";
        this.text_play.string = gameType;
        this.text_jushu.string = data.gameCount;
      },
      onDismiss: function onDismiss() {
        var _this = this;
        cc.log("dismiss");
        var btnName1 = "\u786e  \u5b9a";
        var btnName2 = "\u53d6  \u6d88";
        var msgCallback = function msgCallback(btnName) {
          btnName1 == btnName && _this.LobbyLogic.requestDissmissRoom(_this.data.passwd);
        };
        var msgObj = {};
        msgObj.msg = tools.stringFormat("\u662f\u5426\u89e3\u6563\u623f\u95f4\u3010" + this.data.passwd + "\u3011");
        msgObj.btn1 = btnName1;
        msgObj.btn2 = btnName2;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      onClick: function onClick() {
        var _this2 = this;
        cc.log("click");
        var btnName1 = "\u786e  \u5b9a";
        var btnName2 = "\u53d6  \u6d88";
        var msgCallback = function msgCallback(btnName) {
          btnName1 == btnName && _this2.LobbyLogic.joinRoom(_this2.data.passwd);
        };
        var msgObj = {};
        msgObj.msg = tools.stringFormat("\u662f\u5426\u52a0\u5165\u623f\u95f4\u3010" + this.data.passwd + "\u3011");
        msgObj.btn1 = btnName1;
        msgObj.btn2 = btnName2;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      },
      onBuyDeskInfoDel: function onBuyDeskInfoDel(passwd) {
        passwd == this.data.passwd && this.node.removeFromParent();
      },
      onBuyDeskInfoUpdate: function onBuyDeskInfoUpdate(data) {},
      onEnable: function onEnable() {
        this._super();
      },
      onDisable: function onDisable() {
        this._super();
      }
    });
    cc._RF.pop();
  }, {
    LobbyBaseLayer: "LobbyBaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  RoomListLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6e0a5y/+75GNo6KaQF9u9Fk", "RoomListLayer");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        list: cc.ScrollView,
        item: cc.Node,
        img_girl: cc.Node
      },
      ctor: function ctor() {
        this.LobbyLogic = new (require("LobbyLogic"))();
      },
      onLoad: function onLoad() {
        this.item.active = false;
      },
      refreshData: function refreshData() {
        var _this = this;
        this.LobbyLogic.requestUserBuyRoomList(function(roomList) {
          if (roomList.length <= 0) {
            _this.list.content.removeAllChildren();
            _this.img_girl && (_this.img_girl.active = true);
          } else {
            _this.img_girl && (_this.img_girl.active = false);
            _this.list && _this.list.content.removeAllChildren();
            for (var _iterator = _createForOfIteratorHelperLoose(roomList), _step; !(_step = _iterator()).done; ) {
              var roomInfo = _step.value;
              if (!_this.item) return;
              var item = cc.instantiate(_this.item);
              if (!item) return;
              item.active = true;
              var script = item.getComponent("BaseLayer");
              script.init(roomInfo);
              _this.list && _this.list.content.addChild(item);
            }
          }
        });
      },
      onBuyDeskInfoDel: function onBuyDeskInfoDel() {
        var list = RoomRecordManager.getRoomRecordList();
        0 == list.length && this.img_girl && (this.img_girl.active = true);
      },
      onEnable: function onEnable() {
        this._super();
      },
      onDisable: function onDisable() {
        this._super();
      }
    });
    cc._RF.pop();
  }, {
    LobbyBaseLayer: "LobbyBaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  RoomListManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8643bm8V1pO94/IWNvYVnxW", "RoomListManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var API = "lobby";
    var RoomListManager = cc.Class({
      ctor: function ctor() {
        this.roomList = {};
        this.roomListData = null;
      },
      requestAllRoomList: function requestAllRoomList(callback) {
        var _this = this;
        if (this.roomListData && callback) return callback(this.roomListData);
        var actionName = "roomList";
        var fCallback = function fCallback() {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            for (var _iterator = _createForOfIteratorHelperLoose(jsonData.data), _step; !(_step = _iterator()).done; ) {
              var room = _step.value;
              _this.addRoomByGameID(room.gameID, room);
            }
            if (callback) {
              _this.roomListData = jsonData.data;
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        MyHttpRequest.doRequest(args);
      },
      addRoomByGameID: function addRoomByGameID(gameID, room) {
        this.roomList[gameID] || (this.roomList[gameID] = []);
        var bol = true;
        for (var i = 0; i < this.roomList[gameID].length; ++i) this.roomList[gameID][i].roomID == room.roomID && (bol = false);
        bol && this.roomList[gameID].push(room);
      },
      getCardRoomListByGameID: function getCardRoomListByGameID(gameID) {
        var cardRoomList = [];
        if (this.roomList[gameID]) for (var _iterator2 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step2; !(_step2 = _iterator2()).done; ) {
          var room = _step2.value;
          room.type === E_ROOM_TYPE.CARD && cardRoomList.push(room);
        }
        return cardRoomList;
      },
      getCardRoomByGameID: function getCardRoomByGameID(gameID) {
        var cardRoom = null;
        var cardRoomList = this.getCardRoomListByGameID(gameID);
        if (0 === cardRoomList.length) return createTips(tools.stringFormat("id\u4e3a{0}\u7684\u6e38\u620f\u6ca1\u6709\u79ef\u5206\u623f", gameID));
        if (1 === cardRoomList.length) cardRoom = cardRoomList[0]; else {
          var sortRoomByRoomID = function sortRoomByRoomID(roomA, roomB) {
            return roomA.roomID > roomB.roomID ? 1 : roomA.roomID < roomB.roomID ? -1 : 0;
          };
          cardRoomList = cardRoomList.sort(sortRoomByRoomID);
          cardRoom = cardRoomList[0];
        }
        return cardRoom;
      },
      getMatchRoomByGameID: function getMatchRoomByGameID(gameID) {
        var matchRoom;
        var matchRoomList = this.getMatchRoomListByGameID(gameID);
        if (0 == matchRoomList.length) return createTips("id\u4e3a" + gameID + "\u7684\u6e38\u620f\u8fd8\u6ca1\u6709\u6bd4\u8d5b\u623f");
        if (1 == matchRoomList.length) matchRoom = matchRoomList[0]; else {
          matchRoomList.sort(function(roomA, roomB) {
            return roomA.roomID < roomB.roomID ? -1 : 1;
          });
          matchRoom = matchRoomList[0];
        }
        return matchRoom;
      },
      getMatchRoomListByGameID: function getMatchRoomListByGameID(gameID) {
        var matchRoomList = [];
        if (this.roomList[gameID]) for (var _iterator3 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step3; !(_step3 = _iterator3()).done; ) {
          var room = _step3.value;
          room.type == E_ROOM_TYPE.MATCH && matchRoomList.push(room);
        }
        return matchRoomList;
      },
      getPrivateRoomByGameID: function getPrivateRoomByGameID(gameID) {
        var privateRoom;
        var privateRoomList = this.getPrivateRoomListByGameID(gameID);
        if (0 == privateRoomList.length) return createTips("id\u4e3a" + gameID + "\u7684\u6e38\u620f\u6ca1\u6709\u91d1\u5e01\u623f");
        if (1 == privateRoomList.length) privateRoom = privateRoomList[0]; else {
          privateRoomList.sort(function(roomA, roomB) {
            return roomA.roomID < roomB.roomID ? -1 : 1;
          });
          privateRoom = privateRoomList[0];
        }
        return privateRoom;
      },
      getPrivateRoomListByGameID: function getPrivateRoomListByGameID(gameID) {
        var privateRoomList = [];
        if (this.roomList[gameID]) for (var _iterator4 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step4; !(_step4 = _iterator4()).done; ) {
          var room = _step4.value;
          room.type == E_ROOM_TYPE.PRIVATE && privateRoomList.push(room);
        }
        return privateRoomList;
      },
      getGameListHaveCardRoom: function getGameListHaveCardRoom() {
        var cityID = cc.sys.localStorage.getItem(G_CHOOSE_CITY);
        cityID || (cityID = 0);
        var gameList = CityListManager.getGameListByCityID(cityID);
        var cardRoomGameList = [];
        for (var _iterator5 = _createForOfIteratorHelperLoose(gameList), _step5; !(_step5 = _iterator5()).done; ) {
          var gameID = _step5.value;
          this.isGameHaveCardRoom(gameID) && cardRoomGameList.push(gameID);
        }
        return cardRoomGameList;
      },
      getGameListHaveGoldRoom: function getGameListHaveGoldRoom() {
        var cityID = cc.sys.localStorage.getItem(G_CHOOSE_CITY);
        cityID || (cityID = 0);
        var gameList = CityListManager.getGameListByCityID(cityID);
        var goldRoomGameList = [];
        for (var _iterator6 = _createForOfIteratorHelperLoose(gameList), _step6; !(_step6 = _iterator6()).done; ) {
          var gameID = _step6.value;
          this.isGameHaveGoldRoom(gameID) && goldRoomGameList.push(gameID);
        }
        return goldRoomGameList;
      },
      getGameListHaveMatchRoom: function getGameListHaveMatchRoom() {
        var cityID = cc.sys.localStorage.getItem(G_CHOOSE_CITY);
        cityID || (cityID = 0);
        var gameList = CityListManager.getGameListByCityID(cityID);
        var matchRoomGameList = [];
        for (var _iterator7 = _createForOfIteratorHelperLoose(gameList), _step7; !(_step7 = _iterator7()).done; ) {
          var gameID = _step7.value;
          this.isGameHaveMatchRoom(gameID) && matchRoomGameList.push(gameID);
        }
        return matchRoomGameList;
      },
      getGameListHavePrivateRoom: function getGameListHavePrivateRoom() {
        var cityID = cc.sys.localStorage.getItem(G_CHOOSE_CITY);
        cityID || (cityID = 0);
        var gameList = CityListManager.getGameListByCityID(cityID);
        var privateRoomGameList = [];
        for (var _iterator8 = _createForOfIteratorHelperLoose(gameList), _step8; !(_step8 = _iterator8()).done; ) {
          var gameID = _step8.value;
          this.isGameHavePrivateRoom(gameID) && privateRoomGameList.push(gameID);
        }
        return privateRoomGameList;
      },
      isGameHavePrivateRoom: function isGameHavePrivateRoom(gameID) {
        if (this.roomList[gameID]) for (var _iterator9 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step9; !(_step9 = _iterator9()).done; ) {
          var room = _step9.value;
          if (room.type === E_ROOM_TYPE.CARD) return true;
        }
        return false;
      },
      isGameHaveCardRoom: function isGameHaveCardRoom(gameID) {
        if (this.roomList[gameID]) for (var _iterator10 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step10; !(_step10 = _iterator10()).done; ) {
          var room = _step10.value;
          if (room.type === E_ROOM_TYPE.CARD) return true;
        }
        return false;
      },
      isGameHaveGoldRoom: function isGameHaveGoldRoom(gameID) {
        if (this.roomList[gameID]) for (var _iterator11 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step11; !(_step11 = _iterator11()).done; ) {
          var room = _step11.value;
          if (room.type === E_ROOM_TYPE.GOLD) return true;
        }
        return false;
      },
      isGameHaveMatchRoom: function isGameHaveMatchRoom(gameID) {
        if (this.roomList[gameID]) for (var _iterator12 = _createForOfIteratorHelperLoose(this.roomList[gameID]), _step12; !(_step12 = _iterator12()).done; ) {
          var room = _step12.value;
          if (room.type === E_ROOM_TYPE.MATCH) return true;
        }
        return false;
      },
      getRoomByRoomID: function getRoomByRoomID(roomID) {
        for (var k in this.roomList) {
          var v = this.roomList[k];
          for (var _iterator13 = _createForOfIteratorHelperLoose(v), _step13; !(_step13 = _iterator13()).done; ) {
            var v2 = _step13.value;
            if (v2.roomID === roomID) return v2;
          }
        }
        createTips(tools.stringFormat("\u623f\u95f4id\u4e3a:{0}\u7684\u623f\u95f4\u4fe1\u606f\u4e0d\u5b58\u5728", roomID));
        return null;
      },
      setRoomInfo: function setRoomInfo(roomInfo) {
        this.roomInfo = roomInfo;
      },
      getRoomInfo: function getRoomInfo() {
        if (!this.roomInfo) return null;
        return this.roomInfo;
      },
      setCurRuleInfo: function setCurRuleInfo(ruleinfo) {
        this._ruleinfo = ruleinfo;
      },
      getCurRuleInfo: function getCurRuleInfo() {
        return this._ruleinfo;
      },
      getRoomNameByRoomID: function getRoomNameByRoomID(roomID) {
        for (var i in this.roomList) {
          var v = this.roomList[i];
          for (var i2 in v) {
            var v2 = v[i2];
            if (v2.roomID == roomID) {
              v2.name.indexOf("\u70b8\u91d1\u5316") >= 0 && (v2.name = v2.name.replace("\u70b8\u91d1\u5316", "\u70b8\u91d1\u82b1"));
              return v2.name;
            }
          }
        }
      },
      getLuziInfo: function getLuziInfo() {
        return this.luziInfo;
      },
      setLuziInfo: function setLuziInfo(luzi) {
        this.luziInfo = this.luziInfo || [];
        this.luziInfo[luzi.roomID] = luzi;
      },
      getGoldRoomListByGameID: function getGoldRoomListByGameID(gameID) {
        var goldRoomList = [];
        if (this.roomList[gameID]) for (var i in this.roomList[gameID]) {
          var room = this.roomList[gameID][i];
          room.type === E_ROOM_TYPE.GOLD && goldRoomList.push(room);
        }
        cc.log(goldRoomList, this.roomList, this.roomList[gameID]);
        return goldRoomList;
      }
    });
    module.exports = RoomListManager;
    cc._RF.pop();
  }, {} ],
  RoomRecordManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d966am+Mz5Eopz4FI5Go7sG", "RoomRecordManager");
    "use strict";
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = "undefined" !== typeof Symbol && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
        it && (o = it);
        var i = 0;
        return function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    module.exports = cc.Class({
      ctor: function ctor() {
        this.roomRecordList = {};
      },
      setRoomRecordList: function setRoomRecordList(roomRecordList) {
        this.roomRecordList = {};
        for (var _iterator = _createForOfIteratorHelperLoose(roomRecordList), _step; !(_step = _iterator()).done; ) {
          var roomRecord = _step.value;
          this.addRoomRecord(roomRecord);
        }
      },
      addRoomRecord: function addRoomRecord(roomRecord) {
        this.roomRecordList[roomRecord.passwd] = roomRecord;
      },
      getRoomRecordList: function getRoomRecordList() {
        var roomRecordList = [];
        for (var k in this.roomRecordList) {
          var roomRecord = this.roomRecordList[k];
          roomRecord && roomRecordList.push(roomRecord);
        }
        roomRecordList.sort(function(a, b) {
          if (a.buyDeskTime == b.buyDeskTime) return a.roomID < b.roomID ? -1 : 1;
          return a.buyDeskTime > b.buyDeskTime ? -1 : 1;
        });
        return roomRecordList;
      },
      getRoomRecord: function getRoomRecord(passwd) {
        return this.roomRecordList[passwd];
      },
      updateRoomRecord: function updateRoomRecord(data) {
        var roomRecord = this.getRoomRecord(data.passwd);
        roomRecord && (roomRecord.userCount = data.userCount);
      },
      delRoomRecord: function delRoomRecord(passwd) {
        this.roomRecordList[passwd] = null;
      },
      clearRoomRecordList: function clearRoomRecordList() {
        this.roomRecordList = {};
      },
      dealNotifyUserCountChange: function dealNotifyUserCountChange(netMsg) {
        var _Resolve_LogonNotifyBuyDeskInfoChange = function _Resolve_LogonNotifyBuyDeskInfoChange(p) {
          var struct = {};
          struct.changeType = p.popINT();
          struct.passwd = p.readString(20);
          struct.userCount = p.popINT();
          return struct;
        };
        var info = _Resolve_LogonNotifyBuyDeskInfoChange(netMsg);
        if (netMsg.bHandleCode == G_HANDLE_CODE_OK) if (1 == info.changeType) {
          this.updateRoomRecord(info);
          DataNotify.onBuyDeskInfoUpdate(info);
        } else if (2 == info.changeType) {
          this.delRoomRecord(info.passwd);
          DataNotify.onBuyDeskInfoDel(info.passwd);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Roomrules: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdd8ccv1z1AHqGgYK04uwYr", "Roomrules");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {},
      onLoad: function onLoad() {},
      init: function init() {},
      doButton_Close: function doButton_Close() {
        this.node && this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  RoundRectMask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06f2fTo2MlH8I6f1sHNt/LG", "RoundRectMask");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var executeInEditMode = cc._decorator.executeInEditMode;
    var disallowMultiple = cc._decorator.disallowMultiple;
    var requireComponent = cc._decorator.requireComponent;
    var menu = cc._decorator.menu;
    cc.macro.ENABLE_WEBGL_ANTIALIAS = true;
    var RoundRectMask = function(_super) {
      __extends(RoundRectMask, _super);
      function RoundRectMask() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._radius = 50;
        _this.mask = null;
        return _this;
      }
      Object.defineProperty(RoundRectMask.prototype, "radius", {
        get: function() {
          return this._radius;
        },
        set: function(r) {
          this._radius = r;
          this.updateMask(r);
        },
        enumerable: false,
        configurable: true
      });
      RoundRectMask.prototype.onEnable = function() {
        this.mask = this.getComponent(cc.Mask);
        this.updateMask(this.radius);
      };
      RoundRectMask.prototype.updateMask = function(r) {
        var _radius = r >= 0 ? r : 0;
        _radius < 1 && (_radius = Math.min(this.node.width, this.node.height) * _radius);
        this.mask["radius"] = _radius;
        this.mask["onDraw"] = this.onDraw.bind(this.mask);
        this.mask["_updateGraphics"] = this._updateGraphics.bind(this.mask);
        this.mask.type = cc.Mask.Type.RECT;
      };
      RoundRectMask.prototype._updateGraphics = function() {
        var graphics = this._graphics;
        if (!graphics) return;
        this.onDraw(graphics);
      };
      RoundRectMask.prototype.onDraw = function(graphics) {
        graphics.clear(false);
        var node = this.node;
        var width = node.width;
        var height = node.height;
        var x = -width * node.anchorX;
        var y = -height * node.anchorY;
        graphics.roundRect(x, y, width, height, this.radius || 0);
        cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? graphics.stroke() : graphics.fill();
      };
      __decorate([ property() ], RoundRectMask.prototype, "_radius", void 0);
      __decorate([ property({
        tooltip: "\u5706\u89d2\u534a\u5f84:\n0-1\u4e4b\u95f4\u4e3a\u6700\u5c0f\u8fb9\u957f\u6bd4\u4f8b\u503c, \n>1\u4e3a\u5177\u4f53\u50cf\u7d20\u503c"
      }) ], RoundRectMask.prototype, "radius", null);
      RoundRectMask = __decorate([ ccclass, executeInEditMode(true), disallowMultiple(true), requireComponent(cc.Mask), menu("\u6269\u5c55/\u5706\u89d2\u77e9\u5f62\u906e\u7f69") ], RoundRectMask);
      return RoundRectMask;
    }(cc.Component);
    exports.default = RoundRectMask;
    cc._RF.pop();
  }, {} ],
  RuningNotice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bebb2VcmOZLzYG255Z0ub18", "RuningNotice");
    "use strict";
    var WHOLE_LENGTH = 1500;
    cc.Class({
      extends: cc.Component,
      properties: {
        text_info: cc.Label,
        whole_time: 10
      },
      start: function start() {
        this.isMoveNotice = true;
      },
      onLoad: function onLoad() {
        this.resetInfoPos();
      },
      update: function update(tTime) {
        if (!this.isMoveNotice) return;
        var moveX = WHOLE_LENGTH * (tTime / this.whole_time);
        this.text_info.node.x -= moveX;
        this.text_info.node.x <= -WHOLE_LENGTH / 2 && this.resetInfoPos();
      },
      resetInfoPos: function resetInfoPos() {
        this.text_info.node.x = WHOLE_LENGTH / 2;
      },
      setInfo: function setInfo(info) {
        this.resetInfoPos();
        this.text_info.string = info;
      },
      runNotice: function runNotice(info) {
        if (null == info || "" == info) {
          cc.log("info eerrr");
          return;
        }
        this.isMoveNotice = true;
        this.setInfo(info);
      },
      stop: function stop() {
        this.isMoveNotice = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  SettingLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61bb0zBActEyb8k7HEktrr2", "SettingLayer");
    "use strict";
    var BaseLayer = require("BaseLayer");
    cc.Class({
      extends: BaseLayer,
      properties: {
        musicToggleBg: cc.Sprite,
        effectToggleBg: cc.Sprite,
        musicToggle: cc.Toggle,
        soundToggle: cc.Toggle,
        idLabel: cc.Label,
        nameLabel: cc.Label,
        avatarImg: cc.Sprite,
        IPLabel: cc.Label,
        duankouLabel: cc.Label
      },
      onLoad: function onLoad() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.musicToggle.isChecked = MYAudioEngine.getMusicStatus();
        this.soundToggle.isChecked = MYAudioEngine.getSoundStatus();
        this.idLabel.string = this.LobbyLogic.getUserID();
        this.nameLabel.string = this.LobbyLogic.getNickName();
        this.LobbyLogic = new (require("LobbyLogic"))();
        var onGetHeadRes = function(avataRes) {
          this.avatarImg && cc.isValid(this.avatarImg) && (this.avatarImg.spriteFrame = avataRes);
        }.bind(this);
        AvatarManager.requestHeadRes(this.LobbyLogic.getAvataUrl(), null, onGetHeadRes, null);
        this.IPLabel.string = "\u670d\u52a1\u5668IP:" + NetConfig.getServerAddress();
        this.duankouLabel.string = "\u7aef\u53e3:" + NetConfig.getServerPort();
      },
      onMusicToggle: function onMusicToggle(event, param) {
        var _this = this;
        this.musicToggleBg.node.parent.getComponent(cc.Toggle).interactable = false;
        this.effectToggleBg.node.parent.getComponent(cc.Toggle).interactable = false;
        setTimeout(function() {
          _this.musicToggleBg.node.parent.getComponent(cc.Toggle).interactable = true;
          _this.effectToggleBg.node.parent.getComponent(cc.Toggle).interactable = true;
        }, 100);
        var isChecked = event.isChecked;
        var bgSprite = null;
        switch (param) {
         case "music":
          bgSprite = this.musicToggleBg.getComponent(cc.Sprite);
          if (isChecked) {
            MYAudioEngine.setMusicStatus(true);
            MYAudioEngine.resumeMusic();
          } else {
            MYAudioEngine.setMusicStatus(false);
            MYAudioEngine.pauseMusic();
          }
          break;

         case "effect":
          bgSprite = this.effectToggleBg.getComponent(cc.Sprite);
          isChecked ? MYAudioEngine.setSoundStatus(true) : MYAudioEngine.setSoundStatus(false);
        }
        bgSprite.enabled = !isChecked;
      },
      onButtonClick: function onButtonClick(event, param) {
        switch (param) {
         case "Button_YHXY":
          cc.sys.openURL("http://" + G_PHP_IP + "/index.php/Home/Public/user.html");
          break;

         case "Button_YSZC":
          cc.sys.openURL("http://" + G_PHP_IP + "/index.php/Home/Public/privacy.html");
          break;

         case "Button_FWTK":
          cc.sys.openURL("http://" + G_PHP_IP + "/index.php/Home/Public/service.html");
          break;

         case "Button_Switch":
          LobbySocket.switchAccount();
          break;

         case "Button_Close":
          this.node.removeFromParent();
        }
      },
      onButton_Login: function onButton_Login() {
        LobbySocket.backLogin();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  ShoppingMall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3193ehJJGBDf7+XvusgTXDs", "ShoppingMall");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelLeft = null;
        _this.labelRight = null;
        return _this;
      }
      NewClass.prototype.start = function() {};
      __decorate([ property({
        type: cc.Node,
        visible: true
      }) ], NewClass.prototype, "labelLeft", void 0);
      __decorate([ property({
        type: cc.Node,
        visible: true
      }) ], NewClass.prototype, "labelRight", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {} ],
  ShowRedPoint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e2d9cK458hAmpjSvbZJq6A4", "ShowRedPoint");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        sp_redPoint: cc.SpriteFrame
      },
      onLoad: function onLoad() {},
      show: function show() {
        if (this.redPoint) return;
        var node = new cc.Node();
        this.redPoint = node;
        var sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = this.sp_redPoint;
        this.node.addChild(node);
        this.node.x = this.node.width / 2 + 45;
        this.node.y = this.node.height / 2 - 20;
        this.node.active = true;
      },
      hide: function hide() {
        if (!this.redPoint) return;
        var node = new cc.Node();
        this.node.x = 0;
        this.node.y = 0;
        this.redPoint.removeFromParent();
        this.redPoint = null;
      }
    });
    cc._RF.pop();
  }, {} ],
  ShuoMingInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bdc7sOy95KN4WvoX7LfNW5", "ShuoMingInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nameLabel: cc.Label,
        yejiLabel: cc.Label,
        fanyongLabel: cc.Label
      },
      start: function start() {},
      init: function init(data) {
        this.nameLabel.string = data.name || "\u65e0";
        this.yejiLabel.string = String(Number(data.start)) + "~" + String(Number(data.ends));
        this.fanyongLabel.string = data.value;
      }
    });
    cc._RF.pop();
  }, {} ],
  SpriteArray: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46dfbRjUQpH/q5UbWNSZSNC", "SpriteArray");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, menu = _a.menu, executeInEditMode = _a.executeInEditMode, disallowMultiple = _a.disallowMultiple;
    var SpriteArray = function(_super) {
      __extends(SpriteArray, _super);
      function SpriteArray() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._index = 0;
        _this.sfArray = new Array();
        return _this;
      }
      Object.defineProperty(SpriteArray.prototype, "index", {
        get: function() {
          return this._index;
        },
        set: function(v) {
          if (v >= 0 && v < this.sfArray.length) {
            this._index = v;
            var spriteFrame = this.sfArray[v];
            this.node.getComponent(cc.Sprite).spriteFrame = spriteFrame;
          }
        },
        enumerable: false,
        configurable: true
      });
      SpriteArray.prototype.onEnable = function() {
        this.index = 0;
      };
      __decorate([ property ], SpriteArray.prototype, "_index", void 0);
      __decorate([ property({
        displayName: "Sprite\u7d22\u5f15"
      }) ], SpriteArray.prototype, "index", null);
      __decorate([ property({
        type: [ cc.SpriteFrame ],
        displayName: "Sprite\u6570\u7ec4"
      }) ], SpriteArray.prototype, "sfArray", void 0);
      SpriteArray = __decorate([ ccclass, executeInEditMode(true), disallowMultiple(true), requireComponent(cc.Sprite), menu("\u6269\u5c55/SpriteArray") ], SpriteArray);
      return SpriteArray;
    }(cc.Component);
    exports.default = SpriteArray;
    cc._RF.pop();
  }, {} ],
  SpriteButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a714cLCTjJAgZPXzDCZHEBP", "SpriteButton");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, menu = _a.menu, executeInEditMode = _a.executeInEditMode, disallowMultiple = _a.disallowMultiple;
    var SpriteButton = function(_super) {
      __extends(SpriteButton, _super);
      function SpriteButton() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._index = 0;
        _this.sfArray = new Array();
        return _this;
      }
      Object.defineProperty(SpriteButton.prototype, "index", {
        get: function() {
          return this._index;
        },
        set: function(v) {
          if (v >= 0 && v < this.sfArray.length) {
            this._index = v;
            this.node.getComponent(cc.Sprite).spriteFrame = this.sfArray[v];
          }
        },
        enumerable: false,
        configurable: true
      });
      SpriteButton.prototype.onEnable = function() {
        this.index = 0;
      };
      __decorate([ property ], SpriteButton.prototype, "_index", void 0);
      __decorate([ property({
        displayName: "Sprite\u7d22\u5f15"
      }) ], SpriteButton.prototype, "index", null);
      __decorate([ property({
        type: [ cc.SpriteFrame ],
        displayName: "Sprite\u6570\u7ec4"
      }) ], SpriteButton.prototype, "sfArray", void 0);
      SpriteButton = __decorate([ ccclass, executeInEditMode(true), disallowMultiple(true), requireComponent(cc.Sprite), menu("\u6269\u5c55/SpriteButton") ], SpriteButton);
      return SpriteButton;
    }(cc.Component);
    exports.default = SpriteButton;
    cc._RF.pop();
  }, {} ],
  StorageMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0defHohJVIbpf+MOT6Se7V", "StorageMgr");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageMgr = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var StorageMgr = function() {
      function StorageMgr() {
        this._path = null;
        this._keyConfig = "bjyq";
        this._markSave = false;
        this._saveTimer = -1;
        this.jsonData = {};
      }
      Object.defineProperty(StorageMgr, "instance", {
        get: function() {
          if (this._instance) return this._instance;
          this._instance = new StorageMgr();
          return this._instance;
        },
        enumerable: false,
        configurable: true
      });
      StorageMgr.prototype.init = function() {
        var _this = this;
        this._path = this._getConfigPath();
        this.jsonData = {
          userId: ""
        };
        var content = null;
        if (cc.sys.isNative) {
          var valueObject = jsb.fileUtils.getValueMapFromFile(this._path);
          content = valueObject[this._keyConfig];
        } else content = cc.sys.localStorage.getItem(this._keyConfig);
        if (content && content.length) {
          content.startsWith("@") && (content = content.substring(1));
          try {
            this.jsonData = JSON.parse(content);
          } catch (excepaiton) {}
        }
        console.log("load storage data", this.jsonData);
        setInterval(function() {
          _this.scheduleSave();
        }, 5e3);
      };
      StorageMgr.prototype.setConfigDataWithoutSave = function(key, value) {
        var account = this.jsonData.userId;
        this.jsonData[account] ? this.jsonData[account][key] = value : console.error("no account can not save");
      };
      StorageMgr.prototype.setConfigData = function(key, value) {
        this.setConfigDataWithoutSave(key, value);
        this._markSave = true;
      };
      StorageMgr.prototype.getConfigData = function(key) {
        var account = this.jsonData.userId;
        if (this.jsonData[account]) {
          var value = this.jsonData[account][key];
          return value || "";
        }
        cc.log("no account can not load");
        return "";
      };
      StorageMgr.prototype.setGlobalData = function(key, value) {
        this.jsonData[key] = value;
        this.save();
      };
      StorageMgr.prototype.getGlobalData = function(key) {
        return this.jsonData[key];
      };
      StorageMgr.prototype.setUserId = function(userId) {
        this.jsonData.userId = userId;
        this.jsonData[userId] || (this.jsonData[userId] = {});
        this.save();
      };
      StorageMgr.prototype.getUserId = function() {
        return this.jsonData.userId;
      };
      StorageMgr.prototype.scheduleSave = function() {
        if (!this._markSave) return;
        this.save();
      };
      StorageMgr.prototype.markModified = function() {
        this._markSave = true;
      };
      StorageMgr.prototype.save = function() {
        var str = JSON.stringify(this.jsonData);
        var zipStr = str;
        this._markSave = false;
        console.log("save storage data", this.jsonData);
        if (cc.sys.isNative) {
          var valueObj = {};
          valueObj[this._keyConfig] = zipStr;
          jsb.fileUtils.writeValueMapToFile(valueObj, this._path);
        } else cc.sys.localStorage.setItem(this._keyConfig, zipStr);
      };
      StorageMgr.prototype._getConfigPath = function() {
        var platform = cc.sys.platform;
        var path = "";
        if (platform === cc.sys.OS_WINDOWS) path = "src/conf"; else if (platform === cc.sys.OS_LINUX) path = "./conf"; else if (cc.sys.isNative) {
          path = jsb.fileUtils.getWritablePath();
          path += "conf";
        } else path = "src/conf";
        return path;
      };
      return StorageMgr;
    }();
    exports.StorageMgr = StorageMgr;
    cc._RF.pop();
  }, {} ],
  StoreDragonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90727DJH7RMv7mn6Qq90Zkn", "StoreDragonLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        YuE: cc.Label,
        xuanze: cc.Node,
        USDTNode: cc.Node,
        DTNode: cc.Node
      },
      onLoad: function onLoad() {},
      start: function start() {},
      init: function init(num) {
        cc.log(num);
        if (0 == num) {
          this.USDTNode.active = true;
          this.DTNode.active = false;
        } else {
          this.DTNode.active = true;
          this.USDTNode.active = false;
        }
      },
      doButton_xuanze: function doButton_xuanze() {
        true == this.xuanze.active ? this.xuanze.active = false : this.xuanze.active = true;
      },
      doButton_Dragon: function doButton_Dragon(event, Dragon) {
        if ("DT" == Dragon) {
          this.DTNode.active = true;
          this.USDTNode.active = false;
        } else if ("USDT" == Dragon) {
          this.USDTNode.active = true;
          this.DTNode.active = false;
        }
        this.xuanze.active = false;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  StoreLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b57eBha1dBcJW1C4JXFGVv", "StoreLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        zhifubaoBtn: cc.Node,
        weixinBtn: cc.Node,
        Panel_Lift: cc.Node,
        Panel_NeiRong: cc.Node,
        StoreNode: cc.Node,
        StoreLabel: cc.EditBox
      },
      onLoad: function onLoad() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.StoreLogic = new (require("StoreLogic"))();
        if (cc.winSize.width / 1280 < 1) {
          this.Panel_Lift.setScale(cc.winSize.width / 1280);
          this.Panel_NeiRong.setScale(cc.winSize.width / 1280);
        }
        this.isZhiFuBao();
        this.StoreLabel.string = 10;
      },
      start: function start() {},
      isZhiFuBao: function isZhiFuBao() {
        this.itemType = 2;
        this.zhifubaoBtn.active = true;
        this.weixinBtn.active = false;
      },
      isWeiXin: function isWeiXin() {
        this.itemType = 1;
        this.zhifubaoBtn.active = false;
        this.weixinBtn.active = true;
      },
      doButton_xuanze: function doButton_xuanze(event, num) {
        var PayNode = this.StoreNode.getChildByName("PayNode" + num).getChildByName("New Label").getComponent(cc.Label);
        this.StoreLabel.string = "  " + parseInt(PayNode.string);
      },
      doButton_chongzhi: function doButton_chongzhi() {
        this.StoreLabel.string = "  \u8bf7\u8f93\u5165\u60a8\u8981\u8d2d\u4e70\u7684\u91d1\u989d";
      },
      doButton_PayClick: function doButton_PayClick() {
        var payMoney = this.StoreLabel.string;
        if ("" == payMoney || "  \u8bf7\u8f93\u5165\u60a8\u8981\u8d2d\u4e70\u7684\u91d1\u989d" == payMoney) return createTips("\u8bf7\u8f93\u5165\u5145\u503c\u91d1\u989d");
        if (payMoney < 10) {
          createTips("\u4f4e\u4e8e\u6700\u4f4e\u5145\u503c\u91d1\u989d,\u65e0\u6cd5\u5145\u503c");
          payMoney = 0;
          return;
        }
        var payInfo = [];
        payInfo.payWay = this.itemType;
        2 == this.itemType ? payInfo.payWay = E_PayWay.ZHI_FU_BAO : 1 == this.itemType && (payInfo.payWay = E_PayWay.WEI_XIN);
        payInfo.consumeNum = payMoney;
        this.StoreLogic.buyGold(payInfo);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic",
    StoreLogic: "StoreLogic"
  } ],
  StoreLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f39f6F2gtKIa9TALyrBSvR", "StoreLogic");
    "use strict";
    var API = "pay";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      properties: {},
      ctor: function ctor() {},
      requestDiamondItemList: function requestDiamondItemList(callback) {
        ItemListManager.requestDiamondItemList(callback);
      },
      requestGoldItemList: function requestGoldItemList(callback) {
        ItemListManager.requestGoldItemList(callback);
      },
      requestPropItemList: function requestPropItemList(callback) {
        ItemListManager.requestPropItemList(callback);
      },
      requestSubstanceItemList: function requestSubstanceItemList(callback) {
        ItemListManager.requestSubstanceItemList(callback);
      },
      requestBuyRecordList: function requestBuyRecordList(userID, callback) {
        var actionName = "ordersList";
        var fCallback = function fCallback() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID()
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      exchangeSub: function exchangeSub(shopId, name, phone, addr) {
        var actionName = "convert";
        var fCallback = function fCallback() {
          createTips("\u5151\u6362\u5931\u8d25");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? "" != name && createTips("\u60a8\u7684\u5151\u6362\u5df2\u6210\u529f\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u5ba2\u670d\u4e0e\u60a8\u8054\u7cfb") : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          action: actionName,
          userID: this.getUserID(),
          goodsID: shopId,
          realname: name,
          phone: phone,
          address: addr
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      buyShop: function buyShop(payInfo) {
        1 == G_SHOP_BUY_CHANNEL ? this.requestWeiXinPay(payInfo.goodsID) : 2 == G_SHOP_BUY_CHANNEL ? this.requestThirdPay(payInfo) : createTips("\u672a\u77e5\u7684\u6e20\u9053\u7c7b\u578b");
      },
      requestWeiXinPay: function requestWeiXinPay(shopId) {
        var _this = this;
        var actionName = "weiXinPay";
        var fCallback = function fCallback() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            var payCallback = function payCallback(resultInfo) {
              var tmpDelay = function tmpDelay(dt) {
                var resultInfoTab = JSON.parse(resultInfo);
                1 != resultInfoTab.status && createTips("\u652f\u4ed8\u5931\u8d25");
              };
              _this.schedule(tmpDelay, .1, "\u8c03\u7528\u4e00\u6b21");
            };
            jsonData.data.payChannel = 1;
            Market.requestPay(String(JSON.stringify(jsonData.data)), payCallback);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          goodsID: shopId
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestCheckPingGuoOrder: function requestCheckPingGuoOrder(appleData) {
        var actionName = "checkPingGuoOrder";
        var fCallback = function fCallback() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? 1 == appleData.status && createTips("\u6210\u529f\u53d1\u8d27,\u8bf7\u67e5\u6536") : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          order_sn: appleData.order_sn,
          status: appleData.status
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestThirdPay: function requestThirdPay(payInfo) {
        var _this2 = this;
        var goodsID = payInfo.goodsID;
        var payWay = payInfo.payWay;
        var consumeNum = payInfo.consumeNum;
        var actionName = "thirdPay";
        var fCallback = function fCallback() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) if (jsonData.data.pay_type == E_PayType.HUI_FU_BAO && payWay == E_PayWay.WEI_XIN) {
            var shareCallBack = function shareCallBack(info) {};
            var shareInfo = {};
            shareInfo.shareType = E_WX_ShareType.FRIEND;
            shareInfo.url = String(jsonData.data.recharge_url);
            shareInfo.title = String("\u652f\u4ed8\u4e1a\u52a1(" + consumeNum + "\u5143)\u70b9\u51fb\u5145\u503c");
            shareInfo.description = String("\u70b9\u51fb\u94fe\u63a5\u7ed9[ID:" + _this2.getUserID() + "]\u73a9\u5bb6\u5145\u503c");
            Market.requestShare(shareInfo, shareCallBack);
          } else {
            var recharge_url = jsonData.data.recharge_url;
            Market.OpenWebsite(recharge_url);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          payWay: payWay,
          goodsID: goodsID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      buyGold: function buyGold(payInfo) {
        var _this3 = this;
        var actionName = "appBuyGold";
        var payWay = payInfo.payWay;
        var consumeNum = payInfo.consumeNum;
        var fCallback = function fCallback() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) if (jsonData.data.pay_type == E_PayType.HUI_FU_BAO && payWay == E_PayWay.WEI_XIN) {
            var shareCallBack = function shareCallBack(info) {};
            var shareInfo = {};
            shareInfo.shareType = E_WX_ShareType.FRIEND;
            shareInfo.url = String(jsonData.data.recharge_url);
            shareInfo.title = String("\u652f\u4ed8\u4e1a\u52a1(" + consumeNum + "\u5143)\u70b9\u51fb\u5145\u503c");
            shareInfo.description = String("\u70b9\u51fb\u94fe\u63a5\u7ed9[ID:" + _this3.getUserID() + "]\u73a9\u5bb6\u5145\u503c");
            cc.sys.openURL(jsonData.data.recharge_url);
          } else {
            var recharge_url = jsonData.data.recharge_url;
            cc.sys.openURL(recharge_url);
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          buyNum: consumeNum,
          payWay: payWay
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  StringTable: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc472DKZyJFwqa6dF/nrUB3", "StringTable");
    "use strict";
    var StringTable = {
      NUM_MEASUREMENT: {
        1: "\u4e07",
        2: "\u4ebf"
      },
      LOADSCENE: {
        1: "\u6b63\u5728\u52a0\u8f7d\u767b\u5f55\u754c\u9762\u8d44\u6e90...",
        2: "\u6b63\u5728\u52a0\u8f7d\u5927\u5385\u8d44\u6e90...",
        3: "\u6b63\u5728\u52a0\u8f7d\u725b\u725b\u623f\u95f4\u8d44\u6e90...",
        4: "\u6b63\u5728\u52a0\u8f7d\u70b8\u91d1\u82b1\u623f\u95f4\u8d44\u6e90...",
        5: "\u6b63\u5728\u52a0\u8f7d\u9ebb\u5c06\u623f\u95f4\u8d44\u6e90..."
      },
      LOBBY_RANK: {
        1: "\u672c\u5468\u80dc\u5c40 ",
        2: "\u91d1\u5e01\u603b\u6570 "
      },
      COMMON: {
        1: "\u656c\u8bf7\u671f\u5f85",
        2: "\u6e38\u620f\u6682\u672a\u5f00\u653e",
        3: "\u91d1\u5e01\u4e0d\u8db3%1,\u65e0\u6cd5\u8fdb\u5165\u8be5\u623f\u95f4"
      },
      SOCKET_CLOSE: {
        1: "\u5927\u5385\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5...",
        2: "\u5927\u5385\u670d\u52a1\u5668\u6682\u672a\u5f00\u542f...",
        3: "\u6b63\u5728\u94fe\u63a5\u5927\u5385\u670d\u52a1\u5668...",
        4: "\u6e38\u620f\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5...",
        5: "\u6e38\u620f\u670d\u52a1\u5668\u6682\u672a\u5f00\u542f..."
      },
      ERROR_CODE: {
        0: "\u9519\u8bef\u7801:",
        1: "\u8d26\u53f7\u5df2\u5b58\u5728",
        2: "\u8d26\u53f7\u4e0d\u5b58\u5728",
        16: "\u91d1\u5e01\u672a\u8fbe\u5230\u5f53\u524d\u623f\u95f4\u6700\u4f4e\u8981\u6c42"
      },
      MESSAGE_BOX: {
        1: "\u8d26\u53f7\u6216\u8005\u5bc6\u7801\u8f93\u5165\u9519\u8bef..."
      },
      NIUNIU: {
        0: "\u5e95\u6ce8:",
        1: "\u8bf7\u51c6\u5907\u5f00\u59cb\u4e0b\u5c40\u6e38\u620f:",
        2: "\u5f00\u59cb\u53eb\u5e84:",
        3: "\u5f00\u59cb\u4e0b\u6ce8:",
        4: "\u67e5\u770b\u624b\u724c:",
        5: "\u5f00\u59cb\u6bd4\u724c:"
      },
      NIUNIU_PLAY_TYPE: {
        1: "\u725b\u725b\u4e0a\u5e84",
        2: "\u56fa\u5b9a\u5e84\u5bb6",
        3: "\u81ea\u7531\u62a2\u5e84",
        4: "\u660e\u724c\u62a2\u5e84",
        5: "\u901a\u6bd4\u725b\u725b"
      }
    };
    module.exports = StringTable;
    cc._RF.pop();
  }, {} ],
  SystemNoticeLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbb15q7ZOFFo48aSZc0Q/OS", "SystemNoticeLogic");
    "use strict";
    module.exports = cc.Class({
      extends: require("LogicBasis"),
      ctor: function ctor() {},
      requestSystemNotice: function requestSystemNotice(callback) {
        NoticeManager.requestSystemNotice(callback);
      },
      requestPayPrepayID: function requestPayPrepayID(buyNum, consumeNum, goodsID, callback) {
        NoticeManager.requestPayPrepayID(buyNum, consumeNum, goodsID, callback);
      },
      requestShopMommodity: function requestShopMommodity(callback) {
        NoticeManager.requestShopMommodity(callback);
      },
      requestPaijuList: function requestPaijuList(callback) {
        NoticeManager.requestPaijuList(callback);
      },
      requestZhanjiList: function requestZhanjiList(gameID, callback) {
        NoticeManager.requestZhanjiList(gameID, callback);
      },
      requestZhanjiDetailsList: function requestZhanjiDetailsList(gradeID, callback) {
        NoticeManager.requestZhanjiDetailsList(gradeID, callback);
      },
      requesSmalltZhanjiDetailsList: function requesSmalltZhanjiDetailsList(gradeID, callback) {
        NoticeManager.requesSmalltZhanjiDetailsList(gradeID, callback);
      },
      requestGongGaoMommodity: function requestGongGaoMommodity(callback) {
        NoticeManager.requestGongGaoMommodity(callback);
      },
      requestShartReward: function requestShartReward(ShartuserID) {
        NoticeManager.requestShartReward(ShartuserID);
      },
      requestSpecialNotice: function requestSpecialNotice(callback) {
        NoticeManager.requestSpecialNotice(callback);
      },
      requestdelNotice: function requestdelNotice(ID, callback) {
        NoticeManager.requestdelNotice(ID, callback);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  TTZ_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8fecj48rVI05mcne1Ox86Y", "TTZ_ZhanJi_Item");
    "use strict";
    var majiangSpriteFrame = {
      back: 0,
      21: 1,
      22: 2,
      23: 3,
      24: 4,
      25: 5,
      26: 6,
      27: 7,
      28: 8,
      29: 9,
      37: 10
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        maJiangSpriteFrame: [ cc.SpriteFrame ],
        cards: cc.Node
      },
      getMahjongRes: function getMahjongRes(cardValue) {
        var name = "";
        name = 255 == cardValue ? "back" : cardValue + "";
        return this.maJiangSpriteFrame[majiangSpriteFrame[name]];
      },
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        var cardTypeStr = this.getCardType(data.cardShape);
        cardTypeStr && (this.ruleLabel.string = "" + cardTypeStr);
        for (var i = 0; i < data.handCards.length; i++) this.cards.children[i].getComponent(cc.Sprite).spriteFrame = this.getMahjongRes(data.handCards[i]);
      },
      getCardType: function getCardType(cardType) {
        var cardTypeStr = "";
        if (0 == cardType) return cardTypeStr;
        var anim, skin;
        if (328 == cardType) cardTypeStr = "\u4e8c\u516b\u6760"; else if (cardType > 200 && cardType <= 300) 211 == cardType ? cardTypeStr = "\u4e00\u7b52\u5bf9" : 222 == cardType ? cardTypeStr = "\u4e8c\u7b52\u5bf9" : 233 == cardType ? cardTypeStr = "\u4e09\u7b52\u5bf9" : 244 == cardType ? cardTypeStr = "\u56db\u7b52\u5bf9" : 255 == cardType ? cardTypeStr = "\u4e94\u7b52\u5bf9" : 266 == cardType ? cardTypeStr = "\u516d\u7b52\u5bf9" : 277 == cardType ? cardTypeStr = "\u4e03\u7b52\u5bf9" : 288 == cardType ? cardTypeStr = "\u516b\u7b52\u5bf9" : 299 == cardType ? cardTypeStr = "\u4e5d\u7b52\u5bf9" : 300 == cardType && (cardTypeStr = "\u6b22\u5929\u81f3\u5c0a"); else if (cardType > 100 && cardType < 200) {
          cardType -= 100;
          var tensDigit = Math.floor(cardType / 10);
          var unitDigit = cardType % 10;
          skin = tensDigit + "." + unitDigit;
          0 == unitDigit && (skin = tensDigit);
          skin = Number(skin);
          switch (skin) {
           case 1:
            cardTypeStr = "\u4e00\u70b9";
            break;

           case 2:
            cardTypeStr = "\u4e8c\u70b9";
            break;

           case 3:
            cardTypeStr = "\u4e09\u70b9";
            break;

           case 4:
            cardTypeStr = "\u56db\u70b9";
            break;

           case 5:
            cardTypeStr = "\u4e94\u70b9";
            break;

           case 6:
            cardTypeStr = "\u516d\u70b9";
            break;

           case 7:
            cardTypeStr = "\u4e03\u70b9";
            break;

           case 8:
            cardTypeStr = "\u516b\u70b9";
            break;

           case 9:
            cardTypeStr = "\u4e5d\u70b9";
            break;

           case 1.5:
            cardTypeStr = "\u4e00\u70b9\u534a";
            break;

           case 2.5:
            cardTypeStr = "\u4e8c\u70b9\u534a";
            break;

           case 3.5:
            cardTypeStr = "\u4e09\u70b9\u534a";
            break;

           case 4.5:
            cardTypeStr = "\u56db\u70b9\u534a";
            break;

           case 5.5:
            cardTypeStr = "\u4e94\u70b9\u534a";
            break;

           case 6.5:
            cardTypeStr = "\u516d\u70b9\u534a";
            break;

           case 7.5:
            cardTypeStr = "\u4e03\u70b9\u534a";
            break;

           case 8.5:
            cardTypeStr = "\u516b\u70b9\u534a";
            break;

           case 9.5:
            cardTypeStr = "\u4e5d\u70b9\u534a";
          }
        } else 100 == cardType && (cardTypeStr = "\u95ed\u5341");
        return cardTypeStr;
      }
    });
    cc._RF.pop();
  }, {} ],
  TcpClient: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8ee4Jmr19Ovp02MEhocdUw", "TcpClient");
    "use strict";
    var ByteBuffer = require("bytebuffer");
    var Package = require("Package");
    var TcpClient = cc.Class({
      extends: cc.Component,
      properties: {
        outtime: 10,
        hearttime: 5,
        readhead: false,
        _buffer: null,
        manager: null,
        isServerRoom: false,
        needReConnect: false
      },
      ctor: function ctor() {
        this.ip = 0;
        this.port = 0;
        this.ws = null;
        this.queue = [];
        this.queueProcessing = false;
        this.readhead = false;
        this.bodylen = 0;
        this.headlen = 8;
        this.cmd = 0;
        this.isConnect = false;
        this._buffer = new ByteBuffer();
        this.netCallbackMap = new Map();
        this.helloScheduleId = null;
        this.helloCheckInterval = 4;
        this.heartCheckCount = 2;
        this.heartCheckInterval = 15;
        this.packageQueue = this.initQueue();
        this.receiveDataArr = [];
      },
      setHeartCheckInterval: function setHeartCheckInterval(heartCheckInterval) {
        this.heartCheckInterval = heartCheckInterval;
        this.heartCheck();
      },
      connect: function connect(ip, port, sendport) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) return;
        if (this.isConnect) return;
        this.ip = ip;
        this.port = port;
        this.sendport = sendport;
        var url = "";
        url = 1 == window.G_GAMESEVER_KEY ? "wss://cpp.ouwan.hmzb.top/ws" : "wss://cpp.ouone.hmzb.top/ws";
        this.ws = new WebSocket(url);
        console.log("\u5c1d\u8bd5\u8fde\u63a5\u670d\u52a1\u5668 url:", url);
        this.ws.binaryType = "arraybuffer";
        this.ws.onopen = this.onOpen.bind(this);
        var fun = this.onDataReceivedQueue.bind(this);
        this.ws.onmessage = function(event) {
          fun(event.data);
        };
        this.ws.onerror = this.onError.bind(this);
        this.ws.onclose = this.onClose.bind(this);
      },
      close: function close(callback) {
        console.log("\u5f53\u65ad\u7f51\u91cd\u65b0\u8fdb\u5165\u5230\u524d\u53f0  this.isConnect=false \u6b63\u5e38\u4e3a true");
        if (cc.sys.isNative && !this.isConnect) return;
        this.receiveDataArr = [];
        clearInterval(this.receivePackageInterval);
        this.receivePackageInterval = null;
        this.bythis = true;
        this.ws && this.ws.close();
        if (cc.sys.isNative) {
          this.onDisconnect();
          this.isConnect = false;
        }
        this.closeCallback = callback;
      },
      onOpen: function onOpen(event) {
        this.isConnect = true;
        console.log("\u8fde\u63a5\u670d\u52a1\u5668\u6210\u529f ip:" + this.ip + ",port:" + this.sendport);
        this.clearPackageQueue();
        this.sendPort();
      },
      sendPort: function sendPort() {
        cc.log(typeof this.sendport + "\u8fde\u63a5\u670d\u52a1\u5668\u4e4b\u540e \u53d1\u9001\u7aef\u53e3 port=" + this.sendport);
        var p = Package.buildWritePack(28);
        p.writeBegin(1, 8);
        p.writeInt(this.sendport);
        var ip = NetConfig.getServerAddress();
        p.writeString(ip, 24);
        cc.log("ip=" + ip);
        this.send(p);
      },
      onClose: function onClose(event) {
        var _this = this;
        console.log("\u8fde\u63a5\u5173\u95ed" + this.isConnect);
        console.log(event);
        if (!this.isConnect) return;
        var timestamp = new Date().getTime().toString();
        this.receiveDataArr = [];
        clearInterval(this.receivePackageInterval);
        this.receivePackageInterval = null;
        this.heartReset();
        console.log("websocket \u65ad\u5f00: code = " + event.code + " reason =  " + event.reason + " wasClean = " + event.wasClean);
        if (1006 == event.code) {
          var live_broadcast = Number(cc.sys.localStorage.getItem(G_LIVE_BROADCAST));
          if (0 == live_broadcast) this.onDisconnect(); else {
            this.livcheduleId = function() {
              var live_broadcast = Number(cc.sys.localStorage.getItem(G_LIVE_BROADCAST));
              if (1 == live_broadcast) {
                _this.onDisconnect();
                _this.unschedule(_this.livcheduleId);
              }
            };
            this.schedule(this.livcheduleId, 3);
          }
        }
        this.isConnect = false;
      },
      onError: function onError(evnt) {
        trace("\u8fde\u63a5\u5931\u8d25");
        console.log("\u8fde\u63a5\u5931\u8d25");
        if (this.isServerRoom) {
          ServerRoom = null;
          !this.bythis;
        } else !this.bythis;
      },
      initQueue: function initQueue() {
        var list = [];
        var self = this;
        var packageEvent = {
          push: function push(data) {
            if (null == data) return false;
            list.unshift(data);
            return true;
          },
          pop: function pop() {
            return list.pop();
          },
          getSize: function getSize() {
            return list instanceof Array ? list.length : 0;
          },
          queue: function queue() {
            return list;
          },
          clear: function clear() {
            list.length = 0;
            this.receiveDataArr = [];
            clearInterval(this.receivePackageInterval);
            this.receivePackageInterval = null;
            this.curLeftReceiveArrayBuffer = null;
            this.isRunReceivePackage = false;
            this.isBufferedAmount = false;
            this.isClearIngPackage = true;
            clearInterval(this.packageQueueInterval);
            this.packageQueueInterval = null;
            cc.isRunPackageQueue = false;
          }
        };
        return packageEvent;
      },
      startPackageQueueInterval: function startPackageQueueInterval() {
        var _this2 = this;
        cc.isRunPackageQueue = false;
        this.packageQueueInterval = setInterval(function() {
          if (_this2.packageQueue.getSize() > 0 && !cc.isRunPackageQueue) {
            cc.isRunPackageQueue = true;
            var curPackage = _this2.packageQueue.pop();
            _this2.onDataReceived(curPackage);
          }
        }, 1);
      },
      _appendArrayBuffer: function _appendArrayBuffer(buffer1, buffer2) {
        var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
        tmp.set(new Uint8Array(buffer1), 0);
        tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
        return tmp.buffer;
      },
      onDataReceivedQueue: function onDataReceivedQueue(arrayBuffer) {
        var _this3 = this;
        if (cc.sys.isNative && !this.isConnect) return;
        this.isClearIngPackage = false;
        this.receiveDataArr.unshift(arrayBuffer);
        this.receivePackageInterval || (this.receivePackageInterval = setInterval(function() {
          if (!_this3.isBufferedAmount && !_this3.isRunReceivePackage) if (_this3.receiveDataArr && _this3.receiveDataArr.length > 0) {
            _this3.isRunReceivePackage = true;
            var curReceivePackage = _this3.receiveDataArr.pop();
            if (_this3.curLeftReceiveArrayBuffer) {
              curReceivePackage = _this3._appendArrayBuffer(_this3.curLeftReceiveArrayBuffer, curReceivePackage);
              _this3.curLeftReceiveArrayBuffer = null;
            }
            var tempBuffer = new ByteBuffer();
            var byteLength = tempBuffer.append(curReceivePackage).flip().buffer.byteLength;
            cc.log("arrayBufferLength", byteLength);
            if (curReceivePackage.byteLength >= 1200 || 10240 == curReceivePackage.byteLength || curReceivePackage.byteLength >= 32 && byteLength != curReceivePackage.byteLength) {
              _this3.isBufferedAmount = true;
              var bytebuffer = null;
              var uMessageSize = null;
              bytebuffer = tempBuffer.readBytes(_this3.headlen);
              uMessageSize = bytebuffer.readUint32();
              var newArrayBuffer = curReceivePackage.slice(0, uMessageSize);
              _this3.packageQueue.push(newArrayBuffer);
              cc.log(uMessageSize + ">>>\u589e\u52a01\u4e2a\u6536\u5305\u961f\u5217 \u603b\u6570\u4e3a" + _this3.packageQueue.getSize());
              while (curReceivePackage.byteLength >= uMessageSize) {
                curReceivePackage = curReceivePackage.slice(uMessageSize);
                tempBuffer = new ByteBuffer();
                byteLength = tempBuffer.append(curReceivePackage).flip().buffer.byteLength;
                cc.log("arrayBufferLength", byteLength);
                bytebuffer = tempBuffer.readBytes(_this3.headlen);
                uMessageSize = bytebuffer.readUint32();
                if (0 == uMessageSize || curReceivePackage.byteLength < uMessageSize || _this3.isClearIngPackage) break;
                newArrayBuffer = curReceivePackage.slice(0, uMessageSize);
                _this3.packageQueue.push(newArrayBuffer);
                cc.log(uMessageSize + ">>>\u518d\u589e\u52a01\u4e2a\u6536\u5305\u961f\u5217 \u603b\u6570\u4e3a" + _this3.packageQueue.getSize());
              }
              if (_this3.isClearIngPackage) {
                _this3.curLeftReceiveArrayBuffer = null;
                _this3.isBufferedAmount = false;
              } else if (curReceivePackage.byteLength < uMessageSize) {
                _this3.curLeftReceiveArrayBuffer = curReceivePackage;
                _this3.isBufferedAmount = false;
              } else {
                newArrayBuffer = curReceivePackage.slice(0, uMessageSize);
                _this3.packageQueue.push(newArrayBuffer);
                _this3.curLeftReceiveArrayBuffer = null;
                _this3.isBufferedAmount = false;
              }
              _this3.isRunReceivePackage = false;
            } else {
              var _bytebuffer = tempBuffer.readBytes(_this3.headlen);
              var _uMessageSize = _bytebuffer.readUint32();
              var cmd = _bytebuffer.readUint32();
              var uMainID = _bytebuffer.readUint32();
              1 == cmd && 3 == uMainID && _this3.clearPackageQueue();
              _this3.isBufferedAmount = false;
              _this3.isRunReceivePackage = false;
              _this3.packageQueue.push(curReceivePackage);
              cc.log(">>>\u589e\u52a01\u4e2a\u6536\u5305\u961f\u5217 \u603b\u6570\u4e3a" + _this3.packageQueue.getSize());
            }
          } else {
            _this3.isRunReceivePackage = false;
            _this3.isBufferedAmount = false;
            clearInterval(_this3.receivePackageInterval);
            _this3.receivePackageInterval = null;
          }
        }, .1));
        this.packageQueueInterval || this.startPackageQueueInterval();
      },
      mRecData: function mRecData(arrayBuffer) {
        this._buffer.append(arrayBuffer);
        this._buffer.flip();
        if (this._buffer.limit - this._buffer.offset < this.headlen) {
          cc.error("\u8fd9\u5305\u8fde\u5934\u90fd\u4e0d\u5b8c\u6574");
          return;
        }
        var bytebuffer = this._buffer.readBytes(this.headlen);
        this.bodylen = bytebuffer.readUint32();
        this.cmd = bytebuffer.readUint32();
        var left = this.bodylen - this.headlen;
        while (this._buffer.limit >= left) {
          1 == this.cmd ? this.onTick(this.cmd, this._buffer.readBytes(left)) : this.receive(this.cmd, this._buffer.readBytes(left));
          if (this._buffer.offset == this._buffer.limit) break;
          if (this._buffer.limit - this._buffer.offset < this.headlen) break;
        }
        this._buffer.offset == this._buffer.limit ? this._buffer.clear() : this._buffer = this._buffer.copy(this._buffer.offset, this._buffer.limit);
      },
      onDataReceived: function onDataReceived(arrayBuffer) {
        this._buffer.reset();
        this._buffer.clear();
        this._buffer.append(arrayBuffer);
        this._buffer.flip();
        var max = 1e4;
        var left;
        while (max > 0) {
          this.paused = true;
          if (false === this.readhead) {
            var bytebuffer = this._buffer.readBytes(this.headlen);
            this.bodylen = bytebuffer.readUint32();
            this.cmd = bytebuffer.readUint32();
            cc.log("this.bodylen = ", this.bodylen);
            cc.log("cmd = ", this.cmd);
            if (0 == this.bodylen || 0 == this.cmd || this.cmd > 1e3) {
              this._buffer.reset();
              this._buffer.clear();
              cc.isRunPackageQueue = false;
              return;
            }
            0 == this._buffer.limit && (this._buffer.limit = this.bodylen);
            this.readhead = true;
          } else {
            left = this.bodylen - this.headlen;
            if (!(this._buffer.limit >= left)) {
              this._buffer.reset();
              this._buffer.clear();
              this.readhead = false;
              this.cmd = 0;
              this.bodylen = 0;
              cc.isRunPackageQueue = false;
              break;
            }
            1 == this.cmd ? this.onTick(this.cmd, this._buffer.readBytes(left)) : this.receive(this.cmd, this._buffer.readBytes(left));
            this.readhead = false;
            this.cmd = 0;
            this.bodylen = 0;
            if (this._buffer.offset == this._buffer.limit) {
              this._buffer.reset();
              this._buffer.clear();
              cc.isRunPackageQueue = false;
              this.paused = false;
              break;
            }
            this._buffer = this._buffer.copy(this._buffer.offset, this._buffer.limit);
          }
          max--;
        }
        max <= 0;
      },
      process: function process() {
        this.queueProcessing = true;
        var num = this.queue.length;
        var data;
        for (var i = 0; i < num; i++) {
          if (this._paused) {
            this.queueProcessing = false;
            return;
          }
          data = this.queue[i];
          if (data.hasRead) continue;
          data.hasRead = true;
          this.onDataReceived(data.buffer);
        }
        this.queue.length = 0;
        this.queueProcessing = false;
      },
      onTick: function onTick(tcmd, tmsg) {
        var p = Package.buildReadPack(tcmd, tmsg);
        1 == p.bAssistantID ? this.onHeartBeatMessage(p) : p.bAssistantID == E_NET_CONNECT_ASSID.assid_net_connect && this.onConnectMessage(p);
      },
      receive: function receive(tcmd, tmsg) {
        this.sendHeartBeatMessage();
        this.heartCheck();
        var p = Package.buildReadPack(tcmd, tmsg);
        if (206 == p.bAssistantID) {
          cc.log(p, "pppppppppppppppppppppppppp");
          cc.log(tmsg, "tmsgtmsgtmsgtmsgtmsgtmsg");
          cc.log(this._buffer, "this._bufferthis._bufferthis._bufferthis._buffer");
        }
        this.cmd == MSG_MAIN_LOADER_GAME && true == this.throwGameMsg ? cc.error("(\u5c4f\u853d \u6536\u5305<<<<<<" + tcmd + "-" + p.bAssistantID + "-" + p.bHandleCode + ") ") : this.netCallback && this.netCallback(p);
      },
      sendData: function sendData(p, rCallbackFun, sendDesc) {
        this.send(p, rCallbackFun, sendDesc);
      },
      send: function send(p, rCallbackFun, sendDesc) {
        1 != p.bMainID;
        p.getCmd() && rCallbackFun && this.bindingNetCallback(p.getCmd(), rCallbackFun);
        this.ws && this.ws.readyState === WebSocket.OPEN && this.ws.send(p.getData());
        if (sendDesc) {
          cc.log("sendDesc = {0}", sendDesc);
          createLoading(sendDesc, G_COMMON_LOADING_TIME);
        }
      },
      listenerPackageData: function listenerPackageData() {},
      bindingNetCallback: function bindingNetCallback(cmd, callback) {
        var callbackArr = this.netCallbackMap.get(cmd);
        if (!callbackArr) {
          callbackArr = new Array();
          this.netCallbackMap.set(cmd, callbackArr);
        }
        callbackArr.push(callback);
      },
      getCallbackFun: function getCallbackFun(cmd) {
        var callbackArr = this.netCallbackMap.get(cmd);
        if (!callbackArr) return;
        return callbackArr[0];
      },
      removeNetCallback: function removeNetCallback(cmd) {
        var callbackArr = this.netCallbackMap.get(cmd);
        if (!callbackArr) return;
        callbackArr.splice(0, 1);
        if (0 == callbackArr.length) {
          callbackArr = null;
          this.netCallbackMap["delete"](cmd);
        }
      },
      removeAllNetCallback: function removeAllNetCallback() {
        this.netCallbackMap.clear();
      },
      onConnectMessage: function onConnectMessage(p) {
        this.heartCheck();
      },
      heartCheck: function heartCheck() {
        if (cc.sys.isNative && !this.isConnect) return;
        this.heartReset();
        this.heartStart();
      },
      heartStart: function heartStart() {
        var self = this;
        this.pingTimeoutId = setTimeout(function() {
          self.sendGameHeartBeatMessage();
          self.pongTimeoutId = setTimeout(function() {
            var live_broadcast = Number(cc.sys.localStorage.getItem(G_LIVE_BROADCAST));
            0 == live_broadcast && self.onDisconnect();
          }, 100);
        }, 1e3 * this.heartCheckInterval);
      },
      heartReset: function heartReset() {
        this.pingTimeoutId && clearTimeout(this.pingTimeoutId);
        this.pongTimeoutId && clearTimeout(this.pongTimeoutId);
        this.pingTimeoutId = null;
        this.pongTimeoutId = null;
      },
      sendHeartBeatMessage: function sendHeartBeatMessage() {
        if (cc.sys.isNative && !this.isConnect) return;
      },
      sendGameHeartBeatMessage: function sendGameHeartBeatMessage() {
        if (cc.sys.isNative && !this.isConnect) return;
        var p = Package.buildWritePack(0);
        p.writeBegin(2, 2);
        console.error("\u53d1\u9001\u5fc3\u8df3\u5305" + new Date().getSeconds());
        this.send(p, false);
      },
      onHeartBeatMessage: function onHeartBeatMessage() {
        var p = Package.buildWritePack(0);
        p.writeBegin(2, 2);
        this.send(p);
        this.heartCheck();
      },
      sendHelloMessage: function sendHelloMessage() {
        var _this4 = this;
        var cNetMsg = this.createNetMsg(0, E_NET_CONNECT_MAINID.mainid_net_hello, E_NET_CONNECT_ASSID.assid_net_hello);
        this.sendData(cNetMsg);
        this.closeHelloSchedule();
        this.helloCheckCount = 0;
        this.helloScheduleId = function() {
          _this4.helloCheckCount++;
          if (_this4.helloCheckCount > 3) {
            _this4.closeHelloSchedule();
            _this4.onDisconnect();
          }
        };
        this.schedule(this.helloScheduleId, this.helloCheckInterval);
      },
      closeHelloSchedule: function closeHelloSchedule() {
        cc.log("closeHelloSchedule");
        if (this.helloScheduleId) {
          this.unschedule(this.helloScheduleId);
          this.helloScheduleId = null;
        }
      },
      connectService: function connectService(ip, port, sendport, netCallback) {
        if (this.isConnect) return;
        this.netCallback = netCallback;
        this.connect(ip, port, sendport);
      },
      isConnected: function isConnected() {
        return this.isConnect;
      },
      resolveNetMsgHead: function resolveNetMsgHead(p) {
        cc.log("resolveNetMsgHead resolve net msg head " + p.bMainID + ">>" + p.bAssistantID);
        if (p.bMainID === E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectSuccess) {
          cc.log("on connect success");
          this.onConnectSuccess();
        } else p.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_ConnectFailed ? this.onConnectFailed() : p.bMainID == E_ClientNetStatusProtocolDef.NetStatusProtocol_DisConnect ? this.onDisconnect() : E_NET_CONNECT_MAINID.mainid_net_connect == p.bMainID && E_NET_CONNECT_ASSID.assid_net_connect == p.bAssistantID ? this.onConnectMessage(p) : E_NET_CONNECT_MAINID.mainid_net_connect == p.bMainID && E_NET_CONNECT_ASSID.assid_net_test == p.bAssistantID ? this.onHeartBeatMessage(p) : E_NET_CONNECT_MAINID.mainid_net_hello == p.bMainID && E_NET_CONNECT_ASSID.assid_net_hello == p.bAssistantID && this.closeHelloSchedule();
      },
      onConnectSuccess: function onConnectSuccess() {},
      onConnectFailed: function onConnectFailed() {},
      onDisconnect: function onDisconnect() {},
      createNetMsg: function createNetMsg(uMessageSize, bMainID, bAssistantID, bHandleCode, roomID) {
        roomID = roomID || 0;
        var p = Package.buildWritePack(uMessageSize);
        p.writeBegin(bMainID, bAssistantID, roomID);
        return p;
      },
      makeCheckCode: function makeCheckCode(uMessageSize, bMainID, bAssistantID, key) {
        var random = F_RandomNum(1, 5e3);
        var randomNum = random + 5e3;
        var checkCode = (uMessageSize + bMainID + bAssistantID + key) % randomNum;
        var bitNum = randomNum << 16;
        checkCode += bitNum;
        return checkCode;
      },
      clearPackageQueue: function clearPackageQueue() {
        this.packageQueue.clear();
      },
      clear: function clear() {
        this.netCallbackMap.clear();
        this.clearPackageQueue();
        this.closeHelloSchedule();
      },
      setThrowGameMsg: function setThrowGameMsg(value) {
        if ("boolean" != typeof value) {
          cc.error("set Throw game msg type wrong");
          return;
        }
        this.throwGameMsg = value;
      }
    });
    module.exports = TcpClient;
    cc._RF.pop();
  }, {
    Package: "Package",
    bytebuffer: "bytebuffer"
  } ],
  TiBiDragonLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36bd1hD3l1CCLcKXyzxdZDN", "TiBiDragonLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        YuE: cc.Label,
        TiBiLabel: cc.EditBox,
        slider: cc.Slider,
        xuanze: cc.Node,
        USDTNode: cc.Node,
        DTNode: cc.Node,
        Progress: cc.Node
      },
      onLoad: function onLoad() {
        cc.winSize.width / 1280 < 1 && this.slider.node.setScale(cc.winSize.width / 1280);
      },
      start: function start() {},
      doButton_max: function doButton_max() {
        this.slider.progress = 1;
        this.Progress.width = 480;
        0 != this.YuE.string && (this.TiBiLabel.string = this.YuE.string);
      },
      doButton_slider: function doButton_slider() {
        0 != this.YuE.string && (this.TiBiLabel.string = parseInt(Number(this.YuE.string) * this.slider.progress));
      },
      doButton_xuanze: function doButton_xuanze() {
        true == this.xuanze.active ? this.xuanze.active = false : this.xuanze.active = true;
      },
      doButton_Dragon: function doButton_Dragon(event, Dragon) {
        if ("DT" == Dragon) {
          this.DTNode.active = true;
          this.USDTNode.active = false;
        } else if ("USDT" == Dragon) {
          this.USDTNode.active = true;
          this.DTNode.active = false;
        }
        this.xuanze.active = false;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  TimeLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "286f1x70F5FcaAYhX710bG7", "TimeLabel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        runTime: false,
        time: {
          default: 15
        },
        time_dt: 0,
        t_label: cc.Label
      },
      start: function start() {},
      updateLabel: function updateLabel() {
        var curValue = Math.trunc(this.time);
        if (this.time <= 0) {
          this.stop();
          this.stopCountDown();
          return;
        }
        this.t_label.string = curValue <= 9 ? "0" + curValue : curValue;
        this.node.active = true;
        null != this.callfunc && "undefined" != typeof this.callfunc && this.callfunc(curValue);
        this.time = curValue - 1;
      },
      startTime: function startTime(tTime, callfunc, stopCallBack) {
        this.runTime = true;
        this.time = tTime || this.time;
        this.callfunc = callfunc;
        this.stopCallBack = stopCallBack;
        this.startCountDown();
      },
      stop: function stop() {
        this.runTime = false;
        this.node.active = false;
        this.stopCallBack && this.stopCallBack();
      },
      onEnable: function onEnable() {},
      onDisable: function onDisable() {},
      stopCountDown: function stopCountDown() {
        this.unscheduleAllCallbacks();
      },
      startCountDown: function startCountDown() {
        this.schedule(this.updateLabel, 1);
      },
      onDestroy: function onDestroy() {
        this.stopCountDown();
      }
    });
    cc._RF.pop();
  }, {} ],
  TimeNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0d4d4rMHRpIA7HWcU0EX+rH", "TimeNode");
    "use strict";
    var TimeNode = cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      init: function init(simulateNode) {
        this.node.setAnchorPoint(simulateNode.getAnchorPoint());
        this.node.setPosition(simulateNode.getPosition());
        simulateNode.getParent().addChild(this.node);
        simulateNode.active = false;
        this.initUI();
      },
      initUI: function initUI() {
        var dianText = this.node.addComponent(cc.Label);
        dianText.string = ".";
        dianText.fontSize = 20;
        var timeText = this.node.addComponent(cc.Label);
        var time = new Date();
        var h = time.getHours();
        var m = time.getMinutes();
        timeText.string = tools.stringFormat("{0}.{1}", h, m);
        timeText.fontSize = 20;
        function updateProgress(dt) {
          var a1 = cc.fadeIn(.1);
          var a2 = cc.fadeOut(.1);
          dianText.node.runAction(cc.repeat(cc.sequence(a1, a2), 1));
          var time = new Date();
          var h = time.getHours();
          var m = time.getMinutes();
          timeText.string = tools.stringFormat("{0} {1}", h, m);
        }
        this.schedule(updateProgress, 1);
      },
      start: function start() {}
    });
    module.exports = TimeNode;
    cc._RF.pop();
  }, {} ],
  TipLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e1ab0u+WGRLprC4uCEETJoh", "TipLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        text: cc.Node,
        bgHeight: 30,
        delayTime: 2
      },
      onLoad: function onLoad() {
        this._super();
        this.node && this.node.setPosition(cc.v2(cc.winSize.width / 2, cc.winSize.height / 2));
      },
      initTip: function initTip(msg, delayTime) {
        delayTime && (this.delayTime = delayTime);
        this.node && (this.node.name = msg);
        this.setMsg(msg);
        var frameSize = cc.view.getFrameSize();
        frameSize.height > frameSize.width || this.beginAction();
      },
      initClickTip: function initClickTip(msg, callBack) {
        this.node && (this.node.name = msg);
        this.delayTime = 0;
        this.setMsg(msg);
        var frameSize = cc.view.getFrameSize();
        frameSize.height > frameSize.width || this.popAction();
        this.fitBgSize();
        this.node.getComponent("LayerMask").setLayerClickCallback(callBack);
      },
      setMsg: function setMsg(msg) {
        if (!this.text) return;
        if (this.text && cc.isValid(this.text)) {
          var label = this.text.getComponent(cc.Label);
          if (label && msg) {
            label.string = msg;
            msg.length > 15 && (label.fontSize = 30);
          }
        }
      },
      beginAction: function beginAction() {
        this.delayTime = 5;
        var a1 = cc.moveBy(.3, cc.v2(0, this.bgHeight));
        var a2 = cc.delayTime(this.delayTime);
        var a3 = cc.fadeOut(.3);
        var a4 = cc.removeSelf();
        var a5 = cc.delayTime(2);
        var seq;
        var frameSize = cc.view.getFrameSize();
        seq = frameSize.height > frameSize.width ? cc.sequence(a2, a3, a4) : cc.sequence(a1, a5, a3, a4);
        this.node && this.node.runAction(seq);
      },
      popAction: function popAction() {
        this.node && this.node.runAction(cc.moveBy(.3, cc.v2(0, this.bgHeight)));
      },
      removeAction: function removeAction() {
        this.node && this.node.runAction(cc.sequence(cc.fadeOut(.3), cc.removeSelf()));
      },
      touchEventCallback: function touchEventCallback() {
        this.removeAction();
      },
      fitBgSize: function fitBgSize() {}
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ToggleButton: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0483hGG5dAboTQgS4NLDGv", "ToggleButton");
    "use strict";
    cc.Class({
      extends: cc.Toggle,
      properties: {},
      start: function start() {},
      update: function update() {
        this.target.active = !this.isChecked;
      }
    });
    cc._RF.pop();
  }, {} ],
  Tools: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc1ccY1pChLC5YrBgQjPE+Y", "Tools");
    "use strict";
    var Tools = {
      getCurTime: function getCurTime() {
        var date = new Date();
        var seperator1 = "-";
        var seperator2 = ":";
        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var strDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        var Hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
        var Minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        var Seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
        var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + " " + Hours + seperator2 + Minutes + seperator2 + Seconds;
        return currentdate;
      },
      setCurScreen: function setCurScreen() {
        var frameSize = cc.view.getFrameSize();
        var designSize = cc.Canvas.instance.designResolution;
        var WinSize = cc.winSize;
        var viewVisibleSize = cc.view.getVisibleSize();
        var viewVisibleSizeInPixel = cc.view.getVisibleSizeInPixel();
        var DesignResolutionSize = cc.view.getDesignResolutionSize();
        viewVisibleSize.height > 1400 ? CUR_SCREEN = true : CUR_SCREEN = false;
      },
      getCurScreen: function getCurScreen() {
        return CUR_SCREEN;
      },
      convertGetParams: function convertGetParams(params) {
        var pString = "";
        if (null === params) return pString;
        pString = "?";
        for (var k in params) {
          "?" !== pString && (pString += "&");
          pString = pString + k + "=" + params[k];
        }
        return pString;
      },
      convertPostParams: function convertPostParams(params) {
        if (null === params) return null;
        var pString = "";
        for (var k in params) {
          "" !== pString && (pString += "&");
          pString = pString + k + "=" + params[k];
        }
        return pString;
      },
      decimalToHex: function decimalToHex(d, padding) {
        var hex = Number(d).toString(16);
        padding = "undefined" === typeof padding || null === padding ? padding = 2 : padding;
        while (hex.length < padding) hex = "0" + hex;
        return hex;
      },
      fillZero2: function fillZero2(num, length) {
        var str = num + "";
        if (str.length >= 2) return str;
        length || (length = 0);
        for (var index = 0; index < length; index++) str = "0" + str;
        return str;
      },
      fillZero: function fillZero(num, length) {
        if (num.length > 2 || length < 2) return num;
        return (Array(length - 1).join("0") + num).slice(-length);
      },
      stringFormat: function stringFormat(template) {
        var params = [];
        for (var i = 1; i < arguments.length; i++) params.push(arguments[i]);
        return template.format.apply(template, params);
      },
      stringTrim: function stringTrim(str) {
        return str.replace(/^\s+|\s+$/g, "");
      },
      getLength: function getLength(object) {
        var count = 0;
        for (var p in object) count++;
        return count;
      },
      getMachineID: function getMachineID() {
        if (this.machineID) return this.machineID;
        var mac = new Date().toLocaleTimeString();
        return mac;
      },
      getWindowsMac: function getWindowsMac() {},
      struct_extends: function struct_extends(parents, newStruct) {
        var newStruct_ = [];
        var find = function find(key) {
          for (var i in newStruct_) {
            var v = newStruct_[i];
            if (v.k == key) return i;
          }
        };
        parents.push(newStruct);
        for (var z in parents) {
          var struct = parents[z];
          for (var y in struct) {
            var v = struct[y];
            var idx = find(v.k) || newStruct_.length;
            newStruct_[idx] = v;
          }
        }
        return newStruct_;
      },
      popArray: function popArray(type, netMsg, row, column, charLen) {
        var array = [];
        if (column) for (var r = 0; r < row; r++) {
          var arrayColumn = [];
          for (var c = 0; c < column; c++) "BOOL" == type ? arrayColumn[c] = netMsg.popBOOL() : "INT" == type ? arrayColumn[c] = netMsg.popINT() : "UINT" == type ? arrayColumn[c] = netMsg.popUINT() : "CHAR" == type ? arrayColumn[c] = netMsg.readString(charLen) : "BYTE" == type ? arrayColumn[c] = netMsg.popBYTE() : "LONGLONG" == type && (arrayColumn[c] = netMsg.popLONGLONG());
          array[r] = arrayColumn;
        } else for (var _r = 0; _r < row; _r++) if ("BOOL" == type) array[_r] = netMsg.popBOOL(); else if ("INT" == type) array[_r] = netMsg.popINT(); else if ("UINT" == type) array[_r] = netMsg.popUINT(); else if ("CHAR" == type) array[_r] = netMsg.readString(charLen); else if ("BYTE" == type) {
          var data = netMsg.popBYTE();
          array[_r] = data;
        } else "LONGLONG" == type && (array[_r] = netMsg.popLONGLONG());
        return array;
      },
      TableLen: function TableLen(list) {
        var length = 0;
        for (var i in list) length++;
        return length;
      },
      TableLen2: function TableLen2(table) {
        var count = 0;
        if (Array.isArray(table) || "object" == typeof table) {
          for (var k in table) {
            var v = table[k];
            count += 1;
          }
          return count;
        }
        return 0;
      },
      isNumInTable: function isNumInTable(n, t) {
        for (var i = 1; i <= this.TableLen(t); i++) if (n == t[i]) return i;
        return null;
      },
      objectGetKeyByValue: function objectGetKeyByValue(o, value) {
        for (var k in o) {
          var v = o[k];
          if (value == v) return k;
        }
      },
      getSplitData: function getSplitData(str, keyList, symbol1, symbol2) {
        keyList = keyList || [];
        symbol1 = symbol1 || "|";
        symbol2 = symbol2 || ",";
        var strArr = str.split(symbol1);
        var splitData = [];
        strArr.forEach(function(v1, i) {
          if ("" != v1) {
            var data = {};
            var infoArr = v1.split(symbol2);
            infoArr.forEach(function(v2, j) {
              var key = keyList[j] || j;
              data[key] = v2;
            });
            splitData.push(data);
          }
        });
        return splitData;
      },
      getCutStringByCount: function getCutStringByCount(nickName, length, symbol) {
        void 0 === length && (length = 7);
        var tempStr = nickName.replace(/[^\x00-\xff]/g, "AA");
        var result = nickName;
        tempStr.length > 2 * length && (result = "undefined" != typeof symbol ? nickName.substring(0, length) + symbol : nickName.substring(0, length) + "...");
        return result;
      },
      getArrEqual: function getArrEqual(arr1, arr2) {
        var newArr = [];
        for (var i = 0; i < arr2.length; i++) for (var j = 0; j < arr1.length; j++) arr1[j] === arr2[i] && newArr.push(arr1[j]);
        return newArr;
      },
      duplicates: function duplicates(arr) {
        var result = [];
        arr.forEach(function(item) {
          arr.indexOf(item) !== arr.lastIndexOf(item) && -1 == result.indexOf(item) && result.push(item);
        });
        return result;
      },
      diffArr: function diffArr(arr1, arr2) {
        var newArr = [];
        var arr3 = [];
        for (var i = 0; i < arr1.length; i++) -1 === arr2.indexOf(arr1[i]) && arr3.push(arr1[i]);
        var arr4 = [];
        for (var j = 0; j < arr2.length; j++) -1 === arr1.indexOf(arr2[j]) && arr4.push(arr2[j]);
        newArr = arr3.concat(arr4);
        var equalArr = this.getArrEqual(arr1, arr2);
        var duplicatesArr = this.duplicates(equalArr);
        var duplicatesValues = [];
        var minArrayValue = [];
        var maxArrayValue = [];
        if (arr1.length > arr2.length) {
          minArrayValue = arr2;
          maxArrayValue = arr1;
        } else {
          minArrayValue = arr1;
          maxArrayValue = arr2;
        }
        var aleadyDupicatedArr = [];
        for (var _i = 0; _i < minArrayValue.length; _i++) {
          var curValue = minArrayValue[_i];
          if (aleadyDupicatedArr.indexOf(curValue) >= 0) continue;
          if (duplicatesArr.indexOf(curValue) >= 0) {
            aleadyDupicatedArr.push(curValue);
            var equalCount1 = 0;
            var equalCount2 = 0;
            for (var k = 0; k < minArrayValue.length; k++) minArrayValue[k] == curValue && equalCount2++;
            for (var _k = 0; _k < maxArrayValue.length; _k++) maxArrayValue[_k] == curValue && equalCount1++;
            for (var insert = 0; insert < Math.abs(equalCount1 - equalCount2); insert++) duplicatesValues.push(curValue);
          }
        }
        return newArr.concat(duplicatesValues);
      },
      copyTextFun: function copyTextFun(str) {
        var input = str + "";
        var el = document.createElement("textarea");
        el.value = input;
        el.setAttribute("readonly", "");
        el.style.contain = "strict";
        el.style.position = "absolute";
        el.style.left = "-9999px";
        el.style.fontSize = "12pt";
        var selection = getSelection();
        var originalRange = false;
        selection.rangeCount > 0 && (originalRange = selection.getRangeAt(0));
        document.body.appendChild(el);
        el.select();
        el.selectionStart = 0;
        el.selectionEnd = input.length;
        var success = false;
        try {
          success = document.execCommand("copy");
        } catch (err) {}
        document.body.removeChild(el);
        if (originalRange) {
          selection.removeAllRanges();
          selection.addRange(originalRange);
        }
        return success;
      },
      isInArray: function isInArray(value, array) {
        var isIn = false;
        for (var i = 0; i < array.length; i++) if (array[i] == value) {
          isIn = true;
          break;
        }
        return isIn;
      },
      getJiuGongGeItemPosSize: function getJiuGongGeItemPosSize(avataListLength, idx) {
        var posSizeArr = [];
        switch (avataListLength) {
         case 1:
          posSizeArr = [ 0, -40, 80, 80 ];
          break;

         case 2:
          posSizeArr = [ 40 * idx - 20, -40, 40, 40 ];
          break;

         case 3:
          posSizeArr = idx < 2 ? [ 40 * idx - 20, -20, 40, 40 ] : [ 0, -60, 40, 40 ];
          break;

         case 4:
          posSizeArr = idx < 2 ? [ 40 * idx - 20, -20, 40, 40 ] : [ 40 * idx - 100, -60, 40, 40 ];
          break;

         case 5:
          posSizeArr = idx < 3 ? [ 25.2 * idx - 25.2, -25.2, 25.2, 25.2 ] : [ 25.2 * idx - 88.2, -51.4, 25.2, 25.2 ];
          break;

         case 6:
          posSizeArr = idx < 3 ? [ 25.2 * idx - 25.2, -25.2, 25.2, 25.2 ] : [ 25.2 * idx - 100.8, -51.4, 25.2, 25.2 ];
          break;

         case 7:
          posSizeArr = idx < 3 ? [ 25.2 * idx - 25.2, -12.6, 25.2, 25.2 ] : idx > 2 && idx < 6 ? [ 25.2 * idx - 100.8, -38.8, 25.2, 25.2 ] : [ 0, -65, 25.2, 25.2 ];
          break;

         case 8:
          posSizeArr = idx < 3 ? [ 25.2 * idx - 25.2, -12.6, 25.2, 25.2 ] : idx > 2 && idx < 6 ? [ 25.2 * idx - 100.8, -38.8, 25.2, 25.2 ] : [ 25.2 * idx - 163.8, -65, 25.2, 25.2 ];
          break;

         case 9:
          posSizeArr = idx < 3 ? [ 25.2 * idx - 25.2, -12.6, 25.2, 25.2 ] : idx > 2 && idx < 6 ? [ 25.2 * idx - 100.8, -38.8, 25.2, 25.2 ] : [ 25.2 * idx - 176.4, -65, 25.2, 25.2 ];
        }
        return posSizeArr;
      },
      formatNumberEx: function formatNumberEx(n, m) {
        var fuhao = "";
        if (n < 0) {
          fuhao = "-";
          n = -n;
        }
        var yi = 1e8;
        var wan = 1e4;
        "undefined" == typeof m && (m = 2);
        if (n >= wan * yi) return "" + fuhao + Math.floor(n / (wan * yi)) + "\u4e07\u4ebf";
        if (n >= yi) {
          var num = (n / yi).toString();
          var index = num.indexOf(".");
          -1 !== index && (num = num.substring(0, m + index + 1));
          return "" + fuhao + num + "\u4ebf";
        }
        if (n >= wan) {
          var _num = (n / wan).toString();
          var _index = _num.indexOf(".");
          -1 !== _index && (_num = _num.substring(0, m + _index + 1));
          return "" + fuhao + _num + "\u4e07";
        }
        return "" + fuhao + n;
      },
      toThousands: function toThousands(num) {
        var num = (num || 0).toString(), result = "";
        while (num.length > 3) {
          result = "," + num.slice(-3) + result;
          num = num.slice(0, num.length - 3);
        }
        num && (result = num + result);
        return result;
      },
      toAtlasValue: function toAtlasValue(number) {
        number /= G_MULTI_NUM;
        var curNum = number.toFixed(2);
        curNum = (curNum + "").substring(curNum.indexOf("."));
        return this.toThousands(parseInt(number)) + curNum;
      },
      getRandomStr: function getRandomStr(digit) {
        var t = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
        var str = "";
        var gsub = String(new Date().valueOf());
        var i = gsub.length;
        i -= 1;
        for (var x = i; x >= 0; x--) gsub.charAt(x);
        var seed = gsub.slice(-7);
        seed = Number(seed.split("").reverse().join(""));
        this.rand(seed);
        for (var _i2 = 0; _i2 < digit; _i2++) str += t[parseInt(Math.random() * t.length)];
        return str;
      },
      rnd: function rnd(seed) {
        var seed1 = (9301 * seed + 49297) % 233280;
        return seed1 / 233280;
      },
      rand: function rand(number) {
        var today = new Date();
        var seed = today.getTime();
        return Math.ceil(this.rnd(seed) * number);
      },
      recoverNetmsg: function recoverNetmsg(netMsg, struct, idx) {
        var _this = this;
        idx = idx || 0;
        var info = {};
        var popSingle = function popSingle(v, idx) {
          var data;
          data = "LONGLONG" == v.t ? netMsg.popLONGLONG() : "BYTE" == v.t ? netMsg.popBYTE() : "INT" == v.t ? netMsg.popINT() : "FLOAT" == v.t ? netMsg.popFLOAT() : "BOOL" == v.t ? netMsg.popBOOL() : "CHAR" == v.t ? netMsg.readString(v.charLen) : _this.recoverNetmsg(netMsg, v.t, idx);
          return data;
        };
        var popArray = function popArray(v, count, idx) {
          var arr = {};
          for (var i = 0 + idx; i <= count - (1 - idx); i++) arr[i] = popSingle(v);
          return arr;
        };
        for (var x in struct) {
          var v = struct[x];
          var row = v.row || 0;
          var col = v.col || 0;
          var thr = v.thr || 0;
          if (v.row && "string" == typeof v.row) {
            row = Number(info[v.row] || -1);
            row = 0 != row && row || -1;
          }
          if (row > 0) if (col > 0) {
            info[v.k] = {};
            for (var i = 0 + idx; i <= row - (1 - idx); i++) if (thr > 0) {
              info[v.k][i] = {};
              for (var j = 0 + idx; j <= col - (1 - idx); j++) info[v.k][i][j] = popArray(v, thr, v.ti || idx);
            } else info[v.k][i] = popArray(v, col, v.ci || idx);
          } else info[v.k] = popArray(v, row, v.ri || idx); else 0 == row && (info[v.k] = popSingle(v, idx));
        }
        return info;
      },
      nodeCallback: function nodeCallback(callback, node) {
        if (!node) return callback;
        return function() {
          node || callback && callback();
        };
      },
      sizeofStruct: function sizeofStruct(struct, idx) {
        var _this2 = this;
        idx = idx || 0;
        var size = 0;
        var singleSize = function singleSize(v) {
          var size;
          "BOOL" == v.t ? size = 1 : "SHORT" == v.t ? size = 2 : "USHORT" == v.t ? size = 2 : "INT" == v.t ? size = 4 : "UINT" == v.t ? size = 4 : "CHAR" == v.t ? size = 1 * (v.charLen || 1) : "BYTE" == v.t ? size = 1 : "LONG" == v.t ? size = 4 : "LONGLONG" == v.t ? size = 8 : "FLOAT" == v.t ? size = 4 : "DOUBLE" == v.t ? size = 8 : _this2.sizeofStruct(v.t);
          return size;
        };
        var arraySize = function arraySize(v, count) {
          var size = 0;
          for (var i = 0 + idx; i <= count - (1 - idx); i++) size += singleSize(v);
          return size;
        };
        for (var j in struct) {
          var v = struct[j];
          var row = v.row || 0;
          var col = v.col || 0;
          if (row > 0) if (col > 0) for (var i = 0 + idx; i <= row - (1 - idx); i++) size += arraySize(v, col); else size += arraySize(v, row); else size += singleSize(v);
        }
        return size;
      },
      packNetmsg: function packNetmsg(netMsg, struct, data, idx) {
        var _this3 = this;
        idx = idx || 0;
        var pushSingle = function pushSingle(v) {
          "BOOL" == v.t ? netMsg.pushBOOL(data[v.k]) : "INT" == v.t ? netMsg.pushINT(data[v.k]) : "CHAR" == v.t ? netMsg.writeString(data[v.k], v.charLen) : "BYTE" == v.t ? netMsg.pushBYTE(data[v.k]) : "LONGLONG" == v.t ? netMsg.pushLONGLONG(data[v.k]) : "FLOAT" == v.t ? netMsg.writeInt64(data[v.k]) : _this3.packNetmsg(netMsg, v.t, data[v.k], idx);
        };
        var pushArray = function pushArray(v, count) {
          for (var i = 0 + idx; i <= count - (1 - idx); i++) pushSingle(v);
        };
        for (var j in struct) {
          var v = struct[j];
          var row = v.row || 0;
          var col = v.col || 0;
          if (row > 0) if (col > 0) for (var i = 0 + idx; i <= row - (1 - idx); i++) pushArray(v, col); else pushArray(v, row); else pushSingle(v);
        }
      },
      JSONObjectsToArr: function JSONObjectsToArr(jsonObjects) {
        var tempArr = [];
        for (var i in jsonObjects) tempArr.push(jsonObjects[i]);
        return tempArr;
      },
      tableContainValue: function tableContainValue(t, value) {
        if (Array.isArray(value) || "object" == typeof value) for (var k in t) {
          var v = t[k];
          if (Array.isArray(v) || "object" == typeof t) {
            var isContain = true;
            for (var k1 in v) {
              var v1 = v[k1];
              v1 != value[k1] && (isContain = false);
            }
            if (isContain) return isContain;
          }
        } else for (var _k2 in t) {
          var _v = t[_k2];
          if (value == _v) return true;
        }
        return false;
      },
      tableGetKeyByValue: function tableGetKeyByValue(t, value) {
        for (var k in t) {
          var v = t[k];
          if (value == v) return k;
        }
      },
      MathMin: function MathMin(mathArr) {
        var min = mathArr[0];
        var len = mathArr.length;
        for (var i = 1; i < len; i++) min > mathArr[i] && (min = mathArr[i]);
        return min;
      },
      getDistance: function getDistance(_lat1, _lon1, _lat2, _lon2) {
        _lat1 = Number(_lat1);
        _lon1 = Number(_lon1);
        _lat2 = Number(_lat2);
        _lon2 = Number(_lon2);
        var lat1 = Math.PI / 180 * _lat1;
        var lat2 = Math.PI / 180 * _lat2;
        var lon1 = Math.PI / 180 * _lon1;
        var lon2 = Math.PI / 180 * _lon2;
        var R = 6370.856;
        var d = Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1)) * R;
        console.log("_lat1=" + _lat1 + ",_lon1=" + _lon1 + ",_lat2=" + _lat2 + ",_lon2=" + _lon2 + ",d=" + d);
        return this.getPreciseDecimal(d, 2);
      },
      getPreciseDecimal: function getPreciseDecimal(nNum, n) {
        if ("number" !== typeof nNum) return nNum;
        n = n || 0;
        n = Math.floor(n);
        var nRet = Number(nNum.toFixed(n));
        return nRet;
      },
      checkLongitudeOrLatitude: function checkLongitudeOrLatitude(value) {
        if (!value) return false;
        if ("" == value) return false;
        if (value == G_longitude) return false;
        if (value == G_latitude) return false;
        return true;
      },
      getQueryString: function getQueryString(sKey) {
        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
          var pair = vars[i].split("=");
          if (pair[0] == sKey) return pair[1];
        }
        return false;
      }
    };
    module.exports = Tools;
    cc._RF.pop();
  }, {} ],
  TuoGuanLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "51b2alZFq1EVrgk2EtgJmlO", "TuoGuanLayer");
    "use strict";
    var _BUTTON_TAG_BIGEN = 100;
    var _BUTTON_KEY = [ "Button_Cancel" ];
    var _BUTTON_TAG = {};
    for (var i in _BUTTON_KEY) {
      var v = _BUTTON_KEY[i];
      _BUTTON_TAG[v] = i + _BUTTON_TAG_BIGEN;
    }
    cc.Class({
      extends: require("BaseLayer"),
      init: function init(cancelCallback) {
        this.cancelCallback = cancelCallback;
        this.studio = {
          Layer: null,
          Image_Bg_Main: null,
          Button_Cancel: null
        };
        this.initUI();
      },
      initUI: function initUI() {
        this.initStudioUI();
        this.initUIVisible();
        this.initUIData();
        this.initUIEventListener();
      },
      initStudioUI: function initStudioUI() {
        this.studio.Image_Bg_Main = this.node.getChildByName("Image_Bg_Main");
        this.studio.Button_Cancel = this.studio.Image_Bg_Main.getChildByName("Button_Cancel");
      },
      initUIVisible: function initUIVisible() {},
      initUIData: function initUIData() {},
      initUIEventListener: function initUIEventListener() {
        this.studio.Button_Cancel.on(cc.Node.EventType.TOUCH_END, this.doButtonCancelClick.bind(this));
      },
      doButtonCancelClick: function doButtonCancelClick() {
        this.cancelCallback ? this.cancelCallback() : this.removeLayer();
      },
      removeLayer: function removeLayer() {
        this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  UiShowWords: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "60f1ayo4k9C0pW87ZiFQfrI", "UiShowWords");
    "use strict";
    var HORIZONTAL_DIRECTION = {
      LEFT: 1,
      RIGHT: -1
    };
    var VERTICAL_DIRECTION = cc.Enum({
      UP: 1,
      DOWN: -1
    });
    var DIRECTION = cc.Enum({
      RIGHT_TOP: 1,
      LEFT_TOP: 2,
      LEFT_BOTTOM: 3,
      RIGHT_BOTTOM: 4
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        imgChatBackRight: cc.SpriteFrame,
        imgChatBackLeft: cc.SpriteFrame,
        font: cc.Font
      },
      start: function start() {
        var chatWordsNode = new cc.Node();
        this.chatWordsNode = chatWordsNode;
        var emotionNode = new cc.Node();
        this.emotionNode = emotionNode;
        emotionNode.addComponent(cc.Sprite);
        chatWordsNode.scale = .9;
        var chatWordsNodeSprite = chatWordsNode.addComponent(cc.Sprite);
        chatWordsNodeSprite.setName = "chatWordsNodeSprite";
        this.emotionNode.position = this.chatWordsNode.position;
        this.node.addChild(this.chatWordsNode);
        this.chatWordsNode.active = false;
        this.node.addChild(this.emotionNode);
        this.emotionNode.active = false;
      },
      setWordsPos: function setWordsPos() {
        if (!this.chatWordsNode) return;
        this.chatWordsNode.scale = .9;
        var chatWordsNode = this.chatWordsNode;
        var chatWordsNodeSprite = this.chatWordsNode.addComponent(cc.Sprite);
        chatWordsNodeSprite.setName = "chatWordsNodeSprite";
        var screenSize = cc.view.getVisibleSize();
        var screenPos = this.node.parent.convertToWorldSpaceAR(this.node.getPosition());
        var Image_LayerBg = this.node.getChildByName("Image_LayerBg");
        var xOffset = 30;
        var yOffset = 10;
        var direction = 0;
        screenPos.x <= screenSize.width / 2 && screenPos.y <= screenSize.height / 2 ? direction = DIRECTION.RIGHT_TOP : screenPos.x > screenSize.width / 2 && screenPos.y <= screenSize.height / 2 ? direction = DIRECTION.LEFT_TOP : screenPos.x > screenSize.width / 2 && screenPos.y > screenSize.height / 2 ? direction = DIRECTION.LEFT_BOTTOM : screenPos.x <= screenSize.width / 2 && screenPos.y > screenSize.height / 2 && (direction = DIRECTION.RIGHT_BOTTOM);
        this.direction = direction;
        cc.log("this.direction = ", this.direction);
        if (direction == DIRECTION.LEFT_TOP || direction == DIRECTION.LEFT_BOTTOM) {
          chatWordsNodeSprite.spriteFrame = this.imgChatBackRight;
          this.chatWordsNode.x = -(Image_LayerBg.width / 2 - xOffset);
          this.chatWordsNode.anchorX = 1;
          this.chatWordsNode.anchorY = 0;
          this.chatHorizontalDir = HORIZONTAL_DIRECTION.LEFT;
        } else {
          chatWordsNodeSprite.spriteFrame = this.imgChatBackLeft;
          this.chatWordsNode.x = Image_LayerBg.width / 2 - xOffset;
          this.chatWordsNode.anchorX = 0;
          this.chatWordsNode.anchorY = 0;
          this.chatHorizontalDir = HORIZONTAL_DIRECTION.RIGHT;
        }
        var wordNodeOffsetY = Image_LayerBg.height / 2 - yOffset;
        if (direction == DIRECTION.LEFT_BOTTOM || direction == DIRECTION.RIGHT_BOTTOM) {
          chatWordsNode.y = -wordNodeOffsetY;
          this.chatVerticalDir = VERTICAL_DIRECTION.DOWN;
          chatWordsNode.is3DNode = true;
          chatWordsNode.eulerAngles = new cc.Quat(0, 180, 180, 0);
        } else {
          chatWordsNode.y = wordNodeOffsetY;
          this.chatVerticalDir = VERTICAL_DIRECTION.UP;
        }
      },
      showWords: function showWords(words, bBoy, gameTable) {
        var _this = this;
        console.log("UiShowWords showWords", words);
        this.clearWords();
        this.setWordsPos();
        if ("im" == words.substring(0, 2)) {
          this.emotionNode.active = true;
          cc.loader.loadRes("Emoticons/" + words, cc.SpriteFrame, function(err, spriteFrame) {
            if (err) {
              cc.error(err.message || err);
              return;
            }
            this.emotionNode && cc.isValid(this.emotionNode) && (this.emotionNode.getComponent(cc.Sprite).spriteFrame = spriteFrame);
          }.bind(this));
        } else {
          if (!this.chatWordsNode) return;
          this.chatWordsNode.active = true;
          var node = new cc.Node();
          node.anchorX = .5;
          node.anchorY = .5;
          if (this.chatVerticalDir == VERTICAL_DIRECTION.DOWN) {
            node.is3DNode = true;
            node.eulerAngles = new cc.Quat(0, 180, 180, 0);
            node.y = .8 * this.chatWordsNode.height;
          } else node.y = .6 * this.chatWordsNode.height;
          var label = node.addComponent(cc.Label);
          label.string = words;
          var soundName = "";
          for (var i = 0; i < G_CHAT_COMMON_TEXT_TAB.length; i++) words == G_CHAT_COMMON_TEXT_TAB[i] && (bBoy ? MYAudioEngine.playEffect(tools.stringFormat("sound/common/{0}/boy/{1}", 1, i)) : MYAudioEngine.playEffect(tools.stringFormat("sound/common/{0}/girl/{1}", 1, i)));
          setTimeout(function() {
            _this.chatWordsNode.width = node.width + 60;
            _this.chatWordsNode.width <= 200 && (_this.chatWordsNode.width = 300);
            _this.chatHorizontalDir == HORIZONTAL_DIRECTION.RIGHT ? node.x = _this.chatWordsNode.width / 2 : node.x = -_this.chatWordsNode.width / 2;
          }, 16);
          label.fontSize = 28;
          node.color = new cc.Color(32, 27, 23);
          this.chatWordsNode.addChild(node);
        }
      },
      clearWords: function clearWords() {
        if (this.chatWordsNode) {
          this.chatWordsNode.removeAllChildren();
          this.chatWordsNode.active = false;
          this.emotionNode.active = false;
        }
      },
      delayClearWords: function delayClearWords(time) {
        this.clearTime = time;
      },
      update: function update(dt) {
        var time = this.clearTime;
        if (time && 8888 != time) {
          if (time <= 0) {
            this.clearWords();
            this.clearTime = 8888;
          }
          this.clearTime -= dt;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  UpdateApkNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1079GMmoxBXJgDNBGXo4Hf", "UpdateApkNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        progressNode: cc.Node,
        progressBar: cc.ProgressBar,
        loadingTip: cc.Label,
        updateDesLab: cc.Label,
        versionLab: cc.Label,
        text_percent: cc.Label,
        btnToInstall: cc.Node,
        btnToRestartDownload: cc.Node,
        _curChangeProgressTime: -1
      },
      onLoad: function onLoad() {
        this.progressBar.progress = 0;
        this.progressBar.totalLength = this.progressBar.node.width;
      },
      showDownloadTip: function showDownloadTip(textStr) {
        if ("\u5b89\u88c5\u5931\u8d25" == textStr) {
          this.loadingTip.string = "\u5b89\u88c5\u5931\u8d25,\u8bf7\u70b9\u51fb\u91cd\u8bd5";
          this.tipRestartDownload();
          return;
        }
        if ("\u4e0b\u8f7d\u5931\u8d25" == textStr) {
          cc.sys.os === cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "jsToNativeUpdateApkCancle", "()V");
          this.loadingTip.string = "\u4e0b\u8f7d\u5931\u8d25,\u8bf7\u70b9\u51fb\u91cd\u8bd5";
          this.tipRestartDownload();
          return;
        }
        "\u6b63\u5728\u4e0b\u8f7d\u4e2d...\u8bf7\u7a0d\u5019" == textStr && (this._curChangeProgressTime = Math.floor(Date.now() / 1e3));
        if ("\u4e0b\u8f7d\u6210\u529f" == textStr) {
          this.loadingTip.string = "\u4e0b\u8f7d\u6210\u529f,\u70b9\u51fb\u786e\u5b9a\u5373\u53ef\u5b89\u88c5";
          this.btnToInstall.active = true;
          this.text_percent.string = "100%";
          this.progressBar.progress = 1;
        } else this.loadingTip.string = textStr;
      },
      setUpdateDesc: function setUpdateDesc(descStr, verText) {
        this.updateDesLab.string = descStr;
        this.versionLab.string = verText;
      },
      showDownloadPercent: function showDownloadPercent(totalBytesReceived, totalBytesExpected) {
        var percentage = totalBytesReceived / totalBytesExpected;
        this.progressBar.progress = percentage;
        this.text_percent.string = (100 * percentage).toFixed(2) + "%";
        this._curChangeProgressTime = Math.floor(Date.now() / 1e3);
      },
      clickToInstallLocalApk: function clickToInstallLocalApk() {
        cc.sys.os === cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "clickToInstallWSLocalApk", "()V");
      },
      tipRestartDownload: function tipRestartDownload() {
        this.btnToRestartDownload.active = true;
        this.progressBar.progress = 0;
        this.text_percent.string = "0%";
      },
      update: function update(dt) {
        if (!this.btnToRestartDownload.active && !this.btnToInstall.active && -1 != this._curChangeProgressTime && Math.floor(Date.now() / 1e3) - this._curChangeProgressTime >= 6) {
          cc.sys.os === cc.sys.OS_ANDROID && jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "jsToNativeUpdateApkCancle", "()V");
          this.loadingTip.string = "\u4e0b\u8f7d\u5931\u8d25,\u7f51\u7edc\u6ce2\u52a8,\u70b9\u51fb\u91cd\u8bd5\u4e0b\u8f7d";
          this.tipRestartDownload();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  UserInfoManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6b3bsDA0JDLJbdlJUA4bQA", "UserInfoManager");
    "use strict";
    var API = "user";
    var UserInfoManager = cc.Class({
      ctor: function ctor() {
        this._avataLocalAdrss = [];
        this._userAvataList = [];
        this.userInfoList = new Map();
        this.myInfo = null;
      },
      push: function push(userID, userInfo) {
        this.userInfoList.set(userID, userInfo);
      },
      setMyInfo: function setMyInfo(myInfo) {
        this.myInfo = myInfo;
      },
      setRealNameInfo: function setRealNameInfo(realName, idCard) {
        this.myInfo.realName = realName;
        this.myInfo.idCard = idCard;
      },
      getMyInfo: function getMyInfo() {
        this.myInfo || cc.log("\u6211\u7684\u4fe1\u606f\u4e3a\u7a7a!");
        return this.myInfo;
      },
      notifyWXUserLogin: function notifyWXUserLogin(userID, unionID) {
        var actionName = "WXUserLogin";
        var fCallback = function fCallback() {
          cc.log("WX\u73a9\u5bb6\u767b\u5f55\u4fe1\u606f\u53d1\u9001\u5230\u540e\u53f0\u5931\u8d25 userID= {0}", userID);
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? cc.log("WX\u73a9\u5bb6\u767b\u5f55\u4fe1\u606f\u53d1\u9001\u5230\u540e\u53f0\u6210\u529f") : createTips(jsonData.msg);
        };
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.params = {
          api: API,
          action: actionName,
          userID: userID,
          unionID: unionID
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      setMyZhanJi: function setMyZhanJi(info) {
        this.myInfo.totalGameDeskCount = info.totalGameDeskCount;
        this.myInfo.totalGameDeskWinCount = info.totalGameDeskWinCount;
        this.myInfo.point = info.point;
        this.myInfo.winrate = info.winrate;
      },
      requestUserInfoByUserID: function requestUserInfoByUserID(userID, callback) {
        this.requestUserInfo(userID, callback);
      },
      requestUserInfo: function requestUserInfo(userID, callback) {
        var _this = this;
        if (!userID || userID <= 0) {
          callback && callback({});
          return;
        }
        var userInfo = this.getUserInfoByUserID(userID);
        if (userInfo) {
          callback && callback(userInfo);
          return;
        }
        var actionName = "getUserInfo";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            if (callback) {
              jsonData.data.userID = userID;
              _this.push(jsonData.data.userID, jsonData.data);
              callback(jsonData.data);
            }
          } else createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: userID
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestChangeUserName: function requestChangeUserName(username, callback) {
        var actionName = "editUserName";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getMyInfo().userID,
          name: username
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestChangeUserInfor: function requestChangeUserInfor(sex, newNick, Iphone, Code, newaddress, callback) {
        var actionName = "bindPhoneNew";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: "Phone",
          action: actionName,
          userID: this.getMyInfo().userID,
          phone: Iphone,
          code: Code,
          goodsAddress: newaddress,
          sex: sex,
          name: newNick
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestChangeRealName: function requestChangeRealName(newRealName, newIDCard, callback) {
        var actionName = "toCertification";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: "user",
          action: actionName,
          userID: this.getMyInfo().userID,
          idcard: newIDCard,
          name: newRealName
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        MyHttpRequest.doRequest(args);
      },
      requestChangeIphone: function requestChangeIphone(Iphone, callback) {
        var actionName = "valiPhone";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: "mall",
          action: actionName,
          userID: this.getMyInfo().userID,
          goodsPhone: Iphone
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestChangeAddress: function requestChangeAddress(address, callback) {
        var actionName = "valiAddress";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: "mall",
          action: actionName,
          userID: this.getMyInfo().userID,
          goodsAddress: address
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestSaveSignature: function requestSaveSignature(content, callback) {
        LobbySocket.requestSaveSignature(content, callback);
      },
      requestChangeUserSex: function requestChangeUserSex(sex, callback) {
        var actionName = "editUserSex";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.url = "http://" + G_PHP_IP + "/api/v1/user/editUserSex";
        args.params = {
          userID: this.getMyInfo().userID,
          num: sex
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestRealName: function requestRealName(RealName, IDcard, callback) {
        var fCallback = function fCallback() {
          callback(jsonData.msg);
        };
        var sCallback = function sCallback(jsonData) {
          callback && callback(jsonData);
        };
        var args = {};
        args.params = {
          userID: this.getMyInfo().userID,
          idcard: IDcard,
          name: RealName
        };
        args.url = "http://" + G_PHP_IP + "/api/v1/user/toCertification";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.requestDesc = "\u63d0\u4ea4\u9a8c\u8bc1\u4e2d\uff0c\u8bf7\u7a0d\u540e...";
        MyHttpRequest.doRequest(args);
      },
      setAvataList: function setAvataList(avataList) {
        this._userAvataList = avataList;
      },
      getAvataList: function getAvataList() {
        return this._userAvataList;
      },
      setAvataLocalAdrss: function setAvataLocalAdrss(avataTag, avataUrl) {
        this._avataLocalAdrss[avataTag] = avataUrl;
      },
      getAvataLocalAdrss: function getAvataLocalAdrss() {
        return this._avataLocalAdrss;
      },
      getUserAvataList: function getUserAvataList(callback) {
        var _this2 = this;
        var actionName = "getHeadUrlList";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          if (0 == jsonData.status) {
            _this2.setAvataList(jsonData.data);
            if (jsonData.data) {
              _this2.AvataList = [];
              for (var k in jsonData.data) {
                var v = jsonData.data[k];
                _this2.setAvataLocalAdrss(k, v.url);
              }
            }
          } else callback && callback();
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        args.responseType = E_REQUEST_TYPE.GET;
        cc.log(args);
        MyHttpRequest.doRequest(args);
      },
      fixUserinfoByUserID: function fixUserinfoByUserID(userID, name, content) {
        if (this.userInfoList && this.userInfoList[userID]) {
          this.userInfoList[userID][name] = content;
          "money" != name && "bankMoney" != name || (this.userInfoList[userID][name] = content / G_MULTI_NUM);
        }
      },
      getUserInfoByUserID: function getUserInfoByUserID(userID) {
        return this.userInfoList[userID];
      },
      setMyInfoAttr: function setMyInfoAttr(name, attr) {
        if (this.myInfo) {
          this.myInfo[name] = attr;
          "money" != name && "bankMoney" != name || (this.myInfo[name] = attr / G_MULTI_NUM);
        }
      },
      requestChangeUserAvata: function requestChangeUserAvata(avataUrl, callback) {
        var actionName = "editUserHeadURL";
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getMyInfo().userID,
          headURL: avataUrl
        };
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      }
    });
    module.exports = UserInfoManager;
    cc._RF.pop();
  }, {} ],
  VideoManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3e2deyj8JGhLq0tjniWssB", "VideoManager");
    "use strict";
    var VideoManager = cc.Class({
      statics: {
        instance: null
      },
      ctor: function ctor() {
        this.dataList = {};
        this.bLoadVedio = false;
      },
      requestVideoList: function requestVideoList(callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          typeSort: 0
        };
        args.url = "https://" + G_PHP_IP + "/txysdk/index/getTxyVedio";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestVideoState: function requestVideoState(type, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID,
          type: type
        };
        args.url = "https://" + G_PHP_IP + "/api/v1/User/isVideo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestUserVideoList: function requestUserVideoList(userID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: userID
        };
        args.url = "https://" + G_PHP_IP + "/txysdk/index/getUserVideo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestUserVideoVip: function requestUserVideoVip(callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID
        };
        args.url = "https://" + G_PHP_IP + "/api/v1/User/isUploadVideoVip";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestUserVideoOpenVip: function requestUserVideoOpenVip(callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: UserInfoManager.getMyInfo().userID
        };
        args.url = "https://" + G_PHP_IP + "/api/v1/User/uploadVideoVip";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestVideoStarList: function requestVideoStarList(fileID, upLoadID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          staffUserID: UserInfoManager.getMyInfo().userID,
          upLoadID: upLoadID,
          FileId: fileID
        };
        args.url = "https://" + G_PHP_IP + "/txysdk/index/videoLikeNum";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      refreshVideo: function refreshVideo(httpCallBack) {
        var _this = this;
        if (this.bLoadVedio) return;
        window.vedioFileId && 0 != window.vedioFileId && this.requestVedioByFileId(window.vedioFileId, function(data) {
          window["tempVedioList"] = data;
          httpCallBack && httpCallBack(data);
        });
        this.requestVideoList(function(data) {
          _this.bLoadVedio = true;
          _this.dataList = data;
          httpCallBack && httpCallBack(data);
        });
      },
      getVideoList: function getVideoList() {
        return this.dataList;
      },
      requestUserVideoTotal: function requestUserVideoTotal(userID, callback) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: userID
        };
        args.url = "https://" + G_PHP_IP + "/txysdk/index/getUserVideoTotal";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      },
      requestVedioByFileId: function requestVedioByFileId(vedio_fileId, callBack) {
        var fCallback = function fCallback() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function sCallback(jsonData) {
          0 == jsonData.code && callBack && callBack(jsonData.data);
        };
        var args = {};
        args.params = {
          fileID: vedio_fileId
        };
        args.url = "https://" + G_PHP_IP + "/txysdk/index/getShareVideo";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        MyHttpRequest.doRequest(args);
      }
    });
    VideoManager.instance = new VideoManager();
    module.exports = VideoManager;
    cc._RF.pop();
  }, {} ],
  VoiceLayerChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26b8btIjLBNE6dMVDTHBCov", "VoiceLayerChat");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Text_Tips: cc.Label
      },
      onLoad: function onLoad() {
        cc.log("*********************\u5f55\u97f3*********************");
        this.private_recordCallback = null;
        this.private_recordTime = 10;
        this.startvoice();
        this.startScheduleRecordTime();
      },
      startScheduleRecordTime: function startScheduleRecordTime() {
        this.stopScheduleRecordTime();
        var recordCallback = function recordCallback() {
          this.private_recordTime = this.private_recordTime - 1;
          if (this.private_recordTime <= 0) {
            this.stopvoice();
            this.stopScheduleRecordTime();
            this.doButton_Close();
          }
          this.Text_Tips.getComponent(cc.Label).string = "\u5f55\u97f3\u4e2d " + this.private_recordTime;
        };
        this.schedule(recordCallback, 1);
        this.private_recordCallback = recordCallback;
      },
      stopScheduleRecordTime: function stopScheduleRecordTime() {
        if (this.private_recordCallback) {
          this.unschedule(this.private_recordCallback);
          this.private_recordCallback = null;
        }
      },
      startvoice: function startvoice() {
        wx.ready(function() {
          wx.startRecord({
            success: function success() {},
            cancel: function cancel() {
              alert("\u7528\u6237\u62d2\u7edd\u5f55\u97f3\u6388\u6743");
            }
          });
        });
      },
      stopvoice: function stopvoice() {
        cc.log("stopvoice 1");
        var callfunc = function callfunc(localId) {
          cc.log("stopvoice 11");
          this.uploadVoice(localId);
        }.bind(this);
        wx.stopRecord({
          success: function success(res) {
            cc.log("stopvoice 2");
            var localId = res.localId;
            if (callfunc) {
              cc.log("stopvoice 22");
              callfunc(localId);
            }
          }
        });
      },
      doButton_Send: function doButton_Send() {
        this.stopvoice();
        this.stopScheduleRecordTime();
        this.doButton_Close();
      },
      uploadVoice: function uploadVoice(localId) {
        cc.log("uploadVoice1");
        G_SHOW_GAME_VOICE = true;
        wx.uploadVoice({
          localId: localId,
          isShowProgressTips: 0,
          success: function success(res) {
            var serverId = res.serverId;
            cc.log("uploadVoice2 serverId=", serverId);
            LobbySocket.sendChat(0, serverId, 2, 0);
          }
        });
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        G_SHOW_GAME_VOICE = false;
        this.stopScheduleRecordTime();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  VoiceLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fdef0rd4FJHra09f2KQksJE", "VoiceLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Text_Tips: cc.Label
      },
      onLoad: function onLoad() {
        cc.log("*********************\u5f55\u97f3*********************");
        this.private_recordCallback = null;
        this.private_recordTime = 10;
        this.startvoice();
        this.startScheduleRecordTime();
      },
      startScheduleRecordTime: function startScheduleRecordTime() {
        this.stopScheduleRecordTime();
        var recordCallback = function recordCallback() {
          this.private_recordTime = this.private_recordTime - 1;
          if (this.private_recordTime <= 0) {
            this.stopvoice();
            this.stopScheduleRecordTime();
            this.doButton_Close();
          }
          this.Text_Tips.getComponent(cc.Label).string = "\u5f55\u97f3\u4e2d " + this.private_recordTime;
        };
        this.schedule(recordCallback, 1);
        this.private_recordCallback = recordCallback;
      },
      stopScheduleRecordTime: function stopScheduleRecordTime() {
        if (this.private_recordCallback) {
          this.unschedule(this.private_recordCallback);
          this.private_recordCallback = null;
        }
      },
      startvoice: function startvoice() {
        wx.ready(function() {
          wx.startRecord({
            success: function success() {},
            cancel: function cancel() {
              alert("\u7528\u6237\u62d2\u7edd\u5f55\u97f3\u6388\u6743");
            }
          });
        });
      },
      stopvoice: function stopvoice() {
        cc.log("stopvoice 1");
        var callfunc = function callfunc(localId) {
          cc.log("stopvoice 11");
          this.uploadVoice(localId);
        }.bind(this);
        wx.stopRecord({
          success: function success(res) {
            cc.log("stopvoice 2");
            var localId = res.localId;
            if (callfunc) {
              cc.log("stopvoice 22");
              callfunc(localId);
            }
          }
        });
      },
      doButton_Send: function doButton_Send() {
        this.stopvoice();
        this.stopScheduleRecordTime();
        this.doButton_Close();
      },
      uploadVoice: function uploadVoice(localId) {
        cc.log("uploadVoice1");
        G_SHOW_GAME_VOICE = true;
        wx.uploadVoice({
          localId: localId,
          isShowProgressTips: 0,
          success: function success(res) {
            var serverId = res.serverId;
            cc.log("uploadVoice2 serverId=", serverId);
            GameSocket.requestVoive(serverId);
          }
        });
      },
      doButton_Close: function doButton_Close() {
        var _this = this;
        G_SHOW_GAME_VOICE = false;
        this.stopScheduleRecordTime();
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  WaitTipLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52b4692wp1GAYut9vo45yX0", "WaitTipLayer");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        runTime: false,
        time: {
          default: 15
        },
        timeLabel: cc.Label
      },
      start: function start() {},
      updateLabel: function updateLabel() {
        var curValue = Math.trunc(this.time);
        this.timeLabel.string = curValue + "";
      },
      startTime: function startTime(Ltime, stopCallBack) {
        this.time = Ltime || this.time;
        this.node.active = true;
        this.runTime = true;
        this.stopCallBack = stopCallBack;
      },
      stop: function stop() {
        this.stopCallBack && this.stopCallBack();
        this.runTime = false;
        this.node.active = false;
      },
      onEnable: function onEnable() {},
      onDisable: function onDisable() {
        this.runTime = false;
      },
      onDestroy: function onDestroy() {
        this.runTime = false;
      },
      update: function update(dt) {
        if (this.runTime) {
          this.time = this.time - dt;
          this.updateLabel();
          this.time <= 0 && this.stop();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  WarRecordSetLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03422LeLlJN2qFMGnjiZ+6i", "WarRecordSetLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        Button_Retreat: cc.Node,
        Button_Pause: cc.Node,
        Button_Resume: cc.Node,
        Button_Speed: cc.Node,
        Button_Back: cc.Node
      },
      onLoad: function onLoad() {},
      init: function init() {
        this._TimeScale = 1;
        this.Button_Resume.active = false;
      },
      doButton_Callback: function doButton_Callback(event, param) {
        switch (param) {
         case "Button_Retreat":
          this._TimeScale > .5 && (this._TimeScale = this._TimeScale - .5);
          console.log("\u56de\u653e \u51cf\u901f" + this._TimeScale);
          cc.director.getScheduler().setTimeScale(this._TimeScale);
          break;

         case "Button_Pause":
          console.log("\u56de\u653e \u6682\u505c");
          this.Button_Pause.active = false;
          this.Button_Resume.active = true;
          cc.director.pause();
          break;

         case "Button_Resume":
          console.log("\u56de\u653e \u6062\u590d");
          this.Button_Pause.active = true;
          this.Button_Resume.active = false;
          cc.director.resume();
          break;

         case "Button_Speed":
          this._TimeScale <= 5 && (this._TimeScale = this._TimeScale + .5);
          console.log("\u56de\u653e \u52a0\u901f" + this._TimeScale);
          var Scheduler = cc.director.getScheduler();
          var TimeScale = Scheduler.getTimeScale();
          Scheduler.setTimeScale(this._TimeScale);
          break;

         case "Button_Back":
          cc.director.getScheduler().setTimeScale(1);
          LOOBBY_STATIC = false;
          cc.director.loadScene("lobby");
        }
      },
      onDisable: function onDisable() {
        cc.director.getScheduler().setTimeScale(1);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ZJH_ZhanJi_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f994B1Fs5DeoAxk4biXEzC", "ZJH_ZhanJi_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        nickName: cc.Label,
        ruleLabel: cc.Label,
        scoreLabel: cc.Label,
        headerImg: cc.Sprite,
        cards: cc.Node,
        cardItem: cc.Node,
        bankerView: cc.Node,
        pokeSpriteFrame: cc.SpriteAtlas,
        tipResSprite: [ cc.SpriteFrame ],
        cardTips: cc.Sprite
      },
      initData: function initData(data) {
        var _this = this;
        this.nickName.string = data.name;
        data.avatar && AvatarManager.requestHeadRes(data.avatar, data.uid, function(avataRes) {
          _this.headerImg && (_this.headerImg.spriteFrame = avataRes);
        });
        var roomInfo = RoomListManager.getRoomInfo();
        if (!roomInfo) {
          roomInfo = {};
          roomInfo.type = data.roomInfoType;
        }
        roomInfo.type == E_ROOM_TYPE.PRIVATE || roomInfo.type == E_ROOM_TYPE.TABLE || roomInfo.type == E_ROOM_TYPE.GOLD ? this.scoreLabel.string = F_GetMoneyDisplay(data.score, 2) > 0 ? "+" + F_GetMoneyDisplay(data.score, 2) : F_GetMoneyDisplay(data.score, 2) : this.scoreLabel.string = data.score > 0 ? "+" + data.score : data.score;
        data.score < 0 ? this.scoreLabel.node.color = new cc.Color(123, 203, 47) : this.scoreLabel.node.color = new cc.Color(208, 65, 45);
        this.bankerView.active = data.isBanker;
        for (var i = 0; i < data.handCards.length; i++) if (255 != data.handCards[i]) {
          var card = this.cards.children[i];
          card.setContentSize(cc.size(75, 90));
          card.active = true;
          card.getComponent(cc.Sprite).spriteFrame = this.pokeSpriteFrame.getSpriteFrame(data.handCards[i]);
        } else this.cards.children[i].active = false;
        this.cardTips.spriteFrame = this.tipResSprite[data.cardShape - 1];
      }
    });
    cc._RF.pop();
  }, {} ],
  ZhanJiDetailView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fc75Ps+l1Ae78+Ls6MC+Lo", "ZhanJiDetailView");
    "use strict";
    var GAMEIDOBJ = {
      HZMJ: 20161004
    };
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        result_MJ: cc.Node,
        result_TTZ: cc.Node,
        result_21D: cc.Node,
        result_PDK: cc.Node,
        result_DDZ: cc.Node,
        result_NJJ: cc.Node,
        result_ZJH: cc.Node
      },
      init: function init(gameID, resultInfos, zhanjiLayer) {
        this.gameID = gameID;
        this.resultInfo = resultInfos;
        this.zhanjiLayer = zhanjiLayer;
        this.node.children.forEach(function(node) {
          return node.active = false;
        });
        switch (this.gameID) {
         case GAMEIDOBJ.TDHMJ:
          this.compressTDHMJ(resultInfos);
          break;

         case GAMEIDOBJ.XZMJ:
          this.compressXZMJ(resultInfos);
          break;

         case GAMEIDOBJ.TDHMJSX:
          this.compressTDHMJSX(resultInfos);
          break;

         case GAMEIDOBJ.HZMJ:
          this.compressHZMJ(resultInfos);
          break;

         case GAMEIDOBJ.TTZ:
          this.compressTTZ(resultInfos);
          break;

         case GAMEIDOBJ["21D"]:
          this.compress21D(resultInfos);
          break;

         case GAMEIDOBJ.PDK:
          this.compressPDK(resultInfos);
          break;

         case GAMEIDOBJ.CSDDZ:
          this.compressCSDDZ(resultInfos);
          break;

         case GAMEIDOBJ.NJJ:
          this.compressNJJ(resultInfos);
          break;

         case GAMEIDOBJ.LTZJH:
          this.compressLTZJH(resultInfos);
        }
      },
      compress21D: function compress21D(resultInfos) {
        var _this = this;
        this.result_21D.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: [],
            cardShape: null
          };
          playData.name = resultInfo.userName;
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          playData.score = resultInfo.changeMoney;
          playData.cardShape = resultInfo.cardShape;
          playData.roomInfoType = resultInfos.type;
          for (var i = 0; i < resultInfo.handData.length; i++) playData.handCards.push(resultInfo.handData[i]);
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this.result_21D.children[0]);
          itemView.active = true;
          itemView.getComponent("21D_ZhanJi_Item").initData(d);
          _this.result_21D.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressPDK: function compressPDK(resultInfos) {
        var _this2 = this;
        this.result_PDK.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: []
          };
          playData.name = resultInfo.userName;
          playData.score = resultInfo.changeMoney;
          playData.roomInfoType = resultInfos.type;
          if (resultInfo.handData) for (var i = 0; i < resultInfo.handData.length; i++) playData.handCards.push(resultInfo.handData[i]);
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this2.result_PDK.children[0]);
          itemView.active = true;
          itemView.getComponent("PDK_ZhanJi_Item").initData(d);
          _this2.result_PDK.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressCSDDZ: function compressCSDDZ(resultInfos) {
        var _this3 = this;
        this.result_DDZ.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: []
          };
          playData.name = resultInfo.userName;
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          playData.score = resultInfo.iUserScore;
          playData.roomInfoType = resultInfos.type;
          if (resultInfo.SendCard) for (var i = 0; i < resultInfo.SendCard.length; i++) playData.handCards.push(resultInfo.SendCard[i]);
          playsData.push(playData);
        }
        if (resultInfos.backCard) {
          var backCards = this.result_DDZ.getChildByName("backCards");
          backCards.active = true;
          for (var _i = 0; _i < resultInfos.backCard.length; _i++) setTexture(backCards.children[0].children[_i].getComponent(cc.Sprite), tools.stringFormat("CSDDZ/card/{0}", resultInfos.backCard[_i]));
        } else this.result_DDZ.getChildByName("backCards").active = false;
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this3.result_DDZ.children[0]);
          itemView.active = true;
          itemView.getComponent("DDZ_ZhanJi_Item").initData(d);
          _this3.result_DDZ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressNJJ: function compressNJJ(resultInfos) {
        var _this4 = this;
        this.result_NJJ.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: [],
            cardShape: null
          };
          playData.name = resultInfo.userName;
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          playData.score = resultInfo.changeMoney;
          playData.cardShape = resultInfo.cardShape;
          playData.roomInfoType = resultInfos.type;
          if (resultInfo.handData) for (var i = 0; i < resultInfo.handData.length; i++) playData.handCards.push(resultInfo.handData[i]);
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this4.result_NJJ.children[0]);
          itemView.active = true;
          itemView.getComponent("NJJ_ZhanJi_Item").initData(d);
          _this4.result_NJJ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressLTZJH: function compressLTZJH(resultInfos) {
        var _this5 = this;
        this.result_ZJH.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: [],
            cardShape: null
          };
          playData.name = resultInfo.userName;
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          playData.score = resultInfo.changeMoney;
          playData.cardShape = resultInfo.cardShape;
          playData.roomInfoType = resultInfos.type;
          if (resultInfo.handData) for (var i = 0; i < resultInfo.handData.length; i++) playData.handCards.push(resultInfo.handData[i]);
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this5.result_ZJH.children[0]);
          itemView.active = true;
          itemView.getComponent("ZJH_ZhanJi_Item").initData(d);
          _this5.result_ZJH.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressTTZ: function compressTTZ(resultInfos) {
        var _this6 = this;
        this.result_TTZ.active = true;
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            handCards: [],
            cardShape: null
          };
          playData.name = resultInfo.userName;
          playData.score = resultInfo.changeMoney;
          playData.cardShape = resultInfo.cardShape;
          playData.roomInfoType = resultInfos.type;
          for (var i = 0; i < resultInfo.handData.length; i++) playData.handCards.push(resultInfo.handData[i]);
          playsData.push(playData);
        }
        resultInfos.GuoDi ? this.result_TTZ.getChildByName("guoDi").getComponent(cc.Label).string = "\u9505\u5e95:" + resultInfos.GuoDi : this.result_TTZ.getChildByName("guoDi").getComponent(cc.Label).string = "";
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this6.result_TTZ.children[0]);
          itemView.active = true;
          itemView.getComponent("TTZ_ZhanJi_Item").initData(d);
          _this6.result_TTZ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressTDHMJSX: function compressTDHMJSX(resultInfos) {
        var _this7 = this;
        this.result_MJ.active = true;
        cc.mj = {};
        cc.mj.Data = {};
        cc.mj.Data.ghostCard = [];
        resultInfos.laizi && cc.mj.Data.ghostCard.push(resultInfos.laizi);
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            name: "",
            avatar: "",
            score: 0,
            scoreGang: 0,
            isBanker: false,
            win: false,
            ghostCards: [],
            anGangCards: [],
            gangCards: [],
            pengCards: [],
            handCards: [],
            isHuCard: false,
            gangCount: 0,
            buGangCount: 0,
            rule: "",
            bIsHu: false,
            bTing: false,
            byHuType: null
          };
          playData.byHuType = resultInfos.HuTypeEx;
          playData.byDianPao = resultInfos.byDianPao;
          playData.bZimo = resultInfos.bZimo;
          playData.byBeDianPao = resultInfos.byBeDianPao;
          playData.bIsHu = resultInfo.IsHu;
          playData.roomInfoType = resultInfos.type;
          var nameStr = resultInfo.userName;
          playData.name = nameStr;
          playData.score = resultInfo.changeMoney;
          playData.scoreGang = resultInfo.gang;
          playData.ghostCards = [];
          playData.anGangCards = [];
          playData.gangCards = [];
          playData.pengCards = [];
          playData.handCards = [];
          playData.gangCount = 0;
          playData.buGangCount = 0;
          var ruleStr = "";
          ruleStr = playData.byBeDianPao == resultInfo.userID ? "\u70b9\u70ae" : "";
          playData.bZimo ? playData.bIsHu && (ruleStr = "\u81ea\u6478") : playData.bIsHu ? ruleStr = "\u5403\u80e1" : resultInfo.userID == playData.byBeDianPao && (ruleStr = "\u70b9\u70ae");
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          playData.win = resultInfo.IsHu;
          playData.rule = ruleStr;
          if (resultInfo.userGCPData) for (var i = 0; i <= 4; i++) {
            if ("undefined" == typeof resultInfo.userGCPData[i]) break;
            var pengGangValue = void 0;
            var pengGangCount = 0;
            for (var j = 0; j <= 3; j++) if ("undefined" != typeof resultInfo.userGCPData[i][j]) {
              0 == j && (pengGangValue = resultInfo.userGCPData[i][j]);
              pengGangCount++;
            }
            3 == pengGangCount ? playData.pengCards.push(pengGangValue) : 4 == pengGangCount && playData.gangCards.push(pengGangValue);
          }
          for (var _i2 = 0; _i2 < resultInfo.handData.length; _i2++) {
            playData.handCards.push(resultInfo.handData[_i2]);
            resultInfo.byBaoCard == resultInfo.handData[_i2] && playData.ghostCards.push(resultInfo.handData[_i2]);
          }
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this7.result_MJ.children[0]);
          itemView.active = true;
          itemView.getComponent("MJ_ZhanJi_Item").initData(d);
          _this7.result_MJ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressHZMJ: function compressHZMJ(resultInfos) {
        var _this8 = this;
        this.result_MJ.active = true;
        cc.mj = {};
        cc.mj.Data = {};
        cc.mj.Data.ghostCard = [];
        resultInfos.laizi && cc.mj.Data.ghostCard.push(resultInfos.laizi);
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            name: "",
            avatar: "",
            score: 0,
            scoreGang: 0,
            isBanker: false,
            win: false,
            ghostCards: [],
            anGangCards: [],
            gangCards: [],
            pengCards: [],
            handCards: [],
            isHuCard: false,
            gangCount: 0,
            buGangCount: 0,
            rule: "",
            bycountGangFen: 0
          };
          playData.roomInfoType = resultInfos.type;
          playData.bycountGangFen = resultInfo.gang;
          var nameStr = resultInfo.userName;
          playData.name = nameStr;
          playData.score = resultInfo.changeMoney;
          playData.scoreGang = resultInfo.gang;
          playData.ghostCards = [];
          playData.anGangCards = [];
          playData.gangCards = [];
          playData.pengCards = [];
          playData.handCards = [];
          playData.gangCount = 0;
          playData.buGangCount = 0;
          var ruleStr = "";
          if (resultInfos.byDianPao == resultInfo.userID) {
            if (resultInfos.type == E_ROOM_TYPE.PRIVATE || resultInfos.type == E_ROOM_TYPE.TABLE || resultInfos.type == E_ROOM_TYPE.GOLD) {
              resultInfos.HuTypeEx[0] = F_GetMoneyDisplay(resultInfos.HuTypeEx[0], 2);
              resultInfos.HuTypeEx[1] = F_GetMoneyDisplay(resultInfos.HuTypeEx[0], 2);
            }
            ruleStr = "\u80e1\u5206+" + resultInfos.HuTypeEx[0];
            ruleStr = ruleStr + " \u9a6c\u5206+" + resultInfos.HuTypeEx[1];
          }
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          var maNum = "";
          resultInfos.byDianPao == resultInfo.userID && (maNum = "\u4e2d\u7801\u6570: " + resultInfos.HorsePai.length);
          playData.win = "" != ruleStr;
          ruleStr += " " + maNum;
          playData.rule = ruleStr;
          if (resultInfo.userGCPData) for (var i = 0; i <= 4; i++) {
            if ("undefined" == typeof resultInfo.userGCPData[i]) break;
            var pengGangValue = void 0;
            var pengGangCount = 0;
            for (var j = 0; j <= 3; j++) if ("undefined" != typeof resultInfo.userGCPData[i][j]) {
              0 == j && (pengGangValue = resultInfo.userGCPData[i][j]);
              pengGangCount++;
            }
            3 == pengGangCount ? playData.pengCards.push(pengGangValue) : 4 == pengGangCount && playData.gangCards.push(pengGangValue);
          }
          for (var _i3 = 0; _i3 < resultInfo.handData.length; _i3++) {
            playData.handCards.push(resultInfo.handData[_i3]);
            resultInfo.byBaoCard == resultInfo.handData[_i3] && playData.ghostCards.push(resultInfo.handData[_i3]);
          }
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this8.result_MJ.children[0]);
          itemView.active = true;
          itemView.getComponent("MJ_ZhanJi_Item").initData(d, i);
          _this8.result_MJ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressXZMJ: function compressXZMJ(resultInfos) {
        var _this9 = this;
        this.result_MJ.active = true;
        cc.mj = {};
        cc.mj.Data = {};
        cc.mj.Data.ghostCard = [];
        resultInfos.laizi && cc.mj.Data.ghostCard.push(resultInfos.laizi);
        var playsData = [];
        var userIDName = {};
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) userIDName[resultInfos.user[idx].userID + ""] = resultInfos.user[idx].userName;
        for (var _idx = 0; _idx <= resultInfos.user.length - 1; _idx++) {
          var resultInfo = resultInfos.user[_idx];
          var playData = {
            name: "",
            avatar: "",
            score: 0,
            scoreGang: 0,
            isBanker: false,
            win: false,
            ghostCards: [],
            anGangCards: [],
            gangCards: [],
            pengCards: [],
            handCards: [],
            isHuCard: false,
            gangCount: 0,
            buGangCount: 0,
            rule: ""
          };
          playData.roomInfoType = resultInfos.type;
          var nameStr = resultInfo.userName;
          playData.name = nameStr;
          playData.score = resultInfo.changeMoney;
          playData.scoreGang = resultInfo.gang;
          playData.ghostCards = [];
          playData.anGangCards = [];
          playData.gangCards = [];
          playData.pengCards = [];
          playData.handCards = [];
          playData.gangCount = 0;
          playData.buGangCount = 0;
          var ruleStr = "";
          if (resultInfo.IsHu) {
            resultInfo.bZimo && (ruleStr += tools.stringFormat("\u81ea\u6478({0}\u756a)", resultInfo.fan));
            resultInfo.byDianPao == resultInfo.userID && (ruleStr += "\u70b9\u70ae\u80e1\u3010" + userIDName[resultInfo.byBeDianPao + ""] + "\u653e\u70ae\u3011");
          }
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          var maNum = "";
          resultInfos.byDianPao == resultInfo.userID && (maNum = "\u4e2d\u7801\u6570: " + resultInfos.HorsePai.length);
          playData.win = resultInfo.IsHu;
          ruleStr += " " + maNum;
          playData.rule = ruleStr;
          if (resultInfo.userGCPData) for (var i = 0; i <= 4; i++) {
            if ("undefined" == typeof resultInfo.userGCPData[i]) break;
            var pengGangValue = void 0;
            var pengGangCount = 0;
            for (var j = 0; j <= 3; j++) if ("undefined" != typeof resultInfo.userGCPData[i][j]) {
              0 == j && (pengGangValue = resultInfo.userGCPData[i][j]);
              pengGangCount++;
            }
            3 == pengGangCount ? playData.pengCards.push(pengGangValue) : 4 == pengGangCount && playData.gangCards.push(pengGangValue);
          }
          for (var _i4 = 0; _i4 < resultInfo.handData.length; _i4++) {
            playData.handCards.push(resultInfo.handData[_i4]);
            resultInfo.byBaoCard == resultInfo.handData[_i4] && playData.ghostCards.push(resultInfo.handData[_i4]);
          }
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this9.result_MJ.children[0]);
          itemView.active = true;
          itemView.getComponent("MJ_ZhanJi_Item").initData(d);
          _this9.result_MJ.children[1].children[0].children[0].addChild(itemView);
        });
      },
      compressTDHMJ: function compressTDHMJ(resultInfos) {
        var _this10 = this;
        this.result_MJ.active = true;
        cc.mj = {};
        cc.mj.Data = {};
        cc.mj.Data.ghostCard = [];
        resultInfos.laizi && cc.mj.Data.ghostCard.push(resultInfos.laizi);
        var playsData = [];
        for (var idx = 0; idx <= resultInfos.user.length - 1; idx++) {
          var resultInfo = resultInfos.user[idx];
          var playData = {
            name: "",
            avatar: "",
            score: 0,
            scoreGang: 0,
            isBanker: false,
            win: false,
            ghostCards: [],
            anGangCards: [],
            gangCards: [],
            pengCards: [],
            handCards: [],
            isHuCard: false,
            gangCount: 0,
            buGangCount: 0,
            rule: ""
          };
          playData.roomInfoType = resultInfos.type;
          var nameStr = resultInfo.userName;
          playData.name = nameStr;
          playData.score = resultInfo.changeMoney;
          playData.scoreGang = resultInfo.gang;
          playData.ghostCards = [];
          playData.anGangCards = [];
          playData.gangCards = [];
          playData.pengCards = [];
          playData.handCards = [];
          playData.gangCount = 0;
          playData.buGangCount = 0;
          var ruleStr = "";
          if (resultInfos.byDianPao == resultInfo.userID) {
            var huTypeStr = "";
            for (var i = 0; i <= 12; i++) resultInfos.HuTypeEx[i] > 0 && (0 == i ? ruleStr = TDHMJ_HUTYPE_NAME_DEF[i] + resultInfos.HuTypeEx[i] : ruleStr += " " + TDHMJ_HUTYPE_NAME_DEF[i] + resultInfos.HuTypeEx[i]);
          }
          playData.isBanker = resultInfo.userID == resultInfos.banker;
          var maNum = "";
          resultInfos.byDianPao == resultInfo.userID && (maNum = "\u4e2d\u7801\u6570: " + resultInfos.HorsePai.length);
          playData.win = "" != ruleStr;
          ruleStr += " " + maNum;
          playData.rule = ruleStr;
          if (resultInfo.userGCPData) for (var _i5 = 0; _i5 <= 4; _i5++) {
            if ("undefined" == typeof resultInfo.userGCPData[_i5]) break;
            var pengGangValue = void 0;
            var pengGangCount = 0;
            for (var j = 0; j <= 3; j++) if ("undefined" != typeof resultInfo.userGCPData[_i5][j]) {
              0 == j && (pengGangValue = resultInfo.userGCPData[_i5][j]);
              pengGangCount++;
            }
            3 == pengGangCount ? playData.pengCards.push(pengGangValue) : 4 == pengGangCount && playData.gangCards.push(pengGangValue);
          }
          for (var _i6 = 0; _i6 < resultInfo.handData.length; _i6++) {
            playData.handCards.push(resultInfo.handData[_i6]);
            resultInfo.byBaoCard == resultInfo.handData[_i6] && playData.ghostCards.push(resultInfo.handData[_i6]);
          }
          playsData.push(playData);
        }
        playsData.forEach(function(d, i) {
          var itemView = cc.instantiate(_this10.result_MJ.children[0]);
          itemView.active = true;
          itemView.getComponent("MJ_ZhanJi_Item").initData(d);
          _this10.result_MJ.children[1].children[0].children[0].addChild(itemView);
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ZhanJiItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ce1cLyj+RH0ImX0jEWm92N", "ZhanJiItem");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        text_roomnum: cc.Label,
        text_play: cc.Label,
        text_count: cc.Label,
        text_time: cc.Label,
        text_score: cc.Node,
        img_baseBg: cc.Node,
        layout_playerInfo: cc.Node,
        item_playerInfo: cc.Prefab,
        img_roomType: cc.Sprite,
        sp_vip: cc.SpriteFrame,
        sp_gold: cc.SpriteFrame,
        sp_score: cc.SpriteFrame,
        xiangqingBtn: cc.Button,
        xialaBtn: cc.Button,
        detailBtn: cc.Button,
        jushuText: cc.Label
      },
      init: function init(data, gameID, zhanjiLayer, idx, roomType) {
        this.data = data;
        this.gameID = gameID;
        this.zhanjiLayer = zhanjiLayer;
        this.GameRecordLogic = new (require("GameRecordLogic"))();
        this.idx = idx;
        if (zhanjiLayer.xiangqingScroll.node.active) {
          this.xiangqingBtn.node.active = false;
          this.xialaBtn.node.active = false;
          this.detailBtn.node.active = true;
          this.initxiangqing(roomType);
        } else {
          this.xiangqingBtn.node.active = true;
          this.xialaBtn.node.active = true;
          this.detailBtn.node.active = false;
          this.initUI();
        }
      },
      initUI: function initUI() {
        var data = this.data;
        var gameType = GameManager.getGameTypeByJsonRule(this.gameID, data.gameRules);
        var roomType = GameManager.getRoomTypeByJsonRule(this.gameID, data.gameRules);
        this.text_time.string = F_GetDateStringByTime(data.time);
        this.text_roomnum.string = data.deskPasswd;
        this.text_count.string = data.gameCount + "/" + data.maxGameCount + "\u5c40";
        var roomTypeStr = "";
        if (0 == data.deskPasswd) {
          var roomListCallback = function(roomList) {
            if (roomList) for (var i = 0; i < roomList.length; i++) if (roomList[i].roomID == data.roomID) {
              roomTypeStr = roomList[i].name.indexOf("\u6392\u4f4d\u8d5b") >= 0 ? "\u6392\u4f4d\u8d5b" : roomList[i].name.indexOf("\u95ef\u5173\u8d5b") >= 0 ? "\u95ef\u5173\u8d5b" : "\u6bd4\u8d5b\u573a";
              this.data.roomType = roomTypeStr;
              this.text_roomnum.string = "   " + roomTypeStr;
              this.text_count.string = "\u95ef\u5173\u8d5b" == roomTypeStr ? data.gameCount + "/" + data.maxGameCount + "\u5173" : data.gameCount + "/" + data.maxGameCount + "\u5c40";
              break;
            }
          }.bind(this);
          RoomListManager.requestAllRoomList(roomListCallback);
        }
        roomType != E_ROOM_TYPE.PRIVATE && roomType != E_ROOM_TYPE.TABLE && roomType != E_ROOM_TYPE.GOLD && "\u6392\u4f4d\u8d5b" != roomTypeStr && "\u95ef\u5173\u8d5b" != roomTypeStr && "\u6bd4\u8d5b\u573a" != roomTypeStr || (data.score = F_GetMoneyDisplay(data.score));
        if (data.score < 0) {
          this.text_score.getComponent(cc.Label).string = data.score;
          this.text_score.color = cc.color(0, 101, 178);
        } else if (data.score > 0) {
          this.text_score.getComponent(cc.Label).string = "+" + data.score;
          this.text_score.color = cc.color(255, 0, 0);
        } else if (0 == data.score) {
          this.text_score.getComponent(cc.Label).string = data.score;
          this.text_score.color = cc.color(255, 0, 0);
        }
        roomType == E_ROOM_TYPE.MATCH ? this.img_roomType.spriteFrame = this.sp_vip : roomType == E_ROOM_TYPE.CARD ? this.img_roomType.spriteFrame = this.sp_score : roomType == E_ROOM_TYPE.PRIVATE && (this.img_roomType.spriteFrame = this.sp_gold);
      },
      initxiangqing: function initxiangqing(roomType) {
        var gameID = this.gameID;
        var data = this.data[this.idx];
        for (var i = 0; i < G_REGIST_GAME_LIST.length; ++i) if (gameID == G_REGIST_GAME_LIST[i].id) {
          this.text_count.string = G_REGIST_GAME_LIST[i].name;
          cc.log(this.text_count.string);
          break;
        }
        var score = F_GetMoneyDisplay(data.score);
        this.text_time.string = F_GetDateStringByTime(data.time);
        this.text_roomnum.string = "" + data.videoCode;
        this.text_play.string = "\u7ecf\u5178\u73a9\u6cd5";
        this.jushuText.string = "\u7b2c " + (this.idx + 1) + ("\u95ef\u5173\u8d5b" == roomType ? " \u5173" : " \u5c40");
        if (score < 0) {
          this.text_score.getComponent(cc.Label).string = score;
          this.text_score.color = cc.color(0, 101, 178);
        } else if (score > 0) {
          this.text_score.getComponent(cc.Label).string = "+" + score;
          this.text_score.color = cc.color(255, 0, 0);
        } else if (0 == score) {
          this.text_score.getComponent(cc.Label).string = score;
          this.text_score.color = cc.color(255, 0, 0);
        }
        this.img_roomType.node.active = false;
        this.jushuText.node.active = true;
      },
      chakanxiangqing: function chakanxiangqing() {
        this.zhanjiLayer.chakanxiangqing(this.gameID, this.data.id, this.data.roomType);
      },
      onClickDetail: function onClickDetail() {
        var _this = this;
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", "http://" + NetConfig.getAgentServer() + "/" + this.data[this.idx].videoCode + ".json", true);
        xhr.timeout = 5e3;
        xhr.onreadystatechange = function() {
          if (4 == xhr.readyState && xhr.status >= 200 && xhr.status <= 207 && xhr.responseText) {
            var ret = JSON.parse(xhr.responseText);
            _this.zhanjiLayer.showDetailView(_this.gameID, ret);
          }
        };
        xhr.ontimeout = function(event) {};
        xhr.onerror = function(e) {};
        xhr.send();
      },
      onBtnXiaLa: function onBtnXiaLa(event, param) {
        var _this2 = this;
        if (this.isClicked) return;
        this.isClicked = true;
        this.scheduleOnce(function() {
          _this2.isClicked = false;
        }, .15);
        var checkBoxCtrl = event.target.getComponent("CommonCheckRadioBoxCtrlUI");
        checkBoxCtrl.setCheckBoxValue(event, null);
        if (checkBoxCtrl.getCheckBoxValue(event, null)) {
          var roomType = "";
          roomType = this.data.gameRules ? GameManager.getRoomTypeByJsonRule(this.gameID, this.data.gameRules) : "\u7ecf\u5178\u73a9\u6cd5";
          0 == this.layout_playerInfo.children.length ? this.GameRecordLogic.requestSimpleGradeInfo(this.gameID, this.data.id, function(userList) {
            userList.forEach(function(ele, index) {
              var playerInfo = cc.instantiate(_this2.item_playerInfo);
              var script = playerInfo.getComponent("BaseLayer");
              script.init(ele, index, _this2.data.roomType);
              _this2.layout_playerInfo.addChild(playerInfo);
              index == userList.length - 1 && (_this2.node.height = _this2.img_baseBg.height + _this2.layout_playerInfo.height);
            });
          }) : this.node.height = this.img_baseBg.height + this.layout_playerInfo.height;
        } else this.node.height = this.img_baseBg.height;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    GameRecordLogic: "GameRecordLogic"
  } ],
  ZhanJiJifenLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "85c29v0bKJOhYZ9JxuFp9Xx", "ZhanJiJifenLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        listview: cc.ScrollView,
        listItem: cc.Prefab
      },
      start: function start() {
        this.friendsGroup = FriendsGroupManager.getSelectFriendsGroup();
      },
      refreshListView: function refreshListView() {
        var roomType = 0;
        this.selectedFuncID == FUNC_GOLD ? roomType = 2 : this.selectedFuncID == FUNC_SCORE ? roomType = 1 : this.selectedFuncID == FUNC_VIP && (roomType = 3);
        var friendsGroupID = this.friendsGroup.friendsGroupID;
        var firstTime = 0;
        var endTime = 0;
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ZhanJiLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ffe0pJRUtE3qTG+7c1lkMv", "ZhanJiLayer");
    "use strict";
    cc.Class({
      extends: require("LobbyBaseLayer"),
      properties: {
        selectGamePrefab: cc.Prefab,
        selecGameScroll: cc.ScrollView,
        prefab_zhanjiItem: cc.Prefab,
        infoScroll: cc.ScrollView,
        xiangqingScroll: cc.ScrollView,
        detailScroll: cc.Node,
        prefab_DetailItem: cc.Prefab,
        mjSpriteAlt: cc.SpriteAtlas,
        roomText: cc.Label
      },
      init: function init(gameList, gameID) {
        var _this = this;
        this.selectedGameList = gameList;
        this.selectedGameID = gameID || gameList[0];
        cc.mjSpriteAlt = this.mjSpriteAlt;
        this.GameRecordLogic = new (require("GameRecordLogic"))();
        gameList.forEach(function(element, index) {
          element == _this.selectedGameID && (_this.selectedGameIndex = index);
        });
        this.selectedGameIndex = this.selectedGameIndex || 0;
      },
      start: function start() {
        this.PAGE_COUNT = 6;
        this.initGameListView();
      },
      onEnable: function onEnable() {
        this.pageId = 1;
        this.pageCount = 0;
      },
      initGameListView: function initGameListView() {
        var _this2 = this;
        var clickCallBack = function clickCallBack(gameID, pos) {
          _this2.onGameSelect(gameID, pos);
        };
        this.selectedGameList.forEach(function(data, pos) {
          var gameSelect = cc.instantiate(_this2.selectGamePrefab);
          var script = gameSelect.getComponent("BaseLayer");
          script.updateContent(data, pos, clickCallBack);
          if (data == _this2.selectedGameID) {
            script.checkMark.active = true;
            _this2.doGetGameRecord();
          }
          _this2.selecGameScroll.content.addChild(gameSelect);
        });
      },
      scrollEvent: function scrollEvent(sender, event) {
        switch (event) {
         case 6:
          var nextPageId = this.pageId + 1;
          if (nextPageId <= this.pageCount) {
            this.pageId = nextPageId;
            this.setRecordPageItems(nextPageId);
          }
        }
      },
      onGameSelect: function onGameSelect(gameID, pos) {
        if (this.selectedGameIndex == pos) return;
        this.selectedGameID = gameID;
        this.selectedGameIndex = pos;
        this.doGetGameRecord();
        this.detailScroll.removeAllChildren();
        this.detailScroll.active = false;
      },
      doGetGameRecord: function doGetGameRecord() {
        var _this3 = this;
        this.setRecordListView(false);
        this.GameRecordLogic.requestSimpleGradeList(this.selectedGameID, function(simpleGradeList) {
          _this3.pageId = 1;
          _this3.pageCount = 0;
          _this3.initRecordListView(_this3.infoScroll, simpleGradeList);
        });
      },
      chakanxiangqing: function chakanxiangqing(gameID, id, roomType) {
        var _this4 = this;
        this.setRecordListView(true);
        window.detailRecordID = id;
        this.GameRecordLogic.requestGradeList(gameID, id, function(simpleGradeList) {
          _this4.initRecordListView(_this4.xiangqingScroll, simpleGradeList, true, roomType);
        });
      },
      showDetailView: function showDetailView(gameID, resultObject) {
        if (gameID && resultObject) {
          this.detailScroll.active = true;
          this.xiangqingScroll.node.active = false;
          this.detailScroll.removeAllChildren();
          var listItem = cc.instantiate(this.prefab_DetailItem);
          var script = listItem.getComponent("BaseLayer");
          script.init(gameID, resultObject, this);
          this.detailScroll.addChild(listItem);
        }
      },
      setRecordListView: function setRecordListView(bol) {
        this.xiangqingScroll.node.active = bol;
        this.infoScroll.node.active = !bol;
      },
      setRecordItems: function setRecordItems(node, simpleGradeList, roomType) {
        var _this5 = this;
        var list = simpleGradeList;
        list.forEach(function(ele, idx) {
          var listItem = cc.instantiate(_this5.prefab_zhanjiItem);
          var script = listItem.getComponent("BaseLayer");
          script.init(node == _this5.xiangqingScroll ? simpleGradeList : ele, _this5.selectedGameID, _this5, idx, roomType);
          node.content.addChild(listItem);
        });
      },
      setRecordPageItems: function setRecordPageItems(pageId) {
        this.pageId = pageId;
        for (var i = 1; i <= this.simpleGradeList.length; i++) if (i > (this.pageId - 1) * this.PAGE_COUNT && i <= this.pageId * this.PAGE_COUNT) {
          var listItem = cc.instantiate(this.prefab_zhanjiItem);
          var script = listItem.getComponent("BaseLayer");
          script.init(this.simpleGradeList[i - 1], this.selectedGameID, this, i - 1);
          this.simpleGradeNode.content.addChild(listItem);
        }
      },
      initRecordListView: function initRecordListView(node, simpleGradeList, isReadDetail, roomType) {
        if (isReadDetail) {
          this.roomText.string = "\u56de\u653e\u7801";
          node.content.removeAllChildren();
          this.setRecordItems(node, simpleGradeList, roomType);
        } else {
          this.roomText.string = "\u623f\u95f4\u53f7";
          node.content.removeAllChildren();
          this.pageCount = Math.ceil(simpleGradeList.length / this.PAGE_COUNT);
          this.pageId = 1;
          this.simpleGradeList = simpleGradeList;
          this.simpleGradeNode = node;
          this.setRecordPageItems(this.pageId);
        }
      },
      onCloseBtn: function onCloseBtn() {
        if (this.xiangqingScroll.node.active) {
          this.setRecordListView(false);
          this.xiangqingScroll.content.removeAllChildren();
        } else if (this.detailScroll.active) {
          this.detailScroll.removeAllChildren();
          this.detailScroll.active = false;
          this.xiangqingScroll.node.active = true;
        } else this.node.removeFromParent();
      },
      onChosePlay: function onChosePlay(event, param) {
        switch (param) {
         case "jifen":
          this.jifenRoom.active = true;
        }
      }
    });
    cc._RF.pop();
  }, {
    GameRecordLogic: "GameRecordLogic",
    LobbyBaseLayer: "LobbyBaseLayer"
  } ],
  ZhanJiPlayerItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97f9aNGLR5AqZJwmeDcf1YX", "ZhanJiPlayerItem");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        img_avatar: cc.Sprite,
        text_nickname: cc.Label,
        text_id: cc.Label,
        text_score: cc.Node
      },
      init: function init(data, idx, roomType) {
        this.data = data;
        this.idx = idx;
        this.roomType = roomType;
      },
      onLoad: function onLoad() {
        var _this = this;
        cc.winSize.width / 1280 < 1 && this.node.setScale(cc.winSize.width / 1280);
        var data = this.data;
        var score = F_GetMoneyDisplay(data.score) + "";
        if (data.score < 0) {
          this.text_score._components[0].string = score;
          this.text_score.color = cc.color(0, 101, 178);
        } else if (data.score > 0) {
          this.text_score._components[0].string = "+" + score;
          this.text_score.color = cc.color(255, 0, 0);
        } else if (0 == data.score) {
          this.text_score._components[0].string = score;
          this.text_score.color = cc.color(255, 0, 0);
        }
        UserInfoManager.requestUserInfoByUserID(data.userID, function(info) {
          cc.log("haah");
          cc.log(info);
          _this.text_nickname && (_this.text_nickname.string = info.name);
          _this.text_id && (_this.text_id.string = info.userID);
          AvatarManager.requestHeadRes(info.headURL, info.userID, function(avataRes) {
            _this.img_avatar && cc.isValid(_this.img_avatar) && (_this.img_avatar.spriteFrame = avataRes);
          });
        });
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  ZhuanzengLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "491e710AT1DPaMzjhOWfRKU", "ZhuanzengLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        friendIDEditbox: cc.EditBox,
        giveNumEditbox: cc.EditBox
      },
      onLoad: function onLoad() {
        this.zhuanzengLogic = new (require("ZhuanzengLogic"))();
      },
      doEditBoxCountChanged: function doEditBoxCountChanged() {
        var text = this.giveNumEditbox.string;
        var count = ConfigDataManager.getConfigDataByKey("sendGiftMinJewels", 10);
        if ("" != text) {
          var myCount = 0;
          myCount = this.zhuanzengLogic.getRoomCard() - ConfigDataManager.getConfigDataByKey("sendGiftMyLimitJewels", 50);
          myCount < 0 && (myCount = 0);
          count = parseInt(text);
          count = count > myCount && myCount || count;
          count = count < self.countMin && self.countMin || count;
        }
        count.toString() != text && (this.giveNumEditbox.string = count);
      },
      onTouchGive: function onTouchGive() {
        var _this = this;
        var friendID = this.friendIDEditbox.string;
        var giveNum = this.giveNumEditbox.string;
        var giveType = E_ResourceType.CARD;
        if (!friendID || "" == friendID) {
          createTips("\u8bf7\u8f93\u5165\u597d\u53cbID");
          return;
        }
        if (!giveNum || "" == giveNum) {
          createTips("\u8bf7\u8f93\u5165\u8d60\u9001\u6570\u91cf");
          return;
        }
        friendID = parseInt(friendID);
        giveNum = parseInt(giveNum);
        LobbySocket.getMyInfo().userID == friendID && createTips("\u4e0d\u53ef\u4ee5\u8d60\u9001\u7ed9\u81ea\u5df1");
        var myCount = 0;
        var limitJewels = ConfigDataManager.getConfigDataByKey("sendGiftMyLimitJewels", 50);
        var minJewels = ConfigDataManager.getConfigDataByKey("sendGiftMinJewels", 10);
        myCount = LobbySocket.getMyInfo().jewels - limitJewels;
        if (!/(^[1-9]\d*$)/.test(giveNum)) {
          createTips("\u8bf7\u8f93\u5165\u6b63\u6574\u6570,\u6700\u5c0f\u4e3a1");
          return;
        }
        if (0 == giveNum) {
          createTips("\u8f6c\u8d60\u6570\u76ee\u6700\u5c0f\u4e3a1");
          return;
        }
        var myJewels = LobbySocket.getMyInfo().jewels;
        if (myJewels < limitJewels) {
          createTips("\u60a8\u7684\u94bb\u77f3\u4f4e\u4e8e129\u5f20\uff0c\u65e0\u6cd5\u8f6c\u8d60\u7ed9\u4ed6\u4eba");
          return;
        }
        if (giveNum > myCount) {
          createTips("\u60a8\u8f6c\u8d60\u7684\u94bb\u77f3\u5927\u4e8e" + myCount + "\u5f20\uff0c\u65e0\u6cd5\u8f6c\u8d60\u7ed9\u4ed6\u4eba");
          return;
        }
        var btnName1 = "\u786e  \u5b9a";
        var msgCallback = function msgCallback(btnName) {
          if (btnName == btnName1) {
            var requestSendGiftCallback = function requestSendGiftCallback() {
              createTips("\u8d60\u9001\u94bb\u77f3\u6210\u529f");
              _this.doEditBoxCountChanged();
            };
            _this.zhuanzengLogic.requestSendGift(friendID, E_ResourceType.CARD, giveNum, requestSendGiftCallback);
          }
        };
        var shouxufei = ConfigDataManager.getConfigDataByKey("sendGiftRate", .05);
        var shijishoudao = giveNum - Math.ceil(shouxufei * giveNum);
        var msgObj = {};
        msgObj.msg = "\n\u8f6c\u8d60\u9700\u6536\u53d6" + 100 * shouxufei + "%\u7684\u624b\u7eed\u8d39\n\u60a8\u8f6c\u8d60\u7684" + giveNum + "\u5f20\u94bb\u77f3\uff0c\u5bf9\u65b9\u5c06\u6536\u5230" + shijishoudao + "\u5f20\u94bb\u77f3";
        msgObj.btn1 = btnName1;
        msgObj.callbackFun = msgCallback;
        createMsgBox(msgObj);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    ZhuanzengLogic: "ZhuanzengLogic"
  } ],
  ZhuanzengLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "310e0id/bJBSatrSgGdW4Zu", "ZhuanzengLogic");
    "use strict";
    var API = "give";
    cc.Class({
      extends: require("LogicBasis"),
      onLoad: function onLoad() {},
      requestSendGift: function requestSendGift(targetUserID, resourceType, resourceNumber, callback) {
        var actionName = "giveResourcestt";
        var args = {};
        args.params = {
          api: API,
          action: actionName,
          userID: this.getUserID(),
          targetUserID: targetUserID,
          resourcesType: resourceType,
          num: resourceNumber
        };
        args.fCallback = function() {
          createTips("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        args.sCallback = function(jsonData) {
          0 == jsonData.status ? callback && callback() : createTips(jsonData.msg);
        };
        args.requestDesc = "\u8f6c\u8d60\u4e2d...";
        MyHttpRequest.doRequest(args);
      }
    });
    cc._RF.pop();
  }, {
    LogicBasis: "LogicBasis"
  } ],
  base64: [ function(require, module, exports) {
    (function(global) {
      "use strict";
      cc._RF.push(module, "c4ef0tHAlpNtb4mSS57xZJ7", "base64");
      "use strict";
      (function(global, factory) {
        "object" === typeof exports && "undefined" !== typeof module ? module.exports = factory(global) : "function" === typeof define && define.amd ? define(factory) : factory(global);
      })("undefined" !== typeof self ? self : "undefined" !== typeof window ? window : "undefined" !== typeof global ? global : void 0, function(global) {
        global = global || {};
        var _Base64 = global.Base64;
        var version = "2.5.1";
        var buffer;
        if ("undefined" !== typeof module && module.exports) try {
          buffer = eval("require('buffer').Buffer");
        } catch (err) {
          buffer = void 0;
        }
        var b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var b64tab = function(bin) {
          var t = {};
          for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
          return t;
        }(b64chars);
        var fromCharCode = String.fromCharCode;
        var cb_utob = function cb_utob(c) {
          if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 128 ? c : cc < 2048 ? fromCharCode(192 | cc >>> 6) + fromCharCode(128 | 63 & cc) : fromCharCode(224 | cc >>> 12 & 15) + fromCharCode(128 | cc >>> 6 & 63) + fromCharCode(128 | 63 & cc);
          }
          var cc = 65536 + 1024 * (c.charCodeAt(0) - 55296) + (c.charCodeAt(1) - 56320);
          return fromCharCode(240 | cc >>> 18 & 7) + fromCharCode(128 | cc >>> 12 & 63) + fromCharCode(128 | cc >>> 6 & 63) + fromCharCode(128 | 63 & cc);
        };
        var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
        var utob = function utob(u) {
          return u.replace(re_utob, cb_utob);
        };
        var cb_encode = function cb_encode(ccc) {
          var padlen = [ 0, 2, 1 ][ccc.length % 3], ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0), chars = [ b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? "=" : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? "=" : b64chars.charAt(63 & ord) ];
          return chars.join("");
        };
        var btoa = global.btoa ? function(b) {
          return global.btoa(b);
        } : function(b) {
          return b.replace(/[\s\S]{1,3}/g, cb_encode);
        };
        var _encode = buffer ? buffer.from && Uint8Array && buffer.from !== Uint8Array.from ? function(u) {
          return (u.constructor === buffer.constructor ? u : buffer.from(u)).toString("base64");
        } : function(u) {
          return (u.constructor === buffer.constructor ? u : new buffer(u)).toString("base64");
        } : function(u) {
          return btoa(utob(u));
        };
        var encode = function encode(u, urisafe) {
          return urisafe ? _encode(String(u)).replace(/[+\/]/g, function(m0) {
            return "+" == m0 ? "-" : "_";
          }).replace(/=/g, "") : _encode(String(u));
        };
        var encodeURI = function encodeURI(u) {
          return encode(u, true);
        };
        var re_btou = new RegExp([ "[\xc0-\xdf][\x80-\xbf]", "[\xe0-\xef][\x80-\xbf]{2}", "[\xf0-\xf7][\x80-\xbf]{3}" ].join("|"), "g");
        var cb_btou = function cb_btou(cccc) {
          switch (cccc.length) {
           case 4:
            var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
            return fromCharCode(55296 + (offset >>> 10)) + fromCharCode(56320 + (1023 & offset));

           case 3:
            return fromCharCode((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));

           default:
            return fromCharCode((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
          }
        };
        var btou = function btou(b) {
          return b.replace(re_btou, cb_btou);
        };
        var cb_decode = function cb_decode(cccc) {
          var len = cccc.length, padlen = len % 4, n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0), chars = [ fromCharCode(n >>> 16), fromCharCode(n >>> 8 & 255), fromCharCode(255 & n) ];
          chars.length -= [ 0, 0, 2, 1 ][padlen];
          return chars.join("");
        };
        var _atob = global.atob ? function(a) {
          return global.atob(a);
        } : function(a) {
          return a.replace(/\S{1,4}/g, cb_decode);
        };
        var atob = function atob(a) {
          return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ""));
        };
        var _decode = buffer ? buffer.from && Uint8Array && buffer.from !== Uint8Array.from ? function(a) {
          return (a.constructor === buffer.constructor ? a : buffer.from(a, "base64")).toString();
        } : function(a) {
          return (a.constructor === buffer.constructor ? a : new buffer(a, "base64")).toString();
        } : function(a) {
          return btou(_atob(a));
        };
        var decode = function decode(a) {
          return _decode(String(a).replace(/[-_]/g, function(m0) {
            return "-" == m0 ? "+" : "/";
          }).replace(/[^A-Za-z0-9\+\/]/g, ""));
        };
        var noConflict = function noConflict() {
          var Base64 = global.Base64;
          global.Base64 = _Base64;
          return Base64;
        };
        global.Base64 = {
          VERSION: version,
          atob: atob,
          btoa: btoa,
          fromBase64: decode,
          toBase64: encode,
          utob: utob,
          encode: encode,
          encodeURI: encodeURI,
          btou: btou,
          decode: decode,
          noConflict: noConflict,
          __buffer__: buffer
        };
        if ("function" === typeof Object.defineProperty) {
          var noEnum = function noEnum(v) {
            return {
              value: v,
              enumerable: false,
              writable: true,
              configurable: true
            };
          };
          global.Base64.extendString = function() {
            Object.defineProperty(String.prototype, "fromBase64", noEnum(function() {
              return decode(this);
            }));
            Object.defineProperty(String.prototype, "toBase64", noEnum(function(urisafe) {
              return encode(this, urisafe);
            }));
            Object.defineProperty(String.prototype, "toBase64URI", noEnum(function() {
              return encode(this, true);
            }));
          };
        }
        global["Meteor"] && (Base64 = global.Base64);
        "undefined" !== typeof module && module.exports ? module.exports.Base64 = global.Base64 : "function" === typeof define && define.amd && define([], function() {
          return global.Base64;
        });
        return {
          Base64: global.Base64
        };
      });
      cc._RF.pop();
    }).call(this, "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : "undefined" !== typeof window ? window : {});
  }, {} ],
  bytebuffer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eee97e9QpBJl5sl66XdbmS6", "bytebuffer");
    "use strict";
    (function(global, factory) {
      "function" === typeof define && define["amd"] ? define([ "long" ], factory) : "function" === typeof require && "object" === typeof module && module && module["exports"] ? module["exports"] = function() {
        var Long;
        try {
          Long = require("long");
        } catch (e) {}
        return factory(Long);
      }() : (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);
    })(void 0, function(Long) {
      "\n        \u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u662f\u5bf9 ArrayBuffer \u7684\u5c01\u88c5\n    ";
      var ByteBuffer = function ByteBuffer(capacity, littleEndian, noAssert) {
        "undefined" === typeof capacity && (capacity = ByteBuffer.DEFAULT_CAPACITY);
        "undefined" === typeof littleEndian && (littleEndian = ByteBuffer.DEFAULT_ENDIAN);
        "undefined" === typeof noAssert && (noAssert = ByteBuffer.DEFAULT_NOASSERT);
        if (!noAssert) {
          capacity |= 0;
          if (capacity < 0) throw RangeError("Illegal capacity");
          littleEndian = !!littleEndian;
          noAssert = !!noAssert;
        }
        this.buffer = 0 === capacity ? EMPTY_BUFFER : new ArrayBuffer(capacity);
        this.view = 0 === capacity ? null : new Uint8Array(this.buffer);
        this.offset = 0;
        this.markedOffset = -1;
        this.limit = capacity;
        this.littleEndian = littleEndian;
        this.noAssert = noAssert;
      };
      ByteBuffer.VERSION = "5.0.1";
      ByteBuffer.LITTLE_ENDIAN = true;
      ByteBuffer.BIG_ENDIAN = false;
      ByteBuffer.DEFAULT_CAPACITY = 16;
      ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.LITTLE_ENDIAN;
      ByteBuffer.DEFAULT_NOASSERT = false;
      ByteBuffer.Long = Long || null;
      var ByteBufferPrototype = ByteBuffer.prototype;
      ByteBufferPrototype.__isByteBuffer__;
      Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
        value: true,
        enumerable: false,
        configurable: false
      });
      var EMPTY_BUFFER = new ArrayBuffer(0);
      var stringFromCharCode = String.fromCharCode;
      function stringSource(s) {
        var i = 0;
        return function() {
          return i < s.length ? s.charCodeAt(i++) : null;
        };
      }
      function stringDestination() {
        var cs = [], ps = [];
        return function() {
          if (0 === arguments.length) return ps.join("") + stringFromCharCode.apply(String, cs);
          cs.length + arguments.length > 1024 && (ps.push(stringFromCharCode.apply(String, cs)), 
          cs.length = 0);
          Array.prototype.push.apply(cs, arguments);
        };
      }
      ByteBuffer.accessor = function() {
        return Uint8Array;
      };
      ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
        return new ByteBuffer(capacity, littleEndian, noAssert);
      };
      ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
        if ("boolean" === typeof encoding || "string" !== typeof encoding) {
          noAssert = littleEndian;
          littleEndian = encoding;
          encoding = void 0;
        }
        var capacity = 0;
        for (var _i = 0, _k = buffers.length, _length; _i < _k; ++_i) {
          ByteBuffer.isByteBuffer(buffers[_i]) || (buffers[_i] = ByteBuffer.wrap(buffers[_i], encoding));
          _length = buffers[_i].limit - buffers[_i].offset;
          _length > 0 && (capacity += _length);
        }
        if (0 === capacity) return new ByteBuffer(0, littleEndian, noAssert);
        var bb = new ByteBuffer(capacity, littleEndian, noAssert), bi;
        i = 0;
        while (i < k) {
          bi = buffers[i++];
          length = bi.limit - bi.offset;
          if (length <= 0) continue;
          bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
          bb.offset += length;
        }
        bb.limit = bb.offset;
        bb.offset = 0;
        return bb;
      };
      ByteBuffer.isByteBuffer = function(bb) {
        return true === (bb && bb["__isByteBuffer__"]);
      };
      ByteBuffer.type = function() {
        return ArrayBuffer;
      };
      ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
        if ("string" !== typeof encoding) {
          noAssert = littleEndian;
          littleEndian = encoding;
          encoding = void 0;
        }
        if ("string" === typeof buffer) {
          "undefined" === typeof encoding && (encoding = "utf8");
          switch (encoding) {
           case "base64":
            return ByteBuffer.fromBase64(buffer, littleEndian);

           case "hex":
            return ByteBuffer.fromHex(buffer, littleEndian);

           case "binary":
            return ByteBuffer.fromBinary(buffer, littleEndian);

           case "utf8":
            return ByteBuffer.fromUTF8(buffer, littleEndian);

           case "debug":
            return ByteBuffer.fromDebug(buffer, littleEndian);

           default:
            throw Error("Unsupported encoding: " + encoding);
          }
        }
        if (null === buffer || "object" !== typeof buffer) throw TypeError("Illegal buffer");
        var bb;
        if (ByteBuffer.isByteBuffer(buffer)) {
          bb = ByteBufferPrototype.clone.call(buffer);
          bb.markedOffset = -1;
          return bb;
        }
        if (buffer instanceof Uint8Array) {
          bb = new ByteBuffer(0, littleEndian, noAssert);
          if (buffer.length > 0) {
            bb.buffer = buffer.buffer;
            bb.offset = buffer.byteOffset;
            bb.limit = buffer.byteOffset + buffer.byteLength;
            bb.view = new Uint8Array(buffer.buffer);
          }
        } else if (buffer instanceof ArrayBuffer) {
          bb = new ByteBuffer(0, littleEndian, noAssert);
          if (buffer.byteLength > 0) {
            bb.buffer = buffer;
            bb.offset = 0;
            bb.limit = buffer.byteLength;
            bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
          }
        } else {
          if ("[object Array]" !== Object.prototype.toString.call(buffer)) throw TypeError("Illegal buffer");
          bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
          bb.limit = buffer.length;
          for (var _i2 = 0; _i2 < buffer.length; ++_i2) bb.view[_i2] = buffer[_i2];
        }
        return bb;
      };
      ByteBufferPrototype.writeBitSet = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if (!(value instanceof Array)) throw TypeError("Illegal BitSet: Not an array");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var start = offset, bits = value.length, bytes = bits >> 3, bit = 0, k;
        offset += this.writeVarint32(bits, offset);
        while (bytes--) {
          k = 1 & !!value[bit++] | (1 & !!value[bit++]) << 1 | (1 & !!value[bit++]) << 2 | (1 & !!value[bit++]) << 3 | (1 & !!value[bit++]) << 4 | (1 & !!value[bit++]) << 5 | (1 & !!value[bit++]) << 6 | (1 & !!value[bit++]) << 7;
          this.writeByte(k, offset++);
        }
        if (bit < bits) {
          var m = 0;
          k = 0;
          while (bit < bits) k |= (1 & !!value[bit++]) << m++;
          this.writeByte(k, offset++);
        }
        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };
      ByteBufferPrototype.readBitSet = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        var ret = this.readVarint32(offset), bits = ret.value, bytes = bits >> 3, bit = 0, value = [], k;
        offset += ret.length;
        while (bytes--) {
          k = this.readByte(offset++);
          value[bit++] = !!(1 & k);
          value[bit++] = !!(2 & k);
          value[bit++] = !!(4 & k);
          value[bit++] = !!(8 & k);
          value[bit++] = !!(16 & k);
          value[bit++] = !!(32 & k);
          value[bit++] = !!(64 & k);
          value[bit++] = !!(128 & k);
        }
        if (bit < bits) {
          var m = 0;
          k = this.readByte(offset++);
          while (bit < bits) value[bit++] = !!(k >> m++ & 1);
        }
        relative && (this.offset = offset);
        return value;
      };
      ByteBufferPrototype.readBytes = function(length, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + length > this.buffer.byteLength) {
            cc.log(offset, "offsetoffsetoffset");
            cc.log(length, "lengthlengthlengthlengthlength");
            cc.log(this.buffer.byteLength, "this.buffer.byteLengththis.buffer.byteLength");
            throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
          }
        }
        var slice = this.slice(offset, offset + length);
        relative && (this.offset += length);
        return slice;
      };
      ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;
      ByteBufferPrototype.writeInt8 = function(value, offset) {
        value || (value = 0);
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value |= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 1;
        var capacity0 = this.buffer.byteLength;
        offset > capacity0 && this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
        offset -= 1;
        this.view[offset] = value;
        relative && (this.offset += 1);
        return this;
      };
      ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;
      ByteBufferPrototype.readInt8 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
        }
        var value = this.view[offset];
        128 === (128 & value) && (value = -(255 - value + 1));
        relative && (this.offset += 1);
        return value;
      };
      ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;
      ByteBufferPrototype.writeUint8 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value >>>= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 1;
        var capacity1 = this.buffer.byteLength;
        offset > capacity1 && this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
        offset -= 1;
        this.view[offset] = value;
        relative && (this.offset += 1);
        return this;
      };
      ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;
      ByteBufferPrototype.readUint8 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
        }
        var value = this.view[offset];
        relative && (this.offset += 1);
        return value;
      };
      ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;
      ByteBufferPrototype.writeInt16 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value |= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 2;
        var capacity2 = this.buffer.byteLength;
        offset > capacity2 && this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
        offset -= 2;
        if (this.littleEndian) {
          this.view[offset + 1] = (65280 & value) >>> 8;
          this.view[offset] = 255 & value;
        } else {
          this.view[offset] = (65280 & value) >>> 8;
          this.view[offset + 1] = 255 & value;
        }
        relative && (this.offset += 2);
        return this;
      };
      ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;
      ByteBufferPrototype.readInt16 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+2) <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
          value = this.view[offset];
          value |= this.view[offset + 1] << 8;
        } else {
          value = this.view[offset] << 8;
          value |= this.view[offset + 1];
        }
        32768 === (32768 & value) && (value = -(65535 - value + 1));
        relative && (this.offset += 2);
        return value;
      };
      ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;
      ByteBufferPrototype.writeUint16 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value >>>= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 2;
        var capacity3 = this.buffer.byteLength;
        offset > capacity3 && this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
        offset -= 2;
        if (this.littleEndian) {
          this.view[offset + 1] = (65280 & value) >>> 8;
          this.view[offset] = 255 & value;
        } else {
          this.view[offset] = (65280 & value) >>> 8;
          this.view[offset + 1] = 255 & value;
        }
        relative && (this.offset += 2);
        return this;
      };
      ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;
      ByteBufferPrototype.readUint16 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+2) <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
          value = this.view[offset];
          value |= this.view[offset + 1] << 8;
        } else {
          value = this.view[offset] << 8;
          value |= this.view[offset + 1];
        }
        relative && (this.offset += 2);
        return value;
      };
      ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;
      ByteBufferPrototype.writeInt32 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value |= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity4 = this.buffer.byteLength;
        offset > capacity4 && this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
        offset -= 4;
        if (this.littleEndian) {
          this.view[offset + 3] = value >>> 24 & 255;
          this.view[offset + 2] = value >>> 16 & 255;
          this.view[offset + 1] = value >>> 8 & 255;
          this.view[offset] = 255 & value;
        } else {
          this.view[offset] = value >>> 24 & 255;
          this.view[offset + 1] = value >>> 16 & 255;
          this.view[offset + 2] = value >>> 8 & 255;
          this.view[offset + 3] = 255 & value;
        }
        relative && (this.offset += 4);
        return this;
      };
      ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;
      ByteBufferPrototype.readInt32 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+4) <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
          value = this.view[offset + 2] << 16;
          value |= this.view[offset + 1] << 8;
          value |= this.view[offset];
          value += this.view[offset + 3] << 24 >>> 0;
        } else {
          value = this.view[offset + 1] << 16;
          value |= this.view[offset + 2] << 8;
          value |= this.view[offset + 3];
          value += this.view[offset] << 24 >>> 0;
        }
        value |= 0;
        relative && (this.offset += 4);
        return value;
      };
      ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;
      ByteBufferPrototype.writeUint32 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value >>>= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity5 = this.buffer.byteLength;
        offset > capacity5 && this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
        offset -= 4;
        if (this.littleEndian) {
          this.view[offset + 3] = value >>> 24 & 255;
          this.view[offset + 2] = value >>> 16 & 255;
          this.view[offset + 1] = value >>> 8 & 255;
          this.view[offset] = 255 & value;
        } else {
          this.view[offset] = value >>> 24 & 255;
          this.view[offset + 1] = value >>> 16 & 255;
          this.view[offset + 2] = value >>> 8 & 255;
          this.view[offset + 3] = 255 & value;
        }
        relative && (this.offset += 4);
        return this;
      };
      ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;
      ByteBufferPrototype.readUint32 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+4) <= " + this.buffer.byteLength);
        }
        var value = 0;
        if (this.littleEndian) {
          value = this.view[offset + 2] << 16;
          value |= this.view[offset + 1] << 8;
          value |= this.view[offset];
          value += this.view[offset + 3] << 24 >>> 0;
        } else {
          value = this.view[offset + 1] << 16;
          value |= this.view[offset + 2] << 8;
          value |= this.view[offset + 3];
          value += this.view[offset] << 24 >>> 0;
        }
        relative && (this.offset += 4);
        return value;
      };
      ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;
      if (Long) {
        ByteBufferPrototype.writeInt64 = function(value, offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" === typeof value) value = Long.fromNumber(value); else if ("string" === typeof value) value = Long.fromString(value); else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
          }
          "number" === typeof value ? value = Long.fromNumber(value) : "string" === typeof value && (value = Long.fromString(value));
          offset += 8;
          var capacity6 = this.buffer.byteLength;
          offset > capacity6 && this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
          offset -= 8;
          var lo = value.low, hi = value.high;
          if (this.littleEndian) {
            this.view[offset + 3] = lo >>> 24 & 255;
            this.view[offset + 2] = lo >>> 16 & 255;
            this.view[offset + 1] = lo >>> 8 & 255;
            this.view[offset] = 255 & lo;
            offset += 4;
            this.view[offset + 3] = hi >>> 24 & 255;
            this.view[offset + 2] = hi >>> 16 & 255;
            this.view[offset + 1] = hi >>> 8 & 255;
            this.view[offset] = 255 & hi;
          } else {
            this.view[offset] = hi >>> 24 & 255;
            this.view[offset + 1] = hi >>> 16 & 255;
            this.view[offset + 2] = hi >>> 8 & 255;
            this.view[offset + 3] = 255 & hi;
            offset += 4;
            this.view[offset] = lo >>> 24 & 255;
            this.view[offset + 1] = lo >>> 16 & 255;
            this.view[offset + 2] = lo >>> 8 & 255;
            this.view[offset + 3] = 255 & lo;
          }
          relative && (this.offset += 8);
          return this;
        };
        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;
        ByteBufferPrototype.readInt64 = function(offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+8) <= " + this.buffer.byteLength);
          }
          var lo = 0, hi = 0;
          if (this.littleEndian) {
            lo = this.view[offset + 2] << 16;
            lo |= this.view[offset + 1] << 8;
            lo |= this.view[offset];
            lo += this.view[offset + 3] << 24 >>> 0;
            offset += 4;
            hi = this.view[offset + 2] << 16;
            hi |= this.view[offset + 1] << 8;
            hi |= this.view[offset];
            hi += this.view[offset + 3] << 24 >>> 0;
          } else {
            hi = this.view[offset + 1] << 16;
            hi |= this.view[offset + 2] << 8;
            hi |= this.view[offset + 3];
            hi += this.view[offset] << 24 >>> 0;
            offset += 4;
            lo = this.view[offset + 1] << 16;
            lo |= this.view[offset + 2] << 8;
            lo |= this.view[offset + 3];
            lo += this.view[offset] << 24 >>> 0;
          }
          var value = new Long(lo, hi, false);
          relative && (this.offset += 8);
          return value;
        };
        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;
        ByteBufferPrototype.writeUint64 = function(value, offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" === typeof value) value = Long.fromNumber(value); else if ("string" === typeof value) value = Long.fromString(value); else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
          }
          "number" === typeof value ? value = Long.fromNumber(value) : "string" === typeof value && (value = Long.fromString(value));
          offset += 8;
          var capacity7 = this.buffer.byteLength;
          offset > capacity7 && this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
          offset -= 8;
          var lo = value.low, hi = value.high;
          if (this.littleEndian) {
            this.view[offset + 3] = lo >>> 24 & 255;
            this.view[offset + 2] = lo >>> 16 & 255;
            this.view[offset + 1] = lo >>> 8 & 255;
            this.view[offset] = 255 & lo;
            offset += 4;
            this.view[offset + 3] = hi >>> 24 & 255;
            this.view[offset + 2] = hi >>> 16 & 255;
            this.view[offset + 1] = hi >>> 8 & 255;
            this.view[offset] = 255 & hi;
          } else {
            this.view[offset] = hi >>> 24 & 255;
            this.view[offset + 1] = hi >>> 16 & 255;
            this.view[offset + 2] = hi >>> 8 & 255;
            this.view[offset + 3] = 255 & hi;
            offset += 4;
            this.view[offset] = lo >>> 24 & 255;
            this.view[offset + 1] = lo >>> 16 & 255;
            this.view[offset + 2] = lo >>> 8 & 255;
            this.view[offset + 3] = 255 & lo;
          }
          relative && (this.offset += 8);
          return this;
        };
        ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;
        ByteBufferPrototype.readUint64 = function(offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+8) <= " + this.buffer.byteLength);
          }
          var lo = 0, hi = 0;
          if (this.littleEndian) {
            lo = this.view[offset + 2] << 16;
            lo |= this.view[offset + 1] << 8;
            lo |= this.view[offset];
            lo += this.view[offset + 3] << 24 >>> 0;
            offset += 4;
            hi = this.view[offset + 2] << 16;
            hi |= this.view[offset + 1] << 8;
            hi |= this.view[offset];
            hi += this.view[offset + 3] << 24 >>> 0;
          } else {
            hi = this.view[offset + 1] << 16;
            hi |= this.view[offset + 2] << 8;
            hi |= this.view[offset + 3];
            hi += this.view[offset] << 24 >>> 0;
            offset += 4;
            lo = this.view[offset + 1] << 16;
            lo |= this.view[offset + 2] << 8;
            lo |= this.view[offset + 3];
            lo += this.view[offset] << 24 >>> 0;
          }
          var value = new Long(lo, hi, true);
          relative && (this.offset += 8);
          return value;
        };
        ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;
      }
      function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
        var e, m, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (;nBits > 0; e = 256 * e + buffer[offset + i], i += d, nBits -= 8) ;
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (;nBits > 0; m = 256 * m + buffer[offset + i], i += d, nBits -= 8) ;
        if (0 === e) e = 1 - eBias; else {
          if (e === eMax) return m ? NaN : Infinity * (s ? -1 : 1);
          m += Math.pow(2, mLen);
          e -= eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      }
      function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c, eLen = 8 * nBytes - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = 23 === mLen ? Math.pow(2, -24) - Math.pow(2, -77) : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || 0 === value && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || Infinity === value) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          value += e + eBias >= 1 ? rt / c : rt * Math.pow(2, 1 - eBias);
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e += eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (;mLen >= 8; buffer[offset + i] = 255 & m, i += d, m /= 256, mLen -= 8) ;
        e = e << mLen | m;
        eLen += mLen;
        for (;eLen > 0; buffer[offset + i] = 255 & e, i += d, e /= 256, eLen -= 8) ;
        buffer[offset + i - d] |= 128 * s;
      }
      ByteBufferPrototype.writeFloat32 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value) throw TypeError("Illegal value: " + value + " (not a number)");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 4;
        var capacity8 = this.buffer.byteLength;
        offset > capacity8 && this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
        offset -= 4;
        ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
        relative && (this.offset += 4);
        return this;
      };
      ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;
      ByteBufferPrototype.readFloat32 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+4) <= " + this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
        relative && (this.offset += 4);
        return value;
      };
      ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;
      ByteBufferPrototype.writeFloat64 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value) throw TypeError("Illegal value: " + value + " (not a number)");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        offset += 8;
        var capacity9 = this.buffer.byteLength;
        offset > capacity9 && this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
        offset -= 8;
        ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
        relative && (this.offset += 8);
        return this;
      };
      ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;
      ByteBufferPrototype.readFloat64 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+8) <= " + this.buffer.byteLength);
        }
        var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
        relative && (this.offset += 8);
        return value;
      };
      ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;
      ByteBuffer.MAX_VARINT32_BYTES = 5;
      ByteBuffer.calculateVarint32 = function(value) {
        value >>>= 0;
        return value < 128 ? 1 : value < 16384 ? 2 : value < 1 << 21 ? 3 : value < 1 << 28 ? 4 : 5;
      };
      ByteBuffer.zigZagEncode32 = function(n) {
        return ((n |= 0) << 1 ^ n >> 31) >>> 0;
      };
      ByteBuffer.zigZagDecode32 = function(n) {
        return n >>> 1 ^ -(1 & n) | 0;
      };
      ByteBufferPrototype.writeVarint32 = function(value, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value |= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var size = ByteBuffer.calculateVarint32(value), b;
        offset += size;
        var capacity10 = this.buffer.byteLength;
        offset > capacity10 && this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
        offset -= size;
        value >>>= 0;
        while (value >= 128) {
          b = 127 & value | 128;
          this.view[offset++] = b;
          value >>>= 7;
        }
        this.view[offset++] = value;
        if (relative) {
          this.offset = offset;
          return this;
        }
        return size;
      };
      ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
      };
      ByteBufferPrototype.readVarint32 = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
        }
        var c = 0, value = 0, b;
        do {
          if (!this.noAssert && offset > this.limit) {
            var err = Error("Truncated");
            err["truncated"] = true;
            throw err;
          }
          b = this.view[offset++];
          c < 5 && (value |= (127 & b) << 7 * c);
          ++c;
        } while (0 !== (128 & b));
        value |= 0;
        if (relative) {
          this.offset = offset;
          return value;
        }
        return {
          value: value,
          length: c
        };
      };
      ByteBufferPrototype.readVarint32ZigZag = function(offset) {
        var val = this.readVarint32(offset);
        "object" === typeof val ? val["value"] = ByteBuffer.zigZagDecode32(val["value"]) : val = ByteBuffer.zigZagDecode32(val);
        return val;
      };
      if (Long) {
        ByteBuffer.MAX_VARINT64_BYTES = 10;
        ByteBuffer.calculateVarint64 = function(value) {
          "number" === typeof value ? value = Long.fromNumber(value) : "string" === typeof value && (value = Long.fromString(value));
          var part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
          return 0 == part2 ? 0 == part1 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 1 << 21 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 1 << 21 ? 7 : 8 : part2 < 128 ? 9 : 10;
        };
        ByteBuffer.zigZagEncode64 = function(value) {
          "number" === typeof value ? value = Long.fromNumber(value, false) : "string" === typeof value ? value = Long.fromString(value, false) : false !== value.unsigned && (value = value.toSigned());
          return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
        };
        ByteBuffer.zigZagDecode64 = function(value) {
          "number" === typeof value ? value = Long.fromNumber(value, false) : "string" === typeof value ? value = Long.fromString(value, false) : false !== value.unsigned && (value = value.toSigned());
          return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
        };
        ByteBufferPrototype.writeVarint64 = function(value, offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" === typeof value) value = Long.fromNumber(value); else if ("string" === typeof value) value = Long.fromString(value); else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
          }
          "number" === typeof value ? value = Long.fromNumber(value, false) : "string" === typeof value ? value = Long.fromString(value, false) : false !== value.unsigned && (value = value.toSigned());
          var size = ByteBuffer.calculateVarint64(value), part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
          offset += size;
          var capacity11 = this.buffer.byteLength;
          offset > capacity11 && this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
          offset -= size;
          switch (size) {
           case 10:
            this.view[offset + 9] = part2 >>> 7 & 1;

           case 9:
            this.view[offset + 8] = 9 !== size ? 128 | part2 : 127 & part2;

           case 8:
            this.view[offset + 7] = 8 !== size ? part1 >>> 21 | 128 : part1 >>> 21 & 127;

           case 7:
            this.view[offset + 6] = 7 !== size ? part1 >>> 14 | 128 : part1 >>> 14 & 127;

           case 6:
            this.view[offset + 5] = 6 !== size ? part1 >>> 7 | 128 : part1 >>> 7 & 127;

           case 5:
            this.view[offset + 4] = 5 !== size ? 128 | part1 : 127 & part1;

           case 4:
            this.view[offset + 3] = 4 !== size ? part0 >>> 21 | 128 : part0 >>> 21 & 127;

           case 3:
            this.view[offset + 2] = 3 !== size ? part0 >>> 14 | 128 : part0 >>> 14 & 127;

           case 2:
            this.view[offset + 1] = 2 !== size ? part0 >>> 7 | 128 : part0 >>> 7 & 127;

           case 1:
            this.view[offset] = 1 !== size ? 128 | part0 : 127 & part0;
          }
          if (relative) {
            this.offset += size;
            return this;
          }
          return size;
        };
        ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
          return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
        };
        ByteBufferPrototype.readVarint64 = function(offset) {
          var relative = "undefined" === typeof offset;
          relative && (offset = this.offset);
          if (!this.noAssert) {
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
          }
          var start = offset, part0 = 0, part1 = 0, part2 = 0, b = 0;
          b = this.view[offset++];
          part0 = 127 & b;
          if (128 & b) {
            b = this.view[offset++];
            part0 |= (127 & b) << 7;
            if (128 & b || this.noAssert && "undefined" === typeof b) {
              b = this.view[offset++];
              part0 |= (127 & b) << 14;
              if (128 & b || this.noAssert && "undefined" === typeof b) {
                b = this.view[offset++];
                part0 |= (127 & b) << 21;
                if (128 & b || this.noAssert && "undefined" === typeof b) {
                  b = this.view[offset++];
                  part1 = 127 & b;
                  if (128 & b || this.noAssert && "undefined" === typeof b) {
                    b = this.view[offset++];
                    part1 |= (127 & b) << 7;
                    if (128 & b || this.noAssert && "undefined" === typeof b) {
                      b = this.view[offset++];
                      part1 |= (127 & b) << 14;
                      if (128 & b || this.noAssert && "undefined" === typeof b) {
                        b = this.view[offset++];
                        part1 |= (127 & b) << 21;
                        if (128 & b || this.noAssert && "undefined" === typeof b) {
                          b = this.view[offset++];
                          part2 = 127 & b;
                          if (128 & b || this.noAssert && "undefined" === typeof b) {
                            b = this.view[offset++];
                            part2 |= (127 & b) << 7;
                            if (128 & b || this.noAssert && "undefined" === typeof b) throw Error("Buffer overrun");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          var value = Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, false);
          if (relative) {
            this.offset = offset;
            return value;
          }
          return {
            value: value,
            length: offset - start
          };
        };
        ByteBufferPrototype.readVarint64ZigZag = function(offset) {
          var val = this.readVarint64(offset);
          val && val["value"] instanceof Long ? val["value"] = ByteBuffer.zigZagDecode64(val["value"]) : val = ByteBuffer.zigZagDecode64(val);
          return val;
        };
      }
      ByteBufferPrototype.writeCString = function(str, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        var i, k = str.length;
        if (!this.noAssert) {
          if ("string" !== typeof str) throw TypeError("Illegal str: Not a string");
          for (i = 0; i < k; ++i) if (0 === str.charCodeAt(i)) throw RangeError("Illegal str: Contains NULL-characters");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k + 1;
        var capacity12 = this.buffer.byteLength;
        offset > capacity12 && this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
        offset -= k + 1;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
          this.view[offset++] = b;
        }.bind(this));
        this.view[offset++] = 0;
        if (relative) {
          this.offset = offset;
          return this;
        }
        return k;
      };
      ByteBufferPrototype.readCString = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
        }
        var start = offset, temp;
        var sd, b = -1;
        utfx.decodeUTF8toUTF16(function() {
          if (0 === b) return null;
          if (offset >= this.limit) throw RangeError("Illegal range: Truncated data, " + offset + " < " + this.limit);
          b = this.view[offset++];
          return 0 === b ? null : b;
        }.bind(this), sd = stringDestination(), true);
        if (relative) {
          this.offset = offset;
          return sd();
        }
        return {
          string: sd(),
          length: offset - start
        };
      };
      ByteBufferPrototype.writeIString = function(str, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("string" !== typeof str) throw TypeError("Illegal str: Not a string");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var start = offset, k;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        offset += 4 + k;
        var capacity13 = this.buffer.byteLength;
        offset > capacity13 && this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
        offset -= 4 + k;
        if (this.littleEndian) {
          this.view[offset + 3] = k >>> 24 & 255;
          this.view[offset + 2] = k >>> 16 & 255;
          this.view[offset + 1] = k >>> 8 & 255;
          this.view[offset] = 255 & k;
        } else {
          this.view[offset] = k >>> 24 & 255;
          this.view[offset + 1] = k >>> 16 & 255;
          this.view[offset + 2] = k >>> 8 & 255;
          this.view[offset + 3] = 255 & k;
        }
        offset += 4;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
          this.view[offset++] = b;
        }.bind(this));
        if (offset !== start + 4 + k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + 4 + k));
        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };
      ByteBufferPrototype.readIString = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+4) <= " + this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readUint32(offset);
        var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
        offset += str["length"];
        if (relative) {
          this.offset = offset;
          return str["string"];
        }
        return {
          string: str["string"],
          length: offset - start
        };
      };
      ByteBuffer.METRICS_CHARS = "c";
      ByteBuffer.METRICS_BYTES = "b";
      ByteBufferPrototype.writeUTF8String = function(str, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var k;
        var start = offset;
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k;
        var capacity14 = this.buffer.byteLength;
        offset > capacity14 && this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
        offset -= k;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
          this.view[offset++] = b;
        }.bind(this));
        var uint8array = new TextEncoder("gbk", {
          NONSTANDARD_allowLegacyEncoding: false
        }).encode(str);
        var blob = new Blob([ uint8array ], {
          type: "text/plain"
        });
        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };
      ByteBufferPrototype.writeGBKString = function(str, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var k;
        var start = offset;
        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
        offset += k;
        var capacity14 = this.buffer.byteLength;
        offset > capacity14 && this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
        offset -= k;
        var uint8array = new TextEncoder("gbk", {
          NONSTANDARD_allowLegacyEncoding: true
        }).encode(str);
        this.view.set(uint8array, offset);
        offset += uint8array.byteLength;
        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };
      ByteBufferPrototype.writeString = ByteBufferPrototype.writeGBKString;
      ByteBuffer.calculateUTF8Chars = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[0];
      };
      ByteBuffer.calculateUTF8Bytes = function(str) {
        return utfx.calculateUTF16asUTF8(stringSource(str))[1];
      };
      ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;
      ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
        if ("number" === typeof metrics) {
          offset = metrics;
          metrics = void 0;
        }
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        "undefined" === typeof metrics && (metrics = ByteBuffer.METRICS_CHARS);
        if (!this.noAssert) {
          if ("number" !== typeof length || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
          length |= 0;
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var i = 0, start = offset, sd;
        if (metrics === ByteBuffer.METRICS_CHARS) {
          sd = stringDestination();
          utfx.decodeUTF8(function() {
            return i < length && offset < this.limit ? this.view[offset++] : null;
          }.bind(this), function(cp) {
            ++i;
            utfx.UTF8toUTF16(cp, sd);
          });
          if (i !== length) throw RangeError("Illegal range: Truncated data, " + i + " == " + length);
          if (relative) {
            this.offset = offset;
            return sd();
          }
          return {
            string: sd(),
            length: offset - start
          };
        }
        if (metrics === ByteBuffer.METRICS_BYTES) {
          if (!this.noAssert) {
            if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
          }
          var k = offset + length;
          utfx.decodeUTF8toUTF16(function() {
            return offset < k ? this.view[offset++] : null;
          }.bind(this), sd = stringDestination(), this.noAssert);
          if (offset !== k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + k);
          if (relative) {
            this.offset = offset;
            return sd();
          }
          return {
            string: sd(),
            length: offset - start
          };
        }
        throw TypeError("Unsupported metrics: " + metrics);
      };
      ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;
      ByteBufferPrototype.writeVString = function(str, offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("string" !== typeof str) throw TypeError("Illegal str: Not a string");
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        var start = offset, k, l;
        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
        l = ByteBuffer.calculateVarint32(k);
        offset += l + k;
        var capacity15 = this.buffer.byteLength;
        offset > capacity15 && this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
        offset -= l + k;
        offset += this.writeVarint32(k, offset);
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
          this.view[offset++] = b;
        }.bind(this));
        if (offset !== start + k + l) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + k + l));
        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };
      ByteBufferPrototype.readVString = function(offset) {
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+1) <= " + this.buffer.byteLength);
        }
        var start = offset;
        var len = this.readVarint32(offset);
        var str = this.readUTF8String(len["value"], ByteBuffer.METRICS_BYTES, offset += len["length"]);
        offset += str["length"];
        if (relative) {
          this.offset = offset;
          return str["string"];
        }
        return {
          string: str["string"],
          length: offset - start
        };
      };
      ByteBufferPrototype.append = function(source, encoding, offset) {
        if ("number" === typeof encoding || "string" !== typeof encoding) {
          offset = encoding;
          encoding = void 0;
        }
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        source instanceof ByteBuffer || (source = ByteBuffer.wrap(source, encoding));
        var length = source.limit - source.offset;
        if (length <= 0) return this;
        offset += length;
        var capacity16 = this.buffer.byteLength;
        offset > capacity16 && this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
        offset -= length;
        this.view.set(source.view.subarray(source.offset, source.limit), offset);
        source.offset += length;
        relative && (this.offset += length);
        return this;
      };
      ByteBufferPrototype.appendTo = function(target, offset) {
        target.append(this, offset);
        return this;
      };
      ByteBufferPrototype.assert = function(assert) {
        this.noAssert = !assert;
        return this;
      };
      ByteBufferPrototype.capacity = function() {
        return this.buffer.byteLength;
      };
      ByteBufferPrototype.clear = function() {
        this.offset = 0;
        this.limit = this.buffer.byteLength;
        this.markedOffset = -1;
        return this;
      };
      ByteBufferPrototype.clone = function(copy) {
        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
        if (copy) {
          bb.buffer = new ArrayBuffer(this.buffer.byteLength);
          bb.view = new Uint8Array(bb.buffer);
        } else {
          bb.buffer = this.buffer;
          bb.view = this.view;
        }
        bb.offset = this.offset;
        bb.markedOffset = this.markedOffset;
        bb.limit = this.limit;
        return bb;
      };
      ByteBufferPrototype.compact = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (0 === begin && end === this.buffer.byteLength) return this;
        var len = end - begin;
        if (0 === len) {
          this.buffer = EMPTY_BUFFER;
          this.view = null;
          this.markedOffset >= 0 && (this.markedOffset -= begin);
          this.offset = 0;
          this.limit = 0;
          return this;
        }
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        view.set(this.view.subarray(begin, end));
        this.buffer = buffer;
        this.view = view;
        this.markedOffset >= 0 && (this.markedOffset -= begin);
        this.offset = 0;
        this.limit = len;
        return this;
      };
      ByteBufferPrototype.copy = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin === end) return new ByteBuffer(0, this.littleEndian, this.noAssert);
        var capacity = end - begin, bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
        bb.offset = 0;
        bb.limit = capacity;
        bb.markedOffset >= 0 && (bb.markedOffset -= begin);
        this.copyTo(bb, 0, begin, end);
        return bb;
      };
      ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
        var relative, targetRelative;
        if (!this.noAssert && !ByteBuffer.isByteBuffer(target)) throw TypeError("Illegal target: Not a ByteBuffer");
        targetOffset = (targetRelative = "undefined" === typeof targetOffset) ? target.offset : 0 | targetOffset;
        sourceOffset = (relative = "undefined" === typeof sourceOffset) ? this.offset : 0 | sourceOffset;
        sourceLimit = "undefined" === typeof sourceLimit ? this.limit : 0 | sourceLimit;
        if (targetOffset < 0 || targetOffset > target.buffer.byteLength) throw RangeError("Illegal target range: 0 <= " + targetOffset + " <= " + target.buffer.byteLength);
        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength) throw RangeError("Illegal source range: 0 <= " + sourceOffset + " <= " + this.buffer.byteLength);
        var len = sourceLimit - sourceOffset;
        if (0 === len) return target;
        target.ensureCapacity(targetOffset + len);
        target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);
        relative && (this.offset += len);
        targetRelative && (target.offset += len);
        return this;
      };
      ByteBufferPrototype.ensureCapacity = function(capacity) {
        var current = this.buffer.byteLength;
        if (current < capacity) return this.resize((current *= 2) > capacity ? current : capacity);
        return this;
      };
      ByteBufferPrototype.fill = function(value, begin, end) {
        var relative = "undefined" === typeof begin;
        relative && (begin = this.offset);
        "string" === typeof value && value.length > 0 && (value = value.charCodeAt(0));
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof value || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
          value |= 0;
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin >= end) return this;
        while (begin < end) this.view[begin++] = value;
        relative && (this.offset = begin);
        return this;
      };
      ByteBufferPrototype.flip = function() {
        this.limit = this.offset;
        this.offset = 0;
        return this;
      };
      ByteBufferPrototype.mark = function(offset) {
        offset = "undefined" === typeof offset ? this.offset : offset;
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        this.markedOffset = offset;
        return this;
      };
      ByteBufferPrototype.order = function(littleEndian) {
        if (!this.noAssert && "boolean" !== typeof littleEndian) throw TypeError("Illegal littleEndian: Not a boolean");
        this.littleEndian = !!littleEndian;
        return this;
      };
      ByteBufferPrototype.LE = function(littleEndian) {
        this.littleEndian = "undefined" === typeof littleEndian || !!littleEndian;
        return this;
      };
      ByteBufferPrototype.BE = function(bigEndian) {
        this.littleEndian = "undefined" !== typeof bigEndian && !bigEndian;
        return this;
      };
      ByteBufferPrototype.prepend = function(source, encoding, offset) {
        if ("number" === typeof encoding || "string" !== typeof encoding) {
          offset = encoding;
          encoding = void 0;
        }
        var relative = "undefined" === typeof offset;
        relative && (offset = this.offset);
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+0) <= " + this.buffer.byteLength);
        }
        source instanceof ByteBuffer || (source = ByteBuffer.wrap(source, encoding));
        var len = source.limit - source.offset;
        if (len <= 0) return this;
        var diff = len - offset;
        if (diff > 0) {
          var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
          var view = new Uint8Array(buffer);
          view.set(this.view.subarray(offset, this.buffer.byteLength), len);
          this.buffer = buffer;
          this.view = view;
          this.offset += diff;
          this.markedOffset >= 0 && (this.markedOffset += diff);
          this.limit += diff;
          offset += diff;
        } else var arrayView = new Uint8Array(this.buffer);
        this.view.set(source.view.subarray(source.offset, source.limit), offset - len);
        source.offset = source.limit;
        relative && (this.offset -= len);
        return this;
      };
      ByteBufferPrototype.prependTo = function(target, offset) {
        target.prepend(this, offset);
        return this;
      };
      ByteBufferPrototype.printDebug = function(out) {
        "function" !== typeof out && (out = console.log.bind(console));
        out(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(true));
      };
      ByteBufferPrototype.remaining = function() {
        return this.limit - this.offset;
      };
      ByteBufferPrototype.reset = function() {
        if (this.markedOffset >= 0) {
          this.offset = this.markedOffset;
          this.markedOffset = -1;
        } else this.offset = 0;
        return this;
      };
      ByteBufferPrototype.resize = function(capacity) {
        if (!this.noAssert) {
          if ("number" !== typeof capacity || capacity % 1 !== 0) throw TypeError("Illegal capacity: " + capacity + " (not an integer)");
          capacity |= 0;
          if (capacity < 0) throw RangeError("Illegal capacity: 0 <= " + capacity);
        }
        if (this.buffer.byteLength < capacity) {
          var buffer = new ArrayBuffer(capacity);
          var view = new Uint8Array(buffer);
          view.set(this.view);
          this.buffer = buffer;
          this.view = view;
        }
        return this;
      };
      ByteBufferPrototype.reverse = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        if (begin === end) return this;
        Array.prototype.reverse.call(this.view.subarray(begin, end));
        return this;
      };
      ByteBufferPrototype.skip = function(length) {
        if (!this.noAssert) {
          if ("number" !== typeof length || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
          length |= 0;
        }
        var offset = this.offset + length;
        if (!this.noAssert && (offset < 0 || offset > this.buffer.byteLength)) throw RangeError("Illegal length: 0 <= " + this.offset + " + " + length + " <= " + this.buffer.byteLength);
        this.offset = offset;
        return this;
      };
      ByteBufferPrototype.slice = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var bb = this.clone();
        bb.offset = begin;
        bb.limit = end;
        return bb;
      };
      ByteBufferPrototype.toBuffer = function(forceCopy) {
        var offset = this.offset, limit = this.limit;
        if (!this.noAssert) {
          if ("number" !== typeof offset || offset % 1 !== 0) throw TypeError("Illegal offset: Not an integer");
          offset >>>= 0;
          if ("number" !== typeof limit || limit % 1 !== 0) throw TypeError("Illegal limit: Not an integer");
          limit >>>= 0;
          if (offset < 0 || offset > limit || limit > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + offset + " <= " + limit + " <= " + this.buffer.byteLength);
        }
        if (!forceCopy && 0 === offset && limit === this.buffer.byteLength) return this.buffer;
        if (offset === limit) return EMPTY_BUFFER;
        var buffer = new ArrayBuffer(limit - offset);
        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
        return buffer;
      };
      ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;
      ByteBufferPrototype.toString = function(encoding, begin, end) {
        if ("undefined" === typeof encoding) return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
        "number" === typeof encoding && (encoding = "utf8", begin = encoding, end = begin);
        switch (encoding) {
         case "utf8":
          return this.toUTF8(begin, end);

         case "base64":
          return this.toBase64(begin, end);

         case "hex":
          return this.toHex(begin, end);

         case "binary":
          return this.toBinary(begin, end);

         case "debug":
          return this.toDebug();

         case "columns":
          return this.toColumns();

         default:
          throw Error("Unsupported encoding: " + encoding);
        }
      };
      var lxiv = function() {
        var lxiv = {};
        var aout = [ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 ];
        var ain = [];
        for (var _i3 = 0, _k2 = aout.length; _i3 < _k2; ++_i3) ain[aout[_i3]] = _i3;
        lxiv.encode = function(src, dst) {
          var b, t;
          while (null !== (b = src())) {
            dst(aout[b >> 2 & 63]);
            t = (3 & b) << 4;
            if (null !== (b = src())) {
              t |= b >> 4 & 15;
              dst(aout[63 & (t | b >> 4 & 15)]);
              t = (15 & b) << 2;
              null !== (b = src()) ? (dst(aout[63 & (t | b >> 6 & 3)]), dst(aout[63 & b])) : (dst(aout[63 & t]), 
              dst(61));
            } else dst(aout[63 & t]), dst(61), dst(61);
          }
        };
        lxiv.decode = function(src, dst) {
          var c, t1, t2;
          function fail(c) {
            throw Error("Illegal character code: " + c);
          }
          while (null !== (c = src())) {
            t1 = ain[c];
            "undefined" === typeof t1 && fail(c);
            if (null !== (c = src())) {
              t2 = ain[c];
              "undefined" === typeof t2 && fail(c);
              dst(t1 << 2 >>> 0 | (48 & t2) >> 4);
              if (null !== (c = src())) {
                t1 = ain[c];
                if ("undefined" === typeof t1) {
                  if (61 === c) break;
                  fail(c);
                }
                dst((15 & t2) << 4 >>> 0 | (60 & t1) >> 2);
                if (null !== (c = src())) {
                  t2 = ain[c];
                  if ("undefined" === typeof t2) {
                    if (61 === c) break;
                    fail(c);
                  }
                  dst((3 & t1) << 6 >>> 0 | t2);
                }
              }
            }
          }
        };
        lxiv.test = function(str) {
          return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
        };
        return lxiv;
      }();
      ByteBufferPrototype.toBase64 = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        begin |= 0;
        end |= 0;
        if (begin < 0 || end > this.capacity || begin > end) throw RangeError("begin, end");
        var sd;
        lxiv.encode(function() {
          return begin < end ? this.view[begin++] : null;
        }.bind(this), sd = stringDestination());
        return sd();
      };
      ByteBuffer.fromBase64 = function(str, littleEndian) {
        if ("string" !== typeof str) throw TypeError("str");
        var bb = new ByteBuffer(str.length / 4 * 3, littleEndian), i = 0;
        lxiv.decode(stringSource(str), function(b) {
          bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
      };
      ByteBuffer.btoa = function(str) {
        return ByteBuffer.fromBinary(str).toBase64();
      };
      ByteBuffer.atob = function(b64) {
        return ByteBuffer.fromBase64(b64).toBinary();
      };
      ByteBufferPrototype.toBinary = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        begin |= 0;
        end |= 0;
        if (begin < 0 || end > this.capacity() || begin > end) throw RangeError("begin, end");
        if (begin === end) return "";
        var chars = [], parts = [];
        while (begin < end) {
          chars.push(this.view[begin++]);
          chars.length >= 1024 && (parts.push(String.fromCharCode.apply(String, chars)), chars = []);
        }
        return parts.join("") + String.fromCharCode.apply(String, chars);
      };
      ByteBuffer.fromBinary = function(str, littleEndian) {
        if ("string" !== typeof str) throw TypeError("str");
        var i = 0, k = str.length, charCode, bb = new ByteBuffer(k, littleEndian);
        while (i < k) {
          charCode = str.charCodeAt(i);
          if (charCode > 255) throw RangeError("illegal char code: " + charCode);
          bb.view[i++] = charCode;
        }
        bb.limit = k;
        return bb;
      };
      ByteBufferPrototype.toDebug = function(columns) {
        var i = -1, k = this.buffer.byteLength, b, hex = "", asc = "", out = "";
        while (i < k) {
          if (-1 !== i) {
            b = this.view[i];
            hex += b < 16 ? "0" + b.toString(16).toUpperCase() : b.toString(16).toUpperCase();
            columns && (asc += b > 32 && b < 127 ? String.fromCharCode(b) : ".");
          }
          ++i;
          if (columns && i > 0 && i % 16 === 0 && i !== k) {
            while (hex.length < 51) hex += " ";
            out += hex + asc + "\n";
            hex = asc = "";
          }
          i === this.offset && i === this.limit ? hex += i === this.markedOffset ? "!" : "|" : i === this.offset ? hex += i === this.markedOffset ? "[" : "<" : i === this.limit ? hex += i === this.markedOffset ? "]" : ">" : hex += i === this.markedOffset ? "'" : columns || 0 !== i && i !== k ? " " : "";
        }
        if (columns && " " !== hex) {
          while (hex.length < 51) hex += " ";
          out += hex + asc + "\n";
        }
        return columns ? out : hex;
      };
      ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
        var k = str.length, bb = new ByteBuffer((k + 1) / 3 | 0, littleEndian, noAssert);
        var i = 0, j = 0, ch, b, rs = false, ho = false, hm = false, hl = false, fail = false;
        while (i < k) {
          switch (ch = str.charAt(i++)) {
           case "!":
            if (!noAssert) {
              if (ho || hm || hl) {
                fail = true;
                break;
              }
              ho = hm = hl = true;
            }
            bb.offset = bb.markedOffset = bb.limit = j;
            rs = false;
            break;

           case "|":
            if (!noAssert) {
              if (ho || hl) {
                fail = true;
                break;
              }
              ho = hl = true;
            }
            bb.offset = bb.limit = j;
            rs = false;
            break;

           case "[":
            if (!noAssert) {
              if (ho || hm) {
                fail = true;
                break;
              }
              ho = hm = true;
            }
            bb.offset = bb.markedOffset = j;
            rs = false;
            break;

           case "<":
            if (!noAssert) {
              if (ho) {
                fail = true;
                break;
              }
              ho = true;
            }
            bb.offset = j;
            rs = false;
            break;

           case "]":
            if (!noAssert) {
              if (hl || hm) {
                fail = true;
                break;
              }
              hl = hm = true;
            }
            bb.limit = bb.markedOffset = j;
            rs = false;
            break;

           case ">":
            if (!noAssert) {
              if (hl) {
                fail = true;
                break;
              }
              hl = true;
            }
            bb.limit = j;
            rs = false;
            break;

           case "'":
            if (!noAssert) {
              if (hm) {
                fail = true;
                break;
              }
              hm = true;
            }
            bb.markedOffset = j;
            rs = false;
            break;

           case " ":
            rs = false;
            break;

           default:
            if (!noAssert && rs) {
              fail = true;
              break;
            }
            b = parseInt(ch + str.charAt(i++), 16);
            if (!noAssert && (isNaN(b) || b < 0 || b > 255)) throw TypeError("Illegal str: Not a debug encoded string");
            bb.view[j++] = b;
            rs = true;
          }
          if (fail) throw TypeError("Illegal str: Invalid symbol at " + i);
        }
        if (!noAssert) {
          if (!ho || !hl) throw TypeError("Illegal str: Missing offset or limit");
          if (j < bb.buffer.byteLength) throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + j + " < " + k);
        }
        return bb;
      };
      ByteBufferPrototype.toHex = function(begin, end) {
        begin = "undefined" === typeof begin ? this.offset : begin;
        end = "undefined" === typeof end ? this.limit : end;
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var out = new Array(end - begin), b;
        while (begin < end) {
          b = this.view[begin++];
          b < 16 ? out.push("0", b.toString(16)) : out.push(b.toString(16));
        }
        return out.join("");
      };
      ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
        if (!noAssert) {
          if ("string" !== typeof str) throw TypeError("Illegal str: Not a string");
          if (str.length % 2 !== 0) throw TypeError("Illegal str: Length not a multiple of 2");
        }
        var k = str.length, bb = new ByteBuffer(k / 2 | 0, littleEndian), b;
        for (var _i4 = 0, _j = 0; _i4 < k; _i4 += 2) {
          b = parseInt(str.substring(_i4, _i4 + 2), 16);
          if (!noAssert && (!isFinite(b) || b < 0 || b > 255)) throw TypeError("Illegal str: Contains non-hex characters");
          bb.view[_j++] = b;
        }
        bb.limit = j;
        return bb;
      };
      var utfx = function() {
        var utfx = {};
        utfx.MAX_CODEPOINT = 1114111;
        utfx.encodeUTF8 = function(src, dst) {
          var cp = null;
          "number" === typeof src && (cp = src, src = function src() {
            return null;
          });
          while (null !== cp || null !== (cp = src())) {
            cp < 128 ? dst(127 & cp) : cp < 2048 ? (dst(cp >> 6 & 31 | 192), dst(63 & cp | 128)) : cp < 65536 ? (dst(cp >> 12 & 15 | 224), 
            dst(cp >> 6 & 63 | 128), dst(63 & cp | 128)) : (dst(cp >> 18 & 7 | 240), dst(cp >> 12 & 63 | 128), 
            dst(cp >> 6 & 63 | 128), dst(63 & cp | 128));
            cp = null;
          }
        };
        utfx.decodeUTF8 = function(src, dst) {
          var a, b, c, d, fail = function fail(b) {
            b = b.slice(0, b.indexOf(null));
            var err = Error(b.toString());
            err.name = "TruncatedError";
            err["bytes"] = b;
            throw err;
          };
          while (null !== (a = src())) if (0 === (128 & a)) dst(a); else if (192 === (224 & a)) null === (b = src()) && fail([ a, b ]), 
          dst((31 & a) << 6 | 63 & b); else if (224 === (240 & a)) (null === (b = src()) || null === (c = src())) && fail([ a, b, c ]), 
          dst((15 & a) << 12 | (63 & b) << 6 | 63 & c); else {
            if (240 !== (248 & a)) throw RangeError("Illegal starting byte: " + a);
            (null === (b = src()) || null === (c = src()) || null === (d = src())) && fail([ a, b, c, d ]), 
            dst((7 & a) << 18 | (63 & b) << 12 | (63 & c) << 6 | 63 & d);
          }
        };
        utfx.UTF16toUTF8 = function(src, dst) {
          var c1, c2 = null;
          while (true) {
            if (null === (c1 = null !== c2 ? c2 : src())) break;
            if (c1 >= 55296 && c1 <= 57343 && null !== (c2 = src()) && c2 >= 56320 && c2 <= 57343) {
              dst(1024 * (c1 - 55296) + c2 - 56320 + 65536);
              c2 = null;
              continue;
            }
            dst(c1);
          }
          null !== c2 && dst(c2);
        };
        utfx.UTF8toUTF16 = function(src, dst) {
          var cp = null;
          "number" === typeof src && (cp = src, src = function src() {
            return null;
          });
          while (null !== cp || null !== (cp = src())) {
            cp <= 65535 ? dst(cp) : (cp -= 65536, dst(55296 + (cp >> 10)), dst(cp % 1024 + 56320));
            cp = null;
          }
        };
        utfx.encodeUTF16toUTF8 = function(src, dst) {
          utfx.UTF16toUTF8(src, function(cp) {
            utfx.encodeUTF8(cp, dst);
          });
        };
        utfx.decodeUTF8toUTF16 = function(src, dst) {
          utfx.decodeUTF8(src, function(cp) {
            utfx.UTF8toUTF16(cp, dst);
          });
        };
        utfx.calculateCodePoint = function(cp) {
          return cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
        };
        utfx.calculateUTF8 = function(src) {
          var cp, l = 0;
          while (null !== (cp = src())) l += cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
          return l;
        };
        utfx.calculateUTF16asUTF8 = function(src) {
          var n = 0, l = 0;
          utfx.UTF16toUTF8(src, function(cp) {
            ++n;
            l += cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
          });
          return [ n, l ];
        };
        return utfx;
      }();
      ByteBufferPrototype.toUTF8 = function(begin, end) {
        "undefined" === typeof begin && (begin = this.offset);
        "undefined" === typeof end && (end = this.limit);
        if (!this.noAssert) {
          if ("number" !== typeof begin || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
          begin >>>= 0;
          if ("number" !== typeof end || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
          end >>>= 0;
          if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
        }
        var sd;
        try {
          utfx.decodeUTF8toUTF16(function() {
            return begin < end ? this.view[begin++] : null;
          }.bind(this), sd = stringDestination());
        } catch (e) {
          if (begin !== end) throw RangeError("Illegal range: Truncated data, " + begin + " != " + end);
        }
        return sd();
      };
      ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
        if (!noAssert && "string" !== typeof str) throw TypeError("Illegal str: Not a string");
        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert), i = 0;
        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
          bb.view[i++] = b;
        });
        bb.limit = i;
        return bb;
      };
      return ByteBuffer;
    });
    cc._RF.pop();
  }, {
    long: "long"
  } ],
  item_deal_ting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4a9b5FWnRxEr5SKF3vDsgmD", "item_deal_ting");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        headerNode: cc.Sprite,
        moneyLabel: cc.Label,
        nickNameLabel: cc.Label,
        rankingLabel: cc.Label
      },
      setData: function setData(data) {
        var _this = this;
        cc.log(data, "zhuangitemdata");
        if ("" != data.name) {
          this.nickNameLabel.string = data.name;
          if (data.userID && data.headURL) {
            var onGetHeadRes = function onGetHeadRes(avataRes) {
              _this.headerNode && cc.isValid(_this.headerNode) && (_this.headerNode.spriteFrame = avataRes);
            };
            AvatarManager.requestHeadRes(data.headURL, data.userID, onGetHeadRes);
          }
        } else {
          cc.log(data, "\u51c6\u5907\u8bf7\u6c42\u73a9\u5bb6\u6570\u636e" + data.shangzhuangMoney);
          UserInfoManager.requestUserInfoByUserID(data.userID, function(userInfo) {
            if (_this.nickNameLabel) {
              _this.nickNameLabel.string = userInfo.name;
              if (data.userID && userInfo.headURL) {
                var _onGetHeadRes = function _onGetHeadRes(avataRes) {
                  _this.headerNode && cc.isValid(_this.headerNode) && (_this.headerNode.spriteFrame = avataRes);
                };
                AvatarManager.requestHeadRes(userInfo.headURL, data.userID, _onGetHeadRes);
              }
            }
          });
        }
        "undefined" != typeof data.shangzhuangMoney && this.moneyLabel.getComponent("mlabel").setString(data.shangzhuangMoney, true);
        data.ranking && (this.rankingLabel.string = data.ranking);
      }
    });
    cc._RF.pop();
  }, {} ],
  loading_node: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a2f34yGCFNzZMLmfOGDNd0", "loading_node");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        skeleton: sp.SkeletonData
      },
      onLoad: function onLoad() {
        cc.game.addPersistRootNode(this.node);
      },
      start: function start() {
        this.node.active = false;
        var ske_node = new cc.Node();
        var skeleton = ske_node.addComponent(sp.Skeleton);
        skeleton.skeletonData = this.skeleton;
        skeleton.isLoop = true;
        skeleton.animation = "animation";
        skeleton.premultipliedAlpha = false;
        this.node.addChild(ske_node);
        var isRootNode = cc.game.isPersistRootNode(this.node);
      }
    });
    cc._RF.pop();
  }, {} ],
  loadmyfile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0f96XImUVMyY5LWEGvhl7D", "loadmyfile");
    "use strict";
    require("GlobalConfig");
    window.GameSocket = new (require("GameSocket"))();
    window.CityListManager = new (require("CityListManager"))();
    window.GameManager = new (require("GameManager"))();
    window.GameBuyConfigManager = new (require("GameBuyConfigManager"))();
    window.MailManager = new (require("MailManager"))();
    window.NoticeManager = new (require("NoticeManager"))();
    window.AvatarManager = new (require("AvatarManager"))();
    window.LoginManager = new (require("LoginManager"))();
    window.InviteCodeManager = new (require("InviteCodeManager"))();
    window.ConfigDataManager = new (require("ConfigDataManager"))();
    window.FriendsGroupManager = new (require("FriendsGroupManager"))();
    window.GameRecordManager = new (require("GameRecordManager"))();
    window.RoomRecordManager = new (require("RoomRecordManager"))();
    window.RankManager = new (require("RankManager"))();
    window.ChatMessageManager = new (require("ChatMessageManager"))();
    window.NetConfig = require("NetConfig");
    window.LobbySocket = new (require("LobbySocket"))();
    window.ItemListManager = new (require("ItemListManager"))();
    window.ConfigManager = new (require("ConfigManager"))();
    window.FeedbackManager = new (require("FeedbackManager"))();
    window.DataNotify = new (require("DataNotify"))();
    window.MYAudioEngine = new (require("MYAudioEngine"))();
    window.MatchManager = new (require("MatchManager"))();
    cc._RF.pop();
  }, {
    AvatarManager: "AvatarManager",
    ChatMessageManager: "ChatMessageManager",
    CityListManager: "CityListManager",
    ConfigDataManager: "ConfigDataManager",
    ConfigManager: "ConfigManager",
    DataNotify: "DataNotify",
    FeedbackManager: "FeedbackManager",
    FriendsGroupManager: "FriendsGroupManager",
    GameBuyConfigManager: "GameBuyConfigManager",
    GameManager: "GameManager",
    GameRecordManager: "GameRecordManager",
    GameSocket: "GameSocket",
    GlobalConfig: "GlobalConfig",
    InviteCodeManager: "InviteCodeManager",
    ItemListManager: "ItemListManager",
    LobbySocket: "LobbySocket",
    LoginManager: "LoginManager",
    MYAudioEngine: "MYAudioEngine",
    MailManager: "MailManager",
    MatchManager: "MatchManager",
    NetConfig: "NetConfig",
    NoticeManager: "NoticeManager",
    RankManager: "RankManager",
    RoomRecordManager: "RoomRecordManager"
  } ],
  long: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e43bIyfSdNk5198LLpp8IS", "long");
    "use strict";
    (function(global, factory) {
      "function" === typeof define && define["amd"] ? define([], factory) : "function" === typeof require && "object" === typeof module && module && module["exports"] ? module["exports"] = factory() : (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();
    })(void 0, function() {
      function Long(low, high, unsigned) {
        this.low = 0 | low;
        this.high = 0 | high;
        this.unsigned = !!unsigned;
      }
      Long.prototype.__isLong__;
      Object.defineProperty(Long.prototype, "__isLong__", {
        value: true,
        enumerable: false,
        configurable: false
      });
      function isLong(obj) {
        return true === (obj && obj["__isLong__"]);
      }
      Long.isLong = isLong;
      var INT_CACHE = {};
      var UINT_CACHE = {};
      function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj) return cachedObj;
          }
          obj = fromBits(value, (0 | value) < 0 ? -1 : 0, true);
          cache && (UINT_CACHE[value] = obj);
          return obj;
        }
        value |= 0;
        if (cache = -128 <= value && value < 128) {
          cachedObj = INT_CACHE[value];
          if (cachedObj) return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        cache && (INT_CACHE[value] = obj);
        return obj;
      }
      Long.fromInt = fromInt;
      function fromNumber(value, unsigned) {
        if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;
        if (unsigned) {
          if (value < 0) return UZERO;
          if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
        }
        if (value < 0) return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      Long.fromNumber = fromNumber;
      function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
      }
      Long.fromBits = fromBits;
      var pow_dbl = Math.pow;
      function fromString(str, unsigned, radix) {
        if (0 === str.length) throw Error("empty string");
        if ("NaN" === str || "Infinity" === str || "+Infinity" === str || "-Infinity" === str) return ZERO;
        "number" === typeof unsigned ? (radix = unsigned, unsigned = false) : unsigned = !!unsigned;
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0) throw Error("interior hyphen");
        if (0 === p) return fromString(str.substring(1), unsigned, radix).neg();
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
          var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      }
      Long.fromString = fromString;
      function fromValue(val) {
        if (val instanceof Long) return val;
        if ("number" === typeof val) return fromNumber(val);
        if ("string" === typeof val) return fromString(val);
        return fromBits(val.low, val.high, val.unsigned);
      }
      Long.fromValue = fromValue;
      var TWO_PWR_16_DBL = 65536;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
      var ZERO = fromInt(0);
      Long.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long.UZERO = UZERO;
      var ONE = fromInt(1);
      Long.ONE = ONE;
      var UONE = fromInt(1, true);
      Long.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(-1, 2147483647, false);
      Long.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
      Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, -2147483648, false);
      Long.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long.prototype;
      LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function toNumber() {
        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError("radix");
        if (this.isZero()) return "0";
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          }
          return "-" + this.neg().toString(radix);
        }
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero()) return digits + result;
          while (digits.length < 6) digits = "0" + digits;
          result = "" + digits + result;
        }
      };
      LongPrototype.getHighBits = function getHighBits() {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function getLowBits() {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = 0 != this.high ? this.high : this.low;
        for (var _bit = 31; _bit > 0; _bit--) if (0 != (val & 1 << _bit)) break;
        return 0 != this.high ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function isZero() {
        return 0 === this.high && 0 === this.low;
      };
      LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function isOdd() {
        return 1 === (1 & this.low);
      };
      LongPrototype.isEven = function isEven() {
        return 0 === (1 & this.low);
      };
      LongPrototype.equals = function equals(other) {
        isLong(other) || (other = fromValue(other));
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
        return this.high === other.high && this.low === other.low;
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(other);
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.lessThan = function lessThan(other) {
        return this.comp(other) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(other) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(other) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(other) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function compare(other) {
        isLong(other) || (other = fromValue(other));
        if (this.eq(other)) return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) return -1;
        if (!thisNeg && otherNeg) return 1;
        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
        return this.not().add(ONE);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function add(addend) {
        isLong(addend) || (addend = fromValue(addend));
        var a48 = this.high >>> 16;
        var a32 = 65535 & this.high;
        var a16 = this.low >>> 16;
        var a00 = 65535 & this.low;
        var b48 = addend.high >>> 16;
        var b32 = 65535 & addend.high;
        var b16 = addend.low >>> 16;
        var b00 = 65535 & addend.low;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.subtract = function subtract(subtrahend) {
        isLong(subtrahend) || (subtrahend = fromValue(subtrahend));
        return this.add(subtrahend.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero()) return ZERO;
        isLong(multiplier) || (multiplier = fromValue(multiplier));
        if (multiplier.isZero()) return ZERO;
        if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) return multiplier.isNegative() ? this.neg().mul(multiplier.neg()) : this.neg().mul(multiplier).neg();
        if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = 65535 & this.high;
        var a16 = this.low >>> 16;
        var a00 = 65535 & this.low;
        var b48 = multiplier.high >>> 16;
        var b32 = 65535 & multiplier.high;
        var b16 = multiplier.low >>> 16;
        var b00 = 65535 & multiplier.low;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function divide(divisor) {
        isLong(divisor) || (divisor = fromValue(divisor));
        if (divisor.isZero()) throw Error("division by zero");
        if (this.isZero()) return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (this.unsigned) {
          divisor.unsigned || (divisor = divisor.toUnsigned());
          if (divisor.gt(this)) return UZERO;
          if (divisor.gt(this.shru(1))) return UONE;
          res = UZERO;
        } else {
          if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE;
            if (divisor.eq(MIN_VALUE)) return ONE;
            var halfThis = this.shr(1);
            approx = halfThis.div(divisor).shl(1);
            if (approx.eq(ZERO)) return divisor.isNegative() ? ONE : NEG_ONE;
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
          }
          if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative()) return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          }
          if (divisor.isNegative()) return this.div(divisor.neg()).neg();
          res = ZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          approxRes.isZero() && (approxRes = ONE);
          res = res.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function modulo(divisor) {
        isLong(divisor) || (divisor = fromValue(divisor));
        return this.sub(this.div(divisor).mul(divisor));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.and = function and(other) {
        isLong(other) || (other = fromValue(other));
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function or(other) {
        isLong(other) || (other = fromValue(other));
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function xor(other) {
        isLong(other) || (other = fromValue(other));
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
        isLong(numBits) && (numBits = numBits.toInt());
        return 0 === (numBits &= 63) ? this : numBits < 32 ? fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned) : fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function shiftRight(numBits) {
        isLong(numBits) && (numBits = numBits.toInt());
        return 0 === (numBits &= 63) ? this : numBits < 32 ? fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned) : fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        isLong(numBits) && (numBits = numBits.toInt());
        numBits &= 63;
        if (0 === numBits) return this;
        var high = this.high;
        if (numBits < 32) {
          var low = this.low;
          return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        }
        return fromBits(32 === numBits ? high : high >>> numBits - 32, 0, this.unsigned);
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned) return this;
        return fromBits(this.low, this.high, false);
      };
      LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned) return this;
        return fromBits(this.low, this.high, true);
      };
      return Long;
    });
    cc._RF.pop();
  }, {} ],
  mlabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77fb4rXBSFEn5WnHaeWqwWR", "mlabel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        label: cc.Label,
        editBox: cc.EditBox
      },
      setString: function setString(str_num, atlas, noChange) {
        if ("undefined" == typeof str_num) {
          cc.error("\u6570\u5b57\u4e32\u4e3a\u7a7a");
          return;
        }
        if (true == noChange) {
          this.label && (this.label.string = str_num);
          this.editBox && (this.editBox.string = str_num);
        } else if (true == atlas) {
          this.label && (this.label.string = tools.toAtlasValue(str_num));
          this.editBox && (this.editBox.string = tools.toAtlasValue(str_num));
        } else if (false == atlas) {
          this.label && (this.label.string = str_num / G_MULTI_NUM);
          this.editBox && (this.editBox.string = str_num / G_MULTI_NUM);
        } else {
          this.label && (this.label.string = str_num);
          this.editBox && (this.editBox.string = str_num);
        }
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  personMsgDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c72c3xNVUxIt66t1l34ldq1", "personMsgDialog");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var TOGGLE_INDEX = {
      toggle1: 1,
      toggle2: 0
    };
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        PersonNode_Y: cc.Node,
        PersonNode_N: cc.Node,
        PersonLayout_Y: cc.Node,
        PersonLayout_N: cc.Node,
        nickEdit: cc.EditBox,
        toggleboy: cc.Toggle,
        togglegirt: cc.Toggle,
        labelID: cc.Label,
        imgHead: cc.Sprite,
        imgHead2: cc.Sprite,
        IphoneEdit: cc.EditBox,
        CodeEdit: cc.EditBox,
        adressEdit: cc.EditBox
      },
      onLoad: function onLoad() {
        this.PersonNode_Y.active = false;
        this.PersonNode_N.active = false;
      },
      onEnable: function onEnable() {
        cc.game.canvas.focus();
        GlobalEvent.instance.on("PLAYER_NICK_CHANGE", this.onNameChange, this);
        this.initUI(0);
      },
      onDisable: function onDisable() {
        GlobalEvent.instance.off("PLAYER_NICK_CHANGE", this.onNameChange, this);
      },
      onNameChange: function onNameChange(name) {},
      initUI: function initUI(idx) {
        this.LobbyLogic = new (require("LobbyLogic"))();
        var headerURL = this.LobbyLogic.getAvataUrl();
        var nickName = this.LobbyLogic.getNickName();
        var userID = this.LobbyLogic.getUserID();
        var Phone = this.LobbyLogic.getPhone();
        var goodsAddress = this.LobbyLogic.getGoodsAddress();
        var myInfo = this.LobbyLogic.getMyInfo();
        this.myInfo = myInfo;
        var isvisible = false;
        this.sex = myInfo.sex;
        "" == Phone && "" == goodsAddress && (isvisible = true);
        1 == idx && (isvisible = true);
        if (isvisible) {
          0 == idx && (this.PersonNode_N.active = true);
          var onGetHeadRes = function(avataRes) {
            this.imgHead2 && cc.isValid(this.imgHead2) && (this.imgHead2.spriteFrame = avataRes);
          }.bind(this);
          AvatarManager.requestHeadRes(headerURL, userID, onGetHeadRes, null);
          1 == myInfo.sex ? this.toggleboy.getComponent(cc.Toggle).check() : this.togglegirt.getComponent(cc.Toggle).check();
          this.nickEdit.string = unescape(nickName);
          this.labelID.string = "" + userID;
          this.IphoneEdit.string = Phone + "";
          this.CodeEdit.string = "";
          this.adressEdit.string = goodsAddress + "";
        } else {
          0 == idx && (this.PersonNode_Y.active = true);
          var _onGetHeadRes = function(avataRes) {
            this.imgHead && cc.isValid(this.imgHead) && (this.imgHead.spriteFrame = avataRes);
          }.bind(this);
          AvatarManager.requestHeadRes(headerURL, userID, _onGetHeadRes, null);
          var lab_Sex = this.PersonLayout_Y.getChildByName("img_sex").getChildByName("lab_Sex");
          lab_Sex.getComponent(cc.Label).string = 1 == myInfo.sex ? "\u7537" : "\u5973";
          var lab_Name = this.PersonLayout_Y.getChildByName("img_Name").getChildByName("lab_Name");
          lab_Name.getComponent(cc.Label).string = nickName + "";
          var lab_ID = this.PersonLayout_Y.getChildByName("img_ID").getChildByName("lab_ID");
          lab_ID.getComponent(cc.Label).string = userID + "";
          var lab_iphone = this.PersonLayout_Y.getChildByName("img_iphone").getChildByName("lab_iphone");
          lab_iphone.getComponent(cc.Label).string = Phone + "";
          var lab_address = this.PersonLayout_Y.getChildByName("img_address").getChildByName("lab_address");
          lab_address.getComponent(cc.Label).string = goodsAddress + "";
        }
      },
      doButton_ChangeClick: function doButton_ChangeClick() {
        this.PersonNode_Y.active = false;
        this.PersonNode_N.active = true;
        this.initUI(1);
      },
      onBtnCopyID: function onBtnCopyID() {
        if (this.labelID) {
          var userID = this.LobbyLogic.getUserID();
          var IDStr = userID;
          IDStr && tools.copyTextFun(IDStr) ? createTips("\u590d\u5236\u6210\u529f:" + IDStr) : createTips("\u590d\u5236\u5931\u8d25\uff01");
        }
      },
      onSexXiuGai: function onSexXiuGai(toggle) {
        this.sex = TOGGLE_INDEX[toggle.node.name];
      },
      doButton_Code: function doButton_Code() {
        this.requestbCode(this.IphoneEdit);
      },
      requestbCode: function requestbCode(phone) {
        cc.log(phone.string);
        var phonestr = phone.string;
        if (11 != phonestr.length || "" == phonestr) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7");
          return;
        }
        var actionName = "bindPhoneCode";
        var fCallback = function fCallback(isNow) {
          cc.log("\u8bf7\u6c42" + actionName + "\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          0 == jsonData.status ? createTips("\u53d1\u9001\u6210\u529f") : createTips(jsonData.msg);
        }.bind(this);
        var args = {};
        args.url = NetConfig.getPHPUrl();
        args.url = "https://" + NetConfig.getPHP_IP() + "/api/v1/Phone/sendCode";
        args.params = {
          phone: phonestr,
          type: 0
        };
        args.sCallback = sCallback;
        args.fCallback = fCallback;
        args.responseType = cc.XMLHTTPREQUEST_RESPONSE_JSON;
        args.requestDesc = "\u53d1\u9001\u9a8c\u8bc1\u7801...";
        MyHttpRequest.doRequest(args);
      },
      doButton_PRIVE: function doButton_PRIVE() {
        createTips("\u656c\u8bf7\u671f\u5f85");
      },
      doButton_OK: function doButton_OK() {
        var _this = this;
        this.LobbyLogic = new (require("LobbyLogic"))();
        var newIphone = this.IphoneEdit.string;
        var newaddress = this.adressEdit.string;
        var CodeStr = this.CodeEdit.string;
        var newNick = this.nickEdit.string;
        if ("" == newNick) {
          createTips("\u8bf7\u8f93\u5165\u7528\u6237\u6635\u79f0");
          return;
        }
        if ("" == newIphone) {
          createTips("\u8bf7\u8f93\u516511\u4f4d\u624b\u673a\u53f7\u7801");
          return;
        }
        if ("" == CodeStr) {
          createTips("\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801");
          return;
        }
        if (6 != CodeStr.length) {
          createTips("\u8bf7\u8f93\u51656\u4f4d\u9a8c\u8bc1\u7801");
          return;
        }
        if ("" == newaddress) {
          createTips("\u8bf7\u8f93\u5165\u8be6\u7ec6\u6536\u8d27\u5730\u5740");
          return;
        }
        var callback = function callback() {
          createTips("\u4fdd\u5b58\u6210\u529f");
          LobbySocket.getMyInfo().sex = _this.sex;
          LobbySocket.getMyInfo().name = newNick;
          LobbySocket.getMyInfo().goodsPhone = newIphone;
          LobbySocket.getMyInfo().goodsAddress = newaddress;
          GlobalEvent.instance.emit("PLAYER_NICK_CHANGE", newNick);
          _this.PersonNode_Y.active = false;
          _this.PersonNode_N.active = false;
          _this.initUI(0);
        };
        UserInfoManager.requestChangeUserInfor(this.sex, newNick, newIphone, CodeStr, newaddress, callback);
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic"
  } ],
  personRealName: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01ca5raM01NaY617iWp5uuT", "personRealName");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var TOGGLE_INDEX = {
      toggle1: 1,
      toggle2: 0
    };
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        PersonNode_Y: cc.Node,
        PersonNode_N: cc.Node,
        realNamelab: cc.Label,
        idCardlab: cc.Label,
        RealNameEdit: cc.EditBox,
        IDCardEdit: cc.EditBox,
        toggleyx: cc.Toggle
      },
      onLoad: function onLoad() {
        this.PersonNode_Y.active = false;
        this.PersonNode_N.active = false;
      },
      onEnable: function onEnable() {
        cc.game.canvas.focus();
        this.initUI();
      },
      onDisable: function onDisable() {},
      initUI: function initUI() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        var realName = this.LobbyLogic.getRealName();
        var idCard = this.LobbyLogic.getIDCard();
        if ("" == realName && "" == idCard) {
          this.PersonNode_N.active = true;
          this.RealNameEdit.string = realName + "";
          this.IDCardEdit.string = idCard + "";
        } else {
          this.PersonNode_Y.active = true;
          var StrName = "";
          if (2 == realName.length) {
            var str = realName.substring(0, 1) + "*";
            StrName += str;
          } else {
            var _str = realName.substring(0, 1) + "**";
            StrName += _str;
          }
          this.realNamelab.string = "" + StrName;
          var idCardDtr = "    " + idCard.substring(0, 12) + "******";
          this.idCardlab.string = "" + idCardDtr;
        }
      },
      doButton_ChangeClick: function doButton_ChangeClick() {
        this.PersonNode_Y.active = false;
        this.PersonNode_N.active = true;
        this.initUI(1);
      },
      doButton_PRIVE: function doButton_PRIVE() {
        createTips("\u656c\u8bf7\u671f\u5f85");
      },
      doButton_OK: function doButton_OK() {
        var _this = this;
        this.LobbyLogic = new (require("LobbyLogic"))();
        var newRealName = this.RealNameEdit.string;
        var newIDCard = this.IDCardEdit.string;
        if ("" == newRealName) {
          createTips("\u8bf7\u8f93\u5165\u60a8\u7684\u59d3\u540d");
          return;
        }
        if ("" == newIDCard || 18 != newIDCard.length) {
          createTips("\u8bf7\u8f93\u516518\u4f4d\u6709\u6548\u7684\u8eab\u4efd\u8bc1\u53f7");
          return;
        }
        if (false == this.toggleyx.isChecked) {
          createTips("\u9700\u52fe\u9009\u9605\u8bfb\u5e76\u540c\u610f\u65b9\u53ef\u63d0\u4ea4");
          return;
        }
        var callback = function callback() {
          createTips("\u8ba4\u8bc1\u6210\u529f");
          LobbySocket.getMyInfo().realName = newRealName;
          LobbySocket.getMyInfo().idCard = newIDCard;
          _this.PersonNode_Y.active = false;
          _this.PersonNode_N.active = false;
          _this.initUI();
        };
        UserInfoManager.requestChangeRealName(newRealName, newIDCard, callback);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic"
  } ],
  personVideoDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a778eBs+/FMQoibhDTtPNWd", "personVideoDialog");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        labNickname: cc.Label,
        imgHead: cc.Sprite,
        uploadPrefab: cc.Prefab,
        tipsPrefab: cc.Prefab,
        uploadNode: cc.Node,
        videoNode: cc.Node,
        videoContent: cc.Node,
        videoItem: cc.Prefab,
        timeLabel: cc.Label,
        sp1: cc.SpriteFrame,
        sp2: cc.SpriteFrame,
        labWait: cc.Label
      },
      onLoad: function onLoad() {
        GlobalEvent.instance.on("upload_sucess", this.onEvent_Upload, this);
        GlobalEvent.instance.on("play_video_dialog", this.onEvent_VideoPlay, this);
      },
      onDestroy: function onDestroy() {
        GlobalEvent.instance.off("upload_sucess", this.onEvent_Upload, this);
        GlobalEvent.instance.off("play_video_dialog", this.onEvent_VideoPlay, this);
      },
      start: function start() {
        this.initUI();
        this.loadVideoVip();
      },
      onEvent_Upload: function onEvent_Upload() {
        var _this = this;
        console.log("\u5237\u65b0\u89c6\u9891\u5217\u8868");
        this.labWait.node.active = true;
        window.setTimeout(function() {
          _this.showVideoList();
        }, 6e3);
        window.setTimeout(function() {
          _this.labWait.node.active = false;
          _this.showVideoList();
        }, 1e4);
      },
      onEvent_VideoPlay: function onEvent_VideoPlay(data) {
        window.personVedio = {
          startIdx: data,
          list: this.m_data
        };
        window.backBtnTag = 1;
        window.personVedioBak = this.m_data;
        GlobalEvent.instance.emit("switch_page_msg", "livebroadcast");
      },
      showVideoList: function showVideoList() {
        var that = this;
        var setPersonVedioList = function setPersonVedioList(vedioList) {
          that.m_data = vedioList;
          console.log("\u4e2a\u4eba\u89c6\u9891\u6570\u91cf\uff1a", that.m_data.length);
          that.videoContent.removeAllChildren();
          for (var index = 0; index < that.m_data.length; index++) {
            var element = that.m_data[index];
            var item = cc.instantiate(that.videoItem);
            that.videoContent.addChild(item);
            item.getComponent("personVideoItem").init(index, element, true);
          }
        };
        if (window.personVedioBak) {
          setPersonVedioList(window.personVedioBak);
          window.personVedioBak = null;
        } else {
          this.m_data = [];
          VideoManager.instance.requestUserVideoList(UserInfoManager.getMyInfo().userID, function(data) {
            console.log("===>", data);
            setPersonVedioList(data);
          });
        }
      },
      loadVideoVip: function loadVideoVip() {
        var _this2 = this;
        this.timeLabel.node.active = false;
        this.videoNode.active = false;
        VideoManager.instance.requestUserVideoVip(function(data) {
          console.log(data);
          _this2.initVideoUI(data);
        });
      },
      secTimeToStrCN: function secTimeToStrCN(sec) {
        var d, h, m, s;
        if (sec >= 0) {
          d = Math.floor(sec / 60 / 60 / 24);
          h = Math.floor(sec / 60 / 60 % 24);
          m = Math.floor(sec / 60 % 60);
          s = Math.floor(sec % 60);
          var dayStr = 0 == d ? "" : d + "\u5929";
          var hStr = 0 == h ? "" : h + "\u65f6";
          var mStr = 0 == m ? "" : m + "\u5206";
          var sStr = s + "\u79d2";
          return dayStr + hStr + mStr;
        }
      },
      initVideoUI: function initVideoUI(data) {
        this.videoData = data;
        if (1 == data.isVip) {
          this.uploadNode.getComponent(cc.Sprite).spriteFrame = this.sp1;
          this.timeLabel.node.active = true;
          this.timeLabel.string = "\u5269\u4f59\u65f6\u95f4\uff1a" + this.secTimeToStrCN(data.time);
          this.videoNode.active = true;
          this.showVideoList();
        } else this.uploadNode.getComponent(cc.Sprite).spriteFrame = this.sp2;
      },
      initUI: function initUI() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        var headerURL = this.LobbyLogic.getAvataUrl();
        var nickName = this.LobbyLogic.getNickName();
        var userID = this.LobbyLogic.getUserID();
        var onGetHeadRes = function(avataRes) {
          this.imgHead && cc.isValid(this.imgHead) && (this.imgHead.spriteFrame = avataRes);
        }.bind(this);
        AvatarManager.requestHeadRes(headerURL, userID, onGetHeadRes, null);
        this.labNickname.string = nickName;
      },
      doButton_OpenUpload: function doButton_OpenUpload(event, param) {
        var _this3 = this;
        if (1 == this.videoData.isVip && this.videoData.time > 0) {
          var uploadNode = cc.instantiate(this.uploadPrefab);
          uploadNode.zIndex = 100;
          this.node.addChild(uploadNode);
        } else {
          var tipsNode = cc.instantiate(this.tipsPrefab);
          tipsNode.zIndex = 100;
          this.node.addChild(tipsNode);
          var tips = tipsNode.getComponent("personVideoTips");
          tips.init(this.videoData.cost);
          tips.setCallBack(function(data) {
            _this3.initVideoUI(data);
          });
        }
      },
      doButton_Event: function doButton_Event(event, param) {
        LobbyCanvas.showLiveView();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    EventEmiter: "EventEmiter",
    LobbyLogic: "LobbyLogic",
    VideoManager: "VideoManager"
  } ],
  personVideoItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99a23h1rG1P4J59Tu4Y7Gj0", "personVideoItem");
    "use strict";
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        labStar: cc.Label,
        imgPic: cc.Sprite
      },
      onLoad: function onLoad() {},
      init: function init(index, data, bDialog) {
        var _this = this;
        this.index = index;
        this.m_data = data;
        this.bDialog = bDialog;
        console.log("\u89c6\u9891\uff1a", data);
        this.loadRemoteAvatar(data.CoverUrl, function(error, res) {
          res && (_this.imgPic.spriteFrame = res);
        });
        this.labStar.string = "" + data.star;
      },
      loadRemoteAvatar: function loadRemoteAvatar(url, cb) {
        cc.assetManager.loadRemote(url, function(err, textureRes) {
          if (err) {
            console.error("load remote spriteframe res failed url:" + url, err.message || err);
            cb && cb(err, null);
            return;
          }
          var sf = new cc.SpriteFrame(textureRes);
          cb && cb(null, sf);
        });
      },
      doButton_OpenVideo: function doButton_OpenVideo(event, param) {
        this.bDialog ? GlobalEvent.instance.emit("play_video_dialog", this.index) : GlobalEvent.instance.emit("play_video", this.index);
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    EventEmiter: "EventEmiter"
  } ],
  personVideoTips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b414cSXhthKPLz6CLI8Tb5j", "personVideoTips");
    "use strict";
    var VideoManager = require("VideoManager");
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        labCost: cc.Label
      },
      start: function start() {},
      init: function init(cost) {
        this.labCost.string = "\u5f00\u901a\u201c\u4e0a\u4f20\u89c6\u9891\u201d\u529f\u80fd\u6bcf\u6708\u9700\u8981\u82b1\u8d39" + cost + "\u793c\u5238\uff0c\u662f\u5426\u7ee7\u7eed\u5f00\u901a\uff1f";
      },
      setCallBack: function setCallBack(cb) {
        this.callback = cb;
      },
      doButton_OpenVip: function doButton_OpenVip(event, param) {
        var _this = this;
        VideoManager.instance.requestUserVideoOpenVip(function(data) {
          console.log(data);
          if (_this.callback) {
            data.isVip = 1;
            data.time = data.also_time;
            _this.callback(data);
          }
          _this.callback = null;
          _this.node.destroy();
        });
      },
      doButton_Event: function doButton_Event(event, param) {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    VideoManager: "VideoManager"
  } ],
  personVideoView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6389aI9wWJPI4MijjqBU4tg", "personVideoView");
    "use strict";
    var VideoManager = require("VideoManager");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        labNickname: cc.Label,
        imgHead: cc.Sprite,
        labLoveText: cc.Label,
        videoContent: cc.Node,
        videoItem: cc.Prefab
      },
      onLoad: function onLoad() {
        GlobalEvent.instance.on("play_video", this.onEvent_VideoPlay, this);
      },
      onDestroy: function onDestroy() {
        GlobalEvent.instance.off("play_video", this.onEvent_VideoPlay, this);
      },
      init: function init(vedioData, delegate) {
        this.vedioData = vedioData;
        vedioData.upLoadID && (this.userID = vedioData.upLoadID);
        this.delegate = delegate;
        this.initUI();
        this.showVideoList();
      },
      onEvent_VideoPlay: function onEvent_VideoPlay(data) {
        console.log("play video index =", data);
        if (this.delegate && this.delegate.showPersonVedios) {
          this.node.active = false;
          this.delegate.showPersonVedios(data, this.m_data);
        }
      },
      showVideoList: function showVideoList() {
        var that = this;
        this.m_data = [];
        var setPersonVedioList = function setPersonVedioList(data, userID) {
          console.log("===>", data);
          that.m_data = data;
          console.log("\u4e2a\u4eba\u89c6\u9891\u6570\u91cf\uff1a", that.m_data.length);
          that.videoContent.removeAllChildren();
          for (var index = 0; index < that.m_data.length; index++) {
            var element = that.m_data[index];
            var bAdd = true;
            99999 == userID && 99999 != element.upLoadID && (bAdd = false);
            if (bAdd) {
              var item = cc.instantiate(that.videoItem);
              that.videoContent.addChild(item);
              item.getComponent("personVideoItem").init(index, element, false);
            }
          }
        };
        if (99999 == this.userID) {
          var list = VideoManager.instance.getVideoList();
          setPersonVedioList(list, 99999);
        } else VideoManager.instance.requestUserVideoList(this.userID, function(data) {
          setPersonVedioList(data, 0);
        });
      },
      initUI: function initUI() {
        var that = this;
        var setPersonUI = function setPersonUI(data) {
          var onGetHeadRes = function(avataRes) {
            that.imgHead && cc.isValid(that.imgHead) && (that.imgHead.spriteFrame = avataRes);
          }.bind(that);
          AvatarManager.requestHeadRes(data.upLoadPic || data.headerURL, that.userID, onGetHeadRes, null);
          that.labNickname.string = data.upLoadName;
          that.labLoveText.string = data.star;
        };
        99999 == this.userID ? setPersonUI(this.vedioData) : VideoManager.instance.requestUserVideoTotal(this.userID, function(data) {
          setPersonUI(data);
        });
      },
      doButton_Event: function doButton_Event(event, param) {
        createTips("\u656c\u8bf7\u671f\u5f85");
      },
      doButton_close: function doButton_close() {
        this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    EventEmiter: "EventEmiter",
    VideoManager: "VideoManager"
  } ],
  playRealMsgDialog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92ee9mrhYJCKKES7Glu60ir", "playRealMsgDialog");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        editboxRealName: cc.EditBox,
        editboxNumber: cc.EditBox,
        Text_tips: cc.Label,
        btn_Submit: cc.Button
      },
      onLoad: function onLoad() {},
      init: function init(callback) {
        this.m_callback = callback;
      },
      doButton_SubmitClick: function doButton_SubmitClick() {
        var _this = this;
        var RealName = this.editboxRealName.string;
        var IDcard = this.editboxNumber.string;
        if (0 === RealName.length) {
          this.Text_tips.string = "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u771f\u5b9e\u59d3\u540d";
          return;
        }
        if (0 === IDcard.length) {
          this.Text_tips.string = "\u8bf7\u8f93\u5165\u6709\u6548\u7684\u8eab\u4efd\u8bc1\u53f7\u7801";
          return;
        }
        var CallBack = function CallBack(jsonData) {
          if (1 == jsonData.status) _this.Text_tips.string = jsonData.msg; else if (0 == jsonData.status) {
            UserInfoManager.setRealNameInfo(RealName, IDcard);
            _this.m_callback && _this.m_callback(jsonData.msg);
            _this.node && _this.node.removeFromParent();
          }
        };
        UserInfoManager.requestRealName(RealName, IDcard, CallBack);
      },
      doButton_Close: function doButton_Close() {
        var _this2 = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this2.node.destroy();
          }, .85);
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer"
  } ],
  protobuf: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3792Zx+GxLuL3NbKNC4V8q", "protobuf");
    "use strict";
    (function(global, undefined) {
      (function prelude(modules, cache, entries) {
        function $require(name) {
          var $module = cache[name];
          $module || modules[name][0].call($module = cache[name] = {
            exports: {}
          }, $require, $module, $module.exports);
          return $module.exports;
        }
        var protobuf = global.protobuf = $require(entries[0]);
        "function" === typeof define && define.amd && define([ "long" ], function(Long) {
          if (Long && Long.isLong) {
            protobuf.util.Long = Long;
            protobuf.configure();
          }
          return protobuf;
        });
        "object" === typeof module && module && module.exports && (module.exports = protobuf);
      })({
        1: [ function(require, module, exports) {
          module.exports = asPromise;
          function asPromise(fn, ctx) {
            var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
            while (index < arguments.length) params[offset++] = arguments[index++];
            return new Promise(function executor(resolve, reject) {
              params[offset] = function callback(err) {
                if (pending) {
                  pending = false;
                  if (err) reject(err); else {
                    var params = new Array(arguments.length - 1), offset = 0;
                    while (offset < params.length) params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                  }
                }
              };
              try {
                fn.apply(ctx || null, params);
              } catch (err) {
                if (pending) {
                  pending = false;
                  reject(err);
                }
              }
            });
          }
        }, {} ],
        2: [ function(require, module, exports) {
          var base64 = exports;
          base64.length = function length(string) {
            var p = string.length;
            if (!p) return 0;
            var n = 0;
            while (--p % 4 > 1 && "=" === string.charAt(p)) ++n;
            return Math.ceil(3 * string.length) / 4 - n;
          };
          var b64 = new Array(64);
          var s64 = new Array(123);
          for (var i = 0; i < 64; ) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
          base64.encode = function encode(buffer, start, end) {
            var parts = null, chunk = [];
            var i = 0, j = 0, t;
            while (start < end) {
              var b = buffer[start++];
              switch (j) {
               case 0:
                chunk[i++] = b64[b >> 2];
                t = (3 & b) << 4;
                j = 1;
                break;

               case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (15 & b) << 2;
                j = 2;
                break;

               case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[63 & b];
                j = 0;
              }
              if (i > 8191) {
                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                i = 0;
              }
            }
            if (j) {
              chunk[i++] = b64[t];
              chunk[i++] = 61;
              1 === j && (chunk[i++] = 61);
            }
            if (parts) {
              i && parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
              return parts.join("");
            }
            return String.fromCharCode.apply(String, chunk.slice(0, i));
          };
          var invalidEncoding = "invalid encoding";
          base64.decode = function decode(string, buffer, offset) {
            var start = offset;
            var j = 0, t;
            for (var _i = 0; _i < string.length; ) {
              var c = string.charCodeAt(_i++);
              if (61 === c && j > 1) break;
              if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
              switch (j) {
               case 0:
                t = c;
                j = 1;
                break;

               case 1:
                buffer[offset++] = t << 2 | (48 & c) >> 4;
                t = c;
                j = 2;
                break;

               case 2:
                buffer[offset++] = (15 & t) << 4 | (60 & c) >> 2;
                t = c;
                j = 3;
                break;

               case 3:
                buffer[offset++] = (3 & t) << 6 | c;
                j = 0;
              }
            }
            if (1 === j) throw Error(invalidEncoding);
            return offset - start;
          };
          base64.test = function test(string) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
          };
        }, {} ],
        3: [ function(require, module, exports) {
          module.exports = codegen;
          function codegen(functionParams, functionName) {
            if ("string" === typeof functionParams) {
              functionName = functionParams;
              functionParams = undefined;
            }
            var body = [];
            function Codegen(formatStringOrScope) {
              if ("string" !== typeof formatStringOrScope) {
                var source = toString();
                codegen.verbose && console.log("codegen: " + source);
                source = "return " + source;
                if (formatStringOrScope) {
                  var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
                  while (scopeOffset < scopeKeys.length) {
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                  }
                  scopeParams[scopeOffset] = source;
                  return Function.apply(null, scopeParams).apply(null, scopeValues);
                }
                return Function(source)();
              }
              var formatParams = new Array(arguments.length - 1), formatOffset = 0;
              while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];
              formatOffset = 0;
              formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
                var value = formatParams[formatOffset++];
                switch ($1) {
                 case "d":
                 case "f":
                  return String(Number(value));

                 case "i":
                  return String(Math.floor(value));

                 case "j":
                  return JSON.stringify(value);

                 case "s":
                  return String(value);
                }
                return "%";
              });
              if (formatOffset !== formatParams.length) throw Error("parameter count mismatch");
              body.push(formatStringOrScope);
              return Codegen;
            }
            function toString(functionNameOverride) {
              return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
            }
            Codegen.toString = toString;
            return Codegen;
          }
          codegen.verbose = false;
        }, {} ],
        4: [ function(require, module, exports) {
          module.exports = EventEmitter;
          function EventEmitter() {
            this._listeners = {};
          }
          EventEmitter.prototype.on = function on(evt, fn, ctx) {
            (this._listeners[evt] || (this._listeners[evt] = [])).push({
              fn: fn,
              ctx: ctx || this
            });
            return this;
          };
          EventEmitter.prototype.off = function off(evt, fn) {
            if (evt === undefined) this._listeners = {}; else if (fn === undefined) this._listeners[evt] = []; else {
              var listeners = this._listeners[evt];
              for (var i = 0; i < listeners.length; ) listeners[i].fn === fn ? listeners.splice(i, 1) : ++i;
            }
            return this;
          };
          EventEmitter.prototype.emit = function emit(evt) {
            var listeners = this._listeners[evt];
            if (listeners) {
              var args = [], i = 1;
              for (;i < arguments.length; ) args.push(arguments[i++]);
              for (i = 0; i < listeners.length; ) listeners[i].fn.apply(listeners[i++].ctx, args);
            }
            return this;
          };
        }, {} ],
        5: [ function(require, module, exports) {
          module.exports = fetch;
          var asPromise = require(1), inquire = require(7);
          var fs = inquire("fs");
          function fetch(filename, options, callback) {
            if ("function" === typeof options) {
              callback = options;
              options = {};
            } else options || (options = {});
            if (!callback) return asPromise(fetch, this, filename, options);
            if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
              return err && "undefined" !== typeof XMLHttpRequest ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
            });
            return fetch.xhr(filename, options, callback);
          }
          fetch.xhr = function fetch_xhr(filename, options, callback) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function fetchOnReadyStateChange() {
              if (4 !== xhr.readyState) return undefined;
              if (0 !== xhr.status && 200 !== xhr.status) return callback(Error("status " + xhr.status));
              if (options.binary) {
                var buffer = xhr.response;
                if (!buffer) {
                  buffer = [];
                  for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(255 & xhr.responseText.charCodeAt(i));
                }
                return callback(null, "undefined" !== typeof Uint8Array ? new Uint8Array(buffer) : buffer);
              }
              return callback(null, xhr.responseText);
            };
            if (options.binary) {
              "overrideMimeType" in xhr && xhr.overrideMimeType("text/plain; charset=x-user-defined");
              xhr.responseType = "arraybuffer";
            }
            xhr.open("GET", filename);
            xhr.send();
          };
        }, {
          1: 1,
          7: 7
        } ],
        6: [ function(require, module, exports) {
          module.exports = factory(factory);
          function factory(exports) {
            "undefined" !== typeof Float32Array ? function() {
              var f32 = new Float32Array([ -0 ]), f8b = new Uint8Array(f32.buffer), le = 128 === f8b[3];
              function writeFloat_f32_cpy(val, buf, pos) {
                f32[0] = val;
                buf[pos] = f8b[0];
                buf[pos + 1] = f8b[1];
                buf[pos + 2] = f8b[2];
                buf[pos + 3] = f8b[3];
              }
              function writeFloat_f32_rev(val, buf, pos) {
                f32[0] = val;
                buf[pos] = f8b[3];
                buf[pos + 1] = f8b[2];
                buf[pos + 2] = f8b[1];
                buf[pos + 3] = f8b[0];
              }
              exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
              exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
              function readFloat_f32_cpy(buf, pos) {
                f8b[0] = buf[pos];
                f8b[1] = buf[pos + 1];
                f8b[2] = buf[pos + 2];
                f8b[3] = buf[pos + 3];
                return f32[0];
              }
              function readFloat_f32_rev(buf, pos) {
                f8b[3] = buf[pos];
                f8b[2] = buf[pos + 1];
                f8b[1] = buf[pos + 2];
                f8b[0] = buf[pos + 3];
                return f32[0];
              }
              exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
              exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
            }() : function() {
              function writeFloat_ieee754(writeUint, val, buf, pos) {
                var sign = val < 0 ? 1 : 0;
                sign && (val = -val);
                if (0 === val) writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos); else if (isNaN(val)) writeUint(2143289344, buf, pos); else if (val > 34028234663852886e22) writeUint((sign << 31 | 2139095040) >>> 0, buf, pos); else if (val < 11754943508222875e-54) writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos); else {
                  var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = 8388607 & Math.round(val * Math.pow(2, -exponent) * 8388608);
                  writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
                }
              }
              exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
              exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
              function readFloat_ieee754(readUint, buf, pos) {
                var uint = readUint(buf, pos), sign = 2 * (uint >> 31) + 1, exponent = uint >>> 23 & 255, mantissa = 8388607 & uint;
                return 255 === exponent ? mantissa ? NaN : Infinity * sign : 0 === exponent ? 1401298464324817e-60 * sign * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
              }
              exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
              exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
            }();
            "undefined" !== typeof Float64Array ? function() {
              var f64 = new Float64Array([ -0 ]), f8b = new Uint8Array(f64.buffer), le = 128 === f8b[7];
              function writeDouble_f64_cpy(val, buf, pos) {
                f64[0] = val;
                buf[pos] = f8b[0];
                buf[pos + 1] = f8b[1];
                buf[pos + 2] = f8b[2];
                buf[pos + 3] = f8b[3];
                buf[pos + 4] = f8b[4];
                buf[pos + 5] = f8b[5];
                buf[pos + 6] = f8b[6];
                buf[pos + 7] = f8b[7];
              }
              function writeDouble_f64_rev(val, buf, pos) {
                f64[0] = val;
                buf[pos] = f8b[7];
                buf[pos + 1] = f8b[6];
                buf[pos + 2] = f8b[5];
                buf[pos + 3] = f8b[4];
                buf[pos + 4] = f8b[3];
                buf[pos + 5] = f8b[2];
                buf[pos + 6] = f8b[1];
                buf[pos + 7] = f8b[0];
              }
              exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
              exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
              function readDouble_f64_cpy(buf, pos) {
                f8b[0] = buf[pos];
                f8b[1] = buf[pos + 1];
                f8b[2] = buf[pos + 2];
                f8b[3] = buf[pos + 3];
                f8b[4] = buf[pos + 4];
                f8b[5] = buf[pos + 5];
                f8b[6] = buf[pos + 6];
                f8b[7] = buf[pos + 7];
                return f64[0];
              }
              function readDouble_f64_rev(buf, pos) {
                f8b[7] = buf[pos];
                f8b[6] = buf[pos + 1];
                f8b[5] = buf[pos + 2];
                f8b[4] = buf[pos + 3];
                f8b[3] = buf[pos + 4];
                f8b[2] = buf[pos + 5];
                f8b[1] = buf[pos + 6];
                f8b[0] = buf[pos + 7];
                return f64[0];
              }
              exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
              exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
            }() : function() {
              function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
                var sign = val < 0 ? 1 : 0;
                sign && (val = -val);
                if (0 === val) {
                  writeUint(0, buf, pos + off0);
                  writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
                } else if (isNaN(val)) {
                  writeUint(0, buf, pos + off0);
                  writeUint(2146959360, buf, pos + off1);
                } else if (val > 17976931348623157e292) {
                  writeUint(0, buf, pos + off0);
                  writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
                } else {
                  var mantissa;
                  if (val < 22250738585072014e-324) {
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                  } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    1024 === exponent && (exponent = 1023);
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(4503599627370496 * mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | 1048576 * mantissa & 1048575) >>> 0, buf, pos + off1);
                  }
                }
              }
              exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
              exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
              function readDouble_ieee754(readUint, off0, off1, buf, pos) {
                var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
                var sign = 2 * (hi >> 31) + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (1048575 & hi) + lo;
                return 2047 === exponent ? mantissa ? NaN : Infinity * sign : 0 === exponent ? 5e-324 * sign * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
              }
              exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
              exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
            }();
            return exports;
          }
          function writeUintLE(val, buf, pos) {
            buf[pos] = 255 & val;
            buf[pos + 1] = val >>> 8 & 255;
            buf[pos + 2] = val >>> 16 & 255;
            buf[pos + 3] = val >>> 24;
          }
          function writeUintBE(val, buf, pos) {
            buf[pos] = val >>> 24;
            buf[pos + 1] = val >>> 16 & 255;
            buf[pos + 2] = val >>> 8 & 255;
            buf[pos + 3] = 255 & val;
          }
          function readUintLE(buf, pos) {
            return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
          }
          function readUintBE(buf, pos) {
            return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
          }
        }, {} ],
        7: [ function(require, module, exports) {
          module.exports = inquire;
          function inquire(moduleName) {
            try {
              var mod = eval("quire".replace(/^/, "re"))(moduleName);
              if (mod && (mod.length || Object.keys(mod).length)) return mod;
            } catch (e) {}
            return null;
          }
        }, {} ],
        8: [ function(require, module, exports) {
          var path = exports;
          var isAbsolute = path.isAbsolute = function isAbsolute(path) {
            return /^(?:\/|\w+:)/.test(path);
          };
          var normalize = path.normalize = function normalize(path) {
            path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
            var parts = path.split("/"), absolute = isAbsolute(path), prefix = "";
            absolute && (prefix = parts.shift() + "/");
            for (var i = 0; i < parts.length; ) ".." === parts[i] ? i > 0 && ".." !== parts[i - 1] ? parts.splice(--i, 2) : absolute ? parts.splice(i, 1) : ++i : "." === parts[i] ? parts.splice(i, 1) : ++i;
            return prefix + parts.join("/");
          };
          path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
            alreadyNormalized || (includePath = normalize(includePath));
            if (isAbsolute(includePath)) return includePath;
            alreadyNormalized || (originPath = normalize(originPath));
            return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
          };
        }, {} ],
        9: [ function(require, module, exports) {
          module.exports = pool;
          function pool(alloc, slice, size) {
            var SIZE = size || 8192;
            var MAX = SIZE >>> 1;
            var slab = null;
            var offset = SIZE;
            return function pool_alloc(size) {
              if (size < 1 || size > MAX) return alloc(size);
              if (offset + size > SIZE) {
                slab = alloc(SIZE);
                offset = 0;
              }
              var buf = slice.call(slab, offset, offset += size);
              7 & offset && (offset = 1 + (7 | offset));
              return buf;
            };
          }
        }, {} ],
        10: [ function(require, module, exports) {
          var utf8 = exports;
          utf8.length = function utf8_length(string) {
            var len = 0, c = 0;
            for (var i = 0; i < string.length; ++i) {
              c = string.charCodeAt(i);
              if (c < 128) len += 1; else if (c < 2048) len += 2; else if (55296 === (64512 & c) && 56320 === (64512 & string.charCodeAt(i + 1))) {
                ++i;
                len += 4;
              } else len += 3;
            }
            return len;
          };
          utf8.read = function utf8_read(buffer, start, end) {
            var len = end - start;
            if (len < 1) return "";
            var parts = null, chunk = [], i = 0, t;
            while (start < end) {
              t = buffer[start++];
              if (t < 128) chunk[i++] = t; else if (t > 191 && t < 224) chunk[i++] = (31 & t) << 6 | 63 & buffer[start++]; else if (t > 239 && t < 365) {
                t = ((7 & t) << 18 | (63 & buffer[start++]) << 12 | (63 & buffer[start++]) << 6 | 63 & buffer[start++]) - 65536;
                chunk[i++] = 55296 + (t >> 10);
                chunk[i++] = 56320 + (1023 & t);
              } else chunk[i++] = (15 & t) << 12 | (63 & buffer[start++]) << 6 | 63 & buffer[start++];
              if (i > 8191) {
                (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                i = 0;
              }
            }
            if (parts) {
              i && parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
              return parts.join("");
            }
            return String.fromCharCode.apply(String, chunk.slice(0, i));
          };
          utf8.write = function utf8_write(string, buffer, offset) {
            var start = offset, c1, c2;
            for (var i = 0; i < string.length; ++i) {
              c1 = string.charCodeAt(i);
              if (c1 < 128) buffer[offset++] = c1; else if (c1 < 2048) {
                buffer[offset++] = c1 >> 6 | 192;
                buffer[offset++] = 63 & c1 | 128;
              } else if (55296 === (64512 & c1) && 56320 === (64512 & (c2 = string.charCodeAt(i + 1)))) {
                c1 = 65536 + ((1023 & c1) << 10) + (1023 & c2);
                ++i;
                buffer[offset++] = c1 >> 18 | 240;
                buffer[offset++] = c1 >> 12 & 63 | 128;
                buffer[offset++] = c1 >> 6 & 63 | 128;
                buffer[offset++] = 63 & c1 | 128;
              } else {
                buffer[offset++] = c1 >> 12 | 224;
                buffer[offset++] = c1 >> 6 & 63 | 128;
                buffer[offset++] = 63 & c1 | 128;
              }
            }
            return offset - start;
          };
        }, {} ],
        11: [ function(require, module, exports) {
          module.exports = common;
          var commonRe = /\/|\./;
          function common(name, json) {
            if (!commonRe.test(name)) {
              name = "google/protobuf/" + name + ".proto";
              json = {
                nested: {
                  google: {
                    nested: {
                      protobuf: {
                        nested: json
                      }
                    }
                  }
                }
              };
            }
            common[name] = json;
          }
          common("any", {
            Any: {
              fields: {
                type_url: {
                  type: "string",
                  id: 1
                },
                value: {
                  type: "bytes",
                  id: 2
                }
              }
            }
          });
          var timeType;
          common("duration", {
            Duration: timeType = {
              fields: {
                seconds: {
                  type: "int64",
                  id: 1
                },
                nanos: {
                  type: "int32",
                  id: 2
                }
              }
            }
          });
          common("timestamp", {
            Timestamp: timeType
          });
          common("empty", {
            Empty: {
              fields: {}
            }
          });
          common("struct", {
            Struct: {
              fields: {
                fields: {
                  keyType: "string",
                  type: "Value",
                  id: 1
                }
              }
            },
            Value: {
              oneofs: {
                kind: {
                  oneof: [ "nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue" ]
                }
              },
              fields: {
                nullValue: {
                  type: "NullValue",
                  id: 1
                },
                numberValue: {
                  type: "double",
                  id: 2
                },
                stringValue: {
                  type: "string",
                  id: 3
                },
                boolValue: {
                  type: "bool",
                  id: 4
                },
                structValue: {
                  type: "Struct",
                  id: 5
                },
                listValue: {
                  type: "ListValue",
                  id: 6
                }
              }
            },
            NullValue: {
              values: {
                NULL_VALUE: 0
              }
            },
            ListValue: {
              fields: {
                values: {
                  rule: "repeated",
                  type: "Value",
                  id: 1
                }
              }
            }
          });
          common("wrappers", {
            DoubleValue: {
              fields: {
                value: {
                  type: "double",
                  id: 1
                }
              }
            },
            FloatValue: {
              fields: {
                value: {
                  type: "float",
                  id: 1
                }
              }
            },
            Int64Value: {
              fields: {
                value: {
                  type: "int64",
                  id: 1
                }
              }
            },
            UInt64Value: {
              fields: {
                value: {
                  type: "uint64",
                  id: 1
                }
              }
            },
            Int32Value: {
              fields: {
                value: {
                  type: "int32",
                  id: 1
                }
              }
            },
            UInt32Value: {
              fields: {
                value: {
                  type: "uint32",
                  id: 1
                }
              }
            },
            BoolValue: {
              fields: {
                value: {
                  type: "bool",
                  id: 1
                }
              }
            },
            StringValue: {
              fields: {
                value: {
                  type: "string",
                  id: 1
                }
              }
            },
            BytesValue: {
              fields: {
                value: {
                  type: "bytes",
                  id: 1
                }
              }
            }
          });
          common.get = function get(file) {
            return common[file] || null;
          };
        }, {} ],
        12: [ function(require, module, exports) {
          var converter = exports;
          var Enum = require(15), util = require(37);
          function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
            if (field.resolvedType) if (field.resolvedType instanceof Enum) {
              gen("switch(d%s){", prop);
              for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                field.repeated && values[keys[i]] === field.typeDefault && gen("default:");
                gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
              }
              gen("}");
            } else gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop); else {
              var isUnsigned = false;
              switch (field.type) {
               case "double":
               case "float":
                gen("m%s=Number(d%s)", prop, prop);
                break;

               case "uint32":
               case "fixed32":
                gen("m%s=d%s>>>0", prop, prop);
                break;

               case "int32":
               case "sint32":
               case "sfixed32":
                gen("m%s=d%s|0", prop, prop);
                break;

               case "uint64":
                isUnsigned = true;

               case "int64":
               case "sint64":
               case "fixed64":
               case "sfixed64":
                gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;

               case "bytes":
                gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
                break;

               case "string":
                gen("m%s=String(d%s)", prop, prop);
                break;

               case "bool":
                gen("m%s=Boolean(d%s)", prop, prop);
              }
            }
            return gen;
          }
          converter.fromObject = function fromObject(mtype) {
            var fields = mtype.fieldsArray;
            var gen = util.codegen([ "d" ], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
            if (!fields.length) return gen("return new this.ctor");
            gen("var m=new this.ctor");
            for (var i = 0; i < fields.length; ++i) {
              var field = fields[i].resolve(), prop = util.safeProp(field.name);
              if (field.map) {
                gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
                genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
              } else if (field.repeated) {
                gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
                genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
              } else {
                field.resolvedType instanceof Enum || gen("if(d%s!=null){", prop);
                genValuePartial_fromObject(gen, field, i, prop);
                field.resolvedType instanceof Enum || gen("}");
              }
            }
            return gen("return m");
          };
          function genValuePartial_toObject(gen, field, fieldIndex, prop) {
            if (field.resolvedType) field.resolvedType instanceof Enum ? gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop) : gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop); else {
              var isUnsigned = false;
              switch (field.type) {
               case "double":
               case "float":
                gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;

               case "uint64":
                isUnsigned = true;

               case "int64":
               case "sint64":
               case "fixed64":
               case "sfixed64":
                gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
                break;

               case "bytes":
                gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;

               default:
                gen("d%s=m%s", prop, prop);
              }
            }
            return gen;
          }
          converter.toObject = function toObject(mtype) {
            var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
            if (!fields.length) return util.codegen()("return {}");
            var gen = util.codegen([ "m", "o" ], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
            var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
            for (;i < fields.length; ++i) fields[i].partOf || (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
            if (repeatedFields.length) {
              gen("if(o.arrays||o.defaults){");
              for (i = 0; i < repeatedFields.length; ++i) gen("d%s=[]", util.safeProp(repeatedFields[i].name));
              gen("}");
            }
            if (mapFields.length) {
              gen("if(o.objects||o.defaults){");
              for (i = 0; i < mapFields.length; ++i) gen("d%s={}", util.safeProp(mapFields[i].name));
              gen("}");
            }
            if (normalFields.length) {
              gen("if(o.defaults){");
              for (i = 0; i < normalFields.length; ++i) {
                var field = normalFields[i], prop = util.safeProp(field.name);
                field.resolvedType instanceof Enum ? gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault) : field["long"] ? gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber()) : field.bytes ? gen("d%s=o.bytes===String?%j:%s", prop, String.fromCharCode.apply(String, field.typeDefault), "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]") : gen("d%s=%j", prop, field.typeDefault);
              }
              gen("}");
            }
            var hasKs2 = false;
            for (i = 0; i < fields.length; ++i) {
              var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
              if (field.map) {
                if (!hasKs2) {
                  hasKs2 = true;
                  gen("var ks2");
                }
                gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
                genValuePartial_toObject(gen, field, index, prop + "[ks2[j]]")("}");
              } else if (field.repeated) {
                gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
                genValuePartial_toObject(gen, field, index, prop + "[j]")("}");
              } else {
                gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
                genValuePartial_toObject(gen, field, index, prop);
                field.partOf && gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
              }
              gen("}");
            }
            return gen("return d");
          };
        }, {
          15: 15,
          37: 37
        } ],
        13: [ function(require, module, exports) {
          module.exports = decoder;
          var Enum = require(15), types = require(36), util = require(37);
          function missing(field) {
            return "missing required '" + field.name + "'";
          }
          function decoder(mtype) {
            var gen = util.codegen([ "r", "l" ], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) {
              return field.map;
            }).length ? ",k" : ""))("while(r.pos<c){")("var t=r.uint32()");
            mtype.group && gen("if((t&7)===4)")("break");
            gen("switch(t>>>3){");
            var i = 0;
            for (;i < mtype.fieldsArray.length; ++i) {
              var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
              gen("case %i:", field.id);
              if (field.map) {
                gen("r.skip().pos++")("if(%s===util.emptyObject)", ref)("%s={}", ref)("k=r.%s()", field.keyType)("r.pos++");
                types["long"][field.keyType] !== undefined ? types.basic[type] === undefined ? gen('%s[typeof k==="object"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())', ref, i) : gen('%s[typeof k==="object"?util.longToHash(k):k]=r.%s()', ref, type) : types.basic[type] === undefined ? gen("%s[k]=types[%i].decode(r,r.uint32())", ref, i) : gen("%s[k]=r.%s()", ref, type);
              } else if (field.repeated) {
                gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
                types.packed[type] !== undefined && gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
                types.basic[type] === undefined ? gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i) : gen("%s.push(r.%s())", ref, type);
              } else types.basic[type] === undefined ? gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i) : gen("%s=r.%s()", ref, type);
              gen("break");
            }
            gen("default:")("r.skipType(t&7)")("break")("}")("}");
            for (i = 0; i < mtype._fieldsArray.length; ++i) {
              var rfield = mtype._fieldsArray[i];
              rfield.required && gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
            }
            return gen("return m");
          }
        }, {
          15: 15,
          36: 36,
          37: 37
        } ],
        14: [ function(require, module, exports) {
          module.exports = encoder;
          var Enum = require(15), types = require(36), util = require(37);
          function genTypePartial(gen, field, fieldIndex, ref) {
            return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
          }
          function encoder(mtype) {
            var gen = util.codegen([ "m", "w" ], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
            var i, ref;
            var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
            for (var _i2 = 0; _i2 < fields.length; ++_i2) {
              var field = fields[_i2].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
              ref = "m" + util.safeProp(field.name);
              if (field.map) {
                gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
                wireType === undefined ? gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref) : gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
                gen("}")("}");
              } else if (field.repeated) {
                gen("if(%s!=null&&%s.length){", ref, ref);
                if (field.packed && types.packed[type] !== undefined) gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()"); else {
                  gen("for(var i=0;i<%s.length;++i)", ref);
                  wireType === undefined ? genTypePartial(gen, field, index, ref + "[i]") : gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
                }
                gen("}");
              } else {
                field.optional && gen("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name);
                wireType === undefined ? genTypePartial(gen, field, index, ref) : gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
              }
            }
            return gen("return w");
          }
        }, {
          15: 15,
          36: 36,
          37: 37
        } ],
        15: [ function(require, module, exports) {
          module.exports = Enum;
          var ReflectionObject = require(24);
          ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
          var util = require(37);
          function Enum(name, values, options) {
            ReflectionObject.call(this, name, options);
            if (values && "object" !== typeof values) throw TypeError("values must be an object");
            this.valuesById = {};
            this.values = Object.create(this.valuesById);
            this.comments = {};
            if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) "number" === typeof values[keys[i]] && (this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i]);
          }
          Enum.fromJSON = function fromJSON(name, json) {
            return new Enum(name, json.values, json.options);
          };
          Enum.prototype.toJSON = function toJSON() {
            return util.toObject([ "options", this.options, "values", this.values ]);
          };
          Enum.prototype.add = function(name, id, comment) {
            if (!util.isString(name)) throw TypeError("name must be a string");
            if (!util.isInteger(id)) throw TypeError("id must be an integer");
            if (this.values[name] !== undefined) throw Error("duplicate name");
            if (this.valuesById[id] !== undefined) {
              if (!(this.options && this.options.allow_alias)) throw Error("duplicate id");
              this.values[name] = id;
            } else this.valuesById[this.values[name] = id] = name;
            this.comments[name] = comment || null;
            return this;
          };
          Enum.prototype.remove = function(name) {
            if (!util.isString(name)) throw TypeError("name must be a string");
            var val = this.values[name];
            if (val === undefined) throw Error("name does not exist");
            delete this.valuesById[val];
            delete this.values[name];
            delete this.comments[name];
            return this;
          };
        }, {
          24: 24,
          37: 37
        } ],
        16: [ function(require, module, exports) {
          module.exports = Field;
          var ReflectionObject = require(24);
          ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
          var Enum = require(15), types = require(36), util = require(37);
          var Type;
          var ruleRe = /^required|optional|repeated$/;
          Field.fromJSON = function fromJSON(name, json) {
            return new Field(name, json.id, json.type, json.rule, json.extend, json.options);
          };
          function Field(name, id, type, rule, extend, options) {
            if (util.isObject(rule)) {
              options = rule;
              rule = extend = undefined;
            } else if (util.isObject(extend)) {
              options = extend;
              extend = undefined;
            }
            ReflectionObject.call(this, name, options);
            if (!util.isInteger(id) || id < 0) throw TypeError("id must be a non-negative integer");
            if (!util.isString(type)) throw TypeError("type must be a string");
            if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError("rule must be a string rule");
            if (extend !== undefined && !util.isString(extend)) throw TypeError("extend must be a string");
            this.rule = rule && "optional" !== rule ? rule : undefined;
            this.type = type;
            this.id = id;
            this.extend = extend || undefined;
            this.required = "required" === rule;
            this.optional = !this.required;
            this.repeated = "repeated" === rule;
            this.map = false;
            this.message = null;
            this.partOf = null;
            this.typeDefault = null;
            this.defaultValue = null;
            this["long"] = !!util.Long && types["long"][type] !== undefined;
            this.bytes = "bytes" === type;
            this.resolvedType = null;
            this.extensionField = null;
            this.declaringField = null;
            this._packed = null;
          }
          Object.defineProperty(Field.prototype, "packed", {
            get: function get() {
              null === this._packed && (this._packed = false !== this.getOption("packed"));
              return this._packed;
            }
          });
          Field.prototype.setOption = function setOption(name, value, ifNotSet) {
            "packed" === name && (this._packed = null);
            return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
          };
          Field.prototype.toJSON = function toJSON() {
            return util.toObject([ "rule", "optional" !== this.rule && this.rule || undefined, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options ]);
          };
          Field.prototype.resolve = function resolve() {
            if (this.resolved) return this;
            if ((this.typeDefault = types.defaults[this.type]) === undefined) {
              this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
              this.resolvedType instanceof Type ? this.typeDefault = null : this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
            }
            if (this.options && null != this.options["default"]) {
              this.typeDefault = this.options["default"];
              this.resolvedType instanceof Enum && "string" === typeof this.typeDefault && (this.typeDefault = this.resolvedType.values[this.typeDefault]);
            }
            if (this.options) {
              true !== this.options.packed && (this.options.packed === undefined || !this.resolvedType || this.resolvedType instanceof Enum) || delete this.options.packed;
              Object.keys(this.options).length || (this.options = undefined);
            }
            if (this["long"]) {
              this.typeDefault = util.Long.fromNumber(this.typeDefault, "u" === this.type.charAt(0));
              Object.freeze && Object.freeze(this.typeDefault);
            } else if (this.bytes && "string" === typeof this.typeDefault) {
              var buf;
              util.base64.test(this.typeDefault) ? util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0) : util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
              this.typeDefault = buf;
            }
            this.map ? this.defaultValue = util.emptyObject : this.repeated ? this.defaultValue = util.emptyArray : this.defaultValue = this.typeDefault;
            this.parent instanceof Type && (this.parent.ctor.prototype[this.name] = this.defaultValue);
            return ReflectionObject.prototype.resolve.call(this);
          };
          Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
            "function" === typeof fieldType ? fieldType = util.decorateType(fieldType).name : fieldType && "object" === typeof fieldType && (fieldType = util.decorateEnum(fieldType).name);
            return function fieldDecorator(prototype, fieldName) {
              util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {
                default: defaultValue
              }));
            };
          };
          Field._configure = function configure(Type_) {
            Type = Type_;
          };
        }, {
          15: 15,
          24: 24,
          36: 36,
          37: 37
        } ],
        17: [ function(require, module, exports) {
          var protobuf = module.exports = require(18);
          protobuf.build = "light";
          function load(filename, root, callback) {
            if ("function" === typeof root) {
              callback = root;
              root = new protobuf.Root();
            } else root || (root = new protobuf.Root());
            return root.load(filename, callback);
          }
          protobuf.load = load;
          function loadSync(filename, root) {
            root || (root = new protobuf.Root());
            return root.loadSync(filename);
          }
          protobuf.loadSync = loadSync;
          protobuf.encoder = require(14);
          protobuf.decoder = require(13);
          protobuf.verifier = require(40);
          protobuf.converter = require(12);
          protobuf.ReflectionObject = require(24);
          protobuf.Namespace = require(23);
          protobuf.Root = require(29);
          protobuf.Enum = require(15);
          protobuf.Type = require(35);
          protobuf.Field = require(16);
          protobuf.OneOf = require(25);
          protobuf.MapField = require(20);
          protobuf.Service = require(33);
          protobuf.Method = require(22);
          protobuf.Message = require(21);
          protobuf.wrappers = require(41);
          protobuf.types = require(36);
          protobuf.util = require(37);
          protobuf.ReflectionObject._configure(protobuf.Root);
          protobuf.Namespace._configure(protobuf.Type, protobuf.Service);
          protobuf.Root._configure(protobuf.Type);
          protobuf.Field._configure(protobuf.Type);
        }, {
          12: 12,
          13: 13,
          14: 14,
          15: 15,
          16: 16,
          18: 18,
          20: 20,
          21: 21,
          22: 22,
          23: 23,
          24: 24,
          25: 25,
          29: 29,
          33: 33,
          35: 35,
          36: 36,
          37: 37,
          40: 40,
          41: 41
        } ],
        18: [ function(require, module, exports) {
          var protobuf = exports;
          protobuf.build = "minimal";
          protobuf.Writer = require(42);
          protobuf.BufferWriter = require(43);
          protobuf.Reader = require(27);
          protobuf.BufferReader = require(28);
          protobuf.util = require(39);
          protobuf.rpc = require(31);
          protobuf.roots = require(30);
          protobuf.configure = configure;
          function configure() {
            protobuf.Reader._configure(protobuf.BufferReader);
            protobuf.util._configure();
          }
          protobuf.Writer._configure(protobuf.BufferWriter);
          configure();
        }, {
          27: 27,
          28: 28,
          30: 30,
          31: 31,
          39: 39,
          42: 42,
          43: 43
        } ],
        19: [ function(require, module, exports) {
          var protobuf = module.exports = require(17);
          protobuf.build = "full";
          protobuf.tokenize = require(34);
          protobuf.parse = require(26);
          protobuf.common = require(11);
          protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
        }, {
          11: 11,
          17: 17,
          26: 26,
          34: 34
        } ],
        20: [ function(require, module, exports) {
          module.exports = MapField;
          var Field = require(16);
          ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
          var types = require(36), util = require(37);
          function MapField(name, id, keyType, type, options) {
            Field.call(this, name, id, type, options);
            if (!util.isString(keyType)) throw TypeError("keyType must be a string");
            this.keyType = keyType;
            this.resolvedKeyType = null;
            this.map = true;
          }
          MapField.fromJSON = function fromJSON(name, json) {
            return new MapField(name, json.id, json.keyType, json.type, json.options);
          };
          MapField.prototype.toJSON = function toJSON() {
            return util.toObject([ "keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options ]);
          };
          MapField.prototype.resolve = function resolve() {
            if (this.resolved) return this;
            if (types.mapKey[this.keyType] === undefined) throw Error("invalid key type: " + this.keyType);
            return Field.prototype.resolve.call(this);
          };
          MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
            "function" === typeof fieldValueType ? fieldValueType = util.decorateType(fieldValueType).name : fieldValueType && "object" === typeof fieldValueType && (fieldValueType = util.decorateEnum(fieldValueType).name);
            return function mapFieldDecorator(prototype, fieldName) {
              util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
            };
          };
        }, {
          16: 16,
          36: 36,
          37: 37
        } ],
        21: [ function(require, module, exports) {
          module.exports = Message;
          var util = require(39);
          function Message(properties) {
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) this[keys[i]] = properties[keys[i]];
          }
          Message.create = function create(properties) {
            return this.$type.create(properties);
          };
          Message.encode = function encode(message, writer) {
            return this.$type.encode(message, writer);
          };
          Message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.$type.encodeDelimited(message, writer);
          };
          Message.decode = function decode(reader) {
            return this.$type.decode(reader);
          };
          Message.decodeDelimited = function decodeDelimited(reader) {
            return this.$type.decodeDelimited(reader);
          };
          Message.verify = function verify(message) {
            return this.$type.verify(message);
          };
          Message.fromObject = function fromObject(object) {
            return this.$type.fromObject(object);
          };
          Message.toObject = function toObject(message, options) {
            return this.$type.toObject(message, options);
          };
          Message.prototype.toJSON = function toJSON() {
            return this.$type.toObject(this, util.toJSONOptions);
          };
        }, {
          39: 39
        } ],
        22: [ function(require, module, exports) {
          module.exports = Method;
          var ReflectionObject = require(24);
          ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
          var util = require(37);
          function Method(name, type, requestType, responseType, requestStream, responseStream, options) {
            if (util.isObject(requestStream)) {
              options = requestStream;
              requestStream = responseStream = undefined;
            } else if (util.isObject(responseStream)) {
              options = responseStream;
              responseStream = undefined;
            }
            if (!(type === undefined || util.isString(type))) throw TypeError("type must be a string");
            if (!util.isString(requestType)) throw TypeError("requestType must be a string");
            if (!util.isString(responseType)) throw TypeError("responseType must be a string");
            ReflectionObject.call(this, name, options);
            this.type = type || "rpc";
            this.requestType = requestType;
            this.requestStream = !!requestStream || undefined;
            this.responseType = responseType;
            this.responseStream = !!responseStream || undefined;
            this.resolvedRequestType = null;
            this.resolvedResponseType = null;
          }
          Method.fromJSON = function fromJSON(name, json) {
            return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);
          };
          Method.prototype.toJSON = function toJSON() {
            return util.toObject([ "type", "rpc" !== this.type && this.type || undefined, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options ]);
          };
          Method.prototype.resolve = function resolve() {
            if (this.resolved) return this;
            this.resolvedRequestType = this.parent.lookupType(this.requestType);
            this.resolvedResponseType = this.parent.lookupType(this.responseType);
            return ReflectionObject.prototype.resolve.call(this);
          };
        }, {
          24: 24,
          37: 37
        } ],
        23: [ function(require, module, exports) {
          module.exports = Namespace;
          var ReflectionObject = require(24);
          ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
          var Enum = require(15), Field = require(16), util = require(37);
          var Type, Service;
          Namespace.fromJSON = function fromJSON(name, json) {
            return new Namespace(name, json.options).addJSON(json.nested);
          };
          function arrayToJSON(array) {
            if (!(array && array.length)) return undefined;
            var obj = {};
            for (var i = 0; i < array.length; ++i) obj[array[i].name] = array[i].toJSON();
            return obj;
          }
          Namespace.arrayToJSON = arrayToJSON;
          function Namespace(name, options) {
            ReflectionObject.call(this, name, options);
            this.nested = undefined;
            this._nestedArray = null;
          }
          function clearCache(namespace) {
            namespace._nestedArray = null;
            return namespace;
          }
          Object.defineProperty(Namespace.prototype, "nestedArray", {
            get: function get() {
              return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
            }
          });
          Namespace.prototype.toJSON = function toJSON() {
            return util.toObject([ "options", this.options, "nested", arrayToJSON(this.nestedArray) ]);
          };
          Namespace.prototype.addJSON = function addJSON(nestedJson) {
            var ns = this;
            if (nestedJson) for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
              nested = nestedJson[names[i]];
              ns.add((nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));
            }
            return this;
          };
          Namespace.prototype.get = function get(name) {
            return this.nested && this.nested[name] || null;
          };
          Namespace.prototype.getEnum = function getEnum(name) {
            if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;
            throw Error("no such enum");
          };
          Namespace.prototype.add = function add(object) {
            if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError("object must be a valid nested object");
            if (this.nested) {
              var prev = this.get(object.name);
              if (prev) {
                if (!(prev instanceof Namespace && object instanceof Namespace) || prev instanceof Type || prev instanceof Service) throw Error("duplicate name '" + object.name + "' in " + this);
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i) object.add(nested[i]);
                this.remove(prev);
                this.nested || (this.nested = {});
                object.setOptions(prev.options, true);
              }
            } else this.nested = {};
            this.nested[object.name] = object;
            object.onAdd(this);
            return clearCache(this);
          };
          Namespace.prototype.remove = function remove(object) {
            if (!(object instanceof ReflectionObject)) throw TypeError("object must be a ReflectionObject");
            if (object.parent !== this) throw Error(object + " is not a member of " + this);
            delete this.nested[object.name];
            Object.keys(this.nested).length || (this.nested = undefined);
            object.onRemove(this);
            return clearCache(this);
          };
          Namespace.prototype.define = function define(path, json) {
            if (util.isString(path)) path = path.split("."); else if (!Array.isArray(path)) throw TypeError("illegal path");
            if (path && path.length && "" === path[0]) throw Error("path must be relative");
            var ptr = this;
            while (path.length > 0) {
              var part = path.shift();
              if (ptr.nested && ptr.nested[part]) {
                ptr = ptr.nested[part];
                if (!(ptr instanceof Namespace)) throw Error("path conflicts with non-namespace objects");
              } else ptr.add(ptr = new Namespace(part));
            }
            json && ptr.addJSON(json);
            return ptr;
          };
          Namespace.prototype.resolveAll = function resolveAll() {
            var nested = this.nestedArray, i = 0;
            while (i < nested.length) nested[i] instanceof Namespace ? nested[i++].resolveAll() : nested[i++].resolve();
            return this.resolve();
          };
          Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
            if ("boolean" === typeof filterTypes) {
              parentAlreadyChecked = filterTypes;
              filterTypes = undefined;
            } else filterTypes && !Array.isArray(filterTypes) && (filterTypes = [ filterTypes ]);
            if (util.isString(path) && path.length) {
              if ("." === path) return this.root;
              path = path.split(".");
            } else if (!path.length) return this;
            if ("" === path[0]) return this.root.lookup(path.slice(1), filterTypes);
            var found = this.get(path[0]);
            if (found) {
              if (1 === path.length) {
                if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;
              } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;
            } else for (var i = 0; i < this.nestedArray.length; ++i) if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;
            if (null === this.parent || parentAlreadyChecked) return null;
            return this.parent.lookup(path, filterTypes);
          };
          Namespace.prototype.lookupType = function lookupType(path) {
            var found = this.lookup(path, [ Type ]);
            if (!found) throw Error("no such type");
            return found;
          };
          Namespace.prototype.lookupEnum = function lookupEnum(path) {
            var found = this.lookup(path, [ Enum ]);
            if (!found) throw Error("no such Enum '" + path + "' in " + this);
            return found;
          };
          Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
            var found = this.lookup(path, [ Type, Enum ]);
            if (!found) throw Error("no such Type or Enum '" + path + "' in " + this);
            return found;
          };
          Namespace.prototype.lookupService = function lookupService(path) {
            var found = this.lookup(path, [ Service ]);
            if (!found) throw Error("no such Service '" + path + "' in " + this);
            return found;
          };
          Namespace._configure = function(Type_, Service_) {
            Type = Type_;
            Service = Service_;
          };
        }, {
          15: 15,
          16: 16,
          24: 24,
          37: 37
        } ],
        24: [ function(require, module, exports) {
          module.exports = ReflectionObject;
          ReflectionObject.className = "ReflectionObject";
          var util = require(37);
          var Root;
          function ReflectionObject(name, options) {
            if (!util.isString(name)) throw TypeError("name must be a string");
            if (options && !util.isObject(options)) throw TypeError("options must be an object");
            this.options = options;
            this.name = name;
            this.parent = null;
            this.resolved = false;
            this.comment = null;
            this.filename = null;
          }
          Object.defineProperties(ReflectionObject.prototype, {
            root: {
              get: function get() {
                var ptr = this;
                while (null !== ptr.parent) ptr = ptr.parent;
                return ptr;
              }
            },
            fullName: {
              get: function get() {
                var path = [ this.name ], ptr = this.parent;
                while (ptr) {
                  path.unshift(ptr.name);
                  ptr = ptr.parent;
                }
                return path.join(".");
              }
            }
          });
          ReflectionObject.prototype.toJSON = function toJSON() {
            throw Error();
          };
          ReflectionObject.prototype.onAdd = function onAdd(parent) {
            this.parent && this.parent !== parent && this.parent.remove(this);
            this.parent = parent;
            this.resolved = false;
            var root = parent.root;
            root instanceof Root && root._handleAdd(this);
          };
          ReflectionObject.prototype.onRemove = function onRemove(parent) {
            var root = parent.root;
            root instanceof Root && root._handleRemove(this);
            this.parent = null;
            this.resolved = false;
          };
          ReflectionObject.prototype.resolve = function resolve() {
            if (this.resolved) return this;
            this.root instanceof Root && (this.resolved = true);
            return this;
          };
          ReflectionObject.prototype.getOption = function getOption(name) {
            if (this.options) return this.options[name];
            return undefined;
          };
          ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
            ifNotSet && this.options && this.options[name] !== undefined || ((this.options || (this.options = {}))[name] = value);
            return this;
          };
          ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
            if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);
            return this;
          };
          ReflectionObject.prototype.toString = function toString() {
            var className = this.constructor.className, fullName = this.fullName;
            if (fullName.length) return className + " " + fullName;
            return className;
          };
          ReflectionObject._configure = function(Root_) {
            Root = Root_;
          };
        }, {
          37: 37
        } ],
        25: [ function(require, module, exports) {
          module.exports = OneOf;
          var ReflectionObject = require(24);
          ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
          var Field = require(16), util = require(37);
          function OneOf(name, fieldNames, options) {
            if (!Array.isArray(fieldNames)) {
              options = fieldNames;
              fieldNames = undefined;
            }
            ReflectionObject.call(this, name, options);
            if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError("fieldNames must be an Array");
            this.oneof = fieldNames || [];
            this.fieldsArray = [];
          }
          OneOf.fromJSON = function fromJSON(name, json) {
            return new OneOf(name, json.oneof, json.options);
          };
          OneOf.prototype.toJSON = function toJSON() {
            return util.toObject([ "options", this.options, "oneof", this.oneof ]);
          };
          function addFieldsToParent(oneof) {
            if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) oneof.fieldsArray[i].parent || oneof.parent.add(oneof.fieldsArray[i]);
          }
          OneOf.prototype.add = function add(field) {
            if (!(field instanceof Field)) throw TypeError("field must be a Field");
            field.parent && field.parent !== this.parent && field.parent.remove(field);
            this.oneof.push(field.name);
            this.fieldsArray.push(field);
            field.partOf = this;
            addFieldsToParent(this);
            return this;
          };
          OneOf.prototype.remove = function remove(field) {
            if (!(field instanceof Field)) throw TypeError("field must be a Field");
            var index = this.fieldsArray.indexOf(field);
            if (index < 0) throw Error(field + " is not a member of " + this);
            this.fieldsArray.splice(index, 1);
            index = this.oneof.indexOf(field.name);
            index > -1 && this.oneof.splice(index, 1);
            field.partOf = null;
            return this;
          };
          OneOf.prototype.onAdd = function onAdd(parent) {
            ReflectionObject.prototype.onAdd.call(this, parent);
            var self = this;
            for (var i = 0; i < this.oneof.length; ++i) {
              var field = parent.get(this.oneof[i]);
              if (field && !field.partOf) {
                field.partOf = self;
                self.fieldsArray.push(field);
              }
            }
            addFieldsToParent(this);
          };
          OneOf.prototype.onRemove = function onRemove(parent) {
            for (var i = 0, field; i < this.fieldsArray.length; ++i) (field = this.fieldsArray[i]).parent && field.parent.remove(field);
            ReflectionObject.prototype.onRemove.call(this, parent);
          };
          OneOf.d = function decorateOneOf() {
            var fieldNames = new Array(arguments.length), index = 0;
            while (index < arguments.length) fieldNames[index] = arguments[index++];
            return function oneOfDecorator(prototype, oneofName) {
              util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
              Object.defineProperty(prototype, oneofName, {
                get: util.oneOfGetter(fieldNames),
                set: util.oneOfSetter(fieldNames)
              });
            };
          };
        }, {
          16: 16,
          24: 24,
          37: 37
        } ],
        26: [ function(require, module, exports) {
          module.exports = parse;
          parse.filename = null;
          parse.defaults = {
            keepCase: false
          };
          var tokenize = require(34), Root = require(29), Type = require(35), Field = require(16), MapField = require(20), OneOf = require(25), Enum = require(15), Service = require(33), Method = require(22), types = require(36), util = require(37);
          var base10Re = /^[1-9][0-9]*$/, base10NegRe = /^-?[1-9][0-9]*$/, base16Re = /^0[x][0-9a-fA-F]+$/, base16NegRe = /^-?0[x][0-9a-fA-F]+$/, base8Re = /^0[0-7]+$/, base8NegRe = /^-?0[0-7]+$/, numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/, nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/, typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/, fqTypeRefRe = /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/;
          function parse(source, root, options) {
            if (!(root instanceof Root)) {
              options = root;
              root = new Root();
            }
            options || (options = parse.defaults);
            var tn = tokenize(source), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
            var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
            var ptr = root;
            var applyCase = options.keepCase ? function(name) {
              return name;
            } : util.camelCase;
            function illegal(token, name, insideTryCatch) {
              var filename = parse.filename;
              insideTryCatch || (parse.filename = null);
              return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
            }
            function readString() {
              var values = [], token;
              do {
                if ('"' !== (token = next()) && "'" !== token) throw illegal(token);
                values.push(next());
                skip(token);
                token = peek();
              } while ('"' === token || "'" === token);
              return values.join("");
            }
            function readValue(acceptTypeRef) {
              var token = next();
              switch (token) {
               case "'":
               case '"':
                push(token);
                return readString();

               case "true":
               case "TRUE":
                return true;

               case "false":
               case "FALSE":
                return false;
              }
              try {
                return parseNumber(token, true);
              } catch (e) {
                if (acceptTypeRef && typeRefRe.test(token)) return token;
                throw illegal(token, "value");
              }
            }
            function readRanges(target, acceptStrings) {
              var token, start;
              do {
                !acceptStrings || '"' !== (token = peek()) && "'" !== token ? target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]) : target.push(readString());
              } while (skip(",", true));
              skip(";");
            }
            function parseNumber(token, insideTryCatch) {
              var sign = 1;
              if ("-" === token.charAt(0)) {
                sign = -1;
                token = token.substring(1);
              }
              switch (token) {
               case "inf":
               case "INF":
               case "Inf":
                return Infinity * sign;

               case "nan":
               case "NAN":
               case "Nan":
               case "NaN":
                return NaN;

               case "0":
                return 0;
              }
              if (base10Re.test(token)) return sign * parseInt(token, 10);
              if (base16Re.test(token)) return sign * parseInt(token, 16);
              if (base8Re.test(token)) return sign * parseInt(token, 8);
              if (numberRe.test(token)) return sign * parseFloat(token);
              throw illegal(token, "number", insideTryCatch);
            }
            function parseId(token, acceptNegative) {
              switch (token) {
               case "max":
               case "MAX":
               case "Max":
                return 536870911;

               case "0":
                return 0;
              }
              if (!acceptNegative && "-" === token.charAt(0)) throw illegal(token, "id");
              if (base10NegRe.test(token)) return parseInt(token, 10);
              if (base16NegRe.test(token)) return parseInt(token, 16);
              if (base8NegRe.test(token)) return parseInt(token, 8);
              throw illegal(token, "id");
            }
            function parsePackage() {
              if (pkg !== undefined) throw illegal("package");
              pkg = next();
              if (!typeRefRe.test(pkg)) throw illegal(pkg, "name");
              ptr = ptr.define(pkg);
              skip(";");
            }
            function parseImport() {
              var token = peek();
              var whichImports;
              switch (token) {
               case "weak":
                whichImports = weakImports || (weakImports = []);
                next();
                break;

               case "public":
                next();

               default:
                whichImports = imports || (imports = []);
              }
              token = readString();
              skip(";");
              whichImports.push(token);
            }
            function parseSyntax() {
              skip("=");
              syntax = readString();
              isProto3 = "proto3" === syntax;
              if (!isProto3 && "proto2" !== syntax) throw illegal(syntax, "syntax");
              skip(";");
            }
            function parseCommon(parent, token) {
              switch (token) {
               case "option":
                parseOption(parent, token);
                skip(";");
                return true;

               case "message":
                parseType(parent, token);
                return true;

               case "enum":
                parseEnum(parent, token);
                return true;

               case "service":
                parseService(parent, token);
                return true;

               case "extend":
                parseExtension(parent, token);
                return true;
              }
              return false;
            }
            function ifBlock(obj, fnIf, fnElse) {
              var trailingLine = tn.line;
              if (obj) {
                obj.comment = cmnt();
                obj.filename = parse.filename;
              }
              if (skip("{", true)) {
                var token;
                while ("}" !== (token = next())) fnIf(token);
                skip(";", true);
              } else {
                fnElse && fnElse();
                skip(";");
                obj && "string" !== typeof obj.comment && (obj.comment = cmnt(trailingLine));
              }
            }
            function parseType(parent, token) {
              if (!nameRe.test(token = next())) throw illegal(token, "type name");
              var type = new Type(token);
              ifBlock(type, function parseType_block(token) {
                if (parseCommon(type, token)) return;
                switch (token) {
                 case "map":
                  parseMapField(type, token);
                  break;

                 case "required":
                 case "optional":
                 case "repeated":
                  parseField(type, token);
                  break;

                 case "oneof":
                  parseOneOf(type, token);
                  break;

                 case "extensions":
                  readRanges(type.extensions || (type.extensions = []));
                  break;

                 case "reserved":
                  readRanges(type.reserved || (type.reserved = []), true);
                  break;

                 default:
                  if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                  push(token);
                  parseField(type, "optional");
                }
              });
              parent.add(type);
            }
            function parseField(parent, rule, extend) {
              var type = next();
              if ("group" === type) {
                parseGroup(parent, rule);
                return;
              }
              if (!typeRefRe.test(type)) throw illegal(type, "type");
              var name = next();
              if (!nameRe.test(name)) throw illegal(name, "name");
              name = applyCase(name);
              skip("=");
              var field = new Field(name, parseId(next()), type, rule, extend);
              ifBlock(field, function parseField_block(token) {
                if ("option" !== token) throw illegal(token);
                parseOption(field, token);
                skip(";");
              }, function parseField_line() {
                parseInlineOptions(field);
              });
              parent.add(field);
              isProto3 || !field.repeated || types.packed[type] === undefined && types.basic[type] !== undefined || field.setOption("packed", false, true);
            }
            function parseGroup(parent, rule) {
              var name = next();
              if (!nameRe.test(name)) throw illegal(name, "name");
              var fieldName = util.lcFirst(name);
              name === fieldName && (name = util.ucFirst(name));
              skip("=");
              var id = parseId(next());
              var type = new Type(name);
              type.group = true;
              var field = new Field(fieldName, id, name, rule);
              field.filename = parse.filename;
              ifBlock(type, function parseGroup_block(token) {
                switch (token) {
                 case "option":
                  parseOption(type, token);
                  skip(";");
                  break;

                 case "required":
                 case "optional":
                 case "repeated":
                  parseField(type, token);
                  break;

                 default:
                  throw illegal(token);
                }
              });
              parent.add(type).add(field);
            }
            function parseMapField(parent) {
              skip("<");
              var keyType = next();
              if (types.mapKey[keyType] === undefined) throw illegal(keyType, "type");
              skip(",");
              var valueType = next();
              if (!typeRefRe.test(valueType)) throw illegal(valueType, "type");
              skip(">");
              var name = next();
              if (!nameRe.test(name)) throw illegal(name, "name");
              skip("=");
              var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
              ifBlock(field, function parseMapField_block(token) {
                if ("option" !== token) throw illegal(token);
                parseOption(field, token);
                skip(";");
              }, function parseMapField_line() {
                parseInlineOptions(field);
              });
              parent.add(field);
            }
            function parseOneOf(parent, token) {
              if (!nameRe.test(token = next())) throw illegal(token, "name");
              var oneof = new OneOf(applyCase(token));
              ifBlock(oneof, function parseOneOf_block(token) {
                if ("option" === token) {
                  parseOption(oneof, token);
                  skip(";");
                } else {
                  push(token);
                  parseField(oneof, "optional");
                }
              });
              parent.add(oneof);
            }
            function parseEnum(parent, token) {
              if (!nameRe.test(token = next())) throw illegal(token, "name");
              var enm = new Enum(token);
              ifBlock(enm, function parseEnum_block(token) {
                if ("option" === token) {
                  parseOption(enm, token);
                  skip(";");
                } else parseEnumValue(enm, token);
              });
              parent.add(enm);
            }
            function parseEnumValue(parent, token) {
              if (!nameRe.test(token)) throw illegal(token, "name");
              skip("=");
              var value = parseId(next(), true), dummy = {};
              ifBlock(dummy, function parseEnumValue_block(token) {
                if ("option" !== token) throw illegal(token);
                parseOption(dummy, token);
                skip(";");
              }, function parseEnumValue_line() {
                parseInlineOptions(dummy);
              });
              parent.add(token, value, dummy.comment);
            }
            function parseOption(parent, token) {
              var isCustom = skip("(", true);
              if (!typeRefRe.test(token = next())) throw illegal(token, "name");
              var name = token;
              if (isCustom) {
                skip(")");
                name = "(" + name + ")";
                token = peek();
                if (fqTypeRefRe.test(token)) {
                  name += token;
                  next();
                }
              }
              skip("=");
              parseOptionValue(parent, name);
            }
            function parseOptionValue(parent, name) {
              if (skip("{", true)) do {
                if (!nameRe.test(token = next())) throw illegal(token, "name");
                if ("{" === peek()) parseOptionValue(parent, name + "." + token); else {
                  skip(":");
                  setOption(parent, name + "." + token, readValue(true));
                }
              } while (!skip("}", true)); else setOption(parent, name, readValue(true));
            }
            function setOption(parent, name, value) {
              parent.setOption && parent.setOption(name, value);
            }
            function parseInlineOptions(parent) {
              if (skip("[", true)) {
                do {
                  parseOption(parent, "option");
                } while (skip(",", true));
                skip("]");
              }
              return parent;
            }
            function parseService(parent, token) {
              if (!nameRe.test(token = next())) throw illegal(token, "service name");
              var service = new Service(token);
              ifBlock(service, function parseService_block(token) {
                if (parseCommon(service, token)) return;
                if ("rpc" !== token) throw illegal(token);
                parseMethod(service, token);
              });
              parent.add(service);
            }
            function parseMethod(parent, token) {
              var type = token;
              if (!nameRe.test(token = next())) throw illegal(token, "name");
              var name = token, requestType, requestStream, responseType, responseStream;
              skip("(");
              skip("stream", true) && (requestStream = true);
              if (!typeRefRe.test(token = next())) throw illegal(token);
              requestType = token;
              skip(")");
              skip("returns");
              skip("(");
              skip("stream", true) && (responseStream = true);
              if (!typeRefRe.test(token = next())) throw illegal(token);
              responseType = token;
              skip(")");
              var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
              ifBlock(method, function parseMethod_block(token) {
                if ("option" !== token) throw illegal(token);
                parseOption(method, token);
                skip(";");
              });
              parent.add(method);
            }
            function parseExtension(parent, token) {
              if (!typeRefRe.test(token = next())) throw illegal(token, "reference");
              var reference = token;
              ifBlock(null, function parseExtension_block(token) {
                switch (token) {
                 case "required":
                 case "repeated":
                 case "optional":
                  parseField(parent, token, reference);
                  break;

                 default:
                  if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);
                  push(token);
                  parseField(parent, "optional", reference);
                }
              });
            }
            var token;
            while (null !== (token = next())) switch (token) {
             case "package":
              if (!head) throw illegal(token);
              parsePackage();
              break;

             case "import":
              if (!head) throw illegal(token);
              parseImport();
              break;

             case "syntax":
              if (!head) throw illegal(token);
              parseSyntax();
              break;

             case "option":
              if (!head) throw illegal(token);
              parseOption(ptr, token);
              skip(";");
              break;

             default:
              if (parseCommon(ptr, token)) {
                head = false;
                continue;
              }
              throw illegal(token);
            }
            parse.filename = null;
            return {
              package: pkg,
              imports: imports,
              weakImports: weakImports,
              syntax: syntax,
              root: root
            };
          }
        }, {
          15: 15,
          16: 16,
          20: 20,
          22: 22,
          25: 25,
          29: 29,
          33: 33,
          34: 34,
          35: 35,
          36: 36,
          37: 37
        } ],
        27: [ function(require, module, exports) {
          module.exports = Reader;
          var util = require(39);
          var BufferReader;
          var LongBits = util.LongBits, utf8 = util.utf8;
          function indexOutOfRange(reader, writeLength) {
            return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
          }
          function Reader(buffer) {
            this.buf = buffer;
            this.pos = 0;
            this.len = buffer.length;
          }
          var create_array = "undefined" !== typeof Uint8Array ? function create_typed_array(buffer) {
            if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
            throw Error("illegal buffer");
          } : function create_array(buffer) {
            if (Array.isArray(buffer)) return new Reader(buffer);
            throw Error("illegal buffer");
          };
          Reader.create = util.Buffer ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
              return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);
            })(buffer);
          } : create_array;
          Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
          Reader.prototype.uint32 = function read_uint32_setup() {
            var value = 4294967295;
            return function read_uint32() {
              value = (127 & this.buf[this.pos]) >>> 0;
              if (this.buf[this.pos++] < 128) return value;
              value = (value | (127 & this.buf[this.pos]) << 7) >>> 0;
              if (this.buf[this.pos++] < 128) return value;
              value = (value | (127 & this.buf[this.pos]) << 14) >>> 0;
              if (this.buf[this.pos++] < 128) return value;
              value = (value | (127 & this.buf[this.pos]) << 21) >>> 0;
              if (this.buf[this.pos++] < 128) return value;
              value = (value | (15 & this.buf[this.pos]) << 28) >>> 0;
              if (this.buf[this.pos++] < 128) return value;
              if ((this.pos += 5) > this.len) {
                this.pos = this.len;
                throw indexOutOfRange(this, 10);
              }
              return value;
            };
          }();
          Reader.prototype.int32 = function read_int32() {
            return 0 | this.uint32();
          };
          Reader.prototype.sint32 = function read_sint32() {
            var value = this.uint32();
            return value >>> 1 ^ -(1 & value) | 0;
          };
          function readLongVarint() {
            var bits = new LongBits(0, 0);
            var i = 0;
            if (!(this.len - this.pos > 4)) {
              for (;i < 3; ++i) {
                if (this.pos >= this.len) throw indexOutOfRange(this);
                bits.lo = (bits.lo | (127 & this.buf[this.pos]) << 7 * i) >>> 0;
                if (this.buf[this.pos++] < 128) return bits;
              }
              bits.lo = (bits.lo | (127 & this.buf[this.pos++]) << 7 * i) >>> 0;
              return bits;
            }
            for (;i < 4; ++i) {
              bits.lo = (bits.lo | (127 & this.buf[this.pos]) << 7 * i) >>> 0;
              if (this.buf[this.pos++] < 128) return bits;
            }
            bits.lo = (bits.lo | (127 & this.buf[this.pos]) << 28) >>> 0;
            bits.hi = (bits.hi | (127 & this.buf[this.pos]) >> 4) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
            i = 0;
            if (this.len - this.pos > 4) for (;i < 5; ++i) {
              bits.hi = (bits.hi | (127 & this.buf[this.pos]) << 7 * i + 3) >>> 0;
              if (this.buf[this.pos++] < 128) return bits;
            } else for (;i < 5; ++i) {
              if (this.pos >= this.len) throw indexOutOfRange(this);
              bits.hi = (bits.hi | (127 & this.buf[this.pos]) << 7 * i + 3) >>> 0;
              if (this.buf[this.pos++] < 128) return bits;
            }
            throw Error("invalid varint encoding");
          }
          Reader.prototype.bool = function read_bool() {
            return 0 !== this.uint32();
          };
          function readFixed32_end(buf, end) {
            return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
          }
          Reader.prototype.fixed32 = function read_fixed32() {
            if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
            return readFixed32_end(this.buf, this.pos += 4);
          };
          Reader.prototype.sfixed32 = function read_sfixed32() {
            if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
            return 0 | readFixed32_end(this.buf, this.pos += 4);
          };
          function readFixed64() {
            if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
            return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
          }
          Reader.prototype["float"] = function read_float() {
            if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
            var value = util["float"].readFloatLE(this.buf, this.pos);
            this.pos += 4;
            return value;
          };
          Reader.prototype["double"] = function read_double() {
            if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
            var value = util["float"].readDoubleLE(this.buf, this.pos);
            this.pos += 8;
            return value;
          };
          Reader.prototype.bytes = function read_bytes() {
            var length = this.uint32(), start = this.pos, end = this.pos + length;
            if (end > this.len) throw indexOutOfRange(this, length);
            this.pos += length;
            if (Array.isArray(this.buf)) return this.buf.slice(start, end);
            return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
          };
          Reader.prototype.string = function read_string() {
            var bytes = this.bytes();
            return utf8.read(bytes, 0, bytes.length);
          };
          Reader.prototype.skip = function skip(length) {
            if ("number" === typeof length) {
              if (this.pos + length > this.len) throw indexOutOfRange(this, length);
              this.pos += length;
            } else do {
              if (this.pos >= this.len) throw indexOutOfRange(this);
            } while (128 & this.buf[this.pos++]);
            return this;
          };
          Reader.prototype.skipType = function(wireType) {
            switch (wireType) {
             case 0:
              this.skip();
              break;

             case 1:
              this.skip(8);
              break;

             case 2:
              this.skip(this.uint32());
              break;

             case 3:
              do {
                if (4 === (wireType = 7 & this.uint32())) break;
                this.skipType(wireType);
              } while (true);
              break;

             case 5:
              this.skip(4);
              break;

             default:
              throw Error("invalid wire type " + wireType + " at offset " + this.pos);
            }
            return this;
          };
          Reader._configure = function(BufferReader_) {
            BufferReader = BufferReader_;
            var fn = util.Long ? "toLong" : "toNumber";
            util.merge(Reader.prototype, {
              int64: function read_int64() {
                return readLongVarint.call(this)[fn](false);
              },
              uint64: function read_uint64() {
                return readLongVarint.call(this)[fn](true);
              },
              sint64: function read_sint64() {
                return readLongVarint.call(this).zzDecode()[fn](false);
              },
              fixed64: function read_fixed64() {
                return readFixed64.call(this)[fn](true);
              },
              sfixed64: function read_sfixed64() {
                return readFixed64.call(this)[fn](false);
              }
            });
          };
        }, {
          39: 39
        } ],
        28: [ function(require, module, exports) {
          module.exports = BufferReader;
          var Reader = require(27);
          (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
          var util = require(39);
          function BufferReader(buffer) {
            Reader.call(this, buffer);
          }
          util.Buffer && (BufferReader.prototype._slice = util.Buffer.prototype.slice);
          BufferReader.prototype.string = function read_string_buffer() {
            var len = this.uint32();
            return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
          };
        }, {
          27: 27,
          39: 39
        } ],
        29: [ function(require, module, exports) {
          module.exports = Root;
          var Namespace = require(23);
          ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
          var Field = require(16), Enum = require(15), OneOf = require(25), util = require(37);
          var Type, parse, common;
          function Root(options) {
            Namespace.call(this, "", options);
            this.deferred = [];
            this.files = [];
          }
          Root.fromJSON = function fromJSON(json, root) {
            root || (root = new Root());
            json.options && root.setOptions(json.options);
            return root.addJSON(json.nested);
          };
          Root.prototype.resolvePath = util.path.resolve;
          function SYNC() {}
          Root.prototype.load = function load(filename, options, callback) {
            if ("function" === typeof options) {
              callback = options;
              options = undefined;
            }
            var self = this;
            if (!callback) return util.asPromise(load, self, filename, options);
            var sync = callback === SYNC;
            function finish(err, root) {
              if (!callback) return;
              var cb = callback;
              callback = null;
              if (sync) throw err;
              cb(err, root);
            }
            function process(filename, source) {
              try {
                util.isString(source) && "{" === source.charAt(0) && (source = JSON.parse(source));
                if (util.isString(source)) {
                  parse.filename = filename;
                  var parsed = parse(source, self, options), resolved, i = 0;
                  if (parsed.imports) for (;i < parsed.imports.length; ++i) (resolved = self.resolvePath(filename, parsed.imports[i])) && fetch(resolved);
                  if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) (resolved = self.resolvePath(filename, parsed.weakImports[i])) && fetch(resolved, true);
                } else self.setOptions(source.options).addJSON(source.nested);
              } catch (err) {
                finish(err);
              }
              sync || queued || finish(null, self);
            }
            function fetch(filename, weak) {
              var idx = filename.lastIndexOf("google/protobuf/");
              if (idx > -1) {
                var altname = filename.substring(idx);
                altname in common && (filename = altname);
              }
              if (self.files.indexOf(filename) > -1) return;
              self.files.push(filename);
              if (filename in common) {
                if (sync) process(filename, common[filename]); else {
                  ++queued;
                  setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                  });
                }
                return;
              }
              if (sync) {
                var source;
                try {
                  source = util.fs.readFileSync(filename).toString("utf8");
                } catch (err) {
                  weak || finish(err);
                  return;
                }
                process(filename, source);
              } else {
                ++queued;
                util.fetch(filename, function(err, source) {
                  --queued;
                  if (!callback) return;
                  if (err) {
                    weak ? queued || finish(null, self) : finish(err);
                    return;
                  }
                  process(filename, source);
                });
              }
            }
            var queued = 0;
            util.isString(filename) && (filename = [ filename ]);
            for (var i = 0, resolved; i < filename.length; ++i) (resolved = self.resolvePath("", filename[i])) && fetch(resolved);
            if (sync) return self;
            queued || finish(null, self);
            return undefined;
          };
          Root.prototype.loadSync = function loadSync(filename, options) {
            if (!util.isNode) throw Error("not supported");
            return this.load(filename, options, SYNC);
          };
          Root.prototype.resolveAll = function resolveAll() {
            if (this.deferred.length) throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
              return "'extend " + field.extend + "' in " + field.parent.fullName;
            }).join(", "));
            return Namespace.prototype.resolveAll.call(this);
          };
          var exposeRe = /^[A-Z]/;
          function tryHandleExtension(root, field) {
            var extendedType = field.parent.lookup(field.extend);
            if (extendedType) {
              var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
              sisterField.declaringField = field;
              field.extensionField = sisterField;
              extendedType.add(sisterField);
              return true;
            }
            return false;
          }
          Root.prototype._handleAdd = function _handleAdd(object) {
            if (object instanceof Field) object.extend === undefined || object.extensionField || tryHandleExtension(this, object) || this.deferred.push(object); else if (object instanceof Enum) exposeRe.test(object.name) && (object.parent[object.name] = objectGetArr); else if (!(object instanceof OneOf)) {
              if (object instanceof Type) for (var i = 0; i < this.deferred.length; ) tryHandleExtension(this, this.deferred[i]) ? this.deferred.splice(i, 1) : ++i;
              for (var j = 0; j < object.nestedArray.length; ++j) this._handleAdd(object._nestedArray[j]);
              exposeRe.test(object.name) && (object.parent[object.name] = object);
            }
          };
          Root.prototype._handleRemove = function _handleRemove(object) {
            if (object instanceof Field) {
              if (object.extend !== undefined) if (object.extensionField) {
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
              } else {
                var index = this.deferred.indexOf(object);
                index > -1 && this.deferred.splice(index, 1);
              }
            } else if (object instanceof Enum) exposeRe.test(object.name) && delete object.parent[object.name]; else if (object instanceof Namespace) {
              for (var i = 0; i < object.nestedArray.length; ++i) this._handleRemove(object._nestedArray[i]);
              exposeRe.test(object.name) && delete object.parent[object.name];
            }
          };
          Root._configure = function(Type_, parse_, common_) {
            Type = Type_;
            parse = parse_;
            common = common_;
          };
        }, {
          15: 15,
          16: 16,
          23: 23,
          25: 25,
          37: 37
        } ],
        30: [ function(require, module, exports) {
          module.exports = {};
        }, {} ],
        31: [ function(require, module, exports) {
          var rpc = exports;
          rpc.Service = require(32);
        }, {
          32: 32
        } ],
        32: [ function(require, module, exports) {
          module.exports = Service;
          var util = require(39);
          (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
          function Service(rpcImpl, requestDelimited, responseDelimited) {
            if ("function" !== typeof rpcImpl) throw TypeError("rpcImpl must be a function");
            util.EventEmitter.call(this);
            this.rpcImpl = rpcImpl;
            this.requestDelimited = Boolean(requestDelimited);
            this.responseDelimited = Boolean(responseDelimited);
          }
          Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
            if (!request) throw TypeError("request must be specified");
            var self = this;
            if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);
            if (!self.rpcImpl) {
              setTimeout(function() {
                callback(Error("already ended"));
              }, 0);
              return undefined;
            }
            try {
              return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
                if (err) {
                  self.emit("error", err, method);
                  return callback(err);
                }
                if (null === response) {
                  self.end(true);
                  return undefined;
                }
                if (!(response instanceof responseCtor)) try {
                  response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                } catch (err) {
                  self.emit("error", err, method);
                  return callback(err);
                }
                self.emit("data", response, method);
                return callback(null, response);
              });
            } catch (err) {
              self.emit("error", err, method);
              setTimeout(function() {
                callback(err);
              }, 0);
              return undefined;
            }
          };
          Service.prototype.end = function end(endedByRPC) {
            if (this.rpcImpl) {
              endedByRPC || this.rpcImpl(null, null, null);
              this.rpcImpl = null;
              this.emit("end").off();
            }
            return this;
          };
        }, {
          39: 39
        } ],
        33: [ function(require, module, exports) {
          module.exports = Service;
          var Namespace = require(23);
          ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
          var Method = require(22), util = require(37), rpc = require(31);
          function Service(name, options) {
            Namespace.call(this, name, options);
            this.methods = {};
            this._methodsArray = null;
          }
          Service.fromJSON = function fromJSON(name, json) {
            var service = new Service(name, json.options);
            if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));
            json.nested && service.addJSON(json.nested);
            return service;
          };
          Service.prototype.toJSON = function toJSON() {
            var inherited = Namespace.prototype.toJSON.call(this);
            return util.toObject([ "options", inherited && inherited.options || undefined, "methods", Namespace.arrayToJSON(this.methodsArray) || {}, "nested", inherited && inherited.nested || undefined ]);
          };
          Object.defineProperty(Service.prototype, "methodsArray", {
            get: function get() {
              return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
            }
          });
          function clearCache(service) {
            service._methodsArray = null;
            return service;
          }
          Service.prototype.get = function get(name) {
            return this.methods[name] || Namespace.prototype.get.call(this, name);
          };
          Service.prototype.resolveAll = function resolveAll() {
            var methods = this.methodsArray;
            for (var i = 0; i < methods.length; ++i) methods[i].resolve();
            return Namespace.prototype.resolve.call(this);
          };
          Service.prototype.add = function add(object) {
            if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);
            if (object instanceof Method) {
              this.methods[object.name] = object;
              object.parent = this;
              return clearCache(this);
            }
            return Namespace.prototype.add.call(this, object);
          };
          Service.prototype.remove = function remove(object) {
            if (object instanceof Method) {
              if (this.methods[object.name] !== object) throw Error(object + " is not a member of " + this);
              delete this.methods[object.name];
              object.parent = null;
              return clearCache(this);
            }
            return Namespace.prototype.remove.call(this, object);
          };
          Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
            for (var i = 0, method; i < this.methodsArray.length; ++i) rpcService[util.lcFirst((method = this._methodsArray[i]).resolve().name)] = util.codegen([ "r", "c" ], util.lcFirst(method.name))("return this.rpcCall(m,q,s,r,c)")({
              m: method,
              q: method.resolvedRequestType.ctor,
              s: method.resolvedResponseType.ctor
            });
            return rpcService;
          };
        }, {
          22: 22,
          23: 23,
          31: 31,
          37: 37
        } ],
        34: [ function(require, module, exports) {
          module.exports = tokenize;
          var delimRe = /[\s{}=;:[\],'"()<>]/g, stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g, stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
          var setCommentRe = /^ *[*/]+ */, setCommentSplitRe = /\n/g, whitespaceRe = /\s/, unescapeRe = /\\(.?)/g;
          var unescapeMap = {
            0: "\0",
            r: "\r",
            n: "\n",
            t: "\t"
          };
          function unescape(str) {
            return str.replace(unescapeRe, function($0, $1) {
              switch ($1) {
               case "\\":
               case "":
                return $1;

               default:
                return unescapeMap[$1] || "";
              }
            });
          }
          tokenize.unescape = unescape;
          function tokenize(source) {
            source = source.toString();
            var offset = 0, length = source.length, line = 1, commentType = null, commentText = null, commentLine = 0, commentLineEmpty = false;
            var stack = [];
            var stringDelim = null;
            function illegal(subject) {
              return Error("illegal " + subject + " (line " + line + ")");
            }
            function readString() {
              var re = "'" === stringDelim ? stringSingleRe : stringDoubleRe;
              re.lastIndex = offset - 1;
              var match = re.exec(source);
              if (!match) throw illegal("string");
              offset = re.lastIndex;
              push(stringDelim);
              stringDelim = null;
              return unescape(match[1]);
            }
            function charAt(pos) {
              return source.charAt(pos);
            }
            function setComment(start, end) {
              commentType = source.charAt(start++);
              commentLine = line;
              commentLineEmpty = false;
              var offset = start - 3, c;
              do {
                if (--offset < 0 || "\n" === (c = source.charAt(offset))) {
                  commentLineEmpty = true;
                  break;
                }
              } while (" " === c || "\t" === c);
              var lines = source.substring(start, end).split(setCommentSplitRe);
              for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(setCommentRe, "").trim();
              commentText = lines.join("\n").trim();
            }
            function next() {
              if (stack.length > 0) return stack.shift();
              if (stringDelim) return readString();
              var repeat, prev, curr, start, isDoc;
              do {
                if (offset === length) return null;
                repeat = false;
                while (whitespaceRe.test(curr = charAt(offset))) {
                  "\n" === curr && ++line;
                  if (++offset === length) return null;
                }
                if ("/" === charAt(offset)) {
                  if (++offset === length) throw illegal("comment");
                  if ("/" === charAt(offset)) {
                    isDoc = "/" === charAt(start = offset + 1);
                    while ("\n" !== charAt(++offset)) if (offset === length) return null;
                    ++offset;
                    isDoc && setComment(start, offset - 1);
                    ++line;
                    repeat = true;
                  } else {
                    if ("*" !== (curr = charAt(offset))) return "/";
                    isDoc = "*" === charAt(start = offset + 1);
                    do {
                      "\n" === curr && ++line;
                      if (++offset === length) throw illegal("comment");
                      prev = curr;
                      curr = charAt(offset);
                    } while ("*" !== prev || "/" !== curr);
                    ++offset;
                    isDoc && setComment(start, offset - 2);
                    repeat = true;
                  }
                }
              } while (repeat);
              var end = offset;
              delimRe.lastIndex = 0;
              var delim = delimRe.test(charAt(end++));
              if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;
              var token = source.substring(offset, offset = end);
              '"' !== token && "'" !== token || (stringDelim = token);
              return token;
            }
            function push(token) {
              stack.push(token);
            }
            function peek() {
              if (!stack.length) {
                var token = next();
                if (null === token) return null;
                push(token);
              }
              return stack[0];
            }
            function skip(expected, optional) {
              var actual = peek(), equals = actual === expected;
              if (equals) {
                next();
                return true;
              }
              if (!optional) throw illegal("token '" + actual + "', '" + expected + "' expected");
              return false;
            }
            function cmnt(trailingLine) {
              var ret = null;
              if (trailingLine === undefined) commentLine !== line - 1 || "*" !== commentType && !commentLineEmpty || (ret = commentText); else {
                commentLine < trailingLine && peek();
                commentLine !== trailingLine || commentLineEmpty || "/" !== commentType || (ret = commentText);
              }
              return ret;
            }
            return Object.defineProperty({
              next: next,
              peek: peek,
              push: push,
              skip: skip,
              cmnt: cmnt
            }, "line", {
              get: function get() {
                return line;
              }
            });
          }
        }, {} ],
        35: [ function(require, module, exports) {
          module.exports = Type;
          var Namespace = require(23);
          ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
          var Enum = require(15), OneOf = require(25), Field = require(16), MapField = require(20), Service = require(33), Message = require(21), Reader = require(27), Writer = require(42), util = require(37), encoder = require(14), decoder = require(13), verifier = require(40), converter = require(12), wrappers = require(41);
          function Type(name, options) {
            Namespace.call(this, name, options);
            this.fields = {};
            this.oneofs = undefined;
            this.extensions = undefined;
            this.reserved = undefined;
            this.group = undefined;
            this._fieldsById = null;
            this._fieldsArray = null;
            this._oneofsArray = null;
            this._ctor = null;
          }
          Object.defineProperties(Type.prototype, {
            fieldsById: {
              get: function get() {
                if (this._fieldsById) return this._fieldsById;
                this._fieldsById = {};
                for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                  var field = this.fields[names[i]], id = field.id;
                  if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);
                  this._fieldsById[id] = field;
                }
                return this._fieldsById;
              }
            },
            fieldsArray: {
              get: function get() {
                return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
              }
            },
            oneofsArray: {
              get: function get() {
                return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
              }
            },
            ctor: {
              get: function get() {
                return this._ctor || (this.ctor = Type.generateConstructor(this)());
              },
              set: function set(ctor) {
                var prototype = ctor.prototype;
                if (!(prototype instanceof Message)) {
                  (ctor.prototype = new Message()).constructor = ctor;
                  util.merge(ctor.prototype, prototype);
                }
                ctor.$type = ctor.prototype.$type = this;
                util.merge(ctor, Message, true);
                this._ctor = ctor;
                var i = 0;
                for (;i < this.fieldsArray.length; ++i) this._fieldsArray[i].resolve();
                var ctorProperties = {};
                for (i = 0; i < this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {
                  get: util.oneOfGetter(this._oneofsArray[i].oneof),
                  set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
                i && Object.defineProperties(ctor.prototype, ctorProperties);
              }
            }
          });
          Type.generateConstructor = function generateConstructor(mtype) {
            var gen = util.codegen([ "p" ], mtype.name);
            for (var i = 0, field; i < mtype.fieldsArray.length; ++i) (field = mtype._fieldsArray[i]).map ? gen("this%s={}", util.safeProp(field.name)) : field.repeated && gen("this%s=[]", util.safeProp(field.name));
            return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
          };
          function clearCache(type) {
            type._fieldsById = type._fieldsArray = type._oneofsArray = null;
            delete type.encode;
            delete type.decode;
            delete type.verify;
            return type;
          }
          Type.fromJSON = function fromJSON(name, json) {
            var type = new Type(name, json.options);
            type.extensions = json.extensions;
            type.reserved = json.reserved;
            var names = Object.keys(json.fields), i = 0;
            for (;i < names.length; ++i) type.add(("undefined" !== typeof json.fields[names[i]].keyType ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
            if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
            if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
              var nested = json.nested[names[i]];
              type.add((nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
            }
            json.extensions && json.extensions.length && (type.extensions = json.extensions);
            json.reserved && json.reserved.length && (type.reserved = json.reserved);
            json.group && (type.group = true);
            return type;
          };
          Type.prototype.toJSON = function toJSON() {
            var inherited = Namespace.prototype.toJSON.call(this);
            return util.toObject([ "options", inherited && inherited.options || undefined, "oneofs", Namespace.arrayToJSON(this.oneofsArray), "fields", Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
              return !obj.declaringField;
            })) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : undefined, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "group", this.group || undefined, "nested", inherited && inherited.nested || undefined ]);
          };
          Type.prototype.resolveAll = function resolveAll() {
            var fields = this.fieldsArray, i = 0;
            while (i < fields.length) fields[i++].resolve();
            var oneofs = this.oneofsArray;
            i = 0;
            while (i < oneofs.length) oneofs[i++].resolve();
            return Namespace.prototype.resolveAll.call(this);
          };
          Type.prototype.get = function get(name) {
            return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
          };
          Type.prototype.add = function add(object) {
            if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);
            if (object instanceof Field && object.extend === undefined) {
              if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
              if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
              if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);
              object.parent && object.parent.remove(object);
              this.fields[object.name] = object;
              object.message = this;
              object.onAdd(this);
              return clearCache(this);
            }
            if (object instanceof OneOf) {
              this.oneofs || (this.oneofs = {});
              this.oneofs[object.name] = object;
              object.onAdd(this);
              return clearCache(this);
            }
            return Namespace.prototype.add.call(this, object);
          };
          Type.prototype.remove = function remove(object) {
            if (object instanceof Field && object.extend === undefined) {
              if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);
              delete this.fields[object.name];
              object.parent = null;
              object.onRemove(this);
              return clearCache(this);
            }
            if (object instanceof OneOf) {
              if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);
              delete this.oneofs[object.name];
              object.parent = null;
              object.onRemove(this);
              return clearCache(this);
            }
            return Namespace.prototype.remove.call(this, object);
          };
          Type.prototype.isReservedId = function isReservedId(id) {
            if (this.reserved) for (var i = 0; i < this.reserved.length; ++i) if ("string" !== typeof this.reserved[i] && this.reserved[i][0] <= id && this.reserved[i][1] >= id) return true;
            return false;
          };
          Type.prototype.isReservedName = function isReservedName(name) {
            if (this.reserved) for (var i = 0; i < this.reserved.length; ++i) if (this.reserved[i] === name) return true;
            return false;
          };
          Type.prototype.create = function create(properties) {
            return new this.ctor(properties);
          };
          Type.prototype.setup = function setup() {
            var fullName = this.fullName, types = [];
            for (var i = 0; i < this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);
            this.encode = encoder(this)({
              Writer: Writer,
              types: types,
              util: util
            });
            this.decode = decoder(this)({
              Reader: Reader,
              types: types,
              util: util
            });
            this.verify = verifier(this)({
              types: types,
              util: util
            });
            this.fromObject = converter.fromObject(this)({
              types: types,
              util: util
            });
            this.toObject = converter.toObject(this)({
              types: types,
              util: util
            });
            var wrapper = wrappers[fullName];
            if (wrapper) {
              var originalThis = Object.create(this);
              originalThis.fromObject = this.fromObject;
              this.fromObject = wrapper.fromObject.bind(originalThis);
              originalThis.toObject = this.toObject;
              this.toObject = wrapper.toObject.bind(originalThis);
            }
            return this;
          };
          Type.prototype.encode = function encode_setup(message, writer) {
            return this.setup().encode(message, writer);
          };
          Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
          };
          Type.prototype.decode = function decode_setup(reader, length) {
            return this.setup().decode(reader, length);
          };
          Type.prototype.decodeDelimited = function decodeDelimited(reader) {
            reader instanceof Reader || (reader = Reader.create(reader));
            return this.decode(reader, reader.uint32());
          };
          Type.prototype.verify = function verify_setup(message) {
            return this.setup().verify(message);
          };
          Type.prototype.fromObject = function fromObject(object) {
            return this.setup().fromObject(object);
          };
          Type.prototype.toObject = function toObject(message, options) {
            return this.setup().toObject(message, options);
          };
          Type.d = function decorateType(typeName) {
            return function typeDecorator(target) {
              util.decorateType(target, typeName);
            };
          };
        }, {
          12: 12,
          13: 13,
          14: 14,
          15: 15,
          16: 16,
          20: 20,
          21: 21,
          23: 23,
          25: 25,
          27: 27,
          33: 33,
          37: 37,
          40: 40,
          41: 41,
          42: 42
        } ],
        36: [ function(require, module, exports) {
          var types = exports;
          var util = require(37);
          var s = [ "double", "float", "int32", "uint32", "sint32", "fixed32", "sfixed32", "int64", "uint64", "sint64", "fixed64", "sfixed64", "bool", "string", "bytes" ];
          function bake(values, offset) {
            var i = 0, o = {};
            offset |= 0;
            while (i < values.length) o[s[i + offset]] = values[i++];
            return o;
          }
          types.basic = bake([ 1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2, 2 ]);
          types.defaults = bake([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, "", util.emptyArray, null ]);
          types["long"] = bake([ 0, 0, 0, 1, 1 ], 7);
          types.mapKey = bake([ 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2 ], 2);
          types.packed = bake([ 1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0 ]);
        }, {
          37: 37
        } ],
        37: [ function(require, module, exports) {
          var util = module.exports = require(39);
          var roots = require(30);
          var Type, Enum;
          util.codegen = require(3);
          util.fetch = require(5);
          util.path = require(8);
          util.fs = util.inquire("fs");
          util.toArray = function toArray(object) {
            if (object) {
              var keys = Object.keys(object), array = new Array(keys.length), index = 0;
              while (index < keys.length) array[index] = object[keys[index++]];
              return array;
            }
            return [];
          };
          util.toObject = function toObject(array) {
            var object = {}, index = 0;
            while (index < array.length) {
              var key = array[index++], val = array[index++];
              val !== undefined && (object[key] = val);
            }
            return object;
          };
          var safePropBackslashRe = /\\/g, safePropQuoteRe = /"/g;
          util.safeProp = function safeProp(prop) {
            return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
          };
          util.ucFirst = function ucFirst(str) {
            return str.charAt(0).toUpperCase() + str.substring(1);
          };
          var camelCaseRe = /_([a-z])/g;
          util.camelCase = function camelCase(str) {
            return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
              return $1.toUpperCase();
            });
          };
          util.compareFieldsById = function compareFieldsById(a, b) {
            return a.id - b.id;
          };
          util.decorateType = function decorateType(ctor, typeName) {
            if (ctor.$type) {
              if (typeName && ctor.$type.name !== typeName) {
                util.decorateRoot.remove(ctor.$type);
                ctor.$type.name = typeName;
                util.decorateRoot.add(ctor.$type);
              }
              return ctor.$type;
            }
            Type || (Type = require(35));
            var type = new Type(typeName || ctor.name);
            util.decorateRoot.add(type);
            type.ctor = ctor;
            Object.defineProperty(ctor, "$type", {
              value: type,
              enumerable: false
            });
            Object.defineProperty(ctor.prototype, "$type", {
              value: type,
              enumerable: false
            });
            return type;
          };
          var decorateEnumIndex = 0;
          util.decorateEnum = function decorateEnum(object) {
            if (object.$type) return object.$type;
            Enum || (Enum = require(15));
            var enm = new Enum("Enum" + decorateEnumIndex++, object);
            util.decorateRoot.add(enm);
            Object.defineProperty(object, "$type", {
              value: enm,
              enumerable: false
            });
            return enm;
          };
          Object.defineProperty(util, "decorateRoot", {
            get: function get() {
              return roots["decorated"] || (roots["decorated"] = new (require(29))());
            }
          });
        }, {
          15: 15,
          29: 29,
          3: 3,
          30: 30,
          35: 35,
          39: 39,
          5: 5,
          8: 8
        } ],
        38: [ function(require, module, exports) {
          module.exports = LongBits;
          var util = require(39);
          function LongBits(lo, hi) {
            this.lo = lo >>> 0;
            this.hi = hi >>> 0;
          }
          var zero = LongBits.zero = new LongBits(0, 0);
          zero.toNumber = function() {
            return 0;
          };
          zero.zzEncode = zero.zzDecode = function() {
            return this;
          };
          zero.length = function() {
            return 1;
          };
          var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
          LongBits.fromNumber = function fromNumber(value) {
            if (0 === value) return zero;
            var sign = value < 0;
            sign && (value = -value);
            var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
            if (sign) {
              hi = ~hi >>> 0;
              lo = ~lo >>> 0;
              if (++lo > 4294967295) {
                lo = 0;
                ++hi > 4294967295 && (hi = 0);
              }
            }
            return new LongBits(lo, hi);
          };
          LongBits.from = function from(value) {
            if ("number" === typeof value) return LongBits.fromNumber(value);
            if (util.isString(value)) {
              if (!util.Long) return LongBits.fromNumber(parseInt(value, 10));
              value = util.Long.fromString(value);
            }
            return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
          };
          LongBits.prototype.toNumber = function toNumber(unsigned) {
            if (!unsigned && this.hi >>> 31) {
              var lo = 1 + ~this.lo >>> 0, hi = ~this.hi >>> 0;
              lo || (hi = hi + 1 >>> 0);
              return -(lo + 4294967296 * hi);
            }
            return this.lo + 4294967296 * this.hi;
          };
          LongBits.prototype.toLong = function toLong(unsigned) {
            return util.Long ? new util.Long(0 | this.lo, 0 | this.hi, Boolean(unsigned)) : {
              low: 0 | this.lo,
              high: 0 | this.hi,
              unsigned: Boolean(unsigned)
            };
          };
          var charCodeAt = String.prototype.charCodeAt;
          LongBits.fromHash = function fromHash(hash) {
            if (hash === zeroHash) return zero;
            return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
          };
          LongBits.prototype.toHash = function toHash() {
            return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
          };
          LongBits.prototype.zzEncode = function zzEncode() {
            var mask = this.hi >> 31;
            this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
            this.lo = (this.lo << 1 ^ mask) >>> 0;
            return this;
          };
          LongBits.prototype.zzDecode = function zzDecode() {
            var mask = -(1 & this.lo);
            this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
            this.hi = (this.hi >>> 1 ^ mask) >>> 0;
            return this;
          };
          LongBits.prototype.length = function length() {
            var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
            return 0 === part2 ? 0 === part1 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
          };
        }, {
          39: 39
        } ],
        39: [ function(require, module, exports) {
          var util = exports;
          util.asPromise = require(1);
          util.base64 = require(2);
          util.EventEmitter = require(4);
          util["float"] = require(6);
          util.inquire = require(7);
          util.utf8 = require(10);
          util.pool = require(9);
          util.LongBits = require(38);
          util.emptyArray = Object.freeze ? Object.freeze([]) : [];
          util.emptyObject = Object.freeze ? Object.freeze({}) : {};
          util.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);
          util.isInteger = Number.isInteger || function isInteger(value) {
            return "number" === typeof value && isFinite(value) && Math.floor(value) === value;
          };
          util.isString = function isString(value) {
            return "string" === typeof value || value instanceof String;
          };
          util.isObject = function isObject(value) {
            return value && "object" === typeof value;
          };
          util.isset = util.isSet = function isSet(obj, prop) {
            var value = obj[prop];
            if (null != value && obj.hasOwnProperty(prop)) return "object" !== typeof value || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
            return false;
          };
          util.Buffer = function() {
            try {
              var Buffer = util.inquire("buffer").Buffer;
              return Buffer.prototype.utf8Write ? Buffer : null;
            } catch (e) {
              return null;
            }
          }();
          util._Buffer_from = null;
          util._Buffer_allocUnsafe = null;
          util.newBuffer = function newBuffer(sizeOrArray) {
            return "number" === typeof sizeOrArray ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : "undefined" === typeof Uint8Array ? sizeOrArray : new Uint8Array(sizeOrArray);
          };
          util.Array = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
          util.Long = global.dcodeIO && global.dcodeIO.Long || util.inquire("long");
          util.key2Re = /^true|false|0|1$/;
          util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
          util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
          util.longToHash = function longToHash(value) {
            return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
          };
          util.longFromHash = function longFromHash(hash, unsigned) {
            var bits = util.LongBits.fromHash(hash);
            if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
            return bits.toNumber(Boolean(unsigned));
          };
          function merge(dst, src, ifNotSet) {
            for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) dst[keys[i]] !== undefined && ifNotSet || (dst[keys[i]] = src[keys[i]]);
            return dst;
          }
          util.merge = merge;
          util.lcFirst = function lcFirst(str) {
            return str.charAt(0).toLowerCase() + str.substring(1);
          };
          function newError(name) {
            function CustomError(message, properties) {
              if (!(this instanceof CustomError)) return new CustomError(message, properties);
              Object.defineProperty(this, "message", {
                get: function get() {
                  return message;
                }
              });
              Error.captureStackTrace ? Error.captureStackTrace(this, CustomError) : Object.defineProperty(this, "stack", {
                value: new Error().stack || ""
              });
              properties && merge(this, properties);
            }
            (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
            Object.defineProperty(CustomError.prototype, "name", {
              get: function get() {
                return name;
              }
            });
            CustomError.prototype.toString = function toString() {
              return this.name + ": " + this.message;
            };
            return CustomError;
          }
          util.newError = newError;
          util.ProtocolError = newError("ProtocolError");
          util.oneOfGetter = function getOneOf(fieldNames) {
            var fieldMap = {};
            for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;
            return function() {
              for (var keys = Object.keys(this), _i3 = keys.length - 1; _i3 > -1; --_i3) if (1 === fieldMap[keys[_i3]] && this[keys[_i3]] !== undefined && null !== this[keys[_i3]]) return keys[_i3];
            };
          };
          util.oneOfSetter = function setOneOf(fieldNames) {
            return function(name) {
              for (var i = 0; i < fieldNames.length; ++i) fieldNames[i] !== name && delete this[fieldNames[i]];
            };
          };
          util.toJSONOptions = {
            longs: String,
            enums: String,
            bytes: String,
            json: true
          };
          util._configure = function() {
            var Buffer = util.Buffer;
            if (!Buffer) {
              util._Buffer_from = util._Buffer_allocUnsafe = null;
              return;
            }
            util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || function Buffer_from(value, encoding) {
              return new Buffer(value, encoding);
            };
            util._Buffer_allocUnsafe = Buffer.allocUnsafe || function Buffer_allocUnsafe(size) {
              return new Buffer(size);
            };
          };
        }, {
          1: 1,
          10: 10,
          2: 2,
          38: 38,
          4: 4,
          6: 6,
          7: 7,
          9: 9
        } ],
        40: [ function(require, module, exports) {
          module.exports = verifier;
          var Enum = require(15), util = require(37);
          function invalid(field, expected) {
            return field.name + ": " + expected + (field.repeated && "array" !== expected ? "[]" : field.map && "object" !== expected ? "{k:" + field.keyType + "}" : "") + " expected";
          }
          function genVerifyValue(gen, field, fieldIndex, ref) {
            if (field.resolvedType) if (field.resolvedType instanceof Enum) {
              gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
              for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen("case %i:", field.resolvedType.values[keys[j]]);
              gen("break")("}");
            } else {
              gen((gen.hasErrorVar ? "" : "var ") + "e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".");
              gen.hasErrorVar = true;
            } else switch (field.type) {
             case "int32":
             case "uint32":
             case "sint32":
             case "fixed32":
             case "sfixed32":
              gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
              break;

             case "int64":
             case "uint64":
             case "sint64":
             case "fixed64":
             case "sfixed64":
              gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
              break;

             case "float":
             case "double":
              gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
              break;

             case "bool":
              gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
              break;

             case "string":
              gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
              break;

             case "bytes":
              gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            }
            return gen;
          }
          function genVerifyKey(gen, field, ref) {
            switch (field.keyType) {
             case "int32":
             case "uint32":
             case "sint32":
             case "fixed32":
             case "sfixed32":
              gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
              break;

             case "int64":
             case "uint64":
             case "sint64":
             case "fixed64":
             case "sfixed64":
              gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
              break;

             case "bool":
              gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
            }
            return gen;
          }
          function verifier(mtype) {
            var gen = util.codegen([ "m" ], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
            var oneofs = mtype.oneofsArray, seenFirstField = {};
            oneofs.length && gen("var p={}");
            for (var i = 0; i < mtype.fieldsArray.length; ++i) {
              var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
              field.optional && gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
              if (field.map) {
                gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
                genVerifyKey(gen, field, "k[i]");
                genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
              } else if (field.repeated) {
                gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
                genVerifyValue(gen, field, i, ref + "[i]")("}");
              } else {
                if (field.partOf) {
                  var oneofProp = util.safeProp(field.partOf.name);
                  1 === seenFirstField[field.partOf.name] && gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
                  seenFirstField[field.partOf.name] = 1;
                  gen("p%s=1", oneofProp);
                }
                genVerifyValue(gen, field, i, ref);
              }
              field.optional && gen("}");
            }
            return gen("return null");
          }
        }, {
          15: 15,
          37: 37
        } ],
        41: [ function(require, module, exports) {
          var wrappers = exports;
          var Message = require(21);
          wrappers[".google.protobuf.Any"] = {
            fromObject: function fromObject(object) {
              if (object && object["@type"]) {
                var type = this.lookup(object["@type"]);
                if (type) return this.create({
                  type_url: object["@type"],
                  value: type.encode(object).finish()
                });
              }
              return this.fromObject(object);
            },
            toObject: function toObject(message, options) {
              if (options && options.json && message.type_url && message.value) {
                var type = this.lookup(message.type_url);
                type && (message = type.decode(message.value));
              }
              if (!(message instanceof this.ctor) && message instanceof Message) {
                var object = message.$type.toObject(message, options);
                object["@type"] = message.$type.fullName;
                return object;
              }
              return this.toObject(message, options);
            }
          };
        }, {
          21: 21
        } ],
        42: [ function(require, module, exports) {
          module.exports = Writer;
          var util = require(39);
          var BufferWriter;
          var LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;
          function Op(fn, len, val) {
            this.fn = fn;
            this.len = len;
            this.next = undefined;
            this.val = val;
          }
          function noop() {}
          function State(writer) {
            this.head = writer.head;
            this.tail = writer.tail;
            this.len = writer.len;
            this.next = writer.states;
          }
          function Writer() {
            this.len = 0;
            this.head = new Op(noop, 0, 0);
            this.tail = this.head;
            this.states = null;
          }
          Writer.create = util.Buffer ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
              return new BufferWriter();
            })();
          } : function create_array() {
            return new Writer();
          };
          Writer.alloc = function alloc(size) {
            return new util.Array(size);
          };
          util.Array !== Array && (Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray));
          Writer.prototype._push = function push(fn, len, val) {
            this.tail = this.tail.next = new Op(fn, len, val);
            this.len += len;
            return this;
          };
          function writeByte(val, buf, pos) {
            buf[pos] = 255 & val;
          }
          function writeVarint32(val, buf, pos) {
            while (val > 127) {
              buf[pos++] = 127 & val | 128;
              val >>>= 7;
            }
            buf[pos] = val;
          }
          function VarintOp(len, val) {
            this.len = len;
            this.next = undefined;
            this.val = val;
          }
          VarintOp.prototype = Object.create(Op.prototype);
          VarintOp.prototype.fn = writeVarint32;
          Writer.prototype.uint32 = function write_uint32(value) {
            this.len += (this.tail = this.tail.next = new VarintOp((value >>>= 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
            return this;
          };
          Writer.prototype.int32 = function write_int32(value) {
            return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
          };
          Writer.prototype.sint32 = function write_sint32(value) {
            return this.uint32((value << 1 ^ value >> 31) >>> 0);
          };
          function writeVarint64(val, buf, pos) {
            while (val.hi) {
              buf[pos++] = 127 & val.lo | 128;
              val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
              val.hi >>>= 7;
            }
            while (val.lo > 127) {
              buf[pos++] = 127 & val.lo | 128;
              val.lo = val.lo >>> 7;
            }
            buf[pos++] = val.lo;
          }
          Writer.prototype.uint64 = function write_uint64(value) {
            var bits = LongBits.from(value);
            return this._push(writeVarint64, bits.length(), bits);
          };
          Writer.prototype.int64 = Writer.prototype.uint64;
          Writer.prototype.sint64 = function write_sint64(value) {
            var bits = LongBits.from(value).zzEncode();
            return this._push(writeVarint64, bits.length(), bits);
          };
          Writer.prototype.bool = function write_bool(value) {
            return this._push(writeByte, 1, value ? 1 : 0);
          };
          function writeFixed32(val, buf, pos) {
            buf[pos] = 255 & val;
            buf[pos + 1] = val >>> 8 & 255;
            buf[pos + 2] = val >>> 16 & 255;
            buf[pos + 3] = val >>> 24;
          }
          Writer.prototype.fixed32 = function write_fixed32(value) {
            return this._push(writeFixed32, 4, value >>> 0);
          };
          Writer.prototype.sfixed32 = Writer.prototype.fixed32;
          Writer.prototype.fixed64 = function write_fixed64(value) {
            var bits = LongBits.from(value);
            return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
          };
          Writer.prototype.sfixed64 = Writer.prototype.fixed64;
          Writer.prototype["float"] = function write_float(value) {
            return this._push(util["float"].writeFloatLE, 4, value);
          };
          Writer.prototype["double"] = function write_double(value) {
            return this._push(util["float"].writeDoubleLE, 8, value);
          };
          var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
            buf.set(val, pos);
          } : function writeBytes_for(val, buf, pos) {
            for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];
          };
          Writer.prototype.bytes = function write_bytes(value) {
            var len = value.length >>> 0;
            if (!len) return this._push(writeByte, 1, 0);
            if (util.isString(value)) {
              var buf = Writer.alloc(len = base64.length(value));
              base64.decode(value, buf, 0);
              value = buf;
            }
            return this.uint32(len)._push(writeBytes, len, value);
          };
          Writer.prototype.string = function write_string(value) {
            var len = utf8.length(value);
            return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
          };
          Writer.prototype.fork = function fork() {
            this.states = new State(this);
            this.head = this.tail = new Op(noop, 0, 0);
            this.len = 0;
            return this;
          };
          Writer.prototype.reset = function reset() {
            if (this.states) {
              this.head = this.states.head;
              this.tail = this.states.tail;
              this.len = this.states.len;
              this.states = this.states.next;
            } else {
              this.head = this.tail = new Op(noop, 0, 0);
              this.len = 0;
            }
            return this;
          };
          Writer.prototype.ldelim = function ldelim() {
            var head = this.head, tail = this.tail, len = this.len;
            this.reset().uint32(len);
            if (len) {
              this.tail.next = head.next;
              this.tail = tail;
              this.len += len;
            }
            return this;
          };
          Writer.prototype.finish = function finish() {
            var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
            while (head) {
              head.fn(head.val, buf, pos);
              pos += head.len;
              head = head.next;
            }
            return buf;
          };
          Writer._configure = function(BufferWriter_) {
            BufferWriter = BufferWriter_;
          };
        }, {
          39: 39
        } ],
        43: [ function(require, module, exports) {
          module.exports = BufferWriter;
          var Writer = require(42);
          (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
          var util = require(39);
          var Buffer = util.Buffer;
          function BufferWriter() {
            Writer.call(this);
          }
          BufferWriter.alloc = function alloc_buffer(size) {
            return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
          };
          var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && "set" === Buffer.prototype.set.name ? function writeBytesBuffer_set(val, buf, pos) {
            buf.set(val, pos);
          } : function writeBytesBuffer_copy(val, buf, pos) {
            if (val.copy) val.copy(buf, pos, 0, val.length); else for (var i = 0; i < val.length; ) buf[pos++] = val[i++];
          };
          BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
            util.isString(value) && (value = util._Buffer_from(value, "base64"));
            var len = value.length >>> 0;
            this.uint32(len);
            len && this._push(writeBytesBuffer, len, value);
            return this;
          };
          function writeStringBuffer(val, buf, pos) {
            val.length < 40 ? util.utf8.write(val, buf, pos) : buf.utf8Write(val, pos);
          }
          BufferWriter.prototype.string = function write_string_buffer(value) {
            var len = Buffer.byteLength(value);
            this.uint32(len);
            len && this._push(writeStringBuffer, len, value);
            return this;
          };
        }, {
          39: 39,
          42: 42
        } ]
      }, {}, [ 19 ]);
    })("object" === typeof window && window || "object" === typeof self && self || void 0);
    cc._RF.pop();
  }, {
    1: void 0,
    10: void 0,
    11: void 0,
    12: void 0,
    13: void 0,
    14: void 0,
    15: void 0,
    16: void 0,
    17: void 0,
    18: void 0,
    2: void 0,
    20: void 0,
    21: void 0,
    22: void 0,
    23: void 0,
    24: void 0,
    25: void 0,
    26: void 0,
    27: void 0,
    28: void 0,
    29: void 0,
    3: void 0,
    30: void 0,
    31: void 0,
    32: void 0,
    33: void 0,
    34: void 0,
    35: void 0,
    36: void 0,
    37: void 0,
    38: void 0,
    39: void 0,
    4: void 0,
    40: void 0,
    41: void 0,
    42: void 0,
    43: void 0,
    5: void 0,
    6: void 0,
    7: void 0,
    8: void 0,
    9: void 0
  } ],
  rankLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3177pxuMROiJVBusY4MOVC", "rankLayer");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        winScrol: cc.ScrollView,
        richScrol: cc.ScrollView,
        roomScrol: cc.ScrollView,
        rankItem: cc.Prefab,
        roomItem: cc.Prefab,
        no1: cc.SpriteFrame,
        no2: cc.SpriteFrame,
        no3: cc.SpriteFrame
      },
      onLoad: function onLoad() {},
      init: function init() {
        this.LobbyLogic = new (require("LobbyLogic"))();
        this.winScrol.node.active = true;
        this.richScrol.node.active = false;
        this.roomScrol.node.active = false;
        cc.log(this.rankItem);
        this.LobbyLogic.requestWinRankList(this.initWinScrol.bind(this), E_RankType.WIN);
      },
      touchButton: function touchButton(event, param) {
        this.winScrol.node.active = false;
        this.richScrol.node.active = false;
        this.roomScrol.node.active = false;
        switch (param) {
         case "win":
          this.winScrol.node.active = true;
          this.LobbyLogic.requestWinRankList(this.initWinScrol.bind(this), E_RankType.WIN);
          break;

         case "rich":
          this.richScrol.node.active = true;
          this.LobbyLogic.requestRichRankList(E_RichType.GOLD, this.initRichScrol.bind(this), E_RankType.RICH);
          break;

         case "room":
          this.roomScrol.node.active = true;
          this.LobbyLogic.requestRoomRecord(this.initRoomScrol.bind(this));
        }
      },
      initWinScrol: function initWinScrol(dataList, rankType) {
        var _this = this;
        this.winScrol.content.removeAllChildren();
        dataList.forEach(function(vaule, index) {
          var item = cc.instantiate(_this.rankItem);
          item.getChildByName("labNum").active = false;
          var spriteFrame;
          if (1 == index) spriteFrame = _this.no2; else if (2 == index) spriteFrame = _this.no3; else if (0 == index) spriteFrame = _this.no1; else {
            item.getChildByName("1").active = false;
            item.getChildByName("labNum").active = true;
            item.getChildByName("labNum").getComponent(cc.Label).string = index + 1;
          }
          item.getChildByName("1").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          var hangeImage = item.getChildByName("img_head");
          var onGetHeadRes = function onGetHeadRes(headRes) {
            hangeImage && (hangeImage.getComponent(cc.Sprite).spriteFrame = headRes);
          };
          AvatarManager.requestHeadRes(vaule.headURL, vaule.userID, onGetHeadRes, hangeImage);
          item.getChildByName("labName").getComponent(cc.Label).string = vaule.name;
          item.getChildByName("labPoint").getComponent(cc.Label).string = vaule.wincount;
          item.getChildByName("ShengJvLabel").active = true;
          item.getChildByName("GoldSprite").active = false;
          "" == vaule.motto ? item.getChildByName("motto").getComponent(cc.Label).string = "\u8fd9\u5bb6\u4f19\u5f88\u61d2,\u4ec0\u4e48\u90fd\u6ca1\u7559\u4e0b" : item.getChildByName("motto").getComponent(cc.Label).string = vaule.motto;
          _this.winScrol.content.addChild(item);
        });
      },
      initRichScrol: function initRichScrol(dataList, rankType) {
        var _this2 = this;
        this.richScrol.content.removeAllChildren();
        dataList.forEach(function(vaule, index) {
          var item = cc.instantiate(_this2.rankItem);
          item.getChildByName("labNum").active = false;
          var spriteFrame;
          if (1 == index) spriteFrame = _this2.no2; else if (2 == index) spriteFrame = _this2.no3; else if (0 == index) spriteFrame = _this2.no1; else {
            item.getChildByName("1").active = false;
            item.getChildByName("labNum").active = true;
            item.getChildByName("labNum").getComponent(cc.Label).string = index + 1;
          }
          item.getChildByName("1").getComponent(cc.Sprite).spriteFrame = spriteFrame;
          var hangeImage = item.getChildByName("img_head");
          var onGetHeadRes = function onGetHeadRes(headRes) {
            var hangeImage = item.getChildByName("img_head");
            hangeImage && (hangeImage.getComponent(cc.Sprite).spriteFrame = headRes);
          };
          AvatarManager.requestHeadRes(vaule.headURL, vaule.userID, onGetHeadRes, hangeImage);
          item.getChildByName("labName").getComponent(cc.Label).string = vaule.name;
          item.getChildByName("labPoint").getComponent(cc.Label).string = vaule.money / G_MULTI_NUM;
          item.getChildByName("ShengJvLabel").active = false;
          item.getChildByName("GoldSprite").active = true;
          "" == vaule.motto ? item.getChildByName("motto").getComponent(cc.Label).string = "\u8fd9\u5bb6\u4f19\u5f88\u61d2,\u4ec0\u4e48\u90fd\u6ca1\u7559\u4e0b" : item.getChildByName("motto").getComponent(cc.Label).string = vaule.motto;
          _this2.richScrol.content.addChild(item);
        });
      },
      initRoomScrol: function initRoomScrol(dataList) {
        var _this3 = this;
        this.roomScrol.content.removeAllChildren();
        var dataListTemporarily = [];
        var dataListFinally = [];
        for (var i = 0; i < dataList.length; i++) dataListTemporarily.push(dataList[i].buyDeskTime);
        dataListTemporarily.sort();
        dataListTemporarily.reverse();
        for (var j = 0; j < dataListTemporarily.length; j++) for (var z = 0; z < dataList.length; z++) dataListTemporarily[j] == dataList[z].buyDeskTime && dataListFinally.push(dataList[z]);
        dataListFinally.forEach(function(vaule) {
          var item = cc.instantiate(_this3.roomItem);
          var script = item.getComponent(cc.Component);
          script.init(vaule, _this3);
          _this3.roomScrol.content.addChild(item);
        });
      },
      showWXTip: function showWXTip() {
        var layerName = "prefab/LayerLeadShare0";
        this.simpleAddLayer(layerName);
      },
      isXXXX: function isXXXX() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  roomItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e32b2b55fNH+Kg9xfnfGV8n", "roomItem");
    "use strict";
    cc.Class({
      extends: require("BaseLayer"),
      properties: {
        roomNum: cc.Label,
        gameName: cc.Label,
        gameCount: cc.Label,
        gameUser: cc.Label,
        score: cc.Node,
        gold: cc.Node,
        huobi: cc.Node
      },
      onLoad: function onLoad() {
        this.LobbyLogic = new (require("LobbyLogic"))();
      },
      init: function init(data, target) {
        var info = RoomListManager.getRoomByRoomID(data.roomID);
        this.data = data;
        this.info = info;
        this.pwd = data.passwd;
        this.gameUser.string = data.userCount;
        this.gameCount.string = data.gameCount;
        this.roomNum.string = this.pwd;
        if (5 == info.name.length) {
          var arr = info.name.split("");
          1 == info.type ? this.score.active = true : 2 == info.type ? this.gold.active = true : this.huobi.active = true;
          arr.splice(2, 3);
          var str = arr.join("");
          this.gameName.string = str;
        } else if (6 == info.name.length) {
          var brr = info.name.split("");
          1 == info.type ? this.score.active = true : 2 == info.type ? this.gold.active = true : this.huobi.active = true;
          brr.splice(3, 3);
          var str1 = brr.join("");
          this.gameName.string = str1;
        }
        this.target = target;
      },
      disMissButton: function disMissButton() {
        this.LobbyLogic.requestDissmissDesk(this.pwd);
        this.onCloseBtn();
      },
      shareInviteButton: function shareInviteButton() {
        var titleStr = this.info.name + "  \u623f\u95f4\u53f7" + this.roomNum.string;
        var descStr = "\u5171" + this.gameCount.string + "\u5c40,\u4e00\u8d77\u6765\u73a9\u5427!";
        wx.onMenuShareAppMessage({
          title: titleStr || "\u718a\u718a\u5a31\u4e50",
          desc: descStr || "\u718a\u718a\u5a31\u4e50\uff0c\u597d\u73a9\u5f97\u505c\u4e0d\u4e0b\u6765\uff01 \u65e0\u9700\u4e0b\u8f7d\u70b9\u51fb\u5c31\u73a9 \u8fd8\u4e0d\u5feb\u6765\u73a9\uff01",
          link: "http://bycs.91bc8.cn/h5",
          imgUrl: "http://bycs.91bc8.cn/h5/share/iconpic.png",
          trigger: function trigger(res) {},
          success: function success(res) {},
          cancel: function cancel(res) {},
          fail: function fail(res) {}
        });
        wx.onMenuShareTimeline({
          title: titleStr || "\u718a\u718a\u5a31\u4e50",
          desc: descStr || "\u718a\u718a\u5a31\u4e50\uff0c\u597d\u73a9\u5f97\u505c\u4e0d\u4e0b\u6765\uff01 \u65e0\u9700\u4e0b\u8f7d\u70b9\u51fb\u5c31\u73a9 \u8fd8\u4e0d\u5feb\u6765\u73a9\uff01",
          link: "http://bycs.91bc8.cn/h5",
          imgUrl: "http://bycs.91bc8.cn/h5/share/iconpic.png",
          trigger: function trigger(res) {},
          success: function success(res) {},
          cancel: function cancel(res) {},
          fail: function fail(res) {}
        });
        this.target && this.target.showWXTip();
      },
      joinButton: function joinButton() {
        this.LobbyLogic.joinRoom(this.roomNum.string + "");
      }
    });
    cc._RF.pop();
  }, {
    BaseLayer: "BaseLayer",
    LobbyLogic: "LobbyLogic"
  } ],
  slider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e181bQo99MspIE9kV1Qj+Y", "slider");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        progress: {
          default: null,
          type: cc.Sprite
        },
        _width: 1
      },
      onLoad: function onLoad() {
        var slider = this.getComponent(cc.Slider);
        if (null == slider || null == this.progress) return;
        var soundSize = cc.sys.localStorage.getItem(G_SOUND_SIZE) || 1;
        slider.progress = Number(soundSize);
        this._width = this.progress.node.width;
        this.progress.node.width = this._width * slider.progress;
        var self = this;
        slider.node.on("slide", function(event) {
          self.progress.node.width = slider.progress * self._width;
          MYAudioEngine.setEffectsVolume(slider.progress);
          cc.sys.localStorage.setItem(G_SOUND_SIZE, slider.progress);
        }, this);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  test: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da39crHRcVKebQ6T+Vv8HpT", "test");
    "use strict";
    var accTbl = [ {
      acc: "qwerqwer",
      psw: "12341234"
    }, {
      acc: "asdfasdf",
      psw: "12341234"
    }, {
      acc: "zxcvzxcv",
      psw: "12341234"
    }, {
      acc: "wertwert",
      psw: "12341234"
    }, {
      acc: "sdfgsdfg",
      psw: "12341234"
    }, {
      acc: "xcvbxcvb",
      psw: "12341234"
    }, {
      acc: "dfghdfgh",
      psw: "12341234"
    }, {
      acc: "cvbncvbn",
      psw: "12341234"
    }, {
      acc: "fghjfghj",
      psw: "12341234"
    }, {
      acc: "vbnmvbnm",
      psw: "12341234"
    } ];
    module.exports = {
      ctor: function ctor() {},
      beginTest: function beginTest() {
        setTimeout(function() {
          cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyboardTouchUp, this);
        }.bind(this), 100);
      },
      onKeyboardTouchUp: function onKeyboardTouchUp(event) {
        switch (event.keyCode) {
         case cc.macro.KEY.a:
          cc.log("press a");
          break;

         case cc.macro.KEY.b:
          cc.log("press b");
          break;

         case cc.macro.KEY.c:
          cc.log("press c");
          this.testJoinRoom();
        }
      },
      testNN: function testNN() {},
      autoLogin: function autoLogin(loginDel) {
        this._loginDel = loginDel;
        if (!cc.sys.isNative) {
          var idx = cc.sys.localStorage.getItem("curPlayerAccIdx");
          idx = Number(idx);
          idx = idx || 0;
          idx > accTbl.length - 1 && (idx = 0);
          loginDel.editboxAccount.string = accTbl[idx].acc;
          loginDel.editboxPassword.string = accTbl[idx].psw;
          idx > accTbl.length - 1 ? idx = 0 : idx += 1;
          cc.sys.localStorage.setItem("curPlayerAccIdx", idx);
          loginDel.scheduleOnce(function() {
            loginDel.doButtonLoginClick();
          }, .01);
        }
      },
      testJoinRoom: function testJoinRoom(callback) {
        var scene = cc.director.getScene();
        var canvas = scene.getChildByName("Canvas");
        var LobbyScene = canvas.getComponent("LobbyScene");
        var roomNo = cc.sys.localStorage.getItem("roomNo");
        roomNo && LobbyScene.addLayer(null, "JoinRoomDialog", function(layer) {
          layer.getComponent(cc.Component).LobbyRoomLogic.joinRoom(roomNo);
        });
      }
    };
    cc._RF.pop();
  }, {} ],
  txySdk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89808JMGt9O5bpGwBRgJMhI", "txySdk");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var GlobelContext_1 = require("./GlobelContext");
    var ReqHttp_1 = require("./ReqHttp");
    var ox = [ "A", "B", "C", "D", "E", "F" ];
    var txySdk = function() {
      function txySdk() {
        this._TXLivePusher = null;
        this._TCPlayer = null;
        this._DeviceManager = null;
        this._content = "local_video";
        this._player_container_id = "player-container-id";
        this._livePusher = null;
        this._player = null;
      }
      txySdk.getInst = function() {
        this._inst || (this._inst = new txySdk());
        return this._inst;
      };
      Object.defineProperty(txySdk, "inst", {
        get: function() {
          return this.getInst();
        },
        enumerable: false,
        configurable: true
      });
      txySdk.prototype.initSdk = function() {
        this._TXLivePusher = window["TXLivePusher"];
        this._TCPlayer = window["TCPlayer"];
        this.createLiveDiv();
        this.createPlayVideo();
        if (this._TXLivePusher) {
          this._livePusher = new this._TXLivePusher();
          this._DeviceManager = this._livePusher.getDeviceManager();
          this._livePusher.setRenderView(this._content);
          this._livePusher.videoView.muted = true;
          this._livePusher.observer.onPushStatusUpdate = function(status, msg) {
            console.log("onPushStatusUpdate");
            console.log(status);
            console.log(msg);
          };
          this._livePusher.observer.onCaptureFirstVideoFrame = function() {
            console.log("\u97f3\u50cf\u91c7\u96c6\u5b8c\u6210");
          };
          this._livePusher.observer.onError = function(code, msg) {
            console.log("onError");
            console.log(code);
            console.log(msg);
          };
          this._livePusher.observer.onWarning = function(code, msg) {
            console.log("onWarning");
            console.log(code);
            console.log(msg);
          };
        }
      };
      txySdk.prototype.supportTest = function() {
        this._TXLivePusher.checkSupport().then(function(res) {
          console.log("checkSupport");
          console.log(res);
        });
      };
      txySdk.prototype.updateVideoQuality = function(quality) {
        this._livePusher.setVideoQuality(quality);
      };
      txySdk.prototype.updateAudioQuality = function(quality) {
        this._livePusher.setAudioQuality(quality);
      };
      txySdk.prototype.customProperty = function(key, val) {
        this._livePusher.setProperty(key, val);
      };
      txySdk.prototype.livePush = function(succCb, failCb) {
        var _this = this;
        var info = window["UserInfoManager"].getMyInfo();
        var userID = "215102";
        ReqHttp_1.default.getPushStreamUrl({
          userID: userID
        }, function(res) {
          var result = JSON.parse(res);
          if (0 != result.code) {
            failCb && failCb();
            return;
          }
          _this._livePusher.startCamera().then(function() {
            var url = res.data.url;
            _this._livePusher.startPush(url);
            succCb && succCb();
          }).catch(function(error) {
            console.log("\u6253\u5f00\u6444\u50cf\u5934\u5931\u8d25: " + error.toString());
            failCb && failCb();
          });
        });
      };
      txySdk.prototype.stoplive = function() {
        this._livePusher.stopCamera();
        this._livePusher.stopMicrophone();
        this._livePusher.stopPush();
      };
      txySdk.prototype.SwitchCamera = function(isOpen) {
        isOpen && this._livePusher.startCamera();
        !isOpen && this._livePusher.stopCamera();
      };
      txySdk.prototype.SwitchMicrophone = function(isOpen) {
        isOpen && this._livePusher.startMicrophone();
        !isOpen && this._livePusher.stopMicrophone();
      };
      txySdk.prototype.quit = function() {
        this.stoplive();
        this._livePusher.destroy();
      };
      txySdk.prototype.pullLive = function(succCb, failCb) {
        var _this = this;
        var info = window["UserInfoManager"].getMyInfo();
        var userID = "215102";
        var fun = function(url) {
          _this._player = _this._TCPlayer(_this._player_container_id, {
            sources: [ {
              src: url
            } ],
            licenseUrl: GlobelContext_1.default.TXYLicenseURL,
            controls: false,
            posterImage: false,
            bigPlayButton: false,
            controlBar: {
              playToggle: false,
              progressControl: false,
              volumePanel: false,
              currentTimeDisplay: false,
              durationDisplay: false,
              timeDivider: false,
              playbackRateMenuButton: false,
              fullscreenToggle: false,
              QualitySwitcherMenuButton: false
            },
            plugins: {
              ContinuePlay: false,
              VttThumbnail: false,
              ProgressMarker: false,
              DynamicWatermark: false,
              ContextMenu: false
            }
          });
          _this.SwitchPlayLive(true);
        };
        ReqHttp_1.default.checkUserIsLive({
          userID: userID
        }, function(res) {
          var result = JSON.parse(res);
          if (0 != result.code || !result.data.isLive) {
            failCb && failCb();
            return;
          }
          ReqHttp_1.default.getPullStreamUrl({
            userID: userID
          }, function(res) {
            var result = JSON.parse(res);
            if (0 != result.code) {
              failCb && failCb();
              return;
            }
            var url = result.data.webrtc;
            _this._TCPlayer && fun(url);
            succCb && succCb();
          });
        });
      };
      txySdk.prototype.SwitchPlayLive = function(isPlay) {
        isPlay && this._player.play();
        !isPlay && this._player.pause();
      };
      txySdk.prototype.DecimalConversion = function(num) {
        var oxNum = "";
        while (num > 0) {
          var tep = num % 16;
          var newNum = tep > 9 ? ox[tep - 10] : tep;
          oxNum = newNum + oxNum;
          num = ~~(num / 16);
        }
        return oxNum;
      };
      txySdk.prototype.createLiveDiv = function() {
        var div = document.createElement("div");
        div.setAttribute("id", this._content);
        div.setAttribute("style", "position: absolute; bottom: 0px; left: 0px; z-index: 0; visibility: visible; width: 0%; height: 0%; transform: matrix(0.5, 0, 0, 0.5, 12.5, -8.5); transform-origin: 0px 100% 0px;");
        document.body.appendChild(div);
      };
      txySdk.prototype.createPlayVideo = function() {
        var video = document.createElement("video");
        video.setAttribute("id", this._player_container_id);
        video.setAttribute("preload", "auto");
        video.setAttribute("webkit-playsinline", "");
        video.setAttribute("x5-playsinline", "");
        video.setAttribute("playsinline", "");
        video.setAttribute("hidden", "hidden");
        video.setAttribute("style", "width: 0px; height: 0px;");
        document.body.appendChild(video);
      };
      txySdk._inst = null;
      return txySdk;
    }();
    exports.default = txySdk;
    cc._RF.pop();
  }, {
    "./GlobelContext": "GlobelContext",
    "./ReqHttp": "ReqHttp"
  } ],
  uploadVideo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c49e4znkVFOJoDxa/bmmFan", "uploadVideo");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var vod_js_sdk_v6_1 = require("vod-js-sdk-v6");
    var axios_1 = require("axios");
    var GlobalEvent = require("EventEmiter").GlobalEvent;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var uploadVideo = function(_super) {
      __extends(uploadVideo, _super);
      function uploadVideo() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.inputDesc = null;
        _this.inputPhone = null;
        _this.videoName = null;
        _this.annimetions = null;
        _this.btnCommit = null;
        _this.mediaFile = null;
        _this.tcVod = null;
        return _this;
      }
      uploadVideo.prototype.onLoad = function() {
        this.videoName.node.active = false;
      };
      uploadVideo.prototype.start = function() {
        var _this = this;
        console.log("\u521d\u59cb\u5316\u89c6\u9891\u4e0a\u4f20\u5bf9\u8c61...");
        this.tcVod = new vod_js_sdk_v6_1.default({
          getSignature: function() {
            var url = "https://" + globalThis.G_PHP_IP + "/txysdk/index/getUploadToken?userID=" + globalThis.UserInfoManager.getMyInfo().userID;
            console.log("url:", url);
            return axios_1.default.post(url).then(function(response) {
              console.warn("\u7b7e\u540d\uff1a", response);
              return response.data.data.token;
            });
          },
          appId: 1311608929
        });
        this.mediaFile = null;
        setTimeout(function() {
          _this.annimetions && cc.isValid(_this.annimetions) && (_this.annimetions.active = true);
        }, 2500);
      };
      uploadVideo.prototype.openLocalFile = function(accept, callback) {
        var inputEl = document.getElementById("file_input");
        if (!inputEl) {
          inputEl = document.createElement("input");
          inputEl.id = "file_input";
          inputEl.setAttribute("id", "file_input");
          inputEl.setAttribute("type", "file");
          inputEl.setAttribute("class", "fileToUpload");
          inputEl.style.opacity = "0";
          inputEl.style.position = "absolute";
          inputEl.setAttribute("left", "-999px");
          document.body.appendChild(inputEl);
        }
        accept = accept || ".*";
        inputEl.setAttribute("accept", accept);
        inputEl.onchange = function(event) {
          console.log("xxx onchange2", event, inputEl.files);
          var files = inputEl.files;
          if (files && files.length > 0) {
            var file = files[0];
            callback && callback(file);
          }
        };
        inputEl.click();
      };
      uploadVideo.prototype.doButton_commit = function(event, param) {
        if (!this.mediaFile) {
          globalThis.createTips("\u8bf7\u9009\u62e9\u8981\u4e0a\u4f20\u7684\u89c6\u9891\u6587\u4ef6\uff01");
          return;
        }
        if (this.inputDesc.string.length <= 0) {
          globalThis.createTips("\u8bf7\u8f93\u5165\u89c6\u9891\u63cf\u8ff0\u4fe1\u606f\uff01");
          return;
        }
        var uploader = this.tcVod.upload({
          mediaFile: this.mediaFile
        });
        uploader.on("media_progress", function(info) {
          uploaderInfo.progress = info.percent;
          console.log("uploader progress ...", info.percent);
        });
        uploader.on("media_upload", function(info) {
          uploaderInfo.isVideoUploadSuccess = true;
          console.log("uploader isVideoUploadSuccess ...");
        });
        console.log(uploader, "uploader");
        this.btnCommit.active = false;
        var uploaderInfo = {
          videoInfo: uploader.videoInfo,
          isVideoUploadSuccess: false,
          isVideoUploadCancel: false,
          progress: 0,
          fileId: "",
          videoUrl: "",
          cancel: function() {
            uploaderInfo.isVideoUploadCancel = true;
            uploader.cancel();
            console.log("uploader cancel ...");
            self.btnCommit.active = true;
          }
        };
        var self = this;
        uploader.done().then(function(doneResult) {
          console.log("doneResult", doneResult);
          uploaderInfo.fileId = doneResult.fileId;
          self.requestVideoUpload(doneResult.fileId, self.inputDesc.string, function(listVedios) {
            GlobalEvent.instance.emit("upload_sucess", listVedios);
            globalThis.createTips("\u4e0a\u4f20\u6210\u529f\uff01");
            self.node.destroy();
            self.btnCommit.active = true;
          });
        }).then(function(videoUrl) {
          uploaderInfo.videoUrl = videoUrl;
        });
      };
      uploadVideo.prototype.requestVideoUpload = function(fileID, videoDesc, callback) {
        var fCallback = function() {
          console.log("\u8bf7\u6c42\u8d85\u65f6");
        };
        var sCallback = function(jsonData) {
          console.log(jsonData);
          0 == jsonData.code ? callback && callback(jsonData.data) : globalThis.createTips(jsonData.msg);
        };
        var args = {};
        args.params = {
          userID: globalThis.UserInfoManager.getMyInfo().userID,
          fileID: fileID,
          videoDesc: videoDesc
        };
        args.url = "https://" + globalThis.G_PHP_IP + "/txysdk/index/addVideoTags";
        args.fCallback = fCallback;
        args.sCallback = sCallback;
        globalThis.MyHttpRequest.doRequest(args);
      };
      uploadVideo.prototype.doButton_upload = function(event, param) {
        var _this = this;
        this.openLocalFile("*.mp4", function(file) {
          console.log(file);
          _this.mediaFile = file;
          if (_this.mediaFile) {
            _this.videoName.node.active = true;
            _this.videoName.string = "\u89c6\u9891\u540d\u79f0\uff1a" + file.name + "  \u5927\u5c0f\uff1a" + (file.size / 1048576).toFixed(2) + "M";
          }
        });
      };
      uploadVideo.prototype.doButton_Close = function() {
        var _this = this;
        if (this.node) {
          this.node.active = false;
          this.scheduleOnce(function() {
            _this.node.destroy();
          }, .85);
        }
      };
      __decorate([ property(cc.EditBox) ], uploadVideo.prototype, "inputDesc", void 0);
      __decorate([ property(cc.EditBox) ], uploadVideo.prototype, "inputPhone", void 0);
      __decorate([ property(cc.Label) ], uploadVideo.prototype, "videoName", void 0);
      __decorate([ property(cc.Node) ], uploadVideo.prototype, "annimetions", void 0);
      __decorate([ property(cc.Node) ], uploadVideo.prototype, "btnCommit", void 0);
      uploadVideo = __decorate([ ccclass ], uploadVideo);
      return uploadVideo;
    }(cc.Component);
    exports.default = uploadVideo;
    cc._RF.pop();
  }, {
    EventEmiter: "EventEmiter",
    axios: 21,
    "vod-js-sdk-v6": 73
  } ]
}, {}, [ "DemoTest", "HZMJ_Common", "HZMJ_EditTool", "HZMJ_GameTableLogic", "HZMJ_GameTableUI", "HZMJ_CtrlBtns", "HZMJ_Data", "HZMJ_GameOver", "HZMJ_OverLayout", "HZMJ_RoomOver", "HZMJ_TingTipsCard", "HZMJ_User", "HZMJ_gameOverItem", "HZMJ_roomOverItem", "MJCommon_Card", "CanvasVideo ", "GlobelContext", "ReqHttp", "txySdk", "Config", "LobbyCanvas", "AvatarManager", "CityListManager", "DataManager", "FriendManager", "FriendsGroupManager", "GameBuyConfigManager", "GameListManager", "InviteCodeManager", "LoginManager", "MailManager", "NetResManager", "NoticeManager", "RankManager", "RoomListManager", "UserInfoManager", "VideoManager", "GameLogicBase", "GameManager", "GameViewBase", "LoginRoomLogic", "MatchManager", "RoomRecordManager", "GlobalConfig", "GlobalData", "GlobalEnum", "GlobalError", "loadmyfile", "ArenaLayer", "CgAwardRecord", "ChuangguanAward", "DayAwardRecord", "DayPanel", "Item_ChuangGuan_Award", "LayoutNotice", "MatchCheckPointInfo", "MatchCheckPointIntroLayer", "MatchCheckPointResultLayer", "MatchDeskInfo", "MatchExpUserLevelInfo", "MatchGameRank", "MatchLevelUp", "MatchNotify", "MatchRank", "MatchRankResult", "MatchResult", "MatchReward", "MatchWait", "ChaYanZhuShouLayer", "ChatMessageManager", "LayoutChat", "VoiceLayerChat", "CiveVideoLayer", "Notice", "ShoppingMall", "ConfigDataManager", "ConfigManager", "CreateCardGameBase", "CreateRoomMsgDialog", "EmailFujian", "EmailItem", "EmailLayer", "EmailMsgLayer", "MailLogic", "RewardNode", "FeedKeFuNode", "FeedLayer", "FeedLayer_width", "FeedbackLogic", "FeedbackManager", "KeFuItem", "KeFuNode", "ArrangePackNode", "BankerLayer", "DealTingLayer", "GameCommonBet", "GameScenceRulesLayer", "GameYanCode", "PlayerListLayer", "WaitTipLayer", "item_deal_ting", "loading_node", "mlabel", "GiveGiftCard", "GongGaoItem", "GongGaoLayer", "KefuLayer", "LayoutActivity", "LayoutExchange", "LayoutGoldArena", "LayoutHallVideo", "LayoutMyHome", "LayoutShop", "LayoutUserVideo", "LayoutVideo", "LobbyCreaterImage", "LobbyScene", "LobbyURLShart", "MobileLoginScene", "NoticeLayer", "PersonalInformation", "PhoneLayer", "PriveLayout", "QieHuanBi", "SettingLayer", "ShowRedPoint", "ItemListManager", "StoreDragonLayer", "StoreLayer", "StoreLogic", "TiBiDragonLayer", "WarRecordSetLayer", "GameRecordLogic", "GameRecordManager", "21D_ZhanJi_Item", "DDZ_ZhanJi_Item", "MJ_ZhanJi_Item", "NJJ_ZhanJi_Item", "PDK_ZhanJi_Item", "TTZ_ZhanJi_Item", "ZJH_ZhanJi_Item", "ZhanJiDetailView", "ZhanJiItem", "ZhanJiJifenLayer", "ZhanJiLayer", "ZhanJiPlayerItem", "ZhuanzengLayer", "ZhuanzengLogic", "InviteLayer", "InviteLogic", "GameCreaterImage", "GameInfor", "GameLocationLayer", "GameRuletLayer", "GameSettingLayer", "GameSettingTab", "GameZhanjiCreaterImage", "InviteFriendDialog", "LayerGameRules", "Roomrules", "VoiceLayer", "CGMatchPanel", "MatchItem", "MatchPanel", "personMsgDialog", "personRealName", "personVideoDialog", "personVideoItem", "personVideoTips", "personVideoView", "playRealMsgDialog", "DuanWeiAward", "DuanWeiRank", "DuanWeiRewardLayer", "HisRecord", "Item_DuanWei_Award", "Item_DuanWei_Rank", "Item_DuanWei_Record", "MatchRankGame", "QualifyingLayer", "uploadVideo", "LobbyLogic", "LobbyRoomLogic", "LogicBasis", "LoginLogic", "SystemNoticeLogic", "GameSocket", "LobbySocket", "NetConfig", "Package", "TcpClient", "HttpHelper", "bytebuffer", "long", "protobuf", "MyAwardInfo", "PlayerInfo", "PromotionLayer", "PromotionLogic", "PromotionMyPlayer", "ShuoMingInfo", "GameProtocolId", "LobbyProtocolId", "PublicProtocolId", "rankLayer", "roomItem", "ButtonSafe", "ButtonScale", "CommonCheckRadioBoxCtrlUI", "CommonSlider", "GlobalFunction", "JsbMgr", "MYAudioEngine", "MyHttpRequest", "PageViews", "StringTable", "Tools", "CommonEvent", "CreatGameTypePrefab", "CreatPlayTypePrefab", "CreateRoomCheckBox", "CreateRoomDaikai", "CreateRoomInput", "CreateRoomLayer", "CreateRoomSelectData", "JoinRoomDialog", "PanelSelect", "LayoutLobby", "LobbyBottomPanel", "LobbyMoneyFieldItem", "LobbyMoneyFieldList", "LobbyPlayTypeItem", "LobbyPlayTypeList", "LobbyRankItem", "LobbyRankList", "LobbyTopPanel", "NoticeButLayer", "NoticeSystem", "Panel_Notice", "CommandConst", "HttpConst", "test", "MathUtils", "Point2DUtils", "base64", "AllResultLayer", "BaseLayer", "ChatLayer", "ClockObj", "DataNotify", "DismissRoomLayer", "GameSetLayer", "LayerMask", "LoadingLayer", "LoadingPrefab", "LobbyBaseLayer", "MsgBox", "MsgBoxLayer", "NewScript", "NewhandReward", "PersonRealNameMsgBoxLayout", "PlayerUI", "PolygonMask", "RepeatConnectLayer", "RoomListItem", "RoomListLayer", "RoundRectMask", "RuningNotice", "SpriteArray", "SpriteButton", "TimeLabel", "TimeNode", "TipLayer", "ToggleButton", "TuoGuanLayer", "UiShowWords", "slider", "OfficialHotUpdate", "UpdateApkNode", "EventEmiter", "PoolMgr", "ResMgr", "StorageMgr" ]);